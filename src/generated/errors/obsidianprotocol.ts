/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { isProgramError, type Address, type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM, type SolanaError } from 'gill'
import { OBSIDIANPROTOCOL_PROGRAM_ADDRESS } from '../programs'

/** CreditScoreTooLow: Credit score too low */
export const OBSIDIANPROTOCOL_ERROR__CREDIT_SCORE_TOO_LOW = 0x1770 // 6000
/** AttestationExpired: Attestation expired */
export const OBSIDIANPROTOCOL_ERROR__ATTESTATION_EXPIRED = 0x1771 // 6001
/** InvalidEntityType: Invalid entity type */
export const OBSIDIANPROTOCOL_ERROR__INVALID_ENTITY_TYPE = 0x1772 // 6002
/** LoanAmountExceedsLimit: Loan amount exceeds limit */
export const OBSIDIANPROTOCOL_ERROR__LOAN_AMOUNT_EXCEEDS_LIMIT = 0x1773 // 6003

export type ObsidianprotocolError =
  | typeof OBSIDIANPROTOCOL_ERROR__ATTESTATION_EXPIRED
  | typeof OBSIDIANPROTOCOL_ERROR__CREDIT_SCORE_TOO_LOW
  | typeof OBSIDIANPROTOCOL_ERROR__INVALID_ENTITY_TYPE
  | typeof OBSIDIANPROTOCOL_ERROR__LOAN_AMOUNT_EXCEEDS_LIMIT

let obsidianprotocolErrorMessages: Record<ObsidianprotocolError, string> | undefined
if (process.env.NODE_ENV !== 'production') {
  obsidianprotocolErrorMessages = {
    [OBSIDIANPROTOCOL_ERROR__ATTESTATION_EXPIRED]: `Attestation expired`,
    [OBSIDIANPROTOCOL_ERROR__CREDIT_SCORE_TOO_LOW]: `Credit score too low`,
    [OBSIDIANPROTOCOL_ERROR__INVALID_ENTITY_TYPE]: `Invalid entity type`,
    [OBSIDIANPROTOCOL_ERROR__LOAN_AMOUNT_EXCEEDS_LIMIT]: `Loan amount exceeds limit`,
  }
}

export function getObsidianprotocolErrorMessage(code: ObsidianprotocolError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (obsidianprotocolErrorMessages as Record<ObsidianprotocolError, string>)[code]
  }

  return 'Error message not available in production bundles.'
}

export function isObsidianprotocolError<TProgramErrorCode extends ObsidianprotocolError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>
  },
  code?: TProgramErrorCode,
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(error, transactionMessage, OBSIDIANPROTOCOL_PROGRAM_ADDRESS, code)
}
