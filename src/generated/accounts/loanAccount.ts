/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill'
import {
  getEntityTypeDecoder,
  getEntityTypeEncoder,
  getLoanStatusDecoder,
  getLoanStatusEncoder,
  type EntityType,
  type EntityTypeArgs,
  type LoanStatus,
  type LoanStatusArgs,
} from '../types'

export const LOAN_ACCOUNT_DISCRIMINATOR = new Uint8Array([223, 49, 62, 167, 247, 182, 239, 60])

export function getLoanAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(LOAN_ACCOUNT_DISCRIMINATOR)
}

export type LoanAccount = {
  discriminator: ReadonlyUint8Array
  borrower: Address
  amount: bigint
  creditScore: number
  status: LoanStatus
  entityType: EntityType
  bump: number
}

export type LoanAccountArgs = {
  borrower: Address
  amount: number | bigint
  creditScore: number
  status: LoanStatusArgs
  entityType: EntityTypeArgs
  bump: number
}

export function getLoanAccountEncoder(): FixedSizeEncoder<LoanAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['borrower', getAddressEncoder()],
      ['amount', getU64Encoder()],
      ['creditScore', getU16Encoder()],
      ['status', getLoanStatusEncoder()],
      ['entityType', getEntityTypeEncoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: LOAN_ACCOUNT_DISCRIMINATOR }),
  )
}

export function getLoanAccountDecoder(): FixedSizeDecoder<LoanAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['borrower', getAddressDecoder()],
    ['amount', getU64Decoder()],
    ['creditScore', getU16Decoder()],
    ['status', getLoanStatusDecoder()],
    ['entityType', getEntityTypeDecoder()],
    ['bump', getU8Decoder()],
  ])
}

export function getLoanAccountCodec(): FixedSizeCodec<LoanAccountArgs, LoanAccount> {
  return combineCodec(getLoanAccountEncoder(), getLoanAccountDecoder())
}

export function decodeLoanAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<LoanAccount, TAddress>
export function decodeLoanAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<LoanAccount, TAddress>
export function decodeLoanAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<LoanAccount, TAddress> | MaybeAccount<LoanAccount, TAddress> {
  return decodeAccount(encodedAccount as MaybeEncodedAccount<TAddress>, getLoanAccountDecoder())
}

export async function fetchLoanAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<LoanAccount, TAddress>> {
  const maybeAccount = await fetchMaybeLoanAccount(rpc, address, config)
  assertAccountExists(maybeAccount)
  return maybeAccount
}

export async function fetchMaybeLoanAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<LoanAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config)
  return decodeLoanAccount(maybeAccount)
}

export async function fetchAllLoanAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<LoanAccount>[]> {
  const maybeAccounts = await fetchAllMaybeLoanAccount(rpc, addresses, config)
  assertAccountsExist(maybeAccounts)
  return maybeAccounts
}

export async function fetchAllMaybeLoanAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<LoanAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config)
  return maybeAccounts.map((maybeAccount) => decodeLoanAccount(maybeAccount))
}

export function getLoanAccountSize(): number {
  return 53
}
