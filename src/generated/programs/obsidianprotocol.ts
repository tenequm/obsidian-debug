/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { containsBytes, fixEncoderSize, getBytesEncoder, type Address, type ReadonlyUint8Array } from 'gill'
import {
  type ParsedCreateAgentAttestationInstruction,
  type ParsedCreateHumanAttestationInstruction,
  type ParsedRequestLoanInstruction,
} from '../instructions'

export const OBSIDIANPROTOCOL_PROGRAM_ADDRESS =
  'Count3AcZucFDPSFBAeHkQ6AvttieKUkyJ8HiQGhQwe' as Address<'Count3AcZucFDPSFBAeHkQ6AvttieKUkyJ8HiQGhQwe'>

export enum ObsidianprotocolAccount {
  Attestation,
  LoanAccount,
}

export function identifyObsidianprotocolAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): ObsidianprotocolAccount {
  const data = 'data' in account ? account.data : account
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(new Uint8Array([152, 125, 183, 86, 36, 146, 121, 73])),
      0,
    )
  ) {
    return ObsidianprotocolAccount.Attestation
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(new Uint8Array([223, 49, 62, 167, 247, 182, 239, 60])),
      0,
    )
  ) {
    return ObsidianprotocolAccount.LoanAccount
  }
  throw new Error('The provided account could not be identified as a obsidianprotocol account.')
}

export enum ObsidianprotocolInstruction {
  CreateAgentAttestation,
  CreateHumanAttestation,
  RequestLoan,
}

export function identifyObsidianprotocolInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): ObsidianprotocolInstruction {
  const data = 'data' in instruction ? instruction.data : instruction
  if (
    containsBytes(data, fixEncoderSize(getBytesEncoder(), 8).encode(new Uint8Array([40, 6, 12, 39, 0, 35, 0, 28])), 0)
  ) {
    return ObsidianprotocolInstruction.CreateAgentAttestation
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(new Uint8Array([239, 214, 7, 57, 230, 224, 238, 104])),
      0,
    )
  ) {
    return ObsidianprotocolInstruction.CreateHumanAttestation
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(new Uint8Array([120, 2, 7, 7, 1, 219, 235, 187])),
      0,
    )
  ) {
    return ObsidianprotocolInstruction.RequestLoan
  }
  throw new Error('The provided instruction could not be identified as a obsidianprotocol instruction.')
}

export type ParsedObsidianprotocolInstruction<TProgram extends string = 'Count3AcZucFDPSFBAeHkQ6AvttieKUkyJ8HiQGhQwe'> =

    | ({
        instructionType: ObsidianprotocolInstruction.CreateAgentAttestation
      } & ParsedCreateAgentAttestationInstruction<TProgram>)
    | ({
        instructionType: ObsidianprotocolInstruction.CreateHumanAttestation
      } & ParsedCreateHumanAttestationInstruction<TProgram>)
    | ({
        instructionType: ObsidianprotocolInstruction.RequestLoan
      } & ParsedRequestLoanInstruction<TProgram>)
