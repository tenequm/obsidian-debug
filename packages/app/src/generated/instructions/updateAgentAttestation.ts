/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill'
import { OBSIDIANPROTOCOL_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const UPDATE_AGENT_ATTESTATION_DISCRIMINATOR = new Uint8Array([66, 65, 154, 181, 129, 231, 232, 172])

export function getUpdateAgentAttestationDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(UPDATE_AGENT_ATTESTATION_DISCRIMINATOR)
}

export type UpdateAgentAttestationInstruction<
  TProgram extends string = typeof OBSIDIANPROTOCOL_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountAttestation extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> & AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountAttestation extends string ? WritableAccount<TAccountAttestation> : TAccountAttestation,
      ...TRemainingAccounts,
    ]
  >

export type UpdateAgentAttestationInstructionData = {
  discriminator: ReadonlyUint8Array
  creditScore: number
  totalRevenue: bigint
  successRate: number
  operationalDays: number
  frameworkType: number
}

export type UpdateAgentAttestationInstructionDataArgs = {
  creditScore: number
  totalRevenue: number | bigint
  successRate: number
  operationalDays: number
  frameworkType: number
}

export function getUpdateAgentAttestationInstructionDataEncoder(): FixedSizeEncoder<UpdateAgentAttestationInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['creditScore', getU16Encoder()],
      ['totalRevenue', getU64Encoder()],
      ['successRate', getU8Encoder()],
      ['operationalDays', getU16Encoder()],
      ['frameworkType', getU8Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: UPDATE_AGENT_ATTESTATION_DISCRIMINATOR,
    }),
  )
}

export function getUpdateAgentAttestationInstructionDataDecoder(): FixedSizeDecoder<UpdateAgentAttestationInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['creditScore', getU16Decoder()],
    ['totalRevenue', getU64Decoder()],
    ['successRate', getU8Decoder()],
    ['operationalDays', getU16Decoder()],
    ['frameworkType', getU8Decoder()],
  ])
}

export function getUpdateAgentAttestationInstructionDataCodec(): FixedSizeCodec<
  UpdateAgentAttestationInstructionDataArgs,
  UpdateAgentAttestationInstructionData
> {
  return combineCodec(
    getUpdateAgentAttestationInstructionDataEncoder(),
    getUpdateAgentAttestationInstructionDataDecoder(),
  )
}

export type UpdateAgentAttestationInput<
  TAccountOwner extends string = string,
  TAccountAttestation extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>
  attestation: Address<TAccountAttestation>
  creditScore: UpdateAgentAttestationInstructionDataArgs['creditScore']
  totalRevenue: UpdateAgentAttestationInstructionDataArgs['totalRevenue']
  successRate: UpdateAgentAttestationInstructionDataArgs['successRate']
  operationalDays: UpdateAgentAttestationInstructionDataArgs['operationalDays']
  frameworkType: UpdateAgentAttestationInstructionDataArgs['frameworkType']
}

export function getUpdateAgentAttestationInstruction<
  TAccountOwner extends string,
  TAccountAttestation extends string,
  TProgramAddress extends Address = typeof OBSIDIANPROTOCOL_PROGRAM_ADDRESS,
>(
  input: UpdateAgentAttestationInput<TAccountOwner, TAccountAttestation>,
  config?: { programAddress?: TProgramAddress },
): UpdateAgentAttestationInstruction<TProgramAddress, TAccountOwner, TAccountAttestation> {
  // Program address.
  const programAddress = config?.programAddress ?? OBSIDIANPROTOCOL_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    attestation: { value: input.attestation ?? null, isWritable: true },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  return Object.freeze({
    accounts: [getAccountMeta(accounts.owner), getAccountMeta(accounts.attestation)],
    data: getUpdateAgentAttestationInstructionDataEncoder().encode(args as UpdateAgentAttestationInstructionDataArgs),
    programAddress,
  } as UpdateAgentAttestationInstruction<TProgramAddress, TAccountOwner, TAccountAttestation>)
}

export type ParsedUpdateAgentAttestationInstruction<
  TProgram extends string = typeof OBSIDIANPROTOCOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    owner: TAccountMetas[0]
    attestation: TAccountMetas[1]
  }
  data: UpdateAgentAttestationInstructionData
}

export function parseUpdateAgentAttestationInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>,
): ParsedUpdateAgentAttestationInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: { owner: getNextAccount(), attestation: getNextAccount() },
    data: getUpdateAgentAttestationInstructionDataDecoder().decode(instruction.data),
  }
}
