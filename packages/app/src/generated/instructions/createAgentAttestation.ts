/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableSignerAccount,
} from 'gill'
import { OBSIDIANPROTOCOL_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const CREATE_AGENT_ATTESTATION_DISCRIMINATOR = new Uint8Array([40, 6, 12, 39, 0, 35, 0, 28])

export function getCreateAgentAttestationDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CREATE_AGENT_ATTESTATION_DISCRIMINATOR)
}

export type CreateAgentAttestationInstruction<
  TProgram extends string = typeof OBSIDIANPROTOCOL_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountAttestation extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends string | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> & AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountAttestation extends string
        ? WritableSignerAccount<TAccountAttestation> & AccountSignerMeta<TAccountAttestation>
        : TAccountAttestation,
      TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >

export type CreateAgentAttestationInstructionData = {
  discriminator: ReadonlyUint8Array
  creditScore: number
  totalRevenue: bigint
  successRate: number
  operationalDays: number
  frameworkType: number
}

export type CreateAgentAttestationInstructionDataArgs = {
  creditScore: number
  totalRevenue: number | bigint
  successRate: number
  operationalDays: number
  frameworkType: number
}

export function getCreateAgentAttestationInstructionDataEncoder(): FixedSizeEncoder<CreateAgentAttestationInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['creditScore', getU16Encoder()],
      ['totalRevenue', getU64Encoder()],
      ['successRate', getU8Encoder()],
      ['operationalDays', getU16Encoder()],
      ['frameworkType', getU8Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_AGENT_ATTESTATION_DISCRIMINATOR,
    }),
  )
}

export function getCreateAgentAttestationInstructionDataDecoder(): FixedSizeDecoder<CreateAgentAttestationInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['creditScore', getU16Decoder()],
    ['totalRevenue', getU64Decoder()],
    ['successRate', getU8Decoder()],
    ['operationalDays', getU16Decoder()],
    ['frameworkType', getU8Decoder()],
  ])
}

export function getCreateAgentAttestationInstructionDataCodec(): FixedSizeCodec<
  CreateAgentAttestationInstructionDataArgs,
  CreateAgentAttestationInstructionData
> {
  return combineCodec(
    getCreateAgentAttestationInstructionDataEncoder(),
    getCreateAgentAttestationInstructionDataDecoder(),
  )
}

export type CreateAgentAttestationInput<
  TAccountOwner extends string = string,
  TAccountAttestation extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>
  attestation: TransactionSigner<TAccountAttestation>
  systemProgram?: Address<TAccountSystemProgram>
  creditScore: CreateAgentAttestationInstructionDataArgs['creditScore']
  totalRevenue: CreateAgentAttestationInstructionDataArgs['totalRevenue']
  successRate: CreateAgentAttestationInstructionDataArgs['successRate']
  operationalDays: CreateAgentAttestationInstructionDataArgs['operationalDays']
  frameworkType: CreateAgentAttestationInstructionDataArgs['frameworkType']
}

export function getCreateAgentAttestationInstruction<
  TAccountOwner extends string,
  TAccountAttestation extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof OBSIDIANPROTOCOL_PROGRAM_ADDRESS,
>(
  input: CreateAgentAttestationInput<TAccountOwner, TAccountAttestation, TAccountSystemProgram>,
  config?: { programAddress?: TProgramAddress },
): CreateAgentAttestationInstruction<TProgramAddress, TAccountOwner, TAccountAttestation, TAccountSystemProgram> {
  // Program address.
  const programAddress = config?.programAddress ?? OBSIDIANPROTOCOL_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    attestation: { value: input.attestation ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value = '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.attestation),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getCreateAgentAttestationInstructionDataEncoder().encode(args as CreateAgentAttestationInstructionDataArgs),
    programAddress,
  } as CreateAgentAttestationInstruction<TProgramAddress, TAccountOwner, TAccountAttestation, TAccountSystemProgram>)
}

export type ParsedCreateAgentAttestationInstruction<
  TProgram extends string = typeof OBSIDIANPROTOCOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    owner: TAccountMetas[0]
    attestation: TAccountMetas[1]
    systemProgram: TAccountMetas[2]
  }
  data: CreateAgentAttestationInstructionData
}

export function parseCreateAgentAttestationInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>,
): ParsedCreateAgentAttestationInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      attestation: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateAgentAttestationInstructionDataDecoder().decode(instruction.data),
  }
}
