/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableSignerAccount,
} from 'gill'
import { OBSIDIANPROTOCOL_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const REQUEST_LOAN_DISCRIMINATOR = new Uint8Array([120, 2, 7, 7, 1, 219, 235, 187])

export function getRequestLoanDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(REQUEST_LOAN_DISCRIMINATOR)
}

export type RequestLoanInstruction<
  TProgram extends string = typeof OBSIDIANPROTOCOL_PROGRAM_ADDRESS,
  TAccountBorrower extends string | AccountMeta<string> = string,
  TAccountLoanAccount extends string | AccountMeta<string> = string,
  TAccountAttestation extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends string | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountBorrower extends string
        ? WritableSignerAccount<TAccountBorrower> & AccountSignerMeta<TAccountBorrower>
        : TAccountBorrower,
      TAccountLoanAccount extends string
        ? WritableSignerAccount<TAccountLoanAccount> & AccountSignerMeta<TAccountLoanAccount>
        : TAccountLoanAccount,
      TAccountAttestation extends string ? ReadonlyAccount<TAccountAttestation> : TAccountAttestation,
      TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >

export type RequestLoanInstructionData = {
  discriminator: ReadonlyUint8Array
  amount: bigint
  loanId: bigint
}

export type RequestLoanInstructionDataArgs = {
  amount: number | bigint
  loanId: number | bigint
}

export function getRequestLoanInstructionDataEncoder(): FixedSizeEncoder<RequestLoanInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
      ['loanId', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: REQUEST_LOAN_DISCRIMINATOR }),
  )
}

export function getRequestLoanInstructionDataDecoder(): FixedSizeDecoder<RequestLoanInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
    ['loanId', getU64Decoder()],
  ])
}

export function getRequestLoanInstructionDataCodec(): FixedSizeCodec<
  RequestLoanInstructionDataArgs,
  RequestLoanInstructionData
> {
  return combineCodec(getRequestLoanInstructionDataEncoder(), getRequestLoanInstructionDataDecoder())
}

export type RequestLoanInput<
  TAccountBorrower extends string = string,
  TAccountLoanAccount extends string = string,
  TAccountAttestation extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  borrower: TransactionSigner<TAccountBorrower>
  loanAccount: TransactionSigner<TAccountLoanAccount>
  attestation: Address<TAccountAttestation>
  systemProgram?: Address<TAccountSystemProgram>
  amount: RequestLoanInstructionDataArgs['amount']
  loanId: RequestLoanInstructionDataArgs['loanId']
}

export function getRequestLoanInstruction<
  TAccountBorrower extends string,
  TAccountLoanAccount extends string,
  TAccountAttestation extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof OBSIDIANPROTOCOL_PROGRAM_ADDRESS,
>(
  input: RequestLoanInput<TAccountBorrower, TAccountLoanAccount, TAccountAttestation, TAccountSystemProgram>,
  config?: { programAddress?: TProgramAddress },
): RequestLoanInstruction<
  TProgramAddress,
  TAccountBorrower,
  TAccountLoanAccount,
  TAccountAttestation,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? OBSIDIANPROTOCOL_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    borrower: { value: input.borrower ?? null, isWritable: true },
    loanAccount: { value: input.loanAccount ?? null, isWritable: true },
    attestation: { value: input.attestation ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value = '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.borrower),
      getAccountMeta(accounts.loanAccount),
      getAccountMeta(accounts.attestation),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getRequestLoanInstructionDataEncoder().encode(args as RequestLoanInstructionDataArgs),
    programAddress,
  } as RequestLoanInstruction<
    TProgramAddress,
    TAccountBorrower,
    TAccountLoanAccount,
    TAccountAttestation,
    TAccountSystemProgram
  >)
}

export type ParsedRequestLoanInstruction<
  TProgram extends string = typeof OBSIDIANPROTOCOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    borrower: TAccountMetas[0]
    loanAccount: TAccountMetas[1]
    attestation: TAccountMetas[2]
    systemProgram: TAccountMetas[3]
  }
  data: RequestLoanInstructionData
}

export function parseRequestLoanInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(
  instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>,
): ParsedRequestLoanInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      borrower: getNextAccount(),
      loanAccount: getNextAccount(),
      attestation: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getRequestLoanInstructionDataDecoder().decode(instruction.data),
  }
}
