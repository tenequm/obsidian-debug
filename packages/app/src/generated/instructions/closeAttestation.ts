/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill'
import { OBSIDIANPROTOCOL_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const CLOSE_ATTESTATION_DISCRIMINATOR = new Uint8Array([249, 84, 133, 23, 48, 175, 252, 221])

export function getCloseAttestationDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CLOSE_ATTESTATION_DISCRIMINATOR)
}

export type CloseAttestationInstruction<
  TProgram extends string = typeof OBSIDIANPROTOCOL_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountAttestation extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> & AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountAttestation extends string ? WritableAccount<TAccountAttestation> : TAccountAttestation,
      ...TRemainingAccounts,
    ]
  >

export type CloseAttestationInstructionData = {
  discriminator: ReadonlyUint8Array
}

export type CloseAttestationInstructionDataArgs = {}

export function getCloseAttestationInstructionDataEncoder(): FixedSizeEncoder<CloseAttestationInstructionDataArgs> {
  return transformEncoder(getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]), (value) => ({
    ...value,
    discriminator: CLOSE_ATTESTATION_DISCRIMINATOR,
  }))
}

export function getCloseAttestationInstructionDataDecoder(): FixedSizeDecoder<CloseAttestationInstructionData> {
  return getStructDecoder([['discriminator', fixDecoderSize(getBytesDecoder(), 8)]])
}

export function getCloseAttestationInstructionDataCodec(): FixedSizeCodec<
  CloseAttestationInstructionDataArgs,
  CloseAttestationInstructionData
> {
  return combineCodec(getCloseAttestationInstructionDataEncoder(), getCloseAttestationInstructionDataDecoder())
}

export type CloseAttestationInput<
  TAccountOwner extends string = string,
  TAccountAttestation extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>
  attestation: Address<TAccountAttestation>
}

export function getCloseAttestationInstruction<
  TAccountOwner extends string,
  TAccountAttestation extends string,
  TProgramAddress extends Address = typeof OBSIDIANPROTOCOL_PROGRAM_ADDRESS,
>(
  input: CloseAttestationInput<TAccountOwner, TAccountAttestation>,
  config?: { programAddress?: TProgramAddress },
): CloseAttestationInstruction<TProgramAddress, TAccountOwner, TAccountAttestation> {
  // Program address.
  const programAddress = config?.programAddress ?? OBSIDIANPROTOCOL_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    attestation: { value: input.attestation ?? null, isWritable: true },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  return Object.freeze({
    accounts: [getAccountMeta(accounts.owner), getAccountMeta(accounts.attestation)],
    data: getCloseAttestationInstructionDataEncoder().encode({}),
    programAddress,
  } as CloseAttestationInstruction<TProgramAddress, TAccountOwner, TAccountAttestation>)
}

export type ParsedCloseAttestationInstruction<
  TProgram extends string = typeof OBSIDIANPROTOCOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    owner: TAccountMetas[0]
    attestation: TAccountMetas[1]
  }
  data: CloseAttestationInstructionData
}

export function parseCloseAttestationInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(
  instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>,
): ParsedCloseAttestationInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: { owner: getNextAccount(), attestation: getNextAccount() },
    data: getCloseAttestationInstructionDataDecoder().decode(instruction.data),
  }
}
