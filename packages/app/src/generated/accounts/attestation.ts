/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill'
import { getEntityTypeDecoder, getEntityTypeEncoder, type EntityType, type EntityTypeArgs } from '../types'

export const ATTESTATION_DISCRIMINATOR = new Uint8Array([152, 125, 183, 86, 36, 146, 121, 73])

export function getAttestationDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(ATTESTATION_DISCRIMINATOR)
}

export type Attestation = {
  discriminator: ReadonlyUint8Array
  entityType: EntityType
  owner: Address
  creditScore: number
  createdAt: bigint
  expiresAt: bigint
  frameworkType: number
  bump: number
}

export type AttestationArgs = {
  entityType: EntityTypeArgs
  owner: Address
  creditScore: number
  createdAt: number | bigint
  expiresAt: number | bigint
  frameworkType: number
  bump: number
}

export function getAttestationEncoder(): FixedSizeEncoder<AttestationArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['entityType', getEntityTypeEncoder()],
      ['owner', getAddressEncoder()],
      ['creditScore', getU16Encoder()],
      ['createdAt', getI64Encoder()],
      ['expiresAt', getI64Encoder()],
      ['frameworkType', getU8Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: ATTESTATION_DISCRIMINATOR }),
  )
}

export function getAttestationDecoder(): FixedSizeDecoder<Attestation> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['entityType', getEntityTypeDecoder()],
    ['owner', getAddressDecoder()],
    ['creditScore', getU16Decoder()],
    ['createdAt', getI64Decoder()],
    ['expiresAt', getI64Decoder()],
    ['frameworkType', getU8Decoder()],
    ['bump', getU8Decoder()],
  ])
}

export function getAttestationCodec(): FixedSizeCodec<AttestationArgs, Attestation> {
  return combineCodec(getAttestationEncoder(), getAttestationDecoder())
}

export function decodeAttestation<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<Attestation, TAddress>
export function decodeAttestation<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<Attestation, TAddress>
export function decodeAttestation<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<Attestation, TAddress> | MaybeAccount<Attestation, TAddress> {
  return decodeAccount(encodedAccount as MaybeEncodedAccount<TAddress>, getAttestationDecoder())
}

export async function fetchAttestation<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<Attestation, TAddress>> {
  const maybeAccount = await fetchMaybeAttestation(rpc, address, config)
  assertAccountExists(maybeAccount)
  return maybeAccount
}

export async function fetchMaybeAttestation<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<Attestation, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config)
  return decodeAttestation(maybeAccount)
}

export async function fetchAllAttestation(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<Attestation>[]> {
  const maybeAccounts = await fetchAllMaybeAttestation(rpc, addresses, config)
  assertAccountsExist(maybeAccounts)
  return maybeAccounts
}

export async function fetchAllMaybeAttestation(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<Attestation>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config)
  return maybeAccounts.map((maybeAccount) => decodeAttestation(maybeAccount))
}

export function getAttestationSize(): number {
  return 61
}
