// src/core/builder.ts
function isValidIdl(value) {
  return typeof value === "object" && value !== null && (!("errors" in value) || Array.isArray(value.errors));
}
function isSolanaProgramIdl(value) {
  return typeof value === "object" && value !== null && "program" in value && typeof value.program === "object" && value.program !== null;
}
function extractFromIdl(idl) {
  if (isSolanaProgramIdl(idl)) {
    const programIdl = idl.program;
    if ("errors" in programIdl && Array.isArray(programIdl.errors)) {
      return programIdl.errors;
    }
  }
  if (isValidIdl(idl)) {
    return idl.errors ?? [];
  }
  return [];
}
function toErrorInfo(idlError) {
  return {
    code: idlError.code,
    name: idlError.name,
    description: idlError.message || idlError.msg || "",
    // Support both formats
    ...idlError.docs && { docs: idlError.docs }
    // Preserve docs when available
  };
}
function buildProtocolErrors(idl) {
  const idlErrors = extractFromIdl(idl);
  const result = {};
  for (const idlError of idlErrors) {
    const error = toErrorInfo(idlError);
    result[error.code] = Object.freeze(error);
  }
  return Object.freeze(result);
}

// src/core/protocol.ts
var Protocol = class {
  name;
  programId;
  version;
  errors;
  metadata;
  constructor(config) {
    this.name = config.name;
    this.programId = config.programId;
    this.version = config.version;
    this.errors = config.errors;
    this.metadata = {
      name: config.name,
      programId: config.programId,
      version: config.version,
      ...config.idlSource && { idlSource: config.idlSource },
      lastVerified: config.lastVerified
    };
  }
  /**
   * Get error by code (without source metadata)
   * Source is added by registry during resolution
   */
  getError(code) {
    return this.errors[code] ?? null;
  }
  /**
   * Get all errors for this protocol (without source metadata)
   */
  getAllErrors() {
    return Object.values(this.errors);
  }
  /**
   * Get protocol metadata
   */
  getMetadata() {
    return this.metadata;
  }
  /**
   * Get error count
   */
  getErrorCount() {
    return Object.keys(this.errors).length;
  }
  /**
   * Check if protocol has a specific error code
   */
  hasError(code) {
    return code in this.errors;
  }
  /**
   * Search errors by name or description (without source metadata)
   */
  searchErrors(query) {
    const lowerQuery = query.toLowerCase();
    return Object.values(this.errors).filter(
      (error) => error.name.toLowerCase().includes(lowerQuery) || error.description.toLowerCase().includes(lowerQuery)
    );
  }
};

// src/core/registry.ts
var ProtocolRegistry = class {
  protocols = /* @__PURE__ */ new Map();
  programIdIndex = /* @__PURE__ */ new Map();
  frameworkProtocol = null;
  /**
   * Register a protocol in the registry
   */
  register(protocol) {
    this.protocols.set(protocol.name, protocol);
    this.programIdIndex.set(protocol.programId, protocol);
  }
  /**
   * Register a framework protocol that provides fallback error resolution
   * Framework protocols (like Anchor) apply to any program and are checked
   * after program-specific lookups fail
   */
  registerFramework(protocol) {
    this.frameworkProtocol = protocol;
    this.protocols.set(protocol.name, protocol);
  }
  /**
   * Resolve error by program ID and error code
   * Uses hierarchical resolution:
   * 1. Program-specific lookup (Jupiter, Orca, SPL Token, etc.)
   * 2. Framework fallback (Anchor errors)
   *
   * Enriches errors with source metadata for transparency
   */
  resolve(programId, code) {
    const protocol = this.programIdIndex.get(programId);
    if (protocol) {
      const error = protocol.getError(code);
      if (error) {
        const metadata = protocol.getMetadata();
        if (metadata.name === "SPL Token Program" || metadata.name === "Token-2022 Program") {
          return {
            ...error,
            source: {
              type: "token-program",
              programId,
              programName: metadata.name
            }
          };
        }
        return {
          ...error,
          source: {
            type: "program-specific",
            programId,
            programName: metadata.name
          }
        };
      }
    }
    if (this.frameworkProtocol) {
      const frameworkError = this.frameworkProtocol.getError(code);
      if (frameworkError) {
        return {
          ...frameworkError,
          source: {
            type: "anchor-framework",
            programId
          }
        };
      }
    }
    return null;
  }
  /**
   * Get protocol by name
   */
  getByName(name) {
    return this.protocols.get(name) ?? null;
  }
  /**
   * Get protocol by program ID
   */
  getByProgramId(programId) {
    return this.programIdIndex.get(programId) ?? null;
  }
  /**
   * List all registered protocols
   */
  listAll() {
    return Array.from(this.protocols.values());
  }
  /**
   * Get all protocol metadata
   */
  listMetadata() {
    return Array.from(this.protocols.values()).map((p) => p.getMetadata());
  }
  /**
   * Search errors across all protocols (returns errors without source metadata)
   */
  search(query) {
    const results = [];
    for (const protocol of this.protocols.values()) {
      const errors = protocol.searchErrors(query);
      for (const error of errors) {
        results.push({ protocol, error });
      }
    }
    return results;
  }
  /**
   * Get total error count across all protocols
   */
  getTotalErrorCount() {
    return Array.from(this.protocols.values()).reduce(
      (sum, p) => sum + p.getErrorCount(),
      0
    );
  }
  /**
   * Clear all registered protocols (useful for testing)
   */
  clear() {
    this.protocols.clear();
    this.programIdIndex.clear();
  }
};
var registry = new ProtocolRegistry();

// src/protocols.config.ts
var PROTOCOLS = [
  // ============================================================================
  // Jupiter Aggregator
  // ============================================================================
  {
    idlFileName: "jupiter",
    programId: "JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4",
    fetchSource: "github",
    githubUrl: "https://raw.githubusercontent.com/jup-ag/jupiter-cpi-swap-example/b0c59b7ac537c47e9502391d83f8926ffffa412e/cpi-swap-program/idls/jupiter_aggregator.json",
    displayName: "Jupiter Aggregator v6",
    version: "0.1.0"
  },
  {
    idlFileName: "jupiter-v4",
    programId: "JUP4Fb2cqiRUcaTHdrPC8h2gNsA2ETXiPDD33WcGuJB",
    fetchSource: "local",
    displayName: "Jupiter Aggregator v4",
    version: "0.1.0",
    notes: "Legacy aggregator version, still active"
  },
  {
    idlFileName: "jupiter-dca",
    programId: "DCA265Vj8a9CEuX1eb1LWRnDT7uK6q1xMipnNyatn23M",
    fetchSource: "local",
    displayName: "Jupiter DCA",
    version: "0.1.0",
    notes: "Dollar-cost averaging program"
  },
  {
    idlFileName: "jupiter-limit",
    programId: "jupoNjAxXgZ4rjzxzPMP4oxduvQsQtZzyknqvzYNrNu",
    fetchSource: "local",
    displayName: "Jupiter Limit Order",
    version: "0.1.0",
    notes: "Limit order program"
  },
  // ============================================================================
  // OKX DEX
  // ============================================================================
  {
    idlFileName: "okx-dex",
    programId: "6m2CDdhRgxpH4WjvdzxAYbGxwdGUz5MziiL5jek2kBma",
    fetchSource: "local",
    displayName: "OKX DEX Aggregation Router V2",
    version: "0.1.0",
    notes: "OKX DEX aggregation router"
  },
  // ============================================================================
  // Orca Whirlpools
  // ============================================================================
  {
    idlFileName: "orca-whirlpools",
    programId: "whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc",
    fetchSource: "anchor",
    displayName: "Orca Whirlpools",
    version: "1.0.0"
  },
  // ============================================================================
  // Meteora Protocols
  // ============================================================================
  {
    idlFileName: "meteora-dlmm",
    programId: "LBUZKhRxPF3XUpBCjp4YzTKgLccjZhTSDM9YuVaPwxo",
    fetchSource: "local",
    displayName: "Meteora DLMM",
    version: "0.5.1",
    notes: "Dynamic liquidity market maker"
  },
  {
    idlFileName: "meteora-amm",
    programId: "Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB",
    fetchSource: "local",
    displayName: "Meteora AMM",
    version: "0.4.12",
    notes: "Automated market maker pools"
  },
  {
    idlFileName: "meteora-cp-amm",
    programId: "cpamdpZCGKUy5JxQXB4dcpGPiikHawvSWAd6mEn1sGG",
    fetchSource: "local",
    displayName: "Meteora CP AMM (DAMM V2)",
    version: "0.1.1",
    notes: "Constant product AMM / Dynamic AMM V2"
  },
  {
    idlFileName: "meteora-dbc",
    programId: "dbcij3LWUppWqq96dh6gJWwBifmcGfLSB5D4DuSMaqN",
    fetchSource: "local",
    displayName: "Meteora Dynamic Bonding Curve",
    version: "0.1.6",
    notes: "Dynamic bonding curve for token launches"
  },
  // ============================================================================
  // Raydium DEX Protocols
  // ============================================================================
  {
    idlFileName: "raydium-amm",
    programId: "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8",
    fetchSource: "github",
    githubUrl: "https://raw.githubusercontent.com/raydium-io/raydium-idl/refs/heads/master/raydium_amm/idl.json",
    displayName: "Raydium AMM V4",
    version: "0.1.0",
    notes: "Traditional constant product AMM"
  },
  {
    idlFileName: "raydium-amm-v3",
    programId: "CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK",
    fetchSource: "github",
    githubUrl: "https://raw.githubusercontent.com/raydium-io/raydium-idl/refs/heads/master/raydium_clmm/amm_v3.json",
    displayName: "Raydium AMM V3 (CLMM)",
    version: "0.1.0",
    notes: "Concentrated liquidity market maker"
  },
  {
    idlFileName: "raydium-cp-swap",
    programId: "CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C",
    fetchSource: "github",
    githubUrl: "https://raw.githubusercontent.com/raydium-io/raydium-idl/refs/heads/master/raydium_cpmm/raydium_cp_swap.json",
    displayName: "Raydium CP Swap",
    version: "0.1.0",
    notes: "Constant product swap"
  },
  {
    idlFileName: "raydium-launchpad",
    programId: "LanMV9sAd7wArD4vJFi2qDdfnVhFxYSUg6eADduJ3uj",
    fetchSource: "local",
    displayName: "Raydium Launchpad",
    version: "0.2.0",
    notes: "Token launchpad platform"
  },
  // ============================================================================
  // OpenBook / Serum
  // ============================================================================
  {
    idlFileName: "openbook-v2",
    programId: "opnb2LAfJYbRMAHHvqjCwQxanZn7ReEHp1k81EohpZb",
    fetchSource: "local",
    displayName: "OpenBook V2",
    version: "0.1.0",
    notes: "On-chain central limit order book (Serum successor)"
  },
  {
    idlFileName: "serum-dex",
    programId: "9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin",
    fetchSource: "local",
    displayName: "Serum DEX V3",
    version: "0.0.0",
    notes: "Legacy on-chain CLOB (deprecated)"
  },
  // ============================================================================
  // Phoenix CLOB
  // ============================================================================
  {
    idlFileName: "phoenix",
    programId: "PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY",
    fetchSource: "local",
    displayName: "Phoenix",
    version: "0.2.4",
    notes: "On-chain central limit order book"
  },
  // ============================================================================
  // Pump.fun
  // ============================================================================
  {
    idlFileName: "pumpfun-bonding",
    programId: "6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P",
    fetchSource: "local",
    displayName: "Pump.fun Bonding Curve",
    version: "0.1.0",
    notes: "Meme token bonding curve launches"
  },
  {
    idlFileName: "pumpswap-amm",
    programId: "pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA",
    fetchSource: "local",
    displayName: "PumpSwap AMM",
    version: "0.1.0",
    notes: "Pump.fun ecosystem AMM"
  },
  {
    idlFileName: "moonshot",
    programId: "MoonCVVNZFSYkqNXP6bxHLPL6QQJiMagDL3qcqUQTrG",
    fetchSource: "local",
    displayName: "Moonshot",
    version: "0.1.0",
    notes: "Token launch platform"
  },
  {
    idlFileName: "boop",
    programId: "boop8hVGQGqehUK2iVEMEnMrL5RbjywRzHKBmBE7ry4",
    fetchSource: "local",
    displayName: "Boop",
    version: "0.3.0",
    notes: "Meme token platform"
  },
  {
    idlFileName: "heaven",
    programId: "HEAVENoP2qxoeuF8Dj2oT1GHEnu49U5mJYkdeC8BAX2o",
    fetchSource: "local",
    displayName: "Heaven DEX",
    version: "0.2.0",
    notes: "Decentralized exchange (deprecated)"
  },
  // ============================================================================
  // BonkSwap
  // ============================================================================
  {
    idlFileName: "bonkswap",
    programId: "BSwp6bEBihVLdqJRKGgzjcGLHkcTuzmSo1TQkHepzH8p",
    fetchSource: "local",
    displayName: "BonkSwap",
    version: "0.1.1",
    notes: "Bonk ecosystem AMM"
  },
  // ============================================================================
  // Aldrin
  // ============================================================================
  {
    idlFileName: "aldrin-clob",
    programId: "CURVGoZn8zycx6FXwwevgBTB2gVvdbGTEpvMJDbgs2t4",
    fetchSource: "local",
    displayName: "Aldrin V2 CLOB",
    version: "0.0.0",
    notes: "Aldrin central limit order book V2"
  },
  // ============================================================================
  // Drift Protocol
  // ============================================================================
  {
    idlFileName: "drift-v2",
    programId: "dRiftyHA39MWEi3m9aunc5MzRF1JYuBsbn6VPcn33UH",
    fetchSource: "local",
    displayName: "Drift V2",
    version: "2.106.0",
    notes: "Perpetuals and derivatives platform"
  },
  // ============================================================================
  // TON Whales Holders
  // ============================================================================
  {
    idlFileName: "ton-whales-holders",
    programId: "6bES2dKy1ee13HQ4uW4ycw4Kw4od9ziZeWMyAxVySYEd",
    fetchSource: "anchor",
    displayName: "TON Whales Holders",
    version: "1.0.0",
    notes: "TON whales holders program, 27 errors"
  },
  // ============================================================================
  // NFT Marketplaces
  // ============================================================================
  {
    idlFileName: "magic-eden-v2",
    programId: "M2mx93ekt1fmXSVkTrUL9xVFHkmME8HTUi5Cyc5aF7K",
    fetchSource: "anchor",
    displayName: "Magic Eden V2",
    version: "2.0.0",
    notes: "Leading Solana NFT marketplace"
  },
  {
    idlFileName: "tensor",
    programId: "TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN",
    fetchSource: "anchor",
    displayName: "Tensor",
    version: "1.0.0",
    notes: "NFT marketplace and AMM"
  },
  {
    idlFileName: "metaplex-auction-house",
    programId: "hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk",
    fetchSource: "anchor",
    displayName: "Metaplex Auction House",
    version: "1.0.0",
    notes: "Metaplex NFT marketplace protocol"
  },
  {
    idlFileName: "metaplex-token-metadata",
    programId: "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s",
    type: "token-program",
    fetchSource: "local",
    displayName: "Metaplex Token Metadata",
    version: "1.14.0",
    notes: "Core NFT metadata standard"
  },
  {
    idlFileName: "metaplex-bubblegum",
    programId: "BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY",
    fetchSource: "local",
    displayName: "Metaplex Bubblegum",
    version: "0.12.0",
    notes: "Compressed NFTs (cNFTs)"
  },
  {
    idlFileName: "metaplex-candy-machine",
    programId: "cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ",
    fetchSource: "local",
    displayName: "Metaplex Candy Machine",
    version: "4.6.0",
    notes: "NFT minting and distribution"
  },
  {
    idlFileName: "metaplex-fixed-price-sale",
    programId: "SaLeTjyUa5wXHnGuewUSyJ5JWZaHwz3TxqUntCE9czo",
    fetchSource: "local",
    displayName: "Metaplex Fixed Price Sale",
    version: "0.4.0",
    notes: "Fixed-price NFT sales"
  },
  {
    idlFileName: "metaplex-nft-packs",
    programId: "packFeFNZzMfD9aVWL7QbGz1WcU7R9zpf6pvNsw2BLu",
    fetchSource: "local",
    displayName: "Metaplex NFT Packs",
    version: "0.1.0",
    notes: "NFT pack creation and distribution"
  },
  {
    idlFileName: "metaplex-hydra",
    programId: "hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg",
    fetchSource: "local",
    displayName: "Metaplex Hydra",
    version: "0.3.0",
    notes: "Fanout wallet distribution"
  },
  {
    idlFileName: "metaplex-token-entangler",
    programId: "qntmGodpGkrM42mN68VCZHXnKqDCT8rdY23wFcXCLPd",
    fetchSource: "local",
    displayName: "Metaplex Token Entangler",
    version: "0.2.0",
    notes: "NFT swapping and entanglement"
  },
  {
    idlFileName: "metaplex-auctioneer",
    programId: "neer8g6yJq2mQM6KbnViEDAD4gr3gRZyMMf4F2p3MEh",
    fetchSource: "local",
    displayName: "Metaplex Auctioneer",
    version: "0.2.1",
    notes: "Auction house authority delegation"
  },
  // ============================================================================
  // Other Protocols
  // ============================================================================
  {
    idlFileName: "obric-v2",
    programId: "obriQD1zbpyLz95G5n7nJe6a4DPjpFwa5XYPoNm113y",
    fetchSource: "local",
    displayName: "Obric V2",
    version: "0.1.0",
    notes: "Obric Solana V2 protocol"
  },
  // ============================================================================
  // Framework Errors
  // ============================================================================
  {
    idlFileName: "anchor",
    programId: "*",
    type: "framework",
    fetchSource: "manual",
    displayName: "Anchor Framework",
    version: "0.30.1",
    notes: "Framework errors that apply to any Anchor program"
  },
  // ============================================================================
  // Token Programs
  // ============================================================================
  {
    idlFileName: "spl-token",
    programId: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
    type: "token-program",
    fetchSource: "github",
    githubUrl: "https://raw.githubusercontent.com/solana-program/token/refs/heads/main/program/idl.json",
    displayName: "SPL Token Program",
    version: "1.0.0",
    notes: "Native Solana token standard"
  },
  {
    idlFileName: "token-2022",
    programId: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb",
    type: "token-program",
    fetchSource: "github",
    githubUrl: "https://raw.githubusercontent.com/solana-program/token-2022/refs/heads/main/interface/idl.json",
    displayName: "Token-2022 Program",
    version: "1.0.0",
    notes: "Extended token program with additional features"
  },
  {
    idlFileName: "spl-token-swap",
    programId: "SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8",
    fetchSource: "local",
    displayName: "SPL Token Swap",
    version: "3.0.0",
    notes: "Official SPL token swap program"
  }
];

// src/protocols/manual/anchor.ts
var ANCHOR_ERRORS = {
  // ============================================================================
  // Instruction Errors (100-103)
  // ============================================================================
  100: {
    code: 100,
    name: "InstructionMissing",
    description: "8 byte instruction identifier not provided"
  },
  101: {
    code: 101,
    name: "InstructionFallbackNotFound",
    description: "Fallback functions are not supported"
  },
  102: {
    code: 102,
    name: "InstructionDidNotDeserialize",
    description: "The program could not deserialize the given instruction"
  },
  103: {
    code: 103,
    name: "InstructionDidNotSerialize",
    description: "The program could not serialize the given instruction"
  },
  // ============================================================================
  // IDL Errors (1000-1002)
  // ============================================================================
  1e3: {
    code: 1e3,
    name: "IdlInstructionStub",
    description: "The program was compiled without idl instructions"
  },
  1001: {
    code: 1001,
    name: "IdlInstructionInvalidProgram",
    description: "Invalid program given to the IDL instruction"
  },
  1002: {
    code: 1002,
    name: "IdlAccountNotEmpty",
    description: "IDL account must be empty in order to resize"
  },
  // ============================================================================
  // Event Errors (1500)
  // ============================================================================
  1500: {
    code: 1500,
    name: "EventInstructionStub",
    description: "The program was compiled without `event-cpi` feature"
  },
  // ============================================================================
  // Constraint Errors (2000-2039)
  // ============================================================================
  2e3: {
    code: 2e3,
    name: "ConstraintMut",
    description: "A mut constraint was violated"
  },
  2001: {
    code: 2001,
    name: "ConstraintHasOne",
    description: "A has_one constraint was violated"
  },
  2002: {
    code: 2002,
    name: "ConstraintSigner",
    description: "A signer constraint was violated"
  },
  2003: {
    code: 2003,
    name: "ConstraintRaw",
    description: "A raw constraint was violated"
  },
  2004: {
    code: 2004,
    name: "ConstraintOwner",
    description: "An owner constraint was violated"
  },
  2005: {
    code: 2005,
    name: "ConstraintRentExempt",
    description: "A rent exemption constraint was violated"
  },
  2006: {
    code: 2006,
    name: "ConstraintSeeds",
    description: "A seeds constraint was violated"
  },
  2007: {
    code: 2007,
    name: "ConstraintExecutable",
    description: "An executable constraint was violated"
  },
  2008: {
    code: 2008,
    name: "ConstraintState",
    description: "Deprecated error, no longer used"
  },
  2009: {
    code: 2009,
    name: "ConstraintAssociated",
    description: "An associated constraint was violated"
  },
  2010: {
    code: 2010,
    name: "ConstraintAssociatedInit",
    description: "An associated init constraint was violated"
  },
  2011: {
    code: 2011,
    name: "ConstraintClose",
    description: "A close constraint was violated"
  },
  2012: {
    code: 2012,
    name: "ConstraintAddress",
    description: "An address constraint was violated"
  },
  2013: {
    code: 2013,
    name: "ConstraintZero",
    description: "Expected zero account discriminant"
  },
  2014: {
    code: 2014,
    name: "ConstraintTokenMint",
    description: "A token mint constraint was violated"
  },
  2015: {
    code: 2015,
    name: "ConstraintTokenOwner",
    description: "A token owner constraint was violated"
  },
  2016: {
    code: 2016,
    name: "ConstraintMintMintAuthority",
    description: "A mint mint authority constraint was violated"
  },
  2017: {
    code: 2017,
    name: "ConstraintMintFreezeAuthority",
    description: "A mint freeze authority constraint was violated"
  },
  2018: {
    code: 2018,
    name: "ConstraintMintDecimals",
    description: "A mint decimals constraint was violated"
  },
  2019: {
    code: 2019,
    name: "ConstraintSpace",
    description: "A space constraint was violated"
  },
  2020: {
    code: 2020,
    name: "ConstraintAccountIsNone",
    description: "A required account for the constraint is None"
  },
  2021: {
    code: 2021,
    name: "ConstraintTokenTokenProgram",
    description: "A token account token program constraint was violated"
  },
  2022: {
    code: 2022,
    name: "ConstraintMintTokenProgram",
    description: "A mint token program constraint was violated"
  },
  2023: {
    code: 2023,
    name: "ConstraintAssociatedTokenTokenProgram",
    description: "An associated token token program constraint was violated"
  },
  2024: {
    code: 2024,
    name: "ConstraintMintGroupPointerExtension",
    description: "A mint group pointer extension constraint was violated"
  },
  2025: {
    code: 2025,
    name: "ConstraintMintGroupPointerExtensionAuthority",
    description: "A mint group pointer extension authority constraint was violated"
  },
  2026: {
    code: 2026,
    name: "ConstraintMintGroupPointerExtensionGroupAddress",
    description: "A mint group pointer extension group address constraint was violated"
  },
  2027: {
    code: 2027,
    name: "ConstraintMintGroupMemberPointerExtension",
    description: "A mint group member pointer extension constraint was violated"
  },
  2028: {
    code: 2028,
    name: "ConstraintMintGroupMemberPointerExtensionAuthority",
    description: "A mint group member pointer extension authority constraint was violated"
  },
  2029: {
    code: 2029,
    name: "ConstraintMintGroupMemberPointerExtensionMemberAddress",
    description: "A mint group member pointer extension member address constraint was violated"
  },
  2030: {
    code: 2030,
    name: "ConstraintMintMetadataPointerExtension",
    description: "A mint metadata pointer extension constraint was violated"
  },
  2031: {
    code: 2031,
    name: "ConstraintMintMetadataPointerExtensionAuthority",
    description: "A mint metadata pointer extension authority constraint was violated"
  },
  2032: {
    code: 2032,
    name: "ConstraintMintMetadataPointerExtensionMetadataAddress",
    description: "A mint metadata pointer extension metadata address constraint was violated"
  },
  2033: {
    code: 2033,
    name: "ConstraintMintCloseAuthorityExtension",
    description: "A mint close authority extension constraint was violated"
  },
  2034: {
    code: 2034,
    name: "ConstraintMintCloseAuthorityExtensionAuthority",
    description: "A mint close authority extension authority constraint was violated"
  },
  2035: {
    code: 2035,
    name: "ConstraintMintPermanentDelegateExtension",
    description: "A mint permanent delegate extension constraint was violated"
  },
  2036: {
    code: 2036,
    name: "ConstraintMintPermanentDelegateExtensionDelegate",
    description: "A mint permanent delegate extension delegate constraint was violated"
  },
  2037: {
    code: 2037,
    name: "ConstraintMintTransferHookExtension",
    description: "A mint transfer hook extension constraint was violated"
  },
  2038: {
    code: 2038,
    name: "ConstraintMintTransferHookExtensionAuthority",
    description: "A mint transfer hook extension authority constraint was violated"
  },
  2039: {
    code: 2039,
    name: "ConstraintMintTransferHookExtensionProgramId",
    description: "A mint transfer hook extension program id constraint was violated"
  },
  // ============================================================================
  // Require Errors (2500-2506)
  // ============================================================================
  2500: {
    code: 2500,
    name: "RequireViolated",
    description: "A require expression was violated"
  },
  2501: {
    code: 2501,
    name: "RequireEqViolated",
    description: "A require_eq expression was violated"
  },
  2502: {
    code: 2502,
    name: "RequireKeysEqViolated",
    description: "A require_keys_eq expression was violated"
  },
  2503: {
    code: 2503,
    name: "RequireNeqViolated",
    description: "A require_neq expression was violated"
  },
  2504: {
    code: 2504,
    name: "RequireKeysNeqViolated",
    description: "A require_keys_neq expression was violated"
  },
  2505: {
    code: 2505,
    name: "RequireGtViolated",
    description: "A require_gt expression was violated"
  },
  2506: {
    code: 2506,
    name: "RequireGteViolated",
    description: "A require_gte expression was violated"
  },
  // ============================================================================
  // Account Errors (3000-3017)
  // ============================================================================
  3e3: {
    code: 3e3,
    name: "AccountDiscriminatorAlreadySet",
    description: "The account discriminator was already set on this account"
  },
  3001: {
    code: 3001,
    name: "AccountDiscriminatorNotFound",
    description: "No 8 byte discriminator was found on the account"
  },
  3002: {
    code: 3002,
    name: "AccountDiscriminatorMismatch",
    description: "8 byte discriminator did not match what was expected"
  },
  3003: {
    code: 3003,
    name: "AccountDidNotDeserialize",
    description: "Failed to deserialize the account"
  },
  3004: {
    code: 3004,
    name: "AccountDidNotSerialize",
    description: "Failed to serialize the account"
  },
  3005: {
    code: 3005,
    name: "AccountNotEnoughKeys",
    description: "Not enough account keys given to the instruction"
  },
  3006: {
    code: 3006,
    name: "AccountNotMutable",
    description: "The given account is not mutable"
  },
  3007: {
    code: 3007,
    name: "AccountOwnedByWrongProgram",
    description: "The given account is owned by a different program than expected"
  },
  3008: {
    code: 3008,
    name: "InvalidProgramId",
    description: "Program ID was not as expected"
  },
  3009: {
    code: 3009,
    name: "InvalidProgramExecutable",
    description: "Program account is not executable"
  },
  3010: {
    code: 3010,
    name: "AccountNotSigner",
    description: "The given account did not sign"
  },
  3011: {
    code: 3011,
    name: "AccountNotSystemOwned",
    description: "The given account is not owned by the system program"
  },
  3012: {
    code: 3012,
    name: "AccountNotInitialized",
    description: "The program expected this account to be already initialized"
  },
  3013: {
    code: 3013,
    name: "AccountNotProgramData",
    description: "The given account is not a program data account"
  },
  3014: {
    code: 3014,
    name: "AccountNotAssociatedTokenAccount",
    description: "The given account is not the associated token account"
  },
  3015: {
    code: 3015,
    name: "AccountSysvarMismatch",
    description: "The given public key does not match the required sysvar"
  },
  3016: {
    code: 3016,
    name: "AccountReallocExceedsLimit",
    description: "The account reallocation exceeds the MAX_PERMITTED_DATA_INCREASE limit"
  },
  3017: {
    code: 3017,
    name: "AccountDuplicateReallocs",
    description: "The account was duplicated for more than one reallocation"
  },
  // ============================================================================
  // Miscellaneous Errors (4100-4102, 5000)
  // ============================================================================
  4100: {
    code: 4100,
    name: "DeclaredProgramIdMismatch",
    description: "The declared program id does not match the actual program id"
  },
  4101: {
    code: 4101,
    name: "Deprecated",
    description: "The API being used is deprecated and should no longer be used"
  },
  4102: {
    code: 4102,
    name: "ZeroCopyTypeMismatch",
    description: "The given account is not zero-copy initialized"
  },
  5e3: {
    code: 5e3,
    name: "TryingToInitPayerAsProgramAccount",
    description: "Trying to initialize the payer as a program account"
  }
};

// idl/jupiter.json
var jupiter_default = {
  address: "JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4",
  metadata: {
    name: "jupiter",
    version: "0.1.0",
    spec: "0.1.0"
  },
  instructions: [
    {
      name: "route",
      docs: ["route_plan Topologically sorted trade DAG"],
      discriminator: [229, 23, 203, 151, 122, 227, 173, 42],
      accounts: [
        {
          name: "token_program"
        },
        {
          name: "user_transfer_authority",
          signer: true
        },
        {
          name: "user_source_token_account",
          writable: true
        },
        {
          name: "user_destination_token_account",
          writable: true
        },
        {
          name: "destination_token_account",
          writable: true,
          optional: true
        },
        {
          name: "destination_mint"
        },
        {
          name: "platform_fee_account",
          writable: true,
          optional: true
        },
        {
          name: "event_authority"
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "route_plan",
          type: {
            vec: {
              defined: {
                name: "RoutePlanStep"
              }
            }
          }
        },
        {
          name: "in_amount",
          type: "u64"
        },
        {
          name: "quoted_out_amount",
          type: "u64"
        },
        {
          name: "slippage_bps",
          type: "u16"
        },
        {
          name: "platform_fee_bps",
          type: "u8"
        }
      ],
      returns: "u64"
    },
    {
      name: "route_with_token_ledger",
      discriminator: [150, 86, 71, 116, 167, 93, 14, 104],
      accounts: [
        {
          name: "token_program"
        },
        {
          name: "user_transfer_authority",
          signer: true
        },
        {
          name: "user_source_token_account",
          writable: true
        },
        {
          name: "user_destination_token_account",
          writable: true
        },
        {
          name: "destination_token_account",
          writable: true,
          optional: true
        },
        {
          name: "destination_mint"
        },
        {
          name: "platform_fee_account",
          writable: true,
          optional: true
        },
        {
          name: "token_ledger"
        },
        {
          name: "event_authority"
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "route_plan",
          type: {
            vec: {
              defined: {
                name: "RoutePlanStep"
              }
            }
          }
        },
        {
          name: "quoted_out_amount",
          type: "u64"
        },
        {
          name: "slippage_bps",
          type: "u16"
        },
        {
          name: "platform_fee_bps",
          type: "u8"
        }
      ],
      returns: "u64"
    },
    {
      name: "exact_out_route",
      discriminator: [208, 51, 239, 151, 123, 43, 237, 92],
      accounts: [
        {
          name: "token_program"
        },
        {
          name: "user_transfer_authority",
          signer: true
        },
        {
          name: "user_source_token_account",
          writable: true
        },
        {
          name: "user_destination_token_account",
          writable: true
        },
        {
          name: "destination_token_account",
          writable: true,
          optional: true
        },
        {
          name: "source_mint"
        },
        {
          name: "destination_mint"
        },
        {
          name: "platform_fee_account",
          writable: true,
          optional: true
        },
        {
          name: "token2022_program",
          optional: true
        },
        {
          name: "event_authority"
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "route_plan",
          type: {
            vec: {
              defined: {
                name: "RoutePlanStep"
              }
            }
          }
        },
        {
          name: "out_amount",
          type: "u64"
        },
        {
          name: "quoted_in_amount",
          type: "u64"
        },
        {
          name: "slippage_bps",
          type: "u16"
        },
        {
          name: "platform_fee_bps",
          type: "u8"
        }
      ],
      returns: "u64"
    },
    {
      name: "shared_accounts_route",
      docs: [
        "Route by using program owned token accounts and open orders accounts."
      ],
      discriminator: [193, 32, 155, 51, 65, 214, 156, 129],
      accounts: [
        {
          name: "token_program"
        },
        {
          name: "program_authority"
        },
        {
          name: "user_transfer_authority",
          signer: true
        },
        {
          name: "source_token_account",
          writable: true
        },
        {
          name: "program_source_token_account",
          writable: true
        },
        {
          name: "program_destination_token_account",
          writable: true
        },
        {
          name: "destination_token_account",
          writable: true
        },
        {
          name: "source_mint"
        },
        {
          name: "destination_mint"
        },
        {
          name: "platform_fee_account",
          writable: true,
          optional: true
        },
        {
          name: "token2022_program",
          optional: true
        },
        {
          name: "event_authority"
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "id",
          type: "u8"
        },
        {
          name: "route_plan",
          type: {
            vec: {
              defined: {
                name: "RoutePlanStep"
              }
            }
          }
        },
        {
          name: "in_amount",
          type: "u64"
        },
        {
          name: "quoted_out_amount",
          type: "u64"
        },
        {
          name: "slippage_bps",
          type: "u16"
        },
        {
          name: "platform_fee_bps",
          type: "u8"
        }
      ],
      returns: "u64"
    },
    {
      name: "shared_accounts_route_with_token_ledger",
      discriminator: [230, 121, 143, 80, 119, 159, 106, 170],
      accounts: [
        {
          name: "token_program"
        },
        {
          name: "program_authority"
        },
        {
          name: "user_transfer_authority",
          signer: true
        },
        {
          name: "source_token_account",
          writable: true
        },
        {
          name: "program_source_token_account",
          writable: true
        },
        {
          name: "program_destination_token_account",
          writable: true
        },
        {
          name: "destination_token_account",
          writable: true
        },
        {
          name: "source_mint"
        },
        {
          name: "destination_mint"
        },
        {
          name: "platform_fee_account",
          writable: true,
          optional: true
        },
        {
          name: "token2022_program",
          optional: true
        },
        {
          name: "token_ledger"
        },
        {
          name: "event_authority"
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "id",
          type: "u8"
        },
        {
          name: "route_plan",
          type: {
            vec: {
              defined: {
                name: "RoutePlanStep"
              }
            }
          }
        },
        {
          name: "quoted_out_amount",
          type: "u64"
        },
        {
          name: "slippage_bps",
          type: "u16"
        },
        {
          name: "platform_fee_bps",
          type: "u8"
        }
      ],
      returns: "u64"
    },
    {
      name: "shared_accounts_exact_out_route",
      docs: [
        "Route by using program owned token accounts and open orders accounts."
      ],
      discriminator: [176, 209, 105, 168, 154, 125, 69, 62],
      accounts: [
        {
          name: "token_program"
        },
        {
          name: "program_authority"
        },
        {
          name: "user_transfer_authority",
          signer: true
        },
        {
          name: "source_token_account",
          writable: true
        },
        {
          name: "program_source_token_account",
          writable: true
        },
        {
          name: "program_destination_token_account",
          writable: true
        },
        {
          name: "destination_token_account",
          writable: true
        },
        {
          name: "source_mint"
        },
        {
          name: "destination_mint"
        },
        {
          name: "platform_fee_account",
          writable: true,
          optional: true
        },
        {
          name: "token2022_program",
          optional: true
        },
        {
          name: "event_authority"
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "id",
          type: "u8"
        },
        {
          name: "route_plan",
          type: {
            vec: {
              defined: {
                name: "RoutePlanStep"
              }
            }
          }
        },
        {
          name: "out_amount",
          type: "u64"
        },
        {
          name: "quoted_in_amount",
          type: "u64"
        },
        {
          name: "slippage_bps",
          type: "u16"
        },
        {
          name: "platform_fee_bps",
          type: "u8"
        }
      ],
      returns: "u64"
    },
    {
      name: "set_token_ledger",
      discriminator: [228, 85, 185, 112, 78, 79, 77, 2],
      accounts: [
        {
          name: "token_ledger",
          writable: true
        },
        {
          name: "token_account"
        }
      ],
      args: []
    },
    {
      name: "create_open_orders",
      discriminator: [229, 194, 212, 172, 8, 10, 134, 147],
      accounts: [
        {
          name: "open_orders",
          writable: true
        },
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "dex_program"
        },
        {
          name: "system_program"
        },
        {
          name: "rent"
        },
        {
          name: "market"
        }
      ],
      args: []
    },
    {
      name: "create_token_account",
      discriminator: [147, 241, 123, 100, 244, 132, 174, 118],
      accounts: [
        {
          name: "token_account",
          writable: true
        },
        {
          name: "user",
          writable: true,
          signer: true
        },
        {
          name: "mint"
        },
        {
          name: "token_program"
        },
        {
          name: "system_program"
        }
      ],
      args: [
        {
          name: "bump",
          type: "u8"
        }
      ]
    },
    {
      name: "create_program_open_orders",
      discriminator: [28, 226, 32, 148, 188, 136, 113, 171],
      accounts: [
        {
          name: "open_orders",
          writable: true
        },
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "program_authority"
        },
        {
          name: "dex_program"
        },
        {
          name: "system_program"
        },
        {
          name: "rent"
        },
        {
          name: "market"
        }
      ],
      args: [
        {
          name: "id",
          type: "u8"
        }
      ]
    },
    {
      name: "claim",
      discriminator: [62, 198, 214, 193, 213, 159, 108, 210],
      accounts: [
        {
          name: "wallet",
          writable: true
        },
        {
          name: "program_authority",
          writable: true
        },
        {
          name: "system_program"
        }
      ],
      args: [
        {
          name: "id",
          type: "u8"
        }
      ],
      returns: "u64"
    },
    {
      name: "claim_token",
      discriminator: [116, 206, 27, 191, 166, 19, 0, 73],
      accounts: [
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "wallet"
        },
        {
          name: "program_authority"
        },
        {
          name: "program_token_account",
          writable: true
        },
        {
          name: "destination_token_account",
          writable: true
        },
        {
          name: "mint"
        },
        {
          name: "associated_token_token_program"
        },
        {
          name: "associated_token_program"
        },
        {
          name: "system_program"
        }
      ],
      args: [
        {
          name: "id",
          type: "u8"
        }
      ],
      returns: "u64"
    },
    {
      name: "create_token_ledger",
      discriminator: [232, 242, 197, 253, 240, 143, 129, 52],
      accounts: [
        {
          name: "token_ledger",
          writable: true,
          signer: true
        },
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "system_program"
        }
      ],
      args: []
    }
  ],
  accounts: [
    {
      name: "TokenLedger",
      discriminator: [156, 247, 9, 188, 54, 108, 85, 77]
    }
  ],
  events: [
    {
      name: "SwapEvent",
      discriminator: [64, 198, 205, 232, 38, 8, 113, 226]
    },
    {
      name: "FeeEvent",
      discriminator: [73, 79, 78, 127, 184, 213, 13, 220]
    }
  ],
  errors: [
    {
      code: 6e3,
      name: "EmptyRoute",
      msg: "Empty route"
    },
    {
      code: 6001,
      name: "SlippageToleranceExceeded",
      msg: "Slippage tolerance exceeded"
    },
    {
      code: 6002,
      name: "InvalidCalculation",
      msg: "Invalid calculation"
    },
    {
      code: 6003,
      name: "MissingPlatformFeeAccount",
      msg: "Missing platform fee account"
    },
    {
      code: 6004,
      name: "InvalidSlippage",
      msg: "Invalid slippage"
    },
    {
      code: 6005,
      name: "NotEnoughPercent",
      msg: "Not enough percent to 100"
    },
    {
      code: 6006,
      name: "InvalidInputIndex",
      msg: "Token input index is invalid"
    },
    {
      code: 6007,
      name: "InvalidOutputIndex",
      msg: "Token output index is invalid"
    },
    {
      code: 6008,
      name: "NotEnoughAccountKeys",
      msg: "Not Enough Account keys"
    },
    {
      code: 6009,
      name: "NonZeroMinimumOutAmountNotSupported",
      msg: "Non zero minimum out amount not supported"
    },
    {
      code: 6010,
      name: "InvalidRoutePlan",
      msg: "Invalid route plan"
    },
    {
      code: 6011,
      name: "InvalidReferralAuthority",
      msg: "Invalid referral authority"
    },
    {
      code: 6012,
      name: "LedgerTokenAccountDoesNotMatch",
      msg: "Token account doesn't match the ledger"
    },
    {
      code: 6013,
      name: "InvalidTokenLedger",
      msg: "Invalid token ledger"
    },
    {
      code: 6014,
      name: "IncorrectTokenProgramID",
      msg: "Token program ID is invalid"
    },
    {
      code: 6015,
      name: "TokenProgramNotProvided",
      msg: "Token program not provided"
    },
    {
      code: 6016,
      name: "SwapNotSupported",
      msg: "Swap not supported"
    },
    {
      code: 6017,
      name: "ExactOutAmountNotMatched",
      msg: "Exact out amount doesn't match"
    }
  ],
  types: [
    {
      name: "AmountWithSlippage",
      type: {
        kind: "struct",
        fields: [
          {
            name: "amount",
            type: "u64"
          },
          {
            name: "slippage_bps",
            type: "u16"
          }
        ]
      }
    },
    {
      name: "RoutePlanStep",
      type: {
        kind: "struct",
        fields: [
          {
            name: "swap",
            type: {
              defined: {
                name: "Swap"
              }
            }
          },
          {
            name: "percent",
            type: "u8"
          },
          {
            name: "input_index",
            type: "u8"
          },
          {
            name: "output_index",
            type: "u8"
          }
        ]
      }
    },
    {
      name: "Side",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Bid"
          },
          {
            name: "Ask"
          }
        ]
      }
    },
    {
      name: "Swap",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Saber"
          },
          {
            name: "SaberAddDecimalsDeposit"
          },
          {
            name: "SaberAddDecimalsWithdraw"
          },
          {
            name: "TokenSwap"
          },
          {
            name: "Sencha"
          },
          {
            name: "Step"
          },
          {
            name: "Cropper"
          },
          {
            name: "Raydium"
          },
          {
            name: "Crema",
            fields: [
              {
                name: "a_to_b",
                type: "bool"
              }
            ]
          },
          {
            name: "Lifinity"
          },
          {
            name: "Mercurial"
          },
          {
            name: "Cykura"
          },
          {
            name: "Serum",
            fields: [
              {
                name: "side",
                type: {
                  defined: {
                    name: "Side"
                  }
                }
              }
            ]
          },
          {
            name: "MarinadeDeposit"
          },
          {
            name: "MarinadeUnstake"
          },
          {
            name: "Aldrin",
            fields: [
              {
                name: "side",
                type: {
                  defined: {
                    name: "Side"
                  }
                }
              }
            ]
          },
          {
            name: "AldrinV2",
            fields: [
              {
                name: "side",
                type: {
                  defined: {
                    name: "Side"
                  }
                }
              }
            ]
          },
          {
            name: "Whirlpool",
            fields: [
              {
                name: "a_to_b",
                type: "bool"
              }
            ]
          },
          {
            name: "Invariant",
            fields: [
              {
                name: "x_to_y",
                type: "bool"
              }
            ]
          },
          {
            name: "Meteora"
          },
          {
            name: "GooseFX"
          },
          {
            name: "DeltaFi",
            fields: [
              {
                name: "stable",
                type: "bool"
              }
            ]
          },
          {
            name: "Balansol"
          },
          {
            name: "MarcoPolo",
            fields: [
              {
                name: "x_to_y",
                type: "bool"
              }
            ]
          },
          {
            name: "Dradex",
            fields: [
              {
                name: "side",
                type: {
                  defined: {
                    name: "Side"
                  }
                }
              }
            ]
          },
          {
            name: "LifinityV2"
          },
          {
            name: "RaydiumClmm"
          },
          {
            name: "Openbook",
            fields: [
              {
                name: "side",
                type: {
                  defined: {
                    name: "Side"
                  }
                }
              }
            ]
          },
          {
            name: "Phoenix",
            fields: [
              {
                name: "side",
                type: {
                  defined: {
                    name: "Side"
                  }
                }
              }
            ]
          },
          {
            name: "Symmetry",
            fields: [
              {
                name: "from_token_id",
                type: "u64"
              },
              {
                name: "to_token_id",
                type: "u64"
              }
            ]
          },
          {
            name: "TokenSwapV2"
          },
          {
            name: "HeliumTreasuryManagementRedeemV0"
          },
          {
            name: "StakeDexStakeWrappedSol"
          },
          {
            name: "StakeDexSwapViaStake",
            fields: [
              {
                name: "bridge_stake_seed",
                type: "u32"
              }
            ]
          },
          {
            name: "GooseFXV2"
          },
          {
            name: "Perps"
          },
          {
            name: "PerpsAddLiquidity"
          },
          {
            name: "PerpsRemoveLiquidity"
          },
          {
            name: "MeteoraDlmm"
          },
          {
            name: "OpenBookV2",
            fields: [
              {
                name: "side",
                type: {
                  defined: {
                    name: "Side"
                  }
                }
              }
            ]
          },
          {
            name: "RaydiumClmmV2"
          },
          {
            name: "Clone",
            fields: [
              {
                name: "pool_index",
                type: "u8"
              },
              {
                name: "quantity_is_input",
                type: "bool"
              },
              {
                name: "quantity_is_collateral",
                type: "bool"
              }
            ]
          },
          {
            name: "WhirlpoolSwapV2",
            fields: [
              {
                name: "a_to_b",
                type: "bool"
              },
              {
                name: "remaining_accounts_info",
                type: {
                  option: {
                    defined: {
                      name: "RemainingAccountsInfo"
                    }
                  }
                }
              }
            ]
          },
          {
            name: "OneIntro"
          },
          {
            name: "PumpdotfunWrappedBuy"
          },
          {
            name: "PumpdotfunWrappedSell"
          },
          {
            name: "PerpsV2"
          },
          {
            name: "PerpsV2AddLiquidity"
          },
          {
            name: "PerpsV2RemoveLiquidity"
          },
          {
            name: "MoonshotWrappedBuy"
          },
          {
            name: "MoonshotWrappedSell"
          },
          {
            name: "StabbleStableSwap"
          },
          {
            name: "StabbleWeightedSwap"
          },
          {
            name: "Obric",
            fields: [
              {
                name: "x_to_y",
                type: "bool"
              }
            ]
          },
          {
            name: "FoxBuyFromEstimatedCost"
          },
          {
            name: "FoxClaimPartial",
            fields: [
              {
                name: "is_y",
                type: "bool"
              }
            ]
          },
          {
            name: "SolFi",
            fields: [
              {
                name: "is_quote_to_base",
                type: "bool"
              }
            ]
          },
          {
            name: "SolayerDelegateNoInit"
          },
          {
            name: "SolayerUndelegateNoInit"
          },
          {
            name: "TokenMill",
            fields: [
              {
                name: "side",
                type: {
                  defined: {
                    name: "Side"
                  }
                }
              }
            ]
          },
          {
            name: "DaosFunBuy"
          },
          {
            name: "DaosFunSell"
          }
        ]
      }
    },
    {
      name: "RemainingAccountsSlice",
      type: {
        kind: "struct",
        fields: [
          {
            name: "accounts_type",
            type: {
              defined: {
                name: "AccountsType"
              }
            }
          },
          {
            name: "length",
            type: "u8"
          }
        ]
      }
    },
    {
      name: "RemainingAccountsInfo",
      type: {
        kind: "struct",
        fields: [
          {
            name: "slices",
            type: {
              vec: {
                defined: {
                  name: "RemainingAccountsSlice"
                }
              }
            }
          }
        ]
      }
    },
    {
      name: "AccountsType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "TransferHookA"
          },
          {
            name: "TransferHookB"
          }
        ]
      }
    },
    {
      name: "TokenLedger",
      type: {
        kind: "struct",
        fields: [
          {
            name: "token_account",
            type: "pubkey"
          },
          {
            name: "amount",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "SwapEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "amm",
            type: "pubkey"
          },
          {
            name: "input_mint",
            type: "pubkey"
          },
          {
            name: "input_amount",
            type: "u64"
          },
          {
            name: "output_mint",
            type: "pubkey"
          },
          {
            name: "output_amount",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "FeeEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "account",
            type: "pubkey"
          },
          {
            name: "mint",
            type: "pubkey"
          },
          {
            name: "amount",
            type: "u64"
          }
        ]
      }
    }
  ]
};

// idl/jupiter-v4.json
var jupiter_v4_default = {
  version: "0.1.0",
  name: "jupiter",
  instructions: [
    {
      name: "route",
      accounts: [
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "userTransferAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "destinationTokenAccount",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "swapLeg",
          type: {
            defined: "SwapLeg"
          }
        },
        {
          name: "inAmount",
          type: "u64"
        },
        {
          name: "quotedOutAmount",
          type: "u64"
        },
        {
          name: "slippageBps",
          type: "u16"
        },
        {
          name: "platformFeeBps",
          type: "u8"
        }
      ]
    },
    {
      name: "whirlpoolSwapExactOutput",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "whirlpool",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenOwnerAccountA",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenVaultA",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenOwnerAccountB",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenVaultB",
          isMut: true,
          isSigner: false
        },
        {
          name: "tickArray0",
          isMut: true,
          isSigner: false
        },
        {
          name: "tickArray1",
          isMut: true,
          isSigner: false
        },
        {
          name: "tickArray2",
          isMut: true,
          isSigner: false
        },
        {
          name: "oracle",
          isMut: false,
          isSigner: false,
          docs: [
            "Oracle is currently unused and will be enabled on subsequent updates"
          ]
        }
      ],
      args: [
        {
          name: "outAmount",
          type: "u64"
        },
        {
          name: "inAmountWithSlippage",
          type: {
            defined: "AmountWithSlippage"
          }
        },
        {
          name: "aToB",
          type: "bool"
        },
        {
          name: "platformFeeBps",
          type: "u8"
        }
      ]
    },
    {
      name: "raydiumSwapExactOutput",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammId",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammOpenOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolCoinTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolPcTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumProgramId",
          isMut: false,
          isSigner: false
        },
        {
          name: "serumMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumBids",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumAsks",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumEventQueue",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumCoinVaultAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumPcVaultAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumVaultSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "userSourceTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userDestinationTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userSourceOwner",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "outAmount",
          type: "u64"
        },
        {
          name: "inAmountWithSlippage",
          type: {
            defined: "AmountWithSlippage"
          }
        },
        {
          name: "platformFeeBps",
          type: "u8"
        }
      ]
    },
    {
      name: "raydiumClmmSwapExactOutput",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "payer",
          isMut: false,
          isSigner: true
        },
        {
          name: "ammConfig",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolState",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "observationState",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tickArray",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "outAmount",
          type: "u64"
        },
        {
          name: "inAmountWithSlippage",
          type: {
            defined: "AmountWithSlippage"
          }
        },
        {
          name: "platformFeeBps",
          type: "u8"
        }
      ]
    },
    {
      name: "createOpenOrders",
      accounts: [
        {
          name: "openOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true
        },
        {
          name: "dexProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "market",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "createOpenOrderV2",
      accounts: [
        {
          name: "openOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true
        },
        {
          name: "dexProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "market",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "mercurialSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "swapState",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "userTransferAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "sourceTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "destinationTokenAccount",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "cykuraSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "signer",
          isMut: false,
          isSigner: true
        },
        {
          name: "factoryState",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolState",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "lastObservationState",
          isMut: true,
          isSigner: false
        },
        {
          name: "coreProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "serumSwap",
      accounts: [
        {
          name: "market",
          accounts: [
            {
              name: "market",
              isMut: true,
              isSigner: false
            },
            {
              name: "openOrders",
              isMut: true,
              isSigner: false
            },
            {
              name: "requestQueue",
              isMut: true,
              isSigner: false
            },
            {
              name: "eventQueue",
              isMut: true,
              isSigner: false
            },
            {
              name: "bids",
              isMut: true,
              isSigner: false
            },
            {
              name: "asks",
              isMut: true,
              isSigner: false
            },
            {
              name: "coinVault",
              isMut: true,
              isSigner: false
            },
            {
              name: "pcVault",
              isMut: true,
              isSigner: false
            },
            {
              name: "vaultSigner",
              isMut: false,
              isSigner: false
            }
          ]
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "orderPayerTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "coinWallet",
          isMut: true,
          isSigner: false
        },
        {
          name: "pcWallet",
          isMut: true,
          isSigner: false
        },
        {
          name: "dexProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "saberSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "swap",
          isMut: false,
          isSigner: false
        },
        {
          name: "swapAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "userAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "inputUserAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputUserAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "feesTokenAccount",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "saberAddDecimals",
      accounts: [
        {
          name: "addDecimalsProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "wrapper",
          isMut: false,
          isSigner: false
        },
        {
          name: "wrapperMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "wrapperUnderlyingTokens",
          isMut: true,
          isSigner: false
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true
        },
        {
          name: "userUnderlyingTokens",
          isMut: true,
          isSigner: false
        },
        {
          name: "userWrappedTokens",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "tokenSwap",
      accounts: [
        {
          name: "tokenSwapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "swap",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false
        },
        {
          name: "userTransferAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "source",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapSource",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapDestination",
          isMut: true,
          isSigner: false
        },
        {
          name: "destination",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolFee",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "senchaSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "swap",
          isMut: true,
          isSigner: false
        },
        {
          name: "userAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "inputUserAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputFeesAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputUserAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputFeesAccount",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "stepSwap",
      accounts: [
        {
          name: "tokenSwapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "swap",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false
        },
        {
          name: "userTransferAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "source",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapSource",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapDestination",
          isMut: true,
          isSigner: false
        },
        {
          name: "destination",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolFee",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "cropperSwap",
      accounts: [
        {
          name: "tokenSwapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "swap",
          isMut: false,
          isSigner: false
        },
        {
          name: "swapState",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false
        },
        {
          name: "userTransferAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "source",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapSource",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapDestination",
          isMut: true,
          isSigner: false
        },
        {
          name: "destination",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolFee",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "raydiumSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammId",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammOpenOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolCoinTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolPcTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumProgramId",
          isMut: false,
          isSigner: false
        },
        {
          name: "serumMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumBids",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumAsks",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumEventQueue",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumCoinVaultAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumPcVaultAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumVaultSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "userSourceTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userDestinationTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userSourceOwner",
          isMut: false,
          isSigner: true
        }
      ],
      args: []
    },
    {
      name: "cremaSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "clmmConfig",
          isMut: false,
          isSigner: false
        },
        {
          name: "clmmpool",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenA",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenB",
          isMut: false,
          isSigner: false
        },
        {
          name: "accountA",
          isMut: true,
          isSigner: false
        },
        {
          name: "accountB",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenAVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenBVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "tickArrayMap",
          isMut: true,
          isSigner: false
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true
        },
        {
          name: "partner",
          isMut: false,
          isSigner: false
        },
        {
          name: "partnerAtaA",
          isMut: true,
          isSigner: false
        },
        {
          name: "partnerAtaB",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "lifinitySwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false
        },
        {
          name: "amm",
          isMut: false,
          isSigner: false
        },
        {
          name: "userTransferAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "sourceInfo",
          isMut: true,
          isSigner: false
        },
        {
          name: "destinationInfo",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapSource",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapDestination",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "feeAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "pythAccount",
          isMut: false,
          isSigner: false
        },
        {
          name: "pythPcAccount",
          isMut: false,
          isSigner: false
        },
        {
          name: "configAccount",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "marinadeDeposit",
      accounts: [
        {
          name: "marinadeFinanceProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        },
        {
          name: "msolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "liqPoolSolLegPda",
          isMut: true,
          isSigner: false
        },
        {
          name: "liqPoolMsolLeg",
          isMut: true,
          isSigner: false
        },
        {
          name: "liqPoolMsolLegAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "reservePda",
          isMut: true,
          isSigner: false
        },
        {
          name: "transferFrom",
          isMut: true,
          isSigner: false
        },
        {
          name: "mintTo",
          isMut: true,
          isSigner: false
        },
        {
          name: "msolMintAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "userWsolTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tempWsolTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userTransferAuthority",
          isMut: true,
          isSigner: true
        },
        {
          name: "wsolMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "marinadeUnstake",
      accounts: [
        {
          name: "marinadeFinanceProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        },
        {
          name: "msolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "liqPoolSolLegPda",
          isMut: true,
          isSigner: false
        },
        {
          name: "liqPoolMsolLeg",
          isMut: true,
          isSigner: false
        },
        {
          name: "treasuryMsolAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "getMsolFrom",
          isMut: true,
          isSigner: false
        },
        {
          name: "getMsolFromAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "transferSolTo",
          isMut: true,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "userWsolTokenAccount",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "aldrinSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "pool",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "baseTokenVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "quoteTokenVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "feePoolTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "walletAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "userBaseTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userQuoteTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "aldrinV2Swap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "pool",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "baseTokenVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "quoteTokenVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "feePoolTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "walletAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "userBaseTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userQuoteTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "curve",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "whirlpoolSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "whirlpool",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenOwnerAccountA",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenVaultA",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenOwnerAccountB",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenVaultB",
          isMut: true,
          isSigner: false
        },
        {
          name: "tickArray0",
          isMut: true,
          isSigner: false
        },
        {
          name: "tickArray1",
          isMut: true,
          isSigner: false
        },
        {
          name: "tickArray2",
          isMut: true,
          isSigner: false
        },
        {
          name: "oracle",
          isMut: false,
          isSigner: false,
          docs: [
            "Oracle is currently unused and will be enabled on subsequent updates"
          ]
        }
      ],
      args: []
    },
    {
      name: "invariantSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "pool",
          isMut: true,
          isSigner: false
        },
        {
          name: "tickmap",
          isMut: true,
          isSigner: false
        },
        {
          name: "accountX",
          isMut: true,
          isSigner: false
        },
        {
          name: "accountY",
          isMut: true,
          isSigner: false
        },
        {
          name: "reserveX",
          isMut: true,
          isSigner: false
        },
        {
          name: "reserveY",
          isMut: true,
          isSigner: false
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true
        },
        {
          name: "programAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "meteoraSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "pool",
          isMut: true,
          isSigner: false
        },
        {
          name: "userSourceToken",
          isMut: true,
          isSigner: false
        },
        {
          name: "userDestinationToken",
          isMut: true,
          isSigner: false
        },
        {
          name: "aVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "bVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "aTokenVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "bTokenVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "aVaultLpMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "bVaultLpMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "aVaultLp",
          isMut: true,
          isSigner: false
        },
        {
          name: "bVaultLp",
          isMut: true,
          isSigner: false
        },
        {
          name: "adminTokenFee",
          isMut: true,
          isSigner: false
        },
        {
          name: "user",
          isMut: false,
          isSigner: true
        },
        {
          name: "vaultProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "goosefxSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "controller",
          isMut: false,
          isSigner: false
        },
        {
          name: "pair",
          isMut: true,
          isSigner: false
        },
        {
          name: "sslIn",
          isMut: true,
          isSigner: false
        },
        {
          name: "sslOut",
          isMut: true,
          isSigner: false
        },
        {
          name: "liabilityVaultIn",
          isMut: true,
          isSigner: false
        },
        {
          name: "swappedLiabilityVaultIn",
          isMut: true,
          isSigner: false
        },
        {
          name: "liabilityVaultOut",
          isMut: true,
          isSigner: false
        },
        {
          name: "swappedLiabilityVaultOut",
          isMut: true,
          isSigner: false
        },
        {
          name: "userInAta",
          isMut: true,
          isSigner: false
        },
        {
          name: "userOutAta",
          isMut: true,
          isSigner: false
        },
        {
          name: "feeCollectorAta",
          isMut: true,
          isSigner: false
        },
        {
          name: "userWallet",
          isMut: false,
          isSigner: true
        },
        {
          name: "feeCollector",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "deltafiSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "marketConfig",
          isMut: false,
          isSigner: false
        },
        {
          name: "swapInfo",
          isMut: true,
          isSigner: false
        },
        {
          name: "userSourceToken",
          isMut: true,
          isSigner: false
        },
        {
          name: "userDestinationToken",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapSourceToken",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapDestinationToken",
          isMut: true,
          isSigner: false
        },
        {
          name: "deltafiUser",
          isMut: true,
          isSigner: false
        },
        {
          name: "adminDestinationToken",
          isMut: true,
          isSigner: false
        },
        {
          name: "pythPriceBase",
          isMut: false,
          isSigner: false
        },
        {
          name: "pythPriceQuote",
          isMut: false,
          isSigner: false
        },
        {
          name: "userAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "balansolSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: true,
          isSigner: true
        },
        {
          name: "pool",
          isMut: true,
          isSigner: false
        },
        {
          name: "taxMan",
          isMut: true,
          isSigner: false
        },
        {
          name: "bidMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "treasurer",
          isMut: false,
          isSigner: false
        },
        {
          name: "srcTreasury",
          isMut: true,
          isSigner: false
        },
        {
          name: "srcAssociatedTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "askMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "dstTreasury",
          isMut: true,
          isSigner: false
        },
        {
          name: "dstAssociatedTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "dstTokenAccountTaxman",
          isMut: true,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "marcoPoloSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "pool",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenX",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenY",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolXAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolYAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapperXAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapperYAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapper",
          isMut: true,
          isSigner: true
        },
        {
          name: "referrerXAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "referrerYAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "referrer",
          isMut: true,
          isSigner: false
        },
        {
          name: "programAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "dradexSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "pair",
          isMut: true,
          isSigner: false
        },
        {
          name: "market",
          isMut: true,
          isSigner: false
        },
        {
          name: "eventQueue",
          isMut: true,
          isSigner: false
        },
        {
          name: "dexUser",
          isMut: false,
          isSigner: false
        },
        {
          name: "marketUser",
          isMut: true,
          isSigner: false
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false
        },
        {
          name: "t0Vault",
          isMut: true,
          isSigner: false
        },
        {
          name: "t1Vault",
          isMut: true,
          isSigner: false
        },
        {
          name: "t0User",
          isMut: true,
          isSigner: false
        },
        {
          name: "t1User",
          isMut: true,
          isSigner: false
        },
        {
          name: "master",
          isMut: false,
          isSigner: false
        },
        {
          name: "signer",
          isMut: true,
          isSigner: true
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "logger",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "lifinityV2Swap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false
        },
        {
          name: "amm",
          isMut: true,
          isSigner: false
        },
        {
          name: "userTransferAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "sourceInfo",
          isMut: true,
          isSigner: false
        },
        {
          name: "destinationInfo",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapSource",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapDestination",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "feeAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "oracleMainAccount",
          isMut: false,
          isSigner: false
        },
        {
          name: "oracleSubAccount",
          isMut: false,
          isSigner: false
        },
        {
          name: "oraclePcAccount",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "raydiumClmmSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "payer",
          isMut: false,
          isSigner: true
        },
        {
          name: "ammConfig",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolState",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "observationState",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tickArray",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "phoenixSwap",
      accounts: [
        {
          name: "swapProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "market",
          isMut: true,
          isSigner: false
        },
        {
          name: "trader",
          isMut: false,
          isSigner: true
        },
        {
          name: "baseAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "quoteAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "baseVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "quoteVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "claimBonk",
      accounts: [
        {
          name: "openOrders",
          isMut: false,
          isSigner: false
        },
        {
          name: "bonkMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "openOrdersBonkTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "market",
          isMut: false,
          isSigner: false
        },
        {
          name: "openOrdersOwner",
          isMut: true,
          isSigner: false
        },
        {
          name: "claimerTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    }
  ],
  types: [
    {
      name: "AmountWithSlippage",
      type: {
        kind: "struct",
        fields: [
          {
            name: "amount",
            type: "u64"
          },
          {
            name: "slippageBps",
            type: "u16"
          }
        ]
      }
    },
    {
      name: "SplitLegDeeper",
      type: {
        kind: "struct",
        fields: [
          {
            name: "percent",
            type: "u8"
          },
          {
            name: "swapLeg",
            type: {
              defined: "SwapLegSwap"
            }
          }
        ]
      }
    },
    {
      name: "SplitLeg",
      type: {
        kind: "struct",
        fields: [
          {
            name: "percent",
            type: "u8"
          },
          {
            name: "swapLeg",
            type: {
              defined: "SwapLegDeeper"
            }
          }
        ]
      }
    },
    {
      name: "Side",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Bid"
          },
          {
            name: "Ask"
          }
        ]
      }
    },
    {
      name: "SwapLegSwap",
      type: {
        kind: "enum",
        variants: [
          {
            name: "PlaceholderOne"
          },
          {
            name: "PlaceholderTwo"
          },
          {
            name: "Swap",
            fields: [
              {
                name: "swap",
                type: {
                  defined: "Swap"
                }
              }
            ]
          }
        ]
      }
    },
    {
      name: "SwapLegDeeper",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Chain",
            fields: [
              {
                name: "swap_legs",
                type: {
                  vec: {
                    defined: "SwapLegSwap"
                  }
                }
              }
            ]
          },
          {
            name: "Split",
            fields: [
              {
                name: "split_legs",
                type: {
                  vec: {
                    defined: "SplitLegDeeper"
                  }
                }
              }
            ]
          },
          {
            name: "Swap",
            fields: [
              {
                name: "swap",
                type: {
                  defined: "Swap"
                }
              }
            ]
          }
        ]
      }
    },
    {
      name: "SwapLeg",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Chain",
            fields: [
              {
                name: "swap_legs",
                type: {
                  vec: {
                    defined: "SwapLegDeeper"
                  }
                }
              }
            ]
          },
          {
            name: "Split",
            fields: [
              {
                name: "split_legs",
                type: {
                  vec: {
                    defined: "SplitLeg"
                  }
                }
              }
            ]
          },
          {
            name: "Swap",
            fields: [
              {
                name: "swap",
                type: {
                  defined: "Swap"
                }
              }
            ]
          }
        ]
      }
    },
    {
      name: "Swap",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Saber"
          },
          {
            name: "SaberAddDecimalsDeposit"
          },
          {
            name: "SaberAddDecimalsWithdraw"
          },
          {
            name: "TokenSwap"
          },
          {
            name: "Sencha"
          },
          {
            name: "Step"
          },
          {
            name: "Cropper"
          },
          {
            name: "Raydium"
          },
          {
            name: "Crema",
            fields: [
              {
                name: "a_to_b",
                type: "bool"
              }
            ]
          },
          {
            name: "Lifinity"
          },
          {
            name: "Mercurial"
          },
          {
            name: "Cykura"
          },
          {
            name: "Serum",
            fields: [
              {
                name: "side",
                type: {
                  defined: "Side"
                }
              }
            ]
          },
          {
            name: "MarinadeDeposit"
          },
          {
            name: "MarinadeUnstake"
          },
          {
            name: "Aldrin",
            fields: [
              {
                name: "side",
                type: {
                  defined: "Side"
                }
              }
            ]
          },
          {
            name: "AldrinV2",
            fields: [
              {
                name: "side",
                type: {
                  defined: "Side"
                }
              }
            ]
          },
          {
            name: "Whirlpool",
            fields: [
              {
                name: "a_to_b",
                type: "bool"
              }
            ]
          },
          {
            name: "Invariant",
            fields: [
              {
                name: "x_to_y",
                type: "bool"
              }
            ]
          },
          {
            name: "Meteora"
          },
          {
            name: "GooseFX"
          },
          {
            name: "DeltaFi",
            fields: [
              {
                name: "stable",
                type: "bool"
              }
            ]
          },
          {
            name: "Balansol"
          },
          {
            name: "MarcoPolo",
            fields: [
              {
                name: "x_to_y",
                type: "bool"
              }
            ]
          },
          {
            name: "Dradex",
            fields: [
              {
                name: "side",
                type: {
                  defined: "Side"
                }
              }
            ]
          },
          {
            name: "LifinityV2"
          },
          {
            name: "RaydiumClmm"
          },
          {
            name: "Openbook",
            fields: [
              {
                name: "side",
                type: {
                  defined: "Side"
                }
              }
            ]
          },
          {
            name: "Phoenix",
            fields: [
              {
                name: "side",
                type: {
                  defined: "Side"
                }
              }
            ]
          }
        ]
      }
    }
  ],
  events: [
    {
      name: "Swap",
      fields: [
        {
          name: "amm",
          type: "publicKey",
          index: false
        },
        {
          name: "inputMint",
          type: "publicKey",
          index: false
        },
        {
          name: "inputAmount",
          type: "u64",
          index: false
        },
        {
          name: "outputMint",
          type: "publicKey",
          index: false
        },
        {
          name: "outputAmount",
          type: "u64",
          index: false
        }
      ]
    },
    {
      name: "Fee",
      fields: [
        {
          name: "account",
          type: "publicKey",
          index: false
        },
        {
          name: "mint",
          type: "publicKey",
          index: false
        },
        {
          name: "amount",
          type: "u64",
          index: false
        }
      ]
    }
  ],
  errors: [
    {
      code: 6e3,
      name: "EmptyRoute",
      msg: "Empty route"
    },
    {
      code: 6001,
      name: "SlippageToleranceExceeded",
      msg: "Slippage tolerance exceeded"
    },
    {
      code: 6002,
      name: "InvalidCalculation",
      msg: "Invalid calculation"
    },
    {
      code: 6003,
      name: "MissingPlatformFeeAccount",
      msg: "Missing platform fee account"
    },
    {
      code: 6004,
      name: "InvalidSlippage",
      msg: "Invalid slippage"
    },
    {
      code: 6005,
      name: "NotEnoughPercent",
      msg: "Not enough percent to 100"
    },
    {
      code: 6006,
      name: "InAmountsStackIsEmpty",
      msg: "In amounts stack is empty"
    },
    {
      code: 6007,
      name: "OutAmountsStackIsEmpty",
      msg: "Out amounts stack is empty"
    },
    {
      code: 6008,
      name: "NotEnoughAccountKeys",
      msg: "Not Enough Account keys"
    },
    {
      code: 6009,
      name: "NonZeroMinimumOutAmountNotSupported",
      msg: "Non zero minimum out amount not supported"
    }
  ]
};

// idl/jupiter-dca.json
var jupiter_dca_default = {
  version: "0.1.0",
  name: "dca",
  instructions: [
    {
      name: "openDca",
      accounts: [
        {
          name: "dca",
          isMut: true,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: true
        },
        {
          name: "inputMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "outputMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "userAta",
          isMut: true,
          isSigner: false
        },
        {
          name: "inAta",
          isMut: true,
          isSigner: false
        },
        {
          name: "outAta",
          isMut: true,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "eventAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "program",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "applicationIdx",
          type: "u64"
        },
        {
          name: "inAmount",
          type: "u64"
        },
        {
          name: "inAmountPerCycle",
          type: "u64"
        },
        {
          name: "cycleFrequency",
          type: "i64"
        },
        {
          name: "minOutAmount",
          type: {
            option: "u64"
          }
        },
        {
          name: "maxOutAmount",
          type: {
            option: "u64"
          }
        },
        {
          name: "startAt",
          type: {
            option: "i64"
          }
        },
        {
          name: "closeWsolInAta",
          type: {
            option: "bool"
          }
        }
      ]
    },
    {
      name: "openDcaV2",
      accounts: [
        {
          name: "dca",
          isMut: true,
          isSigner: false
        },
        {
          name: "user",
          isMut: false,
          isSigner: true
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true
        },
        {
          name: "inputMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "outputMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "userAta",
          isMut: true,
          isSigner: false
        },
        {
          name: "inAta",
          isMut: true,
          isSigner: false
        },
        {
          name: "outAta",
          isMut: true,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "eventAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "program",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "applicationIdx",
          type: "u64"
        },
        {
          name: "inAmount",
          type: "u64"
        },
        {
          name: "inAmountPerCycle",
          type: "u64"
        },
        {
          name: "cycleFrequency",
          type: "i64"
        },
        {
          name: "minOutAmount",
          type: {
            option: "u64"
          }
        },
        {
          name: "maxOutAmount",
          type: {
            option: "u64"
          }
        },
        {
          name: "startAt",
          type: {
            option: "i64"
          }
        }
      ]
    },
    {
      name: "closeDca",
      accounts: [
        {
          name: "user",
          isMut: true,
          isSigner: true
        },
        {
          name: "dca",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "outputMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "inAta",
          isMut: true,
          isSigner: false
        },
        {
          name: "outAta",
          isMut: true,
          isSigner: false
        },
        {
          name: "userInAta",
          isMut: true,
          isSigner: false
        },
        {
          name: "userOutAta",
          isMut: true,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "eventAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "program",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "withdraw",
      accounts: [
        {
          name: "user",
          isMut: true,
          isSigner: true
        },
        {
          name: "dca",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "outputMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "dcaAta",
          isMut: true,
          isSigner: false
        },
        {
          name: "userInAta",
          isMut: true,
          isSigner: false,
          isOptional: true
        },
        {
          name: "userOutAta",
          isMut: true,
          isSigner: false,
          isOptional: true
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "eventAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "program",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "withdrawParams",
          type: {
            defined: "WithdrawParams"
          }
        }
      ]
    },
    {
      name: "deposit",
      accounts: [
        {
          name: "user",
          isMut: true,
          isSigner: true
        },
        {
          name: "dca",
          isMut: true,
          isSigner: false
        },
        {
          name: "inAta",
          isMut: true,
          isSigner: false
        },
        {
          name: "userInAta",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "eventAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "program",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "depositIn",
          type: "u64"
        }
      ]
    },
    {
      name: "withdrawFees",
      accounts: [
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false
        },
        {
          name: "feeAuthority",
          isMut: false,
          isSigner: false,
          docs: [
            "CHECK"
          ]
        },
        {
          name: "programFeeAta",
          isMut: true,
          isSigner: false
        },
        {
          name: "adminFeeAta",
          isMut: true,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "amount",
          type: "u64"
        }
      ]
    },
    {
      name: "initiateFlashFill",
      accounts: [
        {
          name: "keeper",
          isMut: true,
          isSigner: true
        },
        {
          name: "dca",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputMint",
          isMut: false,
          isSigner: false,
          docs: [
            "The token to borrow"
          ]
        },
        {
          name: "keeperInAta",
          isMut: true,
          isSigner: false,
          docs: [
            "The account to send borrowed tokens to"
          ]
        },
        {
          name: "inAta",
          isMut: true,
          isSigner: false,
          docs: [
            "The account to borrow from"
          ]
        },
        {
          name: "outAta",
          isMut: false,
          isSigner: false,
          docs: [
            "The account to repay to"
          ]
        },
        {
          name: "instructionsSysvar",
          isMut: false,
          isSigner: false,
          docs: [
            "Solana Instructions Sysvar"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "fulfillFlashFill",
      accounts: [
        {
          name: "keeper",
          isMut: true,
          isSigner: true
        },
        {
          name: "dca",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "outputMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "keeperInAta",
          isMut: false,
          isSigner: false
        },
        {
          name: "inAta",
          isMut: false,
          isSigner: false
        },
        {
          name: "outAta",
          isMut: false,
          isSigner: false
        },
        {
          name: "feeAuthority",
          isMut: false,
          isSigner: false,
          docs: [
            "CHECK"
          ]
        },
        {
          name: "feeAta",
          isMut: true,
          isSigner: false
        },
        {
          name: "instructionsSysvar",
          isMut: false,
          isSigner: false,
          docs: [
            "Solana Instructions Sysvar"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "eventAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "program",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "repayAmount",
          type: "u64"
        }
      ]
    },
    {
      name: "initiateDlmmFill",
      accounts: [
        {
          name: "keeper",
          isMut: true,
          isSigner: true
        },
        {
          name: "dca",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputMint",
          isMut: false,
          isSigner: false,
          docs: [
            "The token to borrow"
          ]
        },
        {
          name: "keeperInAta",
          isMut: true,
          isSigner: false,
          docs: [
            "The account to send borrowed tokens to"
          ]
        },
        {
          name: "inAta",
          isMut: true,
          isSigner: false,
          docs: [
            "The account to borrow from"
          ]
        },
        {
          name: "outAta",
          isMut: false,
          isSigner: false,
          docs: [
            "The account to repay to"
          ]
        },
        {
          name: "instructionsSysvar",
          isMut: false,
          isSigner: false,
          docs: [
            "Solana Instructions Sysvar"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "fulfillDlmmFill",
      accounts: [
        {
          name: "keeper",
          isMut: true,
          isSigner: true
        },
        {
          name: "dca",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "outputMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "keeperInAta",
          isMut: false,
          isSigner: false
        },
        {
          name: "inAta",
          isMut: false,
          isSigner: false
        },
        {
          name: "outAta",
          isMut: false,
          isSigner: false
        },
        {
          name: "feeAuthority",
          isMut: false,
          isSigner: false,
          docs: [
            "CHECK"
          ]
        },
        {
          name: "feeAta",
          isMut: true,
          isSigner: false
        },
        {
          name: "instructionsSysvar",
          isMut: false,
          isSigner: false,
          docs: [
            "Solana Instructions Sysvar"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "eventAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "program",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "repayAmount",
          type: "u64"
        }
      ]
    },
    {
      name: "transfer",
      accounts: [
        {
          name: "keeper",
          isMut: true,
          isSigner: true
        },
        {
          name: "dca",
          isMut: true,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "outputMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "dcaOutAta",
          isMut: true,
          isSigner: false
        },
        {
          name: "userOutAta",
          isMut: true,
          isSigner: false,
          isOptional: true
        },
        {
          name: "intermediateAccount",
          isMut: true,
          isSigner: false,
          isOptional: true
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "eventAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "program",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "endAndClose",
      accounts: [
        {
          name: "keeper",
          isMut: true,
          isSigner: true
        },
        {
          name: "dca",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "outputMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "inAta",
          isMut: true,
          isSigner: false
        },
        {
          name: "outAta",
          isMut: true,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userOutAta",
          isMut: true,
          isSigner: false,
          isOptional: true
        },
        {
          name: "initUserOutAta",
          isMut: true,
          isSigner: false,
          isOptional: true
        },
        {
          name: "intermediateAccount",
          isMut: true,
          isSigner: false,
          isOptional: true
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "eventAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "program",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    }
  ],
  accounts: [
    {
      name: "Dca",
      type: {
        kind: "struct",
        fields: [
          {
            name: "user",
            type: "publicKey"
          },
          {
            name: "inputMint",
            type: "publicKey"
          },
          {
            name: "outputMint",
            type: "publicKey"
          },
          {
            name: "idx",
            type: "u64"
          },
          {
            name: "nextCycleAt",
            type: "i64"
          },
          {
            name: "inDeposited",
            type: "u64"
          },
          {
            name: "inWithdrawn",
            type: "u64"
          },
          {
            name: "outWithdrawn",
            type: "u64"
          },
          {
            name: "inUsed",
            type: "u64"
          },
          {
            name: "outReceived",
            type: "u64"
          },
          {
            name: "inAmountPerCycle",
            type: "u64"
          },
          {
            name: "cycleFrequency",
            type: "i64"
          },
          {
            name: "nextCycleAmountLeft",
            type: "u64"
          },
          {
            name: "inAccount",
            type: "publicKey"
          },
          {
            name: "outAccount",
            type: "publicKey"
          },
          {
            name: "minOutAmount",
            type: "u64"
          },
          {
            name: "maxOutAmount",
            type: "u64"
          },
          {
            name: "keeperInBalanceBeforeBorrow",
            type: "u64"
          },
          {
            name: "dcaOutBalanceBeforeSwap",
            type: "u64"
          },
          {
            name: "createdAt",
            type: "i64"
          },
          {
            name: "bump",
            type: "u8"
          }
        ]
      }
    }
  ],
  types: [
    {
      name: "WithdrawParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "withdrawAmount",
            type: "u64"
          },
          {
            name: "withdrawal",
            type: {
              defined: "Withdrawal"
            }
          }
        ]
      }
    },
    {
      name: "Withdrawal",
      type: {
        kind: "enum",
        variants: [
          {
            name: "In"
          },
          {
            name: "Out"
          }
        ]
      }
    }
  ],
  events: [
    {
      name: "CollectedFee",
      fields: [
        {
          name: "userKey",
          type: "publicKey",
          index: false
        },
        {
          name: "dcaKey",
          type: "publicKey",
          index: false
        },
        {
          name: "mint",
          type: "publicKey",
          index: false
        },
        {
          name: "amount",
          type: "u64",
          index: false
        }
      ]
    },
    {
      name: "Filled",
      fields: [
        {
          name: "userKey",
          type: "publicKey",
          index: false
        },
        {
          name: "dcaKey",
          type: "publicKey",
          index: false
        },
        {
          name: "inputMint",
          type: "publicKey",
          index: false
        },
        {
          name: "outputMint",
          type: "publicKey",
          index: false
        },
        {
          name: "inAmount",
          type: "u64",
          index: false
        },
        {
          name: "outAmount",
          type: "u64",
          index: false
        },
        {
          name: "feeMint",
          type: "publicKey",
          index: false
        },
        {
          name: "fee",
          type: "u64",
          index: false
        }
      ]
    },
    {
      name: "Opened",
      fields: [
        {
          name: "userKey",
          type: "publicKey",
          index: false
        },
        {
          name: "dcaKey",
          type: "publicKey",
          index: false
        },
        {
          name: "inDeposited",
          type: "u64",
          index: false
        },
        {
          name: "inputMint",
          type: "publicKey",
          index: false
        },
        {
          name: "outputMint",
          type: "publicKey",
          index: false
        },
        {
          name: "cycleFrequency",
          type: "i64",
          index: false
        },
        {
          name: "inAmountPerCycle",
          type: "u64",
          index: false
        },
        {
          name: "createdAt",
          type: "i64",
          index: false
        }
      ]
    },
    {
      name: "Closed",
      fields: [
        {
          name: "userKey",
          type: "publicKey",
          index: false
        },
        {
          name: "dcaKey",
          type: "publicKey",
          index: false
        },
        {
          name: "inDeposited",
          type: "u64",
          index: false
        },
        {
          name: "inputMint",
          type: "publicKey",
          index: false
        },
        {
          name: "outputMint",
          type: "publicKey",
          index: false
        },
        {
          name: "cycleFrequency",
          type: "i64",
          index: false
        },
        {
          name: "inAmountPerCycle",
          type: "u64",
          index: false
        },
        {
          name: "createdAt",
          type: "i64",
          index: false
        },
        {
          name: "totalInWithdrawn",
          type: "u64",
          index: false
        },
        {
          name: "totalOutWithdrawn",
          type: "u64",
          index: false
        },
        {
          name: "unfilledAmount",
          type: "u64",
          index: false
        },
        {
          name: "userClosed",
          type: "bool",
          index: false
        }
      ]
    },
    {
      name: "Withdraw",
      fields: [
        {
          name: "dcaKey",
          type: "publicKey",
          index: false
        },
        {
          name: "inAmount",
          type: "u64",
          index: false
        },
        {
          name: "outAmount",
          type: "u64",
          index: false
        },
        {
          name: "userWithdraw",
          type: "bool",
          index: false
        }
      ]
    },
    {
      name: "Deposit",
      fields: [
        {
          name: "dcaKey",
          type: "publicKey",
          index: false
        },
        {
          name: "amount",
          type: "u64",
          index: false
        }
      ]
    }
  ],
  errors: [
    {
      code: 6e3,
      name: "InvalidAmount",
      msg: "Invalid deposit amount"
    },
    {
      code: 6001,
      name: "InvalidCycleAmount",
      msg: "Invalid deposit amount"
    },
    {
      code: 6002,
      name: "InvalidPair",
      msg: "Invalid pair"
    },
    {
      code: 6003,
      name: "TooFrequent",
      msg: "Too frequent DCA cycle"
    },
    {
      code: 6004,
      name: "InvalidMinPrice",
      msg: "Minimum price constraint must be greater than 0"
    },
    {
      code: 6005,
      name: "InvalidMaxPrice",
      msg: "Maximum price constraint must be greater than 0"
    },
    {
      code: 6006,
      name: "InAmountInsufficient",
      msg: "In amount needs to be more than in amount per cycle"
    },
    {
      code: 6007,
      name: "Unauthorized",
      msg: "Wrong user"
    },
    {
      code: 6008,
      name: "NoInATA",
      msg: "inAta not passed in"
    },
    {
      code: 6009,
      name: "NoUserInATA",
      msg: "userInAta not passed in"
    },
    {
      code: 6010,
      name: "NoOutATA",
      msg: "outAta not passed in"
    },
    {
      code: 6011,
      name: "NoUserOutATA",
      msg: "userOutAta not passed in"
    },
    {
      code: 6012,
      name: "InsufficientBalanceInProgram",
      msg: "Trying to withdraw more than available"
    },
    {
      code: 6013,
      name: "InvalidDepositAmount",
      msg: "Deposit should be more than 0"
    },
    {
      code: 6014,
      name: "UserInsufficientBalance",
      msg: "User has insufficient balance"
    },
    {
      code: 6015,
      name: "UnauthorizedKeeper",
      msg: "Unauthorized Keeper"
    },
    {
      code: 6016,
      name: "UnrecognizedProgram",
      msg: "Unrecognized Program"
    },
    {
      code: 6017,
      name: "MathErrors",
      msg: "Calculation errors"
    },
    {
      code: 6018,
      name: "KeeperNotTimeToFill",
      msg: "Not time to fill"
    },
    {
      code: 6019,
      name: "OrderFillAmountWrong",
      msg: "Order amount wrong"
    },
    {
      code: 6020,
      name: "SwapOutAmountBelowMinimum",
      msg: "Out amount below expectations"
    },
    {
      code: 6021,
      name: "WrongAdmin",
      msg: "Wrong admin"
    },
    {
      code: 6022,
      name: "MathOverflow",
      msg: "Overflow in arithmetic operation"
    },
    {
      code: 6023,
      name: "AddressMismatch",
      msg: "Address Mismatch"
    },
    {
      code: 6024,
      name: "ProgramMismatch",
      msg: "Program Mismatch"
    },
    {
      code: 6025,
      name: "IncorrectRepaymentAmount",
      msg: "Incorrect Repayment Amount"
    },
    {
      code: 6026,
      name: "CannotBorrowBeforeRepay",
      msg: "Cannot Borrow Before Repay"
    },
    {
      code: 6027,
      name: "NoRepaymentInstructionFound",
      msg: "No Repayment Found"
    },
    {
      code: 6028,
      name: "MissingSwapInstructions",
      msg: "Missing Swap Instruction"
    },
    {
      code: 6029,
      name: "UnexpectedSwapProgram",
      msg: "Expected Instruction to use Jupiter Swap Program"
    },
    {
      code: 6030,
      name: "InvalidSwapMint",
      msg: "Invalid Swap Mint"
    },
    {
      code: 6031,
      name: "UnknownInstruction",
      msg: "Unknown Instruction"
    },
    {
      code: 6032,
      name: "MissingRepayInstructions",
      msg: "Missing Repay Instruction"
    },
    {
      code: 6033,
      name: "KeeperShortchanged",
      msg: "Keeper Shortchanged"
    },
    {
      code: 6034,
      name: "WrongSwapOutAccount",
      msg: "Jup Swap to Wrong Out Account"
    },
    {
      code: 6035,
      name: "WrongTransferAmount",
      msg: "Transfer amount should be exactly account balance"
    },
    {
      code: 6036,
      name: "InsufficientBalanceForRent",
      msg: "Insufficient balance for rent"
    },
    {
      code: 6037,
      name: "UnexpectedSolBalance",
      msg: "Unexpected SOL amount in intermediate account"
    },
    {
      code: 6038,
      name: "InsufficientWsolForTransfer",
      msg: "Too little WSOL to perform transfer"
    },
    {
      code: 6039,
      name: "MissedInstruction",
      msg: "Did not call initiate_flash_fill"
    },
    {
      code: 6040,
      name: "WrongProgram",
      msg: "Did not call this program's initiate_flash_fill"
    },
    {
      code: 6041,
      name: "BalanceNotZero",
      msg: "Can't close account with balance"
    },
    {
      code: 6042,
      name: "UnexpectedWSOLLeftover",
      msg: "Should not have WSOL leftover in DCA out-token account"
    },
    {
      code: 6043,
      name: "IntermediateAccountNotSet",
      msg: "Should pass in a WSOL intermediate account when transferring SOL"
    },
    {
      code: 6044,
      name: "UnexpectedSwapInstruction",
      msg: "Did not call jup swap"
    },
    {
      code: 6045,
      name: "SwapOutLessThanUserMinimum",
      msg: "Expect more from swap"
    },
    {
      code: 6046,
      name: "SwapOutMoreThanUserMaximum",
      msg: "Expect less from swap"
    }
  ]
};

// idl/jupiter-limit.json
var jupiter_limit_default = {
  version: "0.1.0",
  name: "limit_order",
  instructions: [
    {
      name: "initializeOrder",
      accounts: [
        {
          name: "base",
          isMut: false,
          isSigner: true
        },
        {
          name: "maker",
          isMut: true,
          isSigner: true
        },
        {
          name: "order",
          isMut: true,
          isSigner: false
        },
        {
          name: "reserve",
          isMut: true,
          isSigner: false,
          docs: [
            "CHECK"
          ]
        },
        {
          name: "makerInputAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "makerOutputAccount",
          isMut: false,
          isSigner: false
        },
        {
          name: "referral",
          isMut: false,
          isSigner: false,
          isOptional: true
        },
        {
          name: "outputMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "makingAmount",
          type: "u64"
        },
        {
          name: "takingAmount",
          type: "u64"
        },
        {
          name: "expiredAt",
          type: {
            option: "i64"
          }
        }
      ]
    },
    {
      name: "fillOrder",
      accounts: [
        {
          name: "order",
          isMut: true,
          isSigner: false
        },
        {
          name: "reserve",
          isMut: true,
          isSigner: false
        },
        {
          name: "maker",
          isMut: true,
          isSigner: false
        },
        {
          name: "taker",
          isMut: false,
          isSigner: true
        },
        {
          name: "takerOutputAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "makerOutputAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "takerInputAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "feeAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "programFeeAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "referral",
          isMut: true,
          isSigner: false,
          isOptional: true
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "makingAmount",
          type: "u64"
        },
        {
          name: "maxTakingAmount",
          type: "u64"
        }
      ]
    },
    {
      name: "preFlashFillOrder",
      accounts: [
        {
          name: "order",
          isMut: true,
          isSigner: false
        },
        {
          name: "reserve",
          isMut: true,
          isSigner: false
        },
        {
          name: "taker",
          isMut: false,
          isSigner: true
        },
        {
          name: "takerOutputAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "inputMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "inputMintTokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "instruction",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "makingAmount",
          type: "u64"
        }
      ]
    },
    {
      name: "flashFillOrder",
      accounts: [
        {
          name: "order",
          isMut: true,
          isSigner: false
        },
        {
          name: "reserve",
          isMut: true,
          isSigner: false
        },
        {
          name: "maker",
          isMut: true,
          isSigner: false
        },
        {
          name: "taker",
          isMut: false,
          isSigner: true
        },
        {
          name: "makerOutputAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "takerInputAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "feeAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "programFeeAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "referral",
          isMut: true,
          isSigner: false,
          isOptional: true
        },
        {
          name: "inputMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "inputMintTokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "outputMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "outputMintTokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "maxTakingAmount",
          type: "u64"
        }
      ]
    },
    {
      name: "cancelOrder",
      accounts: [
        {
          name: "order",
          isMut: true,
          isSigner: false
        },
        {
          name: "reserve",
          isMut: true,
          isSigner: false,
          docs: [
            "CHECK"
          ]
        },
        {
          name: "maker",
          isMut: true,
          isSigner: true
        },
        {
          name: "makerInputAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "CHECK, it is not important if it is sol input mint"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "inputMint",
          isMut: false,
          isSigner: false,
          isOptional: true
        }
      ],
      args: []
    },
    {
      name: "cancelExpiredOrder",
      accounts: [
        {
          name: "order",
          isMut: true,
          isSigner: false
        },
        {
          name: "reserve",
          isMut: true,
          isSigner: false,
          docs: [
            "CHECK"
          ]
        },
        {
          name: "maker",
          isMut: true,
          isSigner: false
        },
        {
          name: "makerInputAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "CHECK, it is not important if it is sol input mint"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "inputMint",
          isMut: false,
          isSigner: false,
          isOptional: true
        }
      ],
      args: []
    },
    {
      name: "withdrawFee",
      accounts: [
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "feeAuthority",
          isMut: false,
          isSigner: false,
          docs: [
            "CHECK"
          ]
        },
        {
          name: "programFeeAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "adminTokenAcocunt",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "amount",
          type: "u64"
        }
      ]
    },
    {
      name: "initFee",
      accounts: [
        {
          name: "keeper",
          isMut: true,
          isSigner: true
        },
        {
          name: "feeAuthority",
          isMut: true,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "makerFee",
          type: "u64"
        },
        {
          name: "makerStableFee",
          type: "u64"
        },
        {
          name: "takerFee",
          type: "u64"
        },
        {
          name: "takerStableFee",
          type: "u64"
        }
      ]
    },
    {
      name: "updateFee",
      accounts: [
        {
          name: "keeper",
          isMut: true,
          isSigner: true
        },
        {
          name: "feeAuthority",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "makerFee",
          type: "u64"
        },
        {
          name: "makerStableFee",
          type: "u64"
        },
        {
          name: "takerFee",
          type: "u64"
        },
        {
          name: "takerStableFee",
          type: "u64"
        }
      ]
    }
  ],
  accounts: [
    {
      name: "Fee",
      type: {
        kind: "struct",
        fields: [
          {
            name: "makerFee",
            type: "u64"
          },
          {
            name: "makerStableFee",
            type: "u64"
          },
          {
            name: "takerFee",
            type: "u64"
          },
          {
            name: "takerStableFee",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "Order",
      type: {
        kind: "struct",
        fields: [
          {
            name: "maker",
            type: "publicKey"
          },
          {
            name: "inputMint",
            type: "publicKey"
          },
          {
            name: "outputMint",
            type: "publicKey"
          },
          {
            name: "waiting",
            type: "bool"
          },
          {
            name: "oriMakingAmount",
            type: "u64"
          },
          {
            name: "oriTakingAmount",
            type: "u64"
          },
          {
            name: "makingAmount",
            type: "u64"
          },
          {
            name: "takingAmount",
            type: "u64"
          },
          {
            name: "makerInputAccount",
            type: "publicKey"
          },
          {
            name: "makerOutputAccount",
            type: "publicKey"
          },
          {
            name: "reserve",
            type: "publicKey"
          },
          {
            name: "borrowMakingAmount",
            type: "u64"
          },
          {
            name: "expiredAt",
            type: {
              option: "i64"
            }
          },
          {
            name: "base",
            type: "publicKey"
          },
          {
            name: "referral",
            type: {
              option: "publicKey"
            }
          }
        ]
      }
    }
  ],
  events: [
    {
      name: "TradeEvent",
      fields: [
        {
          name: "orderKey",
          type: "publicKey",
          index: false
        },
        {
          name: "taker",
          type: "publicKey",
          index: false
        },
        {
          name: "remainingInAmount",
          type: "u64",
          index: false
        },
        {
          name: "remainingOutAmount",
          type: "u64",
          index: false
        },
        {
          name: "inAmount",
          type: "u64",
          index: false
        },
        {
          name: "outAmount",
          type: "u64",
          index: false
        }
      ]
    },
    {
      name: "CancelOrderEvent",
      fields: [
        {
          name: "orderKey",
          type: "publicKey",
          index: false
        }
      ]
    },
    {
      name: "CreateOrderEvent",
      fields: [
        {
          name: "orderKey",
          type: "publicKey",
          index: false
        },
        {
          name: "maker",
          type: "publicKey",
          index: false
        },
        {
          name: "inputMint",
          type: "publicKey",
          index: false
        },
        {
          name: "outputMint",
          type: "publicKey",
          index: false
        },
        {
          name: "inAmount",
          type: "u64",
          index: false
        },
        {
          name: "outAmount",
          type: "u64",
          index: false
        },
        {
          name: "expiredAt",
          type: {
            option: "i64"
          },
          index: false
        }
      ]
    }
  ],
  errors: [
    {
      code: 6e3,
      name: "InvalidMakingAmount"
    },
    {
      code: 6001,
      name: "InvalidTakingAmount"
    },
    {
      code: 6002,
      name: "InvalidMaxTakingAmount"
    },
    {
      code: 6003,
      name: "InvalidCalculation"
    },
    {
      code: 6004,
      name: "InvalidInputAccount"
    },
    {
      code: 6005,
      name: "InvalidOutputAccount"
    },
    {
      code: 6006,
      name: "InvalidPair"
    },
    {
      code: 6007,
      name: "MissingReferral"
    },
    {
      code: 6008,
      name: "OrderExpired"
    },
    {
      code: 6009,
      name: "OrderNotExpired"
    },
    {
      code: 6010,
      name: "InvalidKeeper"
    },
    {
      code: 6011,
      name: "MathOverflow"
    },
    {
      code: 6012,
      name: "ProgramMismatch"
    },
    {
      code: 6013,
      name: "UnknownInstruction"
    },
    {
      code: 6014,
      name: "MissingRepayInstructions"
    },
    {
      code: 6015,
      name: "InvalidOrder"
    },
    {
      code: 6016,
      name: "InvalidBorrowMakingAmount"
    }
  ]
};

// idl/okx-dex.json
var okx_dex_default = {
  address: "6m2CDdhRgxpH4WjvdzxAYbGxwdGUz5MziiL5jek2kBma",
  metadata: { name: "dex_solana", version: "0.1.0", spec: "0.1.0", description: "Created with Anchor" },
  instructions: [
    {
      name: "claim",
      discriminator: [62, 198, 214, 193, 213, 159, 108, 210],
      accounts: [
        {
          name: "signer",
          writable: true,
          signer: true,
          address: "CjoV5B96reuCfPh2rRK11G1QptG97jZdyZArTn3EN1Mj"
        },
        { name: "receiver", writable: true },
        { name: "source_token_account", writable: true, optional: true },
        { name: "destination_token_account", writable: true, optional: true },
        { name: "sa_authority", writable: true, address: "HV1KXxWFaSeriyFvXyx48FqG9BoFbfinB8njCJonqP7K" },
        { name: "token_mint", optional: true },
        { name: "token_program", optional: true },
        { name: "system_program", address: "11111111111111111111111111111111" },
        {
          name: "associated_token_program",
          optional: true,
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        }
      ],
      args: []
    },
    {
      name: "commission_sol_proxy_swap",
      discriminator: [30, 33, 208, 91, 31, 157, 37, 18],
      accounts: [
        { name: "payer", writable: true, signer: true },
        { name: "source_token_account", writable: true },
        { name: "destination_token_account", writable: true },
        { name: "source_mint" },
        { name: "destination_mint" },
        { name: "commission_account", writable: true },
        {
          name: "sa_authority",
          optional: true,
          pda: { seeds: [{ kind: "const", value: [111, 107, 120, 95, 115, 97] }] }
        },
        { name: "source_token_sa", writable: true, optional: true },
        { name: "destination_token_sa", writable: true, optional: true },
        { name: "source_token_program", optional: true },
        { name: "destination_token_program", optional: true },
        {
          name: "associated_token_program",
          optional: true,
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        { name: "system_program", optional: true, address: "11111111111111111111111111111111" }
      ],
      args: [
        { name: "data", type: { defined: { name: "SwapArgs" } } },
        { name: "commission_rate", type: "u16" },
        { name: "commission_direction", type: "bool" },
        { name: "order_id", type: "u64" }
      ]
    },
    {
      name: "commission_sol_swap",
      discriminator: [81, 128, 134, 73, 114, 73, 45, 94],
      accounts: [
        { name: "payer", signer: true },
        { name: "source_token_account", writable: true },
        { name: "destination_token_account", writable: true },
        { name: "source_mint" },
        { name: "destination_mint" },
        { name: "commission_account", writable: true },
        { name: "system_program", address: "11111111111111111111111111111111" }
      ],
      args: [
        { name: "data", type: { defined: { name: "CommissionSwapArgs" } } },
        { name: "order_id", type: "u64" }
      ]
    },
    {
      name: "commission_spl_proxy_swap",
      discriminator: [96, 67, 12, 151, 129, 164, 18, 71],
      accounts: [
        { name: "payer", writable: true, signer: true },
        { name: "source_token_account", writable: true },
        { name: "destination_token_account", writable: true },
        { name: "source_mint" },
        { name: "destination_mint" },
        { name: "commission_token_account", writable: true },
        {
          name: "sa_authority",
          optional: true,
          pda: { seeds: [{ kind: "const", value: [111, 107, 120, 95, 115, 97] }] }
        },
        { name: "source_token_sa", writable: true, optional: true },
        { name: "destination_token_sa", writable: true, optional: true },
        { name: "source_token_program", optional: true },
        { name: "destination_token_program", optional: true },
        {
          name: "associated_token_program",
          optional: true,
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        { name: "system_program", optional: true, address: "11111111111111111111111111111111" }
      ],
      args: [
        { name: "data", type: { defined: { name: "SwapArgs" } } },
        { name: "commission_rate", type: "u16" },
        { name: "commission_direction", type: "bool" },
        { name: "order_id", type: "u64" }
      ]
    },
    {
      name: "commission_spl_swap",
      discriminator: [235, 71, 211, 196, 114, 199, 143, 92],
      accounts: [
        { name: "payer", signer: true },
        { name: "source_token_account", writable: true },
        { name: "destination_token_account", writable: true },
        { name: "source_mint" },
        { name: "destination_mint" },
        { name: "commission_token_account", writable: true },
        { name: "token_program" }
      ],
      args: [
        { name: "data", type: { defined: { name: "CommissionSwapArgs" } } },
        { name: "order_id", type: "u64" }
      ]
    },
    {
      name: "commission_wrap_unwrap",
      discriminator: [12, 73, 156, 71, 233, 172, 189, 197],
      accounts: [
        { name: "payer", writable: true, signer: true },
        { name: "payer_wsol_account", writable: true },
        { name: "wsol_mint", address: "So11111111111111111111111111111111111111112" },
        {
          name: "temp_wsol_account",
          writable: true,
          optional: true,
          pda: {
            seeds: [
              { kind: "const", value: [116, 101, 109, 112, 95, 119, 115, 111, 108] },
              { kind: "account", path: "payer" }
            ]
          }
        },
        { name: "commission_sol_account", writable: true },
        { name: "commission_wsol_account", writable: true },
        { name: "system_program", address: "11111111111111111111111111111111" },
        { name: "token_program" }
      ],
      args: [
        { name: "data", type: { defined: { name: "CommissionWrapUnwrapArgs" } } },
        { name: "order_id", type: "u64" }
      ]
    },
    {
      name: "create_token_account",
      discriminator: [147, 241, 123, 100, 244, 132, 174, 118],
      accounts: [
        { name: "payer", writable: true, signer: true },
        { name: "owner" },
        {
          name: "token_account",
          writable: true,
          pda: {
            seeds: [
              { kind: "account", path: "token_mint" },
              { kind: "account", path: "owner" }
            ]
          }
        },
        { name: "token_mint", address: "So11111111111111111111111111111111111111112" },
        { name: "token_program", address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" },
        { name: "system_program", address: "11111111111111111111111111111111" }
      ],
      args: [{ name: "bump", type: "u8" }]
    },
    {
      name: "create_token_account_with_seed",
      discriminator: [125, 191, 239, 140, 66, 8, 9, 228],
      accounts: [
        { name: "payer", writable: true, signer: true },
        { name: "owner" },
        {
          name: "token_account",
          writable: true,
          pda: {
            seeds: [
              { kind: "account", path: "token_mint" },
              { kind: "account", path: "owner" },
              { kind: "arg", path: "seed" }
            ]
          }
        },
        { name: "token_mint", address: "So11111111111111111111111111111111111111112" },
        { name: "token_program", address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" },
        { name: "system_program", address: "11111111111111111111111111111111" }
      ],
      args: [
        { name: "bump", type: "u8" },
        { name: "seed", type: "u32" }
      ]
    },
    {
      name: "platform_fee_sol_proxy_swap_v2",
      discriminator: [69, 200, 254, 247, 40, 52, 118, 202],
      accounts: [
        { name: "payer", writable: true, signer: true },
        { name: "source_token_account", writable: true },
        { name: "destination_token_account", writable: true },
        { name: "source_mint" },
        { name: "destination_mint" },
        { name: "commission_account", writable: true },
        {
          name: "sa_authority",
          optional: true,
          pda: { seeds: [{ kind: "const", value: [111, 107, 120, 95, 115, 97] }] }
        },
        { name: "source_token_sa", writable: true, optional: true },
        { name: "destination_token_sa", writable: true, optional: true },
        { name: "source_token_program", optional: true },
        { name: "destination_token_program", optional: true },
        {
          name: "associated_token_program",
          optional: true,
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        { name: "system_program", optional: true, address: "11111111111111111111111111111111" }
      ],
      args: [
        { name: "args", type: { defined: { name: "SwapArgs" } } },
        { name: "commission_info", type: "u32" },
        { name: "platform_fee_rate", type: "u32" },
        { name: "trim_rate", type: "u8" },
        { name: "order_id", type: "u64" }
      ]
    },
    {
      name: "platform_fee_sol_wrap_unwrap_v2",
      discriminator: [196, 172, 152, 92, 60, 186, 64, 227],
      accounts: [
        { name: "payer", writable: true, signer: true },
        { name: "payer_wsol_account", writable: true },
        { name: "wsol_mint", address: "So11111111111111111111111111111111111111112" },
        {
          name: "temp_wsol_account",
          writable: true,
          optional: true,
          pda: {
            seeds: [
              { kind: "const", value: [116, 101, 109, 112, 95, 119, 115, 111, 108] },
              { kind: "account", path: "payer" }
            ]
          }
        },
        { name: "commission_sol_account", writable: true },
        { name: "commission_wsol_account", writable: true },
        { name: "source_token_sa", writable: true, optional: true },
        { name: "destination_token_sa", writable: true, optional: true },
        { name: "system_program", address: "11111111111111111111111111111111" },
        { name: "token_program" }
      ],
      args: [
        { name: "args", type: { defined: { name: "PlatformFeeWrapUnwrapArgsV2" } } },
        { name: "order_id", type: "u64" }
      ]
    },
    {
      name: "platform_fee_spl_proxy_swap_v2",
      discriminator: [69, 164, 210, 89, 146, 214, 173, 67],
      accounts: [
        { name: "payer", writable: true, signer: true },
        { name: "source_token_account", writable: true },
        { name: "destination_token_account", writable: true },
        { name: "source_mint" },
        { name: "destination_mint" },
        { name: "commission_token_account", writable: true },
        {
          name: "sa_authority",
          optional: true,
          pda: { seeds: [{ kind: "const", value: [111, 107, 120, 95, 115, 97] }] }
        },
        { name: "source_token_sa", writable: true, optional: true },
        { name: "destination_token_sa", writable: true, optional: true },
        { name: "source_token_program", optional: true },
        { name: "destination_token_program", optional: true },
        {
          name: "associated_token_program",
          optional: true,
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        { name: "system_program", optional: true, address: "11111111111111111111111111111111" }
      ],
      args: [
        { name: "args", type: { defined: { name: "SwapArgs" } } },
        { name: "commission_info", type: "u32" },
        { name: "platform_fee_rate", type: "u32" },
        { name: "trim_rate", type: "u8" },
        { name: "order_id", type: "u64" }
      ]
    },
    {
      name: "proxy_swap",
      discriminator: [19, 44, 130, 148, 72, 56, 44, 238],
      accounts: [
        { name: "payer", writable: true, signer: true },
        { name: "source_token_account", writable: true },
        { name: "destination_token_account", writable: true },
        { name: "source_mint" },
        { name: "destination_mint" },
        {
          name: "sa_authority",
          optional: true,
          pda: { seeds: [{ kind: "const", value: [111, 107, 120, 95, 115, 97] }] }
        },
        { name: "source_token_sa", writable: true, optional: true },
        { name: "destination_token_sa", writable: true, optional: true },
        { name: "source_token_program", optional: true },
        { name: "destination_token_program", optional: true },
        {
          name: "associated_token_program",
          optional: true,
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        { name: "system_program", optional: true, address: "11111111111111111111111111111111" }
      ],
      args: [
        { name: "data", type: { defined: { name: "SwapArgs" } } },
        { name: "order_id", type: "u64" }
      ]
    },
    {
      name: "swap",
      discriminator: [248, 198, 158, 145, 225, 117, 135, 200],
      accounts: [
        { name: "payer", signer: true },
        { name: "source_token_account", writable: true },
        { name: "destination_token_account", writable: true },
        { name: "source_mint" },
        { name: "destination_mint" }
      ],
      args: [
        { name: "data", type: { defined: { name: "SwapArgs" } } },
        { name: "order_id", type: "u64" }
      ]
    },
    {
      name: "swap_tob_v3",
      discriminator: [14, 191, 44, 246, 142, 225, 224, 157],
      accounts: [
        { name: "payer", writable: true, signer: true },
        { name: "source_token_account", writable: true },
        { name: "destination_token_account", writable: true },
        { name: "source_mint" },
        { name: "destination_mint" },
        { name: "commission_account", writable: true, optional: true },
        { name: "platform_fee_account", writable: true, optional: true },
        { name: "sa_authority", writable: true, optional: true },
        { name: "source_token_sa", writable: true, optional: true },
        { name: "destination_token_sa", writable: true, optional: true },
        { name: "source_token_program", optional: true },
        { name: "destination_token_program", optional: true },
        {
          name: "associated_token_program",
          optional: true,
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        { name: "system_program", optional: true, address: "11111111111111111111111111111111" }
      ],
      args: [
        { name: "args", type: { defined: { name: "SwapArgs" } } },
        { name: "commission_info", type: "u32" },
        { name: "trim_rate", type: "u8" },
        { name: "platform_fee_rate", type: "u16" },
        { name: "order_id", type: "u64" }
      ]
    },
    {
      name: "swap_tob_v3_enhanced",
      discriminator: [236, 71, 155, 68, 198, 98, 14, 118],
      accounts: [
        { name: "payer", writable: true, signer: true },
        { name: "source_token_account", writable: true },
        { name: "destination_token_account", writable: true },
        { name: "source_mint" },
        { name: "destination_mint" },
        { name: "commission_account", writable: true, optional: true },
        { name: "platform_fee_account", writable: true, optional: true },
        { name: "sa_authority", writable: true, optional: true },
        { name: "source_token_sa", writable: true, optional: true },
        { name: "destination_token_sa", writable: true, optional: true },
        { name: "source_token_program", optional: true },
        { name: "destination_token_program", optional: true },
        {
          name: "associated_token_program",
          optional: true,
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        { name: "system_program", optional: true, address: "11111111111111111111111111111111" }
      ],
      args: [
        { name: "args", type: { defined: { name: "SwapArgs" } } },
        { name: "commission_info", type: "u32" },
        { name: "trim_rate", type: "u8" },
        { name: "charge_rate", type: "u16" },
        { name: "platform_fee_rate", type: "u16" },
        { name: "order_id", type: "u64" }
      ]
    },
    {
      name: "swap_tob_v3_with_receiver",
      docs: [
        "Swap ToB with optional specified receiver",
        "- For normal token swaps: sol_receiver should be None",
        "- For swap to SOL with custom receiver: sol_receiver should be Some and acc_close_flag must be true"
      ],
      discriminator: [63, 114, 246, 131, 51, 2, 247, 29],
      accounts: [
        { name: "payer", writable: true, signer: true },
        { name: "source_token_account", writable: true },
        { name: "destination_token_account", writable: true },
        { name: "source_mint" },
        { name: "destination_mint" },
        { name: "commission_account", writable: true, optional: true },
        { name: "platform_fee_account", writable: true, optional: true },
        { name: "sa_authority", writable: true, optional: true },
        { name: "source_token_sa", writable: true, optional: true },
        { name: "destination_token_sa", writable: true, optional: true },
        { name: "source_token_program", optional: true },
        { name: "destination_token_program", optional: true },
        {
          name: "associated_token_program",
          optional: true,
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        { name: "system_program", optional: true, address: "11111111111111111111111111111111" },
        {
          name: "sol_receiver",
          docs: [
            "Optional SOL receiver account",
            "- None: normal swap or SOL stays with payer",
            "- Some: SOL receiver when converting wSOL -> SOL"
          ],
          writable: true,
          optional: true
        }
      ],
      args: [
        { name: "args", type: { defined: { name: "SwapArgs" } } },
        { name: "commission_info", type: "u32" },
        { name: "trim_rate", type: "u8" },
        { name: "platform_fee_rate", type: "u16" },
        { name: "order_id", type: "u64" }
      ]
    },
    {
      name: "swap_v3",
      discriminator: [240, 224, 38, 33, 176, 31, 241, 175],
      accounts: [
        { name: "payer", writable: true, signer: true },
        { name: "source_token_account", writable: true },
        { name: "destination_token_account", writable: true },
        { name: "source_mint" },
        { name: "destination_mint" },
        { name: "commission_account", writable: true, optional: true },
        { name: "platform_fee_account", writable: true, optional: true },
        { name: "sa_authority", writable: true, optional: true },
        { name: "source_token_sa", writable: true, optional: true },
        { name: "destination_token_sa", writable: true, optional: true },
        { name: "source_token_program", optional: true },
        { name: "destination_token_program", optional: true },
        {
          name: "associated_token_program",
          optional: true,
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        { name: "system_program", optional: true, address: "11111111111111111111111111111111" }
      ],
      args: [
        { name: "args", type: { defined: { name: "SwapArgs" } } },
        { name: "commission_info", type: "u32" },
        { name: "platform_fee_rate", type: "u16" },
        { name: "order_id", type: "u64" }
      ]
    },
    {
      name: "wrap_unwrap_v3",
      discriminator: [180, 178, 191, 54, 70, 8, 13, 224],
      accounts: [
        { name: "payer", writable: true, signer: true },
        { name: "payer_wsol_account", writable: true },
        { name: "wsol_mint", address: "So11111111111111111111111111111111111111112" },
        {
          name: "temp_wsol_account",
          writable: true,
          optional: true,
          pda: {
            seeds: [
              { kind: "const", value: [116, 101, 109, 112, 95, 119, 115, 111, 108] },
              { kind: "account", path: "payer" }
            ]
          }
        },
        { name: "commission_account", writable: true, optional: true },
        { name: "platform_fee_account", writable: true, optional: true },
        {
          name: "authority_pda",
          docs: ["Used for signing fee transfers from authority_pda (SOL) or wsol_sa (WSOL)"],
          writable: true,
          optional: true
        },
        {
          name: "wsol_sa",
          docs: ["This is the authority_pda's associated token account for WSOL"],
          writable: true,
          optional: true
        },
        { name: "token_program" },
        { name: "system_program", address: "11111111111111111111111111111111" }
      ],
      args: [{ name: "args", type: { defined: { name: "PlatformFeeWrapUnwrapArgs" } } }]
    }
  ],
  events: [
    { name: "AddResolverEvent", discriminator: [173, 137, 29, 251, 195, 58, 115, 71] },
    { name: "CancelOrderEvent", discriminator: [174, 66, 141, 17, 4, 224, 162, 77] },
    { name: "FillOrderEvent", discriminator: [37, 51, 197, 130, 53, 15, 99, 18] },
    { name: "InitGlobalConfigEvent", discriminator: [195, 252, 133, 149, 47, 126, 107, 231] },
    { name: "PauseTradingEvent", discriminator: [85, 23, 87, 137, 206, 65, 208, 58] },
    { name: "PlaceOrderEvent", discriminator: [65, 191, 25, 91, 27, 252, 192, 40] },
    { name: "RefundEvent", discriminator: [176, 159, 218, 59, 94, 213, 129, 218] },
    { name: "RemoveResolverEvent", discriminator: [57, 138, 125, 122, 100, 83, 156, 37] },
    { name: "SetAdminEvent", discriminator: [240, 117, 204, 254, 89, 150, 132, 94] },
    { name: "SetFeeMultiplierEvent", discriminator: [197, 91, 90, 165, 244, 201, 13, 154] },
    { name: "SetTradeFeeEvent", discriminator: [8, 97, 163, 68, 79, 99, 134, 229] },
    { name: "SwapEvent", discriminator: [64, 198, 205, 232, 38, 8, 113, 226] },
    { name: "UpdateOrderEvent", discriminator: [55, 24, 47, 240, 105, 245, 30, 135] }
  ],
  errors: [
    { code: 6e3, name: "TooManyHops", msg: "Too many hops" },
    { code: 6001, name: "MinReturnNotReached", msg: "Min return not reached" },
    { code: 6002, name: "AmountInMustBeGreaterThanZero", msg: "amount_in must be greater than 0" },
    { code: 6003, name: "MinReturnMustBeGreaterThanZero", msg: "min_return must be greater than 0" },
    { code: 6004, name: "InvalidExpectAmountOut", msg: "invalid expect amount out" },
    {
      code: 6005,
      name: "AmountsAndRoutesMustHaveTheSameLength",
      msg: "amounts and routes must have the same length"
    },
    {
      code: 6006,
      name: "TotalAmountsMustBeEqualToAmountIn",
      msg: "total_amounts must be equal to amount_in"
    },
    {
      code: 6007,
      name: "DexesAndWeightsMustHaveTheSameLength",
      msg: "dexes and weights must have the same length"
    },
    { code: 6008, name: "WeightsMustSumTo100", msg: "weights must sum to 100" },
    { code: 6009, name: "InvalidSourceTokenAccount", msg: "Invalid source token account" },
    { code: 6010, name: "InvalidDestinationTokenAccount", msg: "Invalid destination token account" },
    { code: 6011, name: "InvalidTokenAccount", msg: "Invalid token account" },
    { code: 6012, name: "InvalidCommissionRate", msg: "Invalid commission rate" },
    { code: 6013, name: "InvalidTrimRate", msg: "Invalid trim rate" },
    { code: 6014, name: "InvalidCommissionTokenAccount", msg: "Invalid commission token account" },
    {
      code: 6015,
      name: "InvalidCommissionTemporaryTokenAccount",
      msg: "Invalid commission temporary token account"
    },
    { code: 6016, name: "InvalidAccountsLength", msg: "Invalid accounts length" },
    { code: 6017, name: "InvalidHopAccounts", msg: "Invalid hop accounts" },
    { code: 6018, name: "InvalidHopFromAccount", msg: "Invalid hop from account" },
    { code: 6019, name: "SwapAuthorityIsNotSigner", msg: "Swap authority is not signer" },
    { code: 6020, name: "InvalidAuthorityPda", msg: "Invalid authority pda" },
    { code: 6021, name: "InvalidSwapAuthority", msg: "Invalid swap authority" },
    { code: 6022, name: "InvalidProgramId", msg: "Invalid program id" },
    { code: 6023, name: "InvalidPool", msg: "Invalid pool" },
    { code: 6024, name: "InvalidTokenMint", msg: "Invalid token mint" },
    { code: 6025, name: "CalculationError", msg: "Calculation error" },
    { code: 6026, name: "InvalidSanctumLstStateListData", msg: "Invalid sanctum lst state list data" },
    { code: 6027, name: "InvalidSanctumLstStateListIndex", msg: "Invalid sanctum lst state list index" },
    { code: 6028, name: "InvalidSanctumSwapAccounts", msg: "Invalid sanctum swap accounts" },
    { code: 6029, name: "InvalidSwapAuthorityAccounts", msg: "Invalid swap authority account" },
    { code: 6030, name: "InvalidBridgeSeed", msg: "Bridge Seed Error" },
    { code: 6031, name: "InvalidBundleInput", msg: "Invalid accounts and instruction length" },
    { code: 6032, name: "MissingSaAccount", msg: "SA is required" },
    { code: 6033, name: "InvalidPlatformFeeRate", msg: "Invalid platform fee rate" },
    { code: 6034, name: "AmountOutMustBeGreaterThanZero", msg: "Amount out must be greater than 0" },
    { code: 6035, name: "InvalidDampingTerm", msg: "Invalid DampingTerm" },
    { code: 6036, name: "InvalidMint", msg: "Invalid mint" },
    { code: 6037, name: "InvalidPlatformFeeAmount", msg: "Invalid platform fee amount" },
    { code: 6038, name: "InvalidFeeTokenAccount", msg: "Invalid fee token account" },
    { code: 6039, name: "InvalidSaAuthority", msg: "Invalid sa authority" },
    { code: 6040, name: "CommissionAccountIsNone", msg: "Commission account is none" },
    { code: 6041, name: "PlatformFeeAccountIsNone", msg: "Platform fee account is none" },
    { code: 6042, name: "TrimAccountIsNone", msg: "Trim account is none" },
    { code: 6043, name: "InvalidFeeAccount", msg: "Invalid fee account" },
    { code: 6044, name: "InvalidSourceTokenSa", msg: "Invalid source token sa" },
    { code: 6045, name: "SaAuthorityIsNone", msg: "Sa authority is none" },
    { code: 6046, name: "SourceTokenSaIsNone", msg: "Source token sa is none" },
    { code: 6047, name: "SourceTokenProgramIsNone", msg: "Source token program is none" },
    { code: 6048, name: "DestinationTokenSaIsNone", msg: "Destination token sa is none" },
    { code: 6049, name: "DestinationTokenProgramIsNone", msg: "Destination token program is none" },
    { code: 6050, name: "ResultMustBeGreaterThanZero", msg: "Calculation result must be greater than zero" },
    { code: 6051, name: "InvalidAccountData", msg: "Invalid account data" },
    { code: 6052, name: "InvalidRfqParameters", msg: "Invalid RFQ parameters" },
    { code: 6053, name: "TobAuthorityPdaRequired", msg: "TOB mode requires authority PDA" },
    { code: 6054, name: "TobWsolSaRequired", msg: "TOB mode with WSOL fees requires wsol_sa account" },
    { code: 6055, name: "InvalidWsolSa", msg: "Invalid WSOL SA account" },
    { code: 6056, name: "InvalidTrimAccount", msg: "Invalid trim account" },
    { code: 6057, name: "InvalidCommissionAccount", msg: "Invalid commission account" },
    { code: 6058, name: "InvalidPlatformFeeAccount", msg: "Invalid platform fee account" },
    { code: 6059, name: "InvalidActualAmountIn", msg: "Invalid actual amount in" },
    { code: 6060, name: "UnexpectedSaTokenAccount", msg: "Unexpected SA token account in CPI" },
    { code: 6061, name: "InvalidSourceTokenSaMint", msg: "Invalid source token sa mint" },
    { code: 6062, name: "InvalidDestinationTokenSaMint", msg: "Invalid destination token sa mint" },
    { code: 6063, name: "AdapterAbort", msg: "Adapter abort" },
    { code: 6064, name: "InsufficientFunds", msg: "Insufficient funds" },
    { code: 6065, name: "InvalidDiffLamports", msg: "Invalid diff lamports" },
    { code: 6066, name: "InvalidTokenProgram", msg: "Invalid token program" },
    { code: 6067, name: "InvalidSigner", msg: "Invalid signer" },
    { code: 6068, name: "InvalidAssociatedTokenProgram", msg: "Invalid associated token program" },
    { code: 6069, name: "SolReceiverMustBeSystemAccount", msg: "SOL receiver must be a system account" },
    { code: 6070, name: "InsufficientBalance", msg: "Insufficient balance for transfer" },
    {
      code: 6071,
      name: "SolReceiverRequiresAccCloseFlag",
      msg: "SOL receiver requires acc_close_flag to be true"
    },
    {
      code: 6072,
      name: "DestinationMustBeWsolForSolReceiver",
      msg: "Destination must be wSOL when sol_receiver is specified"
    },
    { code: 6073, name: "InvalidGoonfiParameters", msg: "Invalid Goonfi parameters" },
    { code: 6074, name: "InvalidTrimAmount", msg: "Invalid trim amount" }
  ],
  types: [
    {
      name: "AddResolverEvent",
      type: { kind: "struct", fields: [{ name: "resolver", type: "pubkey" }] }
    },
    {
      name: "CancelOrderEvent",
      type: {
        kind: "struct",
        fields: [
          { name: "order_id", type: "u64" },
          { name: "payer", type: "pubkey" },
          { name: "maker", type: "pubkey" },
          { name: "update_ts", type: "u64" }
        ]
      }
    },
    {
      name: "CommissionSwapArgs",
      type: {
        kind: "struct",
        fields: [
          { name: "amount_in", type: "u64" },
          { name: "expect_amount_out", type: "u64" },
          { name: "min_return", type: "u64" },
          { name: "amounts", type: { vec: "u64" } },
          { name: "routes", type: { vec: { vec: { defined: { name: "Route" } } } } },
          { name: "commission_rate", type: "u16" },
          { name: "commission_direction", type: "bool" }
        ]
      }
    },
    {
      name: "CommissionWrapUnwrapArgs",
      type: {
        kind: "struct",
        fields: [
          { name: "amount_in", type: "u64" },
          { name: "wrap_direction", type: "bool" },
          { name: "commission_rate", type: "u16" },
          { name: "commission_direction", type: "bool" }
        ]
      }
    },
    {
      name: "Dex",
      type: {
        kind: "enum",
        variants: [
          { name: "SplTokenSwap" },
          { name: "StableSwap" },
          { name: "Whirlpool" },
          { name: "MeteoraDynamicpool" },
          { name: "RaydiumSwap" },
          { name: "RaydiumStableSwap" },
          { name: "RaydiumClmmSwap" },
          { name: "AldrinExchangeV1" },
          { name: "AldrinExchangeV2" },
          { name: "LifinityV1" },
          { name: "LifinityV2" },
          { name: "RaydiumClmmSwapV2" },
          { name: "FluxBeam" },
          { name: "MeteoraDlmm" },
          { name: "RaydiumCpmmSwap" },
          { name: "OpenBookV2" },
          { name: "WhirlpoolV2" },
          { name: "Phoenix" },
          { name: "ObricV2" },
          { name: "SanctumAddLiq" },
          { name: "SanctumRemoveLiq" },
          { name: "SanctumNonWsolSwap" },
          { name: "SanctumWsolSwap" },
          { name: "PumpfunBuy" },
          { name: "PumpfunSell" },
          { name: "StabbleSwap" },
          { name: "SanctumRouter" },
          { name: "MeteoraVaultDeposit" },
          { name: "MeteoraVaultWithdraw" },
          { name: "Saros" },
          { name: "MeteoraLst" },
          { name: "Solfi" },
          { name: "QualiaSwap" },
          { name: "Zerofi" },
          { name: "PumpfunammBuy" },
          { name: "PumpfunammSell" },
          { name: "Virtuals" },
          { name: "VertigoBuy" },
          { name: "VertigoSell" },
          { name: "PerpetualsAddLiq" },
          { name: "PerpetualsRemoveLiq" },
          { name: "PerpetualsSwap" },
          { name: "RaydiumLaunchpad" },
          { name: "LetsBonkFun" },
          { name: "Woofi" },
          { name: "MeteoraDbc" },
          { name: "MeteoraDlmmSwap2" },
          { name: "MeteoraDAMMV2" },
          { name: "Gavel" },
          { name: "BoopfunBuy" },
          { name: "BoopfunSell" },
          { name: "MeteoraDbc2" },
          { name: "GooseFX" },
          { name: "Dooar" },
          { name: "Numeraire" },
          { name: "SaberDecimalWrapperDeposit" },
          { name: "SaberDecimalWrapperWithdraw" },
          { name: "SarosDlmm" },
          { name: "OneDexSwap" },
          { name: "Manifest" },
          { name: "ByrealClmm" },
          { name: "PancakeSwapV3Swap" },
          { name: "PancakeSwapV3SwapV2" },
          { name: "Tessera" },
          { name: "SolRfq" },
          { name: "PumpfunBuy2" },
          { name: "PumpfunammBuy2" },
          { name: "Humidifi" },
          { name: "HeavenBuy" },
          { name: "HeavenSell" },
          { name: "SolfiV2" },
          { name: "PumpfunBuy3" },
          { name: "PumpfunSell3" },
          { name: "PumpfunammBuy3" },
          { name: "PumpfunammSell3" },
          { name: "Goonfi" },
          { name: "MoonitBuy" },
          { name: "MoonitSell" },
          { name: "RaydiumSwapV2" },
          { name: "Swaap" },
          {
            name: "SugarMoneyBuy",
            fields: [
              { name: "bonding_curve_bump", type: "u8" },
              { name: "bonding_curve_sol_associated_account_bump", type: "u8" }
            ]
          },
          {
            name: "SugarMoneySell",
            fields: [
              { name: "bonding_curve_bump", type: "u8" },
              { name: "bonding_curve_sol_associated_account_bump", type: "u8" }
            ]
          },
          { name: "MeteoraDAMMV2Swap2" }
        ]
      }
    },
    {
      name: "FillOrderEvent",
      type: {
        kind: "struct",
        fields: [
          { name: "order_id", type: "u64" },
          { name: "payer", type: "pubkey" },
          { name: "maker", type: "pubkey" },
          { name: "input_token_mint", type: "pubkey" },
          { name: "output_token_mint", type: "pubkey" },
          { name: "making_amount", type: "u64" },
          { name: "taking_amount", type: "u64" },
          { name: "update_ts", type: "u64" }
        ]
      }
    },
    {
      name: "InitGlobalConfigEvent",
      type: {
        kind: "struct",
        fields: [
          { name: "admin", type: "pubkey" },
          { name: "trade_fee", type: "u64" }
        ]
      }
    },
    { name: "PauseTradingEvent", type: { kind: "struct", fields: [{ name: "paused", type: "bool" }] } },
    {
      name: "PlaceOrderEvent",
      type: {
        kind: "struct",
        fields: [
          { name: "order_id", type: "u64" },
          { name: "maker", type: "pubkey" },
          { name: "input_token_mint", type: "pubkey" },
          { name: "output_token_mint", type: "pubkey" },
          { name: "making_amount", type: "u64" },
          { name: "expect_taking_amount", type: "u64" },
          { name: "min_return_amount", type: "u64" },
          { name: "create_ts", type: "u64" },
          { name: "deadline", type: "u64" },
          { name: "trade_fee", type: "u64" }
        ]
      }
    },
    {
      name: "PlatformFeeWrapUnwrapArgs",
      type: {
        kind: "struct",
        fields: [
          { name: "order_id", type: "u64" },
          { name: "amount_in", type: "u64" },
          { name: "commission_info", type: "u32" },
          { name: "platform_fee_rate", type: "u16" },
          { name: "tob", type: "bool" }
        ]
      }
    },
    {
      name: "PlatformFeeWrapUnwrapArgsV2",
      type: {
        kind: "struct",
        fields: [
          { name: "amount_in", type: "u64" },
          { name: "commission_info", type: "u32" },
          { name: "platform_fee_rate", type: "u32" }
        ]
      }
    },
    {
      name: "RefundEvent",
      type: {
        kind: "struct",
        fields: [
          { name: "order_id", type: "u64" },
          { name: "maker", type: "pubkey" },
          { name: "input_token_mint", type: "pubkey" },
          { name: "amount", type: "u64" }
        ]
      }
    },
    {
      name: "RemoveResolverEvent",
      type: { kind: "struct", fields: [{ name: "resolver", type: "pubkey" }] }
    },
    {
      name: "Route",
      type: {
        kind: "struct",
        fields: [
          { name: "dexes", type: { vec: { defined: { name: "Dex" } } } },
          { name: "weights", type: "bytes" }
        ]
      }
    },
    { name: "SetAdminEvent", type: { kind: "struct", fields: [{ name: "admin", type: "pubkey" }] } },
    {
      name: "SetFeeMultiplierEvent",
      type: { kind: "struct", fields: [{ name: "fee_multiplier", type: "u8" }] }
    },
    {
      name: "SetTradeFeeEvent",
      type: { kind: "struct", fields: [{ name: "trade_fee", type: "u64" }] }
    },
    {
      name: "SwapArgs",
      type: {
        kind: "struct",
        fields: [
          { name: "amount_in", type: "u64" },
          { name: "expect_amount_out", type: "u64" },
          { name: "min_return", type: "u64" },
          { name: "amounts", type: { vec: "u64" } },
          { name: "routes", type: { vec: { vec: { defined: { name: "Route" } } } } }
        ]
      }
    },
    {
      name: "SwapEvent",
      type: {
        kind: "struct",
        fields: [
          { name: "dex", type: { defined: { name: "Dex" } } },
          { name: "amount_in", type: "u64" },
          { name: "amount_out", type: "u64" }
        ]
      }
    },
    {
      name: "UpdateOrderEvent",
      type: {
        kind: "struct",
        fields: [
          { name: "order_id", type: "u64" },
          { name: "maker", type: "pubkey" },
          { name: "expect_taking_amount", type: "u64" },
          { name: "min_return_amount", type: "u64" },
          { name: "deadline", type: "u64" },
          { name: "update_ts", type: "u64" },
          { name: "increase_fee", type: "u64" }
        ]
      }
    }
  ],
  constants: [{ name: "SEED_SA", type: "bytes", value: "[111, 107, 120, 95, 115, 97]" }]
};

// idl/orca-whirlpools.json
var orca_whirlpools_default = {
  accounts: [
    {
      name: "WhirlpoolsConfigExtension",
      type: {
        fields: [
          {
            name: "whirlpoolsConfig",
            type: "publicKey"
          },
          {
            name: "configExtensionAuthority",
            type: "publicKey"
          },
          {
            name: "tokenBadgeAuthority",
            type: "publicKey"
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "WhirlpoolsConfig",
      type: {
        fields: [
          {
            name: "feeAuthority",
            type: "publicKey"
          },
          {
            name: "collectProtocolFeesAuthority",
            type: "publicKey"
          },
          {
            name: "rewardEmissionsSuperAuthority",
            type: "publicKey"
          },
          {
            name: "defaultProtocolFeeRate",
            type: "u16"
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "FeeTier",
      type: {
        fields: [
          {
            name: "whirlpoolsConfig",
            type: "publicKey"
          },
          {
            name: "tickSpacing",
            type: "u16"
          },
          {
            name: "defaultFeeRate",
            type: "u16"
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "PositionBundle",
      type: {
        fields: [
          {
            name: "positionBundleMint",
            type: "publicKey"
          },
          {
            name: "positionBitmap",
            type: {
              array: ["u8", 32]
            }
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "Position",
      type: {
        fields: [
          {
            name: "whirlpool",
            type: "publicKey"
          },
          {
            name: "positionMint",
            type: "publicKey"
          },
          {
            name: "liquidity",
            type: "u128"
          },
          {
            name: "tickLowerIndex",
            type: "i32"
          },
          {
            name: "tickUpperIndex",
            type: "i32"
          },
          {
            name: "feeGrowthCheckpointA",
            type: "u128"
          },
          {
            name: "feeOwedA",
            type: "u64"
          },
          {
            name: "feeGrowthCheckpointB",
            type: "u128"
          },
          {
            name: "feeOwedB",
            type: "u64"
          },
          {
            name: "rewardInfos",
            type: {
              array: [
                {
                  defined: "PositionRewardInfo"
                },
                3
              ]
            }
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "TickArray",
      type: {
        fields: [
          {
            name: "startTickIndex",
            type: "i32"
          },
          {
            name: "ticks",
            type: {
              array: [
                {
                  defined: "Tick"
                },
                88
              ]
            }
          },
          {
            name: "whirlpool",
            type: "publicKey"
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "TokenBadge",
      type: {
        fields: [
          {
            name: "whirlpoolsConfig",
            type: "publicKey"
          },
          {
            name: "tokenMint",
            type: "publicKey"
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "Whirlpool",
      type: {
        fields: [
          {
            name: "whirlpoolsConfig",
            type: "publicKey"
          },
          {
            name: "whirlpoolBump",
            type: {
              array: ["u8", 1]
            }
          },
          {
            name: "tickSpacing",
            type: "u16"
          },
          {
            name: "tickSpacingSeed",
            type: {
              array: ["u8", 2]
            }
          },
          {
            name: "feeRate",
            type: "u16"
          },
          {
            name: "protocolFeeRate",
            type: "u16"
          },
          {
            name: "liquidity",
            type: "u128"
          },
          {
            name: "sqrtPrice",
            type: "u128"
          },
          {
            name: "tickCurrentIndex",
            type: "i32"
          },
          {
            name: "protocolFeeOwedA",
            type: "u64"
          },
          {
            name: "protocolFeeOwedB",
            type: "u64"
          },
          {
            name: "tokenMintA",
            type: "publicKey"
          },
          {
            name: "tokenVaultA",
            type: "publicKey"
          },
          {
            name: "feeGrowthGlobalA",
            type: "u128"
          },
          {
            name: "tokenMintB",
            type: "publicKey"
          },
          {
            name: "tokenVaultB",
            type: "publicKey"
          },
          {
            name: "feeGrowthGlobalB",
            type: "u128"
          },
          {
            name: "rewardLastUpdatedTimestamp",
            type: "u64"
          },
          {
            name: "rewardInfos",
            type: {
              array: [
                {
                  defined: "WhirlpoolRewardInfo"
                },
                3
              ]
            }
          }
        ],
        kind: "struct"
      }
    }
  ],
  errors: [
    {
      code: 6e3,
      msg: "Enum value could not be converted",
      name: "InvalidEnum"
    },
    {
      code: 6001,
      msg: "Invalid start tick index provided.",
      name: "InvalidStartTick"
    },
    {
      code: 6002,
      msg: "Tick-array already exists in this whirlpool",
      name: "TickArrayExistInPool"
    },
    {
      code: 6003,
      msg: "Attempt to search for a tick-array failed",
      name: "TickArrayIndexOutofBounds"
    },
    {
      code: 6004,
      msg: "Tick-spacing is not supported",
      name: "InvalidTickSpacing"
    },
    {
      code: 6005,
      msg: "Position is not empty It cannot be closed",
      name: "ClosePositionNotEmpty"
    },
    {
      code: 6006,
      msg: "Unable to divide by zero",
      name: "DivideByZero"
    },
    {
      code: 6007,
      msg: "Unable to cast number into BigInt",
      name: "NumberCastError"
    },
    {
      code: 6008,
      msg: "Unable to down cast number",
      name: "NumberDownCastError"
    },
    {
      code: 6009,
      msg: "Tick not found within tick array",
      name: "TickNotFound"
    },
    {
      code: 6010,
      msg: "Provided tick index is either out of bounds or uninitializable",
      name: "InvalidTickIndex"
    },
    {
      code: 6011,
      msg: "Provided sqrt price out of bounds",
      name: "SqrtPriceOutOfBounds"
    },
    {
      code: 6012,
      msg: "Liquidity amount must be greater than zero",
      name: "LiquidityZero"
    },
    {
      code: 6013,
      msg: "Liquidity amount must be less than i64::MAX",
      name: "LiquidityTooHigh"
    },
    {
      code: 6014,
      msg: "Liquidity overflow",
      name: "LiquidityOverflow"
    },
    {
      code: 6015,
      msg: "Liquidity underflow",
      name: "LiquidityUnderflow"
    },
    {
      code: 6016,
      msg: "Tick liquidity net underflowed or overflowed",
      name: "LiquidityNetError"
    },
    {
      code: 6017,
      msg: "Exceeded token max",
      name: "TokenMaxExceeded"
    },
    {
      code: 6018,
      msg: "Did not meet token min",
      name: "TokenMinSubceeded"
    },
    {
      code: 6019,
      msg: "Position token account has a missing or invalid delegate",
      name: "MissingOrInvalidDelegate"
    },
    {
      code: 6020,
      msg: "Position token amount must be 1",
      name: "InvalidPositionTokenAmount"
    },
    {
      code: 6021,
      msg: "Timestamp should be convertible from i64 to u64",
      name: "InvalidTimestampConversion"
    },
    {
      code: 6022,
      msg: "Timestamp should be greater than the last updated timestamp",
      name: "InvalidTimestamp"
    },
    {
      code: 6023,
      msg: "Invalid tick array sequence provided for instruction.",
      name: "InvalidTickArraySequence"
    },
    {
      code: 6024,
      msg: "Token Mint in wrong order",
      name: "InvalidTokenMintOrder"
    },
    {
      code: 6025,
      msg: "Reward not initialized",
      name: "RewardNotInitialized"
    },
    {
      code: 6026,
      msg: "Invalid reward index",
      name: "InvalidRewardIndex"
    },
    {
      code: 6027,
      msg: "Reward vault requires amount to support emissions for at least one day",
      name: "RewardVaultAmountInsufficient"
    },
    {
      code: 6028,
      msg: "Exceeded max fee rate",
      name: "FeeRateMaxExceeded"
    },
    {
      code: 6029,
      msg: "Exceeded max protocol fee rate",
      name: "ProtocolFeeRateMaxExceeded"
    },
    {
      code: 6030,
      msg: "Multiplication with shift right overflow",
      name: "MultiplicationShiftRightOverflow"
    },
    {
      code: 6031,
      msg: "Muldiv overflow",
      name: "MulDivOverflow"
    },
    {
      code: 6032,
      msg: "Invalid div_u256 input",
      name: "MulDivInvalidInput"
    },
    {
      code: 6033,
      msg: "Multiplication overflow",
      name: "MultiplicationOverflow"
    },
    {
      code: 6034,
      msg: "Provided SqrtPriceLimit not in the same direction as the swap.",
      name: "InvalidSqrtPriceLimitDirection"
    },
    {
      code: 6035,
      msg: "There are no tradable amount to swap.",
      name: "ZeroTradableAmount"
    },
    {
      code: 6036,
      msg: "Amount out below minimum threshold",
      name: "AmountOutBelowMinimum"
    },
    {
      code: 6037,
      msg: "Amount in above maximum threshold",
      name: "AmountInAboveMaximum"
    },
    {
      code: 6038,
      msg: "Invalid index for tick array sequence",
      name: "TickArraySequenceInvalidIndex"
    },
    {
      code: 6039,
      msg: "Amount calculated overflows",
      name: "AmountCalcOverflow"
    },
    {
      code: 6040,
      msg: "Amount remaining overflows",
      name: "AmountRemainingOverflow"
    },
    {
      code: 6041,
      msg: "Invalid intermediary mint",
      name: "InvalidIntermediaryMint"
    },
    {
      code: 6042,
      msg: "Duplicate two hop pool",
      name: "DuplicateTwoHopPool"
    },
    {
      code: 6043,
      msg: "Bundle index is out of bounds",
      name: "InvalidBundleIndex"
    },
    {
      code: 6044,
      msg: "Position has already been opened",
      name: "BundledPositionAlreadyOpened"
    },
    {
      code: 6045,
      msg: "Position has already been closed",
      name: "BundledPositionAlreadyClosed"
    },
    {
      code: 6046,
      msg: "Unable to delete PositionBundle with open positions",
      name: "PositionBundleNotDeletable"
    },
    {
      code: 6047,
      msg: "Token mint has unsupported attributes",
      name: "UnsupportedTokenMint"
    },
    {
      code: 6048,
      msg: "Invalid remaining accounts",
      name: "RemainingAccountsInvalidSlice"
    },
    {
      code: 6049,
      msg: "Insufficient remaining accounts",
      name: "RemainingAccountsInsufficient"
    },
    {
      code: 6050,
      msg: "Unable to call transfer hook without extra accounts",
      name: "NoExtraAccountsForTransferHook"
    },
    {
      code: 6051,
      msg: "Output and input amount mismatch",
      name: "IntermediateTokenAmountMismatch"
    },
    {
      code: 6052,
      msg: "Transfer fee calculation failed",
      name: "TransferFeeCalculationError"
    },
    {
      code: 6053,
      msg: "Same accounts type is provided more than once",
      name: "RemainingAccountsDuplicatedAccountsType"
    },
    {
      code: 6054,
      msg: "Too many supplemental tick arrays provided",
      name: "TooManySupplementalTickArrays"
    },
    {
      code: 6055,
      msg: "TickArray account for different whirlpool provided",
      name: "DifferentWhirlpoolTickArrayAccount"
    }
  ],
  instructions: [
    {
      accounts: [
        {
          isMut: true,
          isSigner: true,
          name: "config"
        },
        {
          isMut: true,
          isSigner: true,
          name: "funder"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        }
      ],
      args: [
        {
          name: "feeAuthority",
          type: "publicKey"
        },
        {
          name: "collectProtocolFeesAuthority",
          type: "publicKey"
        },
        {
          name: "rewardEmissionsSuperAuthority",
          type: "publicKey"
        },
        {
          name: "defaultProtocolFeeRate",
          type: "u16"
        }
      ],
      name: "initializeConfig"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "whirlpoolsConfig"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMintA"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMintB"
        },
        {
          isMut: true,
          isSigner: true,
          name: "funder"
        },
        {
          isMut: true,
          isSigner: false,
          name: "whirlpool"
        },
        {
          isMut: true,
          isSigner: true,
          name: "tokenVaultA"
        },
        {
          isMut: true,
          isSigner: true,
          name: "tokenVaultB"
        },
        {
          isMut: false,
          isSigner: false,
          name: "feeTier"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        }
      ],
      args: [
        {
          name: "bumps",
          type: {
            defined: "WhirlpoolBumps"
          }
        },
        {
          name: "tickSpacing",
          type: "u16"
        },
        {
          name: "initialSqrtPrice",
          type: "u128"
        }
      ],
      name: "initializePool"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "whirlpool"
        },
        {
          isMut: true,
          isSigner: true,
          name: "funder"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tickArray"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        }
      ],
      args: [
        {
          name: "startTickIndex",
          type: "i32"
        }
      ],
      name: "initializeTickArray"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "config"
        },
        {
          isMut: true,
          isSigner: false,
          name: "feeTier"
        },
        {
          isMut: true,
          isSigner: true,
          name: "funder"
        },
        {
          isMut: false,
          isSigner: true,
          name: "feeAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        }
      ],
      args: [
        {
          name: "tickSpacing",
          type: "u16"
        },
        {
          name: "defaultFeeRate",
          type: "u16"
        }
      ],
      name: "initializeFeeTier"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: true,
          name: "rewardAuthority"
        },
        {
          isMut: true,
          isSigner: true,
          name: "funder"
        },
        {
          isMut: true,
          isSigner: false,
          name: "whirlpool"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rewardMint"
        },
        {
          isMut: true,
          isSigner: true,
          name: "rewardVault"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        }
      ],
      args: [
        {
          name: "rewardIndex",
          type: "u8"
        }
      ],
      name: "initializeReward"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "whirlpool"
        },
        {
          isMut: false,
          isSigner: true,
          name: "rewardAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rewardVault"
        }
      ],
      args: [
        {
          name: "rewardIndex",
          type: "u8"
        },
        {
          name: "emissionsPerSecondX64",
          type: "u128"
        }
      ],
      name: "setRewardEmissions"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: true,
          name: "funder"
        },
        {
          isMut: false,
          isSigner: false,
          name: "owner"
        },
        {
          isMut: true,
          isSigner: false,
          name: "position"
        },
        {
          isMut: true,
          isSigner: true,
          name: "positionMint"
        },
        {
          isMut: true,
          isSigner: false,
          name: "positionTokenAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "whirlpool"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        },
        {
          isMut: false,
          isSigner: false,
          name: "associatedTokenProgram"
        }
      ],
      args: [
        {
          name: "bumps",
          type: {
            defined: "OpenPositionBumps"
          }
        },
        {
          name: "tickLowerIndex",
          type: "i32"
        },
        {
          name: "tickUpperIndex",
          type: "i32"
        }
      ],
      name: "openPosition"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: true,
          name: "funder"
        },
        {
          isMut: false,
          isSigner: false,
          name: "owner"
        },
        {
          isMut: true,
          isSigner: false,
          name: "position"
        },
        {
          isMut: true,
          isSigner: true,
          name: "positionMint"
        },
        {
          isMut: true,
          isSigner: false,
          name: "positionMetadataAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "positionTokenAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "whirlpool"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        },
        {
          isMut: false,
          isSigner: false,
          name: "associatedTokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "metadataProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "metadataUpdateAuth"
        }
      ],
      args: [
        {
          name: "bumps",
          type: {
            defined: "OpenPositionWithMetadataBumps"
          }
        },
        {
          name: "tickLowerIndex",
          type: "i32"
        },
        {
          name: "tickUpperIndex",
          type: "i32"
        }
      ],
      name: "openPositionWithMetadata"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "whirlpool"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: true,
          name: "positionAuthority"
        },
        {
          isMut: true,
          isSigner: false,
          name: "position"
        },
        {
          isMut: false,
          isSigner: false,
          name: "positionTokenAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenOwnerAccountA"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenOwnerAccountB"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenVaultA"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenVaultB"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tickArrayLower"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tickArrayUpper"
        }
      ],
      args: [
        {
          name: "liquidityAmount",
          type: "u128"
        },
        {
          name: "tokenMaxA",
          type: "u64"
        },
        {
          name: "tokenMaxB",
          type: "u64"
        }
      ],
      name: "increaseLiquidity"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "whirlpool"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: true,
          name: "positionAuthority"
        },
        {
          isMut: true,
          isSigner: false,
          name: "position"
        },
        {
          isMut: false,
          isSigner: false,
          name: "positionTokenAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenOwnerAccountA"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenOwnerAccountB"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenVaultA"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenVaultB"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tickArrayLower"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tickArrayUpper"
        }
      ],
      args: [
        {
          name: "liquidityAmount",
          type: "u128"
        },
        {
          name: "tokenMinA",
          type: "u64"
        },
        {
          name: "tokenMinB",
          type: "u64"
        }
      ],
      name: "decreaseLiquidity"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "whirlpool"
        },
        {
          isMut: true,
          isSigner: false,
          name: "position"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tickArrayLower"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tickArrayUpper"
        }
      ],
      args: [],
      name: "updateFeesAndRewards"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "whirlpool"
        },
        {
          isMut: false,
          isSigner: true,
          name: "positionAuthority"
        },
        {
          isMut: true,
          isSigner: false,
          name: "position"
        },
        {
          isMut: false,
          isSigner: false,
          name: "positionTokenAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenOwnerAccountA"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenVaultA"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenOwnerAccountB"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenVaultB"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        }
      ],
      args: [],
      name: "collectFees"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "whirlpool"
        },
        {
          isMut: false,
          isSigner: true,
          name: "positionAuthority"
        },
        {
          isMut: true,
          isSigner: false,
          name: "position"
        },
        {
          isMut: false,
          isSigner: false,
          name: "positionTokenAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "rewardOwnerAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "rewardVault"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        }
      ],
      args: [
        {
          name: "rewardIndex",
          type: "u8"
        }
      ],
      name: "collectReward"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "whirlpoolsConfig"
        },
        {
          isMut: true,
          isSigner: false,
          name: "whirlpool"
        },
        {
          isMut: false,
          isSigner: true,
          name: "collectProtocolFeesAuthority"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenVaultA"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenVaultB"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenDestinationA"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenDestinationB"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        }
      ],
      args: [],
      name: "collectProtocolFees"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: true,
          name: "tokenAuthority"
        },
        {
          isMut: true,
          isSigner: false,
          name: "whirlpool"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenOwnerAccountA"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenVaultA"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenOwnerAccountB"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenVaultB"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tickArray0"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tickArray1"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tickArray2"
        },
        {
          isMut: false,
          isSigner: false,
          name: "oracle"
        }
      ],
      args: [
        {
          name: "amount",
          type: "u64"
        },
        {
          name: "otherAmountThreshold",
          type: "u64"
        },
        {
          name: "sqrtPriceLimit",
          type: "u128"
        },
        {
          name: "amountSpecifiedIsInput",
          type: "bool"
        },
        {
          name: "aToB",
          type: "bool"
        }
      ],
      name: "swap"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: true,
          name: "positionAuthority"
        },
        {
          isMut: true,
          isSigner: false,
          name: "receiver"
        },
        {
          isMut: true,
          isSigner: false,
          name: "position"
        },
        {
          isMut: true,
          isSigner: false,
          name: "positionMint"
        },
        {
          isMut: true,
          isSigner: false,
          name: "positionTokenAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        }
      ],
      args: [],
      name: "closePosition"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "whirlpoolsConfig"
        },
        {
          isMut: true,
          isSigner: false,
          name: "feeTier"
        },
        {
          isMut: false,
          isSigner: true,
          name: "feeAuthority"
        }
      ],
      args: [
        {
          name: "defaultFeeRate",
          type: "u16"
        }
      ],
      name: "setDefaultFeeRate"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "whirlpoolsConfig"
        },
        {
          isMut: false,
          isSigner: true,
          name: "feeAuthority"
        }
      ],
      args: [
        {
          name: "defaultProtocolFeeRate",
          type: "u16"
        }
      ],
      name: "setDefaultProtocolFeeRate"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "whirlpoolsConfig"
        },
        {
          isMut: true,
          isSigner: false,
          name: "whirlpool"
        },
        {
          isMut: false,
          isSigner: true,
          name: "feeAuthority"
        }
      ],
      args: [
        {
          name: "feeRate",
          type: "u16"
        }
      ],
      name: "setFeeRate"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "whirlpoolsConfig"
        },
        {
          isMut: true,
          isSigner: false,
          name: "whirlpool"
        },
        {
          isMut: false,
          isSigner: true,
          name: "feeAuthority"
        }
      ],
      args: [
        {
          name: "protocolFeeRate",
          type: "u16"
        }
      ],
      name: "setProtocolFeeRate"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "whirlpoolsConfig"
        },
        {
          isMut: false,
          isSigner: true,
          name: "feeAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "newFeeAuthority"
        }
      ],
      args: [],
      name: "setFeeAuthority"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "whirlpoolsConfig"
        },
        {
          isMut: false,
          isSigner: true,
          name: "collectProtocolFeesAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "newCollectProtocolFeesAuthority"
        }
      ],
      args: [],
      name: "setCollectProtocolFeesAuthority"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "whirlpool"
        },
        {
          isMut: false,
          isSigner: true,
          name: "rewardAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "newRewardAuthority"
        }
      ],
      args: [
        {
          name: "rewardIndex",
          type: "u8"
        }
      ],
      name: "setRewardAuthority"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "whirlpoolsConfig"
        },
        {
          isMut: true,
          isSigner: false,
          name: "whirlpool"
        },
        {
          isMut: false,
          isSigner: true,
          name: "rewardEmissionsSuperAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "newRewardAuthority"
        }
      ],
      args: [
        {
          name: "rewardIndex",
          type: "u8"
        }
      ],
      name: "setRewardAuthorityBySuperAuthority"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "whirlpoolsConfig"
        },
        {
          isMut: false,
          isSigner: true,
          name: "rewardEmissionsSuperAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "newRewardEmissionsSuperAuthority"
        }
      ],
      args: [],
      name: "setRewardEmissionsSuperAuthority"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: true,
          name: "tokenAuthority"
        },
        {
          isMut: true,
          isSigner: false,
          name: "whirlpoolOne"
        },
        {
          isMut: true,
          isSigner: false,
          name: "whirlpoolTwo"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenOwnerAccountOneA"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenVaultOneA"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenOwnerAccountOneB"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenVaultOneB"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenOwnerAccountTwoA"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenVaultTwoA"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenOwnerAccountTwoB"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenVaultTwoB"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tickArrayOne0"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tickArrayOne1"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tickArrayOne2"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tickArrayTwo0"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tickArrayTwo1"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tickArrayTwo2"
        },
        {
          isMut: false,
          isSigner: false,
          name: "oracleOne"
        },
        {
          isMut: false,
          isSigner: false,
          name: "oracleTwo"
        }
      ],
      args: [
        {
          name: "amount",
          type: "u64"
        },
        {
          name: "otherAmountThreshold",
          type: "u64"
        },
        {
          name: "amountSpecifiedIsInput",
          type: "bool"
        },
        {
          name: "aToBOne",
          type: "bool"
        },
        {
          name: "aToBTwo",
          type: "bool"
        },
        {
          name: "sqrtPriceLimitOne",
          type: "u128"
        },
        {
          name: "sqrtPriceLimitTwo",
          type: "u128"
        }
      ],
      name: "twoHopSwap"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "positionBundle"
        },
        {
          isMut: true,
          isSigner: true,
          name: "positionBundleMint"
        },
        {
          isMut: true,
          isSigner: false,
          name: "positionBundleTokenAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "positionBundleOwner"
        },
        {
          isMut: true,
          isSigner: true,
          name: "funder"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        },
        {
          isMut: false,
          isSigner: false,
          name: "associatedTokenProgram"
        }
      ],
      args: [],
      name: "initializePositionBundle"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "positionBundle"
        },
        {
          isMut: true,
          isSigner: true,
          name: "positionBundleMint"
        },
        {
          isMut: true,
          isSigner: false,
          name: "positionBundleMetadata"
        },
        {
          isMut: true,
          isSigner: false,
          name: "positionBundleTokenAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "positionBundleOwner"
        },
        {
          isMut: true,
          isSigner: true,
          name: "funder"
        },
        {
          isMut: false,
          isSigner: false,
          name: "metadataUpdateAuth"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        },
        {
          isMut: false,
          isSigner: false,
          name: "associatedTokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "metadataProgram"
        }
      ],
      args: [],
      name: "initializePositionBundleWithMetadata"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "positionBundle"
        },
        {
          isMut: true,
          isSigner: false,
          name: "positionBundleMint"
        },
        {
          isMut: true,
          isSigner: false,
          name: "positionBundleTokenAccount"
        },
        {
          isMut: false,
          isSigner: true,
          name: "positionBundleOwner"
        },
        {
          isMut: true,
          isSigner: false,
          name: "receiver"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        }
      ],
      args: [],
      name: "deletePositionBundle"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "bundledPosition"
        },
        {
          isMut: true,
          isSigner: false,
          name: "positionBundle"
        },
        {
          isMut: false,
          isSigner: false,
          name: "positionBundleTokenAccount"
        },
        {
          isMut: false,
          isSigner: true,
          name: "positionBundleAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "whirlpool"
        },
        {
          isMut: true,
          isSigner: true,
          name: "funder"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        }
      ],
      args: [
        {
          name: "bundleIndex",
          type: "u16"
        },
        {
          name: "tickLowerIndex",
          type: "i32"
        },
        {
          name: "tickUpperIndex",
          type: "i32"
        }
      ],
      name: "openBundledPosition"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "bundledPosition"
        },
        {
          isMut: true,
          isSigner: false,
          name: "positionBundle"
        },
        {
          isMut: false,
          isSigner: false,
          name: "positionBundleTokenAccount"
        },
        {
          isMut: false,
          isSigner: true,
          name: "positionBundleAuthority"
        },
        {
          isMut: true,
          isSigner: false,
          name: "receiver"
        }
      ],
      args: [
        {
          name: "bundleIndex",
          type: "u16"
        }
      ],
      name: "closeBundledPosition"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "whirlpool"
        },
        {
          isMut: false,
          isSigner: true,
          name: "positionAuthority"
        },
        {
          isMut: true,
          isSigner: false,
          name: "position"
        },
        {
          isMut: false,
          isSigner: false,
          name: "positionTokenAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMintA"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMintB"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenOwnerAccountA"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenVaultA"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenOwnerAccountB"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenVaultB"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgramA"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgramB"
        },
        {
          isMut: false,
          isSigner: false,
          name: "memoProgram"
        }
      ],
      args: [
        {
          name: "remainingAccountsInfo",
          type: {
            option: {
              defined: "RemainingAccountsInfo"
            }
          }
        }
      ],
      name: "collectFeesV2"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "whirlpoolsConfig"
        },
        {
          isMut: true,
          isSigner: false,
          name: "whirlpool"
        },
        {
          isMut: false,
          isSigner: true,
          name: "collectProtocolFeesAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMintA"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMintB"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenVaultA"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenVaultB"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenDestinationA"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenDestinationB"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgramA"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgramB"
        },
        {
          isMut: false,
          isSigner: false,
          name: "memoProgram"
        }
      ],
      args: [
        {
          name: "remainingAccountsInfo",
          type: {
            option: {
              defined: "RemainingAccountsInfo"
            }
          }
        }
      ],
      name: "collectProtocolFeesV2"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "whirlpool"
        },
        {
          isMut: false,
          isSigner: true,
          name: "positionAuthority"
        },
        {
          isMut: true,
          isSigner: false,
          name: "position"
        },
        {
          isMut: false,
          isSigner: false,
          name: "positionTokenAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "rewardOwnerAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rewardMint"
        },
        {
          isMut: true,
          isSigner: false,
          name: "rewardVault"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rewardTokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "memoProgram"
        }
      ],
      args: [
        {
          name: "rewardIndex",
          type: "u8"
        },
        {
          name: "remainingAccountsInfo",
          type: {
            option: {
              defined: "RemainingAccountsInfo"
            }
          }
        }
      ],
      name: "collectRewardV2"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "whirlpool"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgramA"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgramB"
        },
        {
          isMut: false,
          isSigner: false,
          name: "memoProgram"
        },
        {
          isMut: false,
          isSigner: true,
          name: "positionAuthority"
        },
        {
          isMut: true,
          isSigner: false,
          name: "position"
        },
        {
          isMut: false,
          isSigner: false,
          name: "positionTokenAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMintA"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMintB"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenOwnerAccountA"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenOwnerAccountB"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenVaultA"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenVaultB"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tickArrayLower"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tickArrayUpper"
        }
      ],
      args: [
        {
          name: "liquidityAmount",
          type: "u128"
        },
        {
          name: "tokenMinA",
          type: "u64"
        },
        {
          name: "tokenMinB",
          type: "u64"
        },
        {
          name: "remainingAccountsInfo",
          type: {
            option: {
              defined: "RemainingAccountsInfo"
            }
          }
        }
      ],
      name: "decreaseLiquidityV2"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "whirlpool"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgramA"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgramB"
        },
        {
          isMut: false,
          isSigner: false,
          name: "memoProgram"
        },
        {
          isMut: false,
          isSigner: true,
          name: "positionAuthority"
        },
        {
          isMut: true,
          isSigner: false,
          name: "position"
        },
        {
          isMut: false,
          isSigner: false,
          name: "positionTokenAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMintA"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMintB"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenOwnerAccountA"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenOwnerAccountB"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenVaultA"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenVaultB"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tickArrayLower"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tickArrayUpper"
        }
      ],
      args: [
        {
          name: "liquidityAmount",
          type: "u128"
        },
        {
          name: "tokenMaxA",
          type: "u64"
        },
        {
          name: "tokenMaxB",
          type: "u64"
        },
        {
          name: "remainingAccountsInfo",
          type: {
            option: {
              defined: "RemainingAccountsInfo"
            }
          }
        }
      ],
      name: "increaseLiquidityV2"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "whirlpoolsConfig"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMintA"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMintB"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenBadgeA"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenBadgeB"
        },
        {
          isMut: true,
          isSigner: true,
          name: "funder"
        },
        {
          isMut: true,
          isSigner: false,
          name: "whirlpool"
        },
        {
          isMut: true,
          isSigner: true,
          name: "tokenVaultA"
        },
        {
          isMut: true,
          isSigner: true,
          name: "tokenVaultB"
        },
        {
          isMut: false,
          isSigner: false,
          name: "feeTier"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgramA"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgramB"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        }
      ],
      args: [
        {
          name: "tickSpacing",
          type: "u16"
        },
        {
          name: "initialSqrtPrice",
          type: "u128"
        }
      ],
      name: "initializePoolV2"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: true,
          name: "rewardAuthority"
        },
        {
          isMut: true,
          isSigner: true,
          name: "funder"
        },
        {
          isMut: true,
          isSigner: false,
          name: "whirlpool"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rewardMint"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rewardTokenBadge"
        },
        {
          isMut: true,
          isSigner: true,
          name: "rewardVault"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rewardTokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        }
      ],
      args: [
        {
          name: "rewardIndex",
          type: "u8"
        }
      ],
      name: "initializeRewardV2"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "whirlpool"
        },
        {
          isMut: false,
          isSigner: true,
          name: "rewardAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rewardVault"
        }
      ],
      args: [
        {
          name: "rewardIndex",
          type: "u8"
        },
        {
          name: "emissionsPerSecondX64",
          type: "u128"
        }
      ],
      name: "setRewardEmissionsV2"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgramA"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgramB"
        },
        {
          isMut: false,
          isSigner: false,
          name: "memoProgram"
        },
        {
          isMut: false,
          isSigner: true,
          name: "tokenAuthority"
        },
        {
          isMut: true,
          isSigner: false,
          name: "whirlpool"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMintA"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMintB"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenOwnerAccountA"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenVaultA"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenOwnerAccountB"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenVaultB"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tickArray0"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tickArray1"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tickArray2"
        },
        {
          isMut: true,
          isSigner: false,
          name: "oracle"
        }
      ],
      args: [
        {
          name: "amount",
          type: "u64"
        },
        {
          name: "otherAmountThreshold",
          type: "u64"
        },
        {
          name: "sqrtPriceLimit",
          type: "u128"
        },
        {
          name: "amountSpecifiedIsInput",
          type: "bool"
        },
        {
          name: "aToB",
          type: "bool"
        },
        {
          name: "remainingAccountsInfo",
          type: {
            option: {
              defined: "RemainingAccountsInfo"
            }
          }
        }
      ],
      name: "swapV2"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "whirlpoolOne"
        },
        {
          isMut: true,
          isSigner: false,
          name: "whirlpoolTwo"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMintInput"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMintIntermediate"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMintOutput"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgramInput"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgramIntermediate"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgramOutput"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenOwnerAccountInput"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenVaultOneInput"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenVaultOneIntermediate"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenVaultTwoIntermediate"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenVaultTwoOutput"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenOwnerAccountOutput"
        },
        {
          isMut: false,
          isSigner: true,
          name: "tokenAuthority"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tickArrayOne0"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tickArrayOne1"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tickArrayOne2"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tickArrayTwo0"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tickArrayTwo1"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tickArrayTwo2"
        },
        {
          isMut: true,
          isSigner: false,
          name: "oracleOne"
        },
        {
          isMut: true,
          isSigner: false,
          name: "oracleTwo"
        },
        {
          isMut: false,
          isSigner: false,
          name: "memoProgram"
        }
      ],
      args: [
        {
          name: "amount",
          type: "u64"
        },
        {
          name: "otherAmountThreshold",
          type: "u64"
        },
        {
          name: "amountSpecifiedIsInput",
          type: "bool"
        },
        {
          name: "aToBOne",
          type: "bool"
        },
        {
          name: "aToBTwo",
          type: "bool"
        },
        {
          name: "sqrtPriceLimitOne",
          type: "u128"
        },
        {
          name: "sqrtPriceLimitTwo",
          type: "u128"
        },
        {
          name: "remainingAccountsInfo",
          type: {
            option: {
              defined: "RemainingAccountsInfo"
            }
          }
        }
      ],
      name: "twoHopSwapV2"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "config"
        },
        {
          isMut: true,
          isSigner: false,
          name: "configExtension"
        },
        {
          isMut: true,
          isSigner: true,
          name: "funder"
        },
        {
          isMut: false,
          isSigner: true,
          name: "feeAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        }
      ],
      args: [],
      name: "initializeConfigExtension"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "whirlpoolsConfig"
        },
        {
          isMut: true,
          isSigner: false,
          name: "whirlpoolsConfigExtension"
        },
        {
          isMut: false,
          isSigner: true,
          name: "configExtensionAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "newConfigExtensionAuthority"
        }
      ],
      args: [],
      name: "setConfigExtensionAuthority"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "whirlpoolsConfig"
        },
        {
          isMut: true,
          isSigner: false,
          name: "whirlpoolsConfigExtension"
        },
        {
          isMut: false,
          isSigner: true,
          name: "configExtensionAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "newTokenBadgeAuthority"
        }
      ],
      args: [],
      name: "setTokenBadgeAuthority"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "whirlpoolsConfig"
        },
        {
          isMut: false,
          isSigner: false,
          name: "whirlpoolsConfigExtension"
        },
        {
          isMut: false,
          isSigner: true,
          name: "tokenBadgeAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMint"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenBadge"
        },
        {
          isMut: true,
          isSigner: true,
          name: "funder"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        }
      ],
      args: [],
      name: "initializeTokenBadge"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "whirlpoolsConfig"
        },
        {
          isMut: false,
          isSigner: false,
          name: "whirlpoolsConfigExtension"
        },
        {
          isMut: false,
          isSigner: true,
          name: "tokenBadgeAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMint"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenBadge"
        },
        {
          isMut: true,
          isSigner: false,
          name: "receiver"
        }
      ],
      args: [],
      name: "deleteTokenBadge"
    }
  ],
  name: "whirlpool",
  types: [
    {
      name: "OpenPositionBumps",
      type: {
        fields: [
          {
            name: "positionBump",
            type: "u8"
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "OpenPositionWithMetadataBumps",
      type: {
        fields: [
          {
            name: "positionBump",
            type: "u8"
          },
          {
            name: "metadataBump",
            type: "u8"
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "PositionRewardInfo",
      type: {
        fields: [
          {
            name: "growthInsideCheckpoint",
            type: "u128"
          },
          {
            name: "amountOwed",
            type: "u64"
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "Tick",
      type: {
        fields: [
          {
            name: "initialized",
            type: "bool"
          },
          {
            name: "liquidityNet",
            type: "i128"
          },
          {
            name: "liquidityGross",
            type: "u128"
          },
          {
            name: "feeGrowthOutsideA",
            type: "u128"
          },
          {
            name: "feeGrowthOutsideB",
            type: "u128"
          },
          {
            name: "rewardGrowthsOutside",
            type: {
              array: ["u128", 3]
            }
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "WhirlpoolRewardInfo",
      type: {
        fields: [
          {
            name: "mint",
            type: "publicKey"
          },
          {
            name: "vault",
            type: "publicKey"
          },
          {
            name: "authority",
            type: "publicKey"
          },
          {
            name: "emissionsPerSecondX64",
            type: "u128"
          },
          {
            name: "growthGlobalX64",
            type: "u128"
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "WhirlpoolBumps",
      type: {
        fields: [
          {
            name: "whirlpoolBump",
            type: "u8"
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "RemainingAccountsSlice",
      type: {
        fields: [
          {
            name: "accountsType",
            type: {
              defined: "AccountsType"
            }
          },
          {
            name: "length",
            type: "u8"
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "RemainingAccountsInfo",
      type: {
        fields: [
          {
            name: "slices",
            type: {
              vec: {
                defined: "RemainingAccountsSlice"
              }
            }
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "CurrIndex",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Below"
          },
          {
            name: "Inside"
          },
          {
            name: "Above"
          }
        ]
      }
    },
    {
      name: "TickLabel",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Upper"
          },
          {
            name: "Lower"
          }
        ]
      }
    },
    {
      name: "Direction",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Left"
          },
          {
            name: "Right"
          }
        ]
      }
    },
    {
      name: "AccountsType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "TransferHookA"
          },
          {
            name: "TransferHookB"
          },
          {
            name: "TransferHookReward"
          },
          {
            name: "TransferHookInput"
          },
          {
            name: "TransferHookIntermediate"
          },
          {
            name: "TransferHookOutput"
          },
          {
            name: "SupplementalTickArrays"
          },
          {
            name: "SupplementalTickArraysOne"
          },
          {
            name: "SupplementalTickArraysTwo"
          }
        ]
      }
    }
  ],
  version: "0.3.0"
};

// idl/meteora-dlmm.json
var meteora_dlmm_default = {
  version: "0.5.1",
  name: "lb_clmm",
  constants: [
    { name: "BASIS_POINT_MAX", type: "i32", value: "10000" },
    {
      name: "MAX_BIN_PER_ARRAY",
      type: { defined: "usize" },
      value: "70"
    },
    {
      name: "MAX_BIN_PER_POSITION",
      type: { defined: "usize" },
      value: "70"
    },
    { name: "MIN_BIN_ID", type: "i32", value: "- 443636" },
    { name: "MAX_BIN_ID", type: "i32", value: "443636" },
    { name: "MAX_FEE_RATE", type: "u64", value: "100_000_000" },
    { name: "FEE_PRECISION", type: "u64", value: "1_000_000_000" },
    { name: "MAX_PROTOCOL_SHARE", type: "u16", value: "2_500" },
    { name: "HOST_FEE_BPS", type: "u16", value: "2_000" },
    { name: "NUM_REWARDS", type: { defined: "usize" }, value: "2" },
    { name: "MIN_REWARD_DURATION", type: "u64", value: "1" },
    { name: "MAX_REWARD_DURATION", type: "u64", value: "31536000" },
    {
      name: "EXTENSION_BINARRAY_BITMAP_SIZE",
      type: { defined: "usize" },
      value: "12"
    },
    { name: "BIN_ARRAY_BITMAP_SIZE", type: "i32", value: "512" },
    {
      name: "MAX_REWARD_BIN_SPLIT",
      type: { defined: "usize" },
      value: "15"
    },
    {
      name: "BIN_ARRAY",
      type: "bytes",
      value: "[98, 105, 110, 95, 97, 114, 114, 97, 121]"
    },
    {
      name: "ORACLE",
      type: "bytes",
      value: "[111, 114, 97, 99, 108, 101]"
    },
    {
      name: "BIN_ARRAY_BITMAP_SEED",
      type: "bytes",
      value: "[98, 105, 116, 109, 97, 112]"
    },
    {
      name: "PRESET_PARAMETER",
      type: "bytes",
      value: "[112, 114, 101, 115, 101, 116, 95, 112, 97, 114, 97, 109, 101, 116, 101, 114]"
    },
    {
      name: "POSITION",
      type: "bytes",
      value: "[112, 111, 115, 105, 116, 105, 111, 110]"
    }
  ],
  instructions: [
    {
      name: "initializeLbPair",
      accounts: [
        { name: "lbPair", isMut: true, isSigner: false },
        {
          name: "binArrayBitmapExtension",
          isMut: true,
          isSigner: false,
          isOptional: true
        },
        { name: "tokenMintX", isMut: false, isSigner: false },
        { name: "tokenMintY", isMut: false, isSigner: false },
        { name: "reserveX", isMut: true, isSigner: false },
        { name: "reserveY", isMut: true, isSigner: false },
        { name: "oracle", isMut: true, isSigner: false },
        { name: "presetParameter", isMut: false, isSigner: false },
        { name: "funder", isMut: true, isSigner: true },
        { name: "tokenProgram", isMut: false, isSigner: false },
        { name: "systemProgram", isMut: false, isSigner: false },
        { name: "rent", isMut: false, isSigner: false },
        { name: "eventAuthority", isMut: false, isSigner: false },
        { name: "program", isMut: false, isSigner: false }
      ],
      args: [
        { name: "activeId", type: "i32" },
        { name: "binStep", type: "u16" }
      ]
    },
    {
      name: "initializePermissionLbPair",
      accounts: [
        { name: "base", isMut: false, isSigner: true },
        { name: "lbPair", isMut: true, isSigner: false },
        {
          name: "binArrayBitmapExtension",
          isMut: true,
          isSigner: false,
          isOptional: true
        },
        { name: "tokenMintX", isMut: false, isSigner: false },
        { name: "tokenMintY", isMut: false, isSigner: false },
        { name: "reserveX", isMut: true, isSigner: false },
        { name: "reserveY", isMut: true, isSigner: false },
        { name: "oracle", isMut: true, isSigner: false },
        { name: "admin", isMut: true, isSigner: true },
        { name: "tokenProgram", isMut: false, isSigner: false },
        { name: "systemProgram", isMut: false, isSigner: false },
        { name: "rent", isMut: false, isSigner: false },
        { name: "eventAuthority", isMut: false, isSigner: false },
        { name: "program", isMut: false, isSigner: false }
      ],
      args: [
        { name: "ixData", type: { defined: "InitPermissionPairIx" } }
      ]
    },
    {
      name: "initializeBinArrayBitmapExtension",
      accounts: [
        { name: "lbPair", isMut: false, isSigner: false },
        {
          name: "binArrayBitmapExtension",
          isMut: true,
          isSigner: false,
          docs: [
            "Initialize an account to store if a bin array is initialized."
          ]
        },
        { name: "funder", isMut: true, isSigner: true },
        { name: "systemProgram", isMut: false, isSigner: false },
        { name: "rent", isMut: false, isSigner: false }
      ],
      args: []
    },
    {
      name: "initializeBinArray",
      accounts: [
        { name: "lbPair", isMut: false, isSigner: false },
        { name: "binArray", isMut: true, isSigner: false },
        { name: "funder", isMut: true, isSigner: true },
        { name: "systemProgram", isMut: false, isSigner: false }
      ],
      args: [{ name: "index", type: "i64" }]
    },
    {
      name: "addLiquidity",
      accounts: [
        { name: "position", isMut: true, isSigner: false },
        { name: "lbPair", isMut: true, isSigner: false },
        {
          name: "binArrayBitmapExtension",
          isMut: true,
          isSigner: false,
          isOptional: true
        },
        { name: "userTokenX", isMut: true, isSigner: false },
        { name: "userTokenY", isMut: true, isSigner: false },
        { name: "reserveX", isMut: true, isSigner: false },
        { name: "reserveY", isMut: true, isSigner: false },
        { name: "tokenXMint", isMut: false, isSigner: false },
        { name: "tokenYMint", isMut: false, isSigner: false },
        { name: "binArrayLower", isMut: true, isSigner: false },
        { name: "binArrayUpper", isMut: true, isSigner: false },
        { name: "sender", isMut: false, isSigner: true },
        { name: "tokenXProgram", isMut: false, isSigner: false },
        { name: "tokenYProgram", isMut: false, isSigner: false },
        { name: "eventAuthority", isMut: false, isSigner: false },
        { name: "program", isMut: false, isSigner: false }
      ],
      args: [
        {
          name: "liquidityParameter",
          type: { defined: "LiquidityParameter" }
        }
      ]
    },
    {
      name: "addLiquidityByWeight",
      accounts: [
        { name: "position", isMut: true, isSigner: false },
        { name: "lbPair", isMut: true, isSigner: false },
        {
          name: "binArrayBitmapExtension",
          isMut: true,
          isSigner: false,
          isOptional: true
        },
        { name: "userTokenX", isMut: true, isSigner: false },
        { name: "userTokenY", isMut: true, isSigner: false },
        { name: "reserveX", isMut: true, isSigner: false },
        { name: "reserveY", isMut: true, isSigner: false },
        { name: "tokenXMint", isMut: false, isSigner: false },
        { name: "tokenYMint", isMut: false, isSigner: false },
        { name: "binArrayLower", isMut: true, isSigner: false },
        { name: "binArrayUpper", isMut: true, isSigner: false },
        { name: "sender", isMut: false, isSigner: true },
        { name: "tokenXProgram", isMut: false, isSigner: false },
        { name: "tokenYProgram", isMut: false, isSigner: false },
        { name: "eventAuthority", isMut: false, isSigner: false },
        { name: "program", isMut: false, isSigner: false }
      ],
      args: [
        {
          name: "liquidityParameter",
          type: { defined: "LiquidityParameterByWeight" }
        }
      ]
    },
    {
      name: "addLiquidityByStrategy",
      accounts: [
        { name: "position", isMut: true, isSigner: false },
        { name: "lbPair", isMut: true, isSigner: false },
        {
          name: "binArrayBitmapExtension",
          isMut: true,
          isSigner: false,
          isOptional: true
        },
        { name: "userTokenX", isMut: true, isSigner: false },
        { name: "userTokenY", isMut: true, isSigner: false },
        { name: "reserveX", isMut: true, isSigner: false },
        { name: "reserveY", isMut: true, isSigner: false },
        { name: "tokenXMint", isMut: false, isSigner: false },
        { name: "tokenYMint", isMut: false, isSigner: false },
        { name: "binArrayLower", isMut: true, isSigner: false },
        { name: "binArrayUpper", isMut: true, isSigner: false },
        { name: "sender", isMut: false, isSigner: true },
        { name: "tokenXProgram", isMut: false, isSigner: false },
        { name: "tokenYProgram", isMut: false, isSigner: false },
        { name: "eventAuthority", isMut: false, isSigner: false },
        { name: "program", isMut: false, isSigner: false }
      ],
      args: [
        {
          name: "liquidityParameter",
          type: { defined: "LiquidityParameterByStrategy" }
        }
      ]
    },
    {
      name: "addLiquidityByStrategyOneSide",
      accounts: [
        { name: "position", isMut: true, isSigner: false },
        { name: "lbPair", isMut: true, isSigner: false },
        {
          name: "binArrayBitmapExtension",
          isMut: true,
          isSigner: false,
          isOptional: true
        },
        { name: "userToken", isMut: true, isSigner: false },
        { name: "reserve", isMut: true, isSigner: false },
        { name: "tokenMint", isMut: false, isSigner: false },
        { name: "binArrayLower", isMut: true, isSigner: false },
        { name: "binArrayUpper", isMut: true, isSigner: false },
        { name: "sender", isMut: false, isSigner: true },
        { name: "tokenProgram", isMut: false, isSigner: false },
        { name: "eventAuthority", isMut: false, isSigner: false },
        { name: "program", isMut: false, isSigner: false }
      ],
      args: [
        {
          name: "liquidityParameter",
          type: { defined: "LiquidityParameterByStrategyOneSide" }
        }
      ]
    },
    {
      name: "addLiquidityOneSide",
      accounts: [
        { name: "position", isMut: true, isSigner: false },
        { name: "lbPair", isMut: true, isSigner: false },
        {
          name: "binArrayBitmapExtension",
          isMut: true,
          isSigner: false,
          isOptional: true
        },
        { name: "userToken", isMut: true, isSigner: false },
        { name: "reserve", isMut: true, isSigner: false },
        { name: "tokenMint", isMut: false, isSigner: false },
        { name: "binArrayLower", isMut: true, isSigner: false },
        { name: "binArrayUpper", isMut: true, isSigner: false },
        { name: "sender", isMut: false, isSigner: true },
        { name: "tokenProgram", isMut: false, isSigner: false },
        { name: "eventAuthority", isMut: false, isSigner: false },
        { name: "program", isMut: false, isSigner: false }
      ],
      args: [
        {
          name: "liquidityParameter",
          type: { defined: "LiquidityOneSideParameter" }
        }
      ]
    },
    {
      name: "removeLiquidity",
      accounts: [
        { name: "position", isMut: true, isSigner: false },
        { name: "lbPair", isMut: true, isSigner: false },
        {
          name: "binArrayBitmapExtension",
          isMut: true,
          isSigner: false,
          isOptional: true
        },
        { name: "userTokenX", isMut: true, isSigner: false },
        { name: "userTokenY", isMut: true, isSigner: false },
        { name: "reserveX", isMut: true, isSigner: false },
        { name: "reserveY", isMut: true, isSigner: false },
        { name: "tokenXMint", isMut: false, isSigner: false },
        { name: "tokenYMint", isMut: false, isSigner: false },
        { name: "binArrayLower", isMut: true, isSigner: false },
        { name: "binArrayUpper", isMut: true, isSigner: false },
        { name: "sender", isMut: false, isSigner: true },
        { name: "tokenXProgram", isMut: false, isSigner: false },
        { name: "tokenYProgram", isMut: false, isSigner: false },
        { name: "eventAuthority", isMut: false, isSigner: false },
        { name: "program", isMut: false, isSigner: false }
      ],
      args: [
        {
          name: "binLiquidityRemoval",
          type: { vec: { defined: "BinLiquidityReduction" } }
        }
      ]
    },
    {
      name: "initializePosition",
      accounts: [
        { name: "payer", isMut: true, isSigner: true },
        { name: "position", isMut: true, isSigner: true },
        { name: "lbPair", isMut: false, isSigner: false },
        { name: "owner", isMut: false, isSigner: true },
        { name: "systemProgram", isMut: false, isSigner: false },
        { name: "rent", isMut: false, isSigner: false },
        { name: "eventAuthority", isMut: false, isSigner: false },
        { name: "program", isMut: false, isSigner: false }
      ],
      args: [
        { name: "lowerBinId", type: "i32" },
        { name: "width", type: "i32" }
      ]
    },
    {
      name: "initializePositionPda",
      accounts: [
        { name: "payer", isMut: true, isSigner: true },
        { name: "base", isMut: false, isSigner: true },
        { name: "position", isMut: true, isSigner: false },
        { name: "lbPair", isMut: false, isSigner: false },
        {
          name: "owner",
          isMut: false,
          isSigner: true,
          docs: ["owner"]
        },
        { name: "systemProgram", isMut: false, isSigner: false },
        { name: "rent", isMut: false, isSigner: false },
        { name: "eventAuthority", isMut: false, isSigner: false },
        { name: "program", isMut: false, isSigner: false }
      ],
      args: [
        { name: "lowerBinId", type: "i32" },
        { name: "width", type: "i32" }
      ]
    },
    {
      name: "initializePositionByOperator",
      accounts: [
        { name: "payer", isMut: true, isSigner: true },
        { name: "base", isMut: false, isSigner: true },
        { name: "position", isMut: true, isSigner: false },
        { name: "lbPair", isMut: false, isSigner: false },
        {
          name: "operator",
          isMut: false,
          isSigner: true,
          docs: ["operator"]
        },
        { name: "systemProgram", isMut: false, isSigner: false },
        { name: "rent", isMut: false, isSigner: false },
        { name: "eventAuthority", isMut: false, isSigner: false },
        { name: "program", isMut: false, isSigner: false }
      ],
      args: [
        { name: "lowerBinId", type: "i32" },
        { name: "width", type: "i32" },
        { name: "owner", type: "publicKey" },
        { name: "feeOwner", type: "publicKey" }
      ]
    },
    {
      name: "updatePositionOperator",
      accounts: [
        { name: "position", isMut: true, isSigner: false },
        { name: "owner", isMut: false, isSigner: true },
        { name: "eventAuthority", isMut: false, isSigner: false },
        { name: "program", isMut: false, isSigner: false }
      ],
      args: [{ name: "operator", type: "publicKey" }]
    },
    {
      name: "swap",
      accounts: [
        { name: "lbPair", isMut: true, isSigner: false },
        {
          name: "binArrayBitmapExtension",
          isMut: false,
          isSigner: false,
          isOptional: true
        },
        { name: "reserveX", isMut: true, isSigner: false },
        { name: "reserveY", isMut: true, isSigner: false },
        { name: "userTokenIn", isMut: true, isSigner: false },
        { name: "userTokenOut", isMut: true, isSigner: false },
        { name: "tokenXMint", isMut: false, isSigner: false },
        { name: "tokenYMint", isMut: false, isSigner: false },
        { name: "oracle", isMut: true, isSigner: false },
        {
          name: "hostFeeIn",
          isMut: true,
          isSigner: false,
          isOptional: true
        },
        { name: "user", isMut: false, isSigner: true },
        { name: "tokenXProgram", isMut: false, isSigner: false },
        { name: "tokenYProgram", isMut: false, isSigner: false },
        { name: "eventAuthority", isMut: false, isSigner: false },
        { name: "program", isMut: false, isSigner: false }
      ],
      args: [
        { name: "amountIn", type: "u64" },
        { name: "minAmountOut", type: "u64" }
      ]
    },
    {
      name: "withdrawProtocolFee",
      accounts: [
        { name: "lbPair", isMut: true, isSigner: false },
        { name: "reserveX", isMut: true, isSigner: false },
        { name: "reserveY", isMut: true, isSigner: false },
        { name: "tokenXMint", isMut: false, isSigner: false },
        { name: "tokenYMint", isMut: false, isSigner: false },
        { name: "receiverTokenX", isMut: true, isSigner: false },
        { name: "receiverTokenY", isMut: true, isSigner: false },
        { name: "feeOwner", isMut: false, isSigner: true },
        { name: "tokenXProgram", isMut: false, isSigner: false },
        { name: "tokenYProgram", isMut: false, isSigner: false }
      ],
      args: [
        { name: "amountX", type: "u64" },
        { name: "amountY", type: "u64" }
      ]
    },
    {
      name: "updateFeeOwner",
      accounts: [
        { name: "lbPair", isMut: true, isSigner: false },
        { name: "newFeeOwner", isMut: false, isSigner: false },
        { name: "admin", isMut: false, isSigner: true }
      ],
      args: []
    },
    {
      name: "initializeReward",
      accounts: [
        { name: "lbPair", isMut: true, isSigner: false },
        { name: "rewardVault", isMut: true, isSigner: false },
        { name: "rewardMint", isMut: false, isSigner: false },
        { name: "admin", isMut: true, isSigner: true },
        { name: "tokenProgram", isMut: false, isSigner: false },
        { name: "systemProgram", isMut: false, isSigner: false },
        { name: "rent", isMut: false, isSigner: false },
        { name: "eventAuthority", isMut: false, isSigner: false },
        { name: "program", isMut: false, isSigner: false }
      ],
      args: [
        { name: "rewardIndex", type: "u64" },
        { name: "rewardDuration", type: "u64" },
        { name: "funder", type: "publicKey" }
      ]
    },
    {
      name: "fundReward",
      accounts: [
        { name: "lbPair", isMut: true, isSigner: false },
        { name: "rewardVault", isMut: true, isSigner: false },
        { name: "rewardMint", isMut: false, isSigner: false },
        { name: "funderTokenAccount", isMut: true, isSigner: false },
        { name: "funder", isMut: false, isSigner: true },
        { name: "binArray", isMut: true, isSigner: false },
        { name: "tokenProgram", isMut: false, isSigner: false },
        { name: "eventAuthority", isMut: false, isSigner: false },
        { name: "program", isMut: false, isSigner: false }
      ],
      args: [
        { name: "rewardIndex", type: "u64" },
        { name: "amount", type: "u64" },
        { name: "carryForward", type: "bool" }
      ]
    },
    {
      name: "updateRewardFunder",
      accounts: [
        { name: "lbPair", isMut: true, isSigner: false },
        { name: "admin", isMut: false, isSigner: true },
        { name: "eventAuthority", isMut: false, isSigner: false },
        { name: "program", isMut: false, isSigner: false }
      ],
      args: [
        { name: "rewardIndex", type: "u64" },
        { name: "newFunder", type: "publicKey" }
      ]
    },
    {
      name: "updateRewardDuration",
      accounts: [
        { name: "lbPair", isMut: true, isSigner: false },
        { name: "admin", isMut: false, isSigner: true },
        { name: "binArray", isMut: true, isSigner: false },
        { name: "eventAuthority", isMut: false, isSigner: false },
        { name: "program", isMut: false, isSigner: false }
      ],
      args: [
        { name: "rewardIndex", type: "u64" },
        { name: "newDuration", type: "u64" }
      ]
    },
    {
      name: "claimReward",
      accounts: [
        { name: "lbPair", isMut: true, isSigner: false },
        { name: "position", isMut: true, isSigner: false },
        { name: "binArrayLower", isMut: true, isSigner: false },
        { name: "binArrayUpper", isMut: true, isSigner: false },
        { name: "sender", isMut: false, isSigner: true },
        { name: "rewardVault", isMut: true, isSigner: false },
        { name: "rewardMint", isMut: false, isSigner: false },
        { name: "userTokenAccount", isMut: true, isSigner: false },
        { name: "tokenProgram", isMut: false, isSigner: false },
        { name: "eventAuthority", isMut: false, isSigner: false },
        { name: "program", isMut: false, isSigner: false }
      ],
      args: [{ name: "rewardIndex", type: "u64" }]
    },
    {
      name: "claimFee",
      accounts: [
        { name: "lbPair", isMut: true, isSigner: false },
        { name: "position", isMut: true, isSigner: false },
        { name: "binArrayLower", isMut: true, isSigner: false },
        { name: "binArrayUpper", isMut: true, isSigner: false },
        { name: "sender", isMut: false, isSigner: true },
        { name: "reserveX", isMut: true, isSigner: false },
        { name: "reserveY", isMut: true, isSigner: false },
        { name: "userTokenX", isMut: true, isSigner: false },
        { name: "userTokenY", isMut: true, isSigner: false },
        { name: "tokenXMint", isMut: false, isSigner: false },
        { name: "tokenYMint", isMut: false, isSigner: false },
        { name: "tokenProgram", isMut: false, isSigner: false },
        { name: "eventAuthority", isMut: false, isSigner: false },
        { name: "program", isMut: false, isSigner: false }
      ],
      args: []
    },
    {
      name: "closePosition",
      accounts: [
        { name: "position", isMut: true, isSigner: false },
        { name: "lbPair", isMut: true, isSigner: false },
        { name: "binArrayLower", isMut: true, isSigner: false },
        { name: "binArrayUpper", isMut: true, isSigner: false },
        { name: "sender", isMut: false, isSigner: true },
        { name: "rentReceiver", isMut: true, isSigner: false },
        { name: "eventAuthority", isMut: false, isSigner: false },
        { name: "program", isMut: false, isSigner: false }
      ],
      args: []
    },
    {
      name: "updateFeeParameters",
      accounts: [
        { name: "lbPair", isMut: true, isSigner: false },
        { name: "admin", isMut: false, isSigner: true },
        { name: "eventAuthority", isMut: false, isSigner: false },
        { name: "program", isMut: false, isSigner: false }
      ],
      args: [
        { name: "feeParameter", type: { defined: "FeeParameter" } }
      ]
    },
    {
      name: "increaseOracleLength",
      accounts: [
        { name: "oracle", isMut: true, isSigner: false },
        { name: "funder", isMut: true, isSigner: true },
        { name: "systemProgram", isMut: false, isSigner: false },
        { name: "eventAuthority", isMut: false, isSigner: false },
        { name: "program", isMut: false, isSigner: false }
      ],
      args: [{ name: "lengthToAdd", type: "u64" }]
    },
    {
      name: "initializePresetParameter",
      accounts: [
        { name: "presetParameter", isMut: true, isSigner: false },
        { name: "admin", isMut: true, isSigner: true },
        { name: "systemProgram", isMut: false, isSigner: false },
        { name: "rent", isMut: false, isSigner: false }
      ],
      args: [
        { name: "ix", type: { defined: "InitPresetParametersIx" } }
      ]
    },
    {
      name: "initializePresetParameterV2",
      accounts: [
        { name: "presetParameter", isMut: true, isSigner: false },
        { name: "admin", isMut: true, isSigner: true },
        { name: "systemProgram", isMut: false, isSigner: false },
        { name: "rent", isMut: false, isSigner: false }
      ],
      args: [
        { name: "ix", type: { defined: "InitPresetParametersIx" } }
      ]
    },
    {
      name: "closePresetParameter",
      accounts: [
        { name: "presetParameter", isMut: true, isSigner: false },
        { name: "admin", isMut: true, isSigner: true },
        { name: "rentReceiver", isMut: true, isSigner: false }
      ],
      args: []
    },
    {
      name: "removeAllLiquidity",
      accounts: [
        { name: "position", isMut: true, isSigner: false },
        { name: "lbPair", isMut: true, isSigner: false },
        {
          name: "binArrayBitmapExtension",
          isMut: true,
          isSigner: false,
          isOptional: true
        },
        { name: "userTokenX", isMut: true, isSigner: false },
        { name: "userTokenY", isMut: true, isSigner: false },
        { name: "reserveX", isMut: true, isSigner: false },
        { name: "reserveY", isMut: true, isSigner: false },
        { name: "tokenXMint", isMut: false, isSigner: false },
        { name: "tokenYMint", isMut: false, isSigner: false },
        { name: "binArrayLower", isMut: true, isSigner: false },
        { name: "binArrayUpper", isMut: true, isSigner: false },
        { name: "sender", isMut: false, isSigner: true },
        { name: "tokenXProgram", isMut: false, isSigner: false },
        { name: "tokenYProgram", isMut: false, isSigner: false },
        { name: "eventAuthority", isMut: false, isSigner: false },
        { name: "program", isMut: false, isSigner: false }
      ],
      args: []
    },
    {
      name: "togglePairStatus",
      accounts: [
        { name: "lbPair", isMut: true, isSigner: false },
        { name: "admin", isMut: false, isSigner: true }
      ],
      args: []
    },
    {
      name: "updateWhitelistedWallet",
      accounts: [
        { name: "lbPair", isMut: true, isSigner: false },
        { name: "creator", isMut: false, isSigner: true }
      ],
      args: [
        { name: "idx", type: "u8" },
        { name: "wallet", type: "publicKey" }
      ]
    },
    {
      name: "migratePosition",
      accounts: [
        { name: "positionV2", isMut: true, isSigner: true },
        { name: "positionV1", isMut: true, isSigner: false },
        { name: "lbPair", isMut: false, isSigner: false },
        { name: "binArrayLower", isMut: true, isSigner: false },
        { name: "binArrayUpper", isMut: true, isSigner: false },
        { name: "owner", isMut: true, isSigner: true },
        { name: "systemProgram", isMut: false, isSigner: false },
        { name: "rentReceiver", isMut: true, isSigner: false },
        { name: "eventAuthority", isMut: false, isSigner: false },
        { name: "program", isMut: false, isSigner: false }
      ],
      args: []
    },
    {
      name: "migrateBinArray",
      accounts: [{ name: "lbPair", isMut: false, isSigner: false }],
      args: []
    },
    {
      name: "updateFeesAndRewards",
      accounts: [
        { name: "position", isMut: true, isSigner: false },
        { name: "lbPair", isMut: true, isSigner: false },
        { name: "binArrayLower", isMut: true, isSigner: false },
        { name: "binArrayUpper", isMut: true, isSigner: false },
        { name: "owner", isMut: false, isSigner: true }
      ],
      args: []
    },
    {
      name: "withdrawIneligibleReward",
      accounts: [
        { name: "lbPair", isMut: true, isSigner: false },
        { name: "rewardVault", isMut: true, isSigner: false },
        { name: "rewardMint", isMut: false, isSigner: false },
        { name: "funderTokenAccount", isMut: true, isSigner: false },
        { name: "funder", isMut: false, isSigner: true },
        { name: "binArray", isMut: true, isSigner: false },
        { name: "tokenProgram", isMut: false, isSigner: false },
        { name: "eventAuthority", isMut: false, isSigner: false },
        { name: "program", isMut: false, isSigner: false }
      ],
      args: [{ name: "rewardIndex", type: "u64" }]
    },
    {
      name: "setActivationSlot",
      accounts: [
        { name: "lbPair", isMut: true, isSigner: false },
        { name: "admin", isMut: true, isSigner: true }
      ],
      args: [{ name: "activationSlot", type: "u64" }]
    },
    {
      name: "setMaxSwappedAmount",
      accounts: [
        { name: "lbPair", isMut: true, isSigner: false },
        { name: "admin", isMut: true, isSigner: true }
      ],
      args: [
        { name: "swapCapDeactivateSlot", type: "u64" },
        { name: "maxSwappedAmount", type: "u64" }
      ]
    },
    {
      name: "setLockReleaseSlot",
      accounts: [
        { name: "position", isMut: true, isSigner: false },
        { name: "lbPair", isMut: false, isSigner: false },
        { name: "sender", isMut: false, isSigner: true },
        { name: "eventAuthority", isMut: false, isSigner: false },
        { name: "program", isMut: false, isSigner: false }
      ],
      args: [{ name: "newLockReleaseSlot", type: "u64" }]
    },
    {
      name: "removeLiquidityByRange",
      accounts: [
        { name: "position", isMut: true, isSigner: false },
        { name: "lbPair", isMut: true, isSigner: false },
        {
          name: "binArrayBitmapExtension",
          isMut: true,
          isSigner: false,
          isOptional: true
        },
        { name: "userTokenX", isMut: true, isSigner: false },
        { name: "userTokenY", isMut: true, isSigner: false },
        { name: "reserveX", isMut: true, isSigner: false },
        { name: "reserveY", isMut: true, isSigner: false },
        { name: "tokenXMint", isMut: false, isSigner: false },
        { name: "tokenYMint", isMut: false, isSigner: false },
        { name: "binArrayLower", isMut: true, isSigner: false },
        { name: "binArrayUpper", isMut: true, isSigner: false },
        { name: "sender", isMut: false, isSigner: true },
        { name: "tokenXProgram", isMut: false, isSigner: false },
        { name: "tokenYProgram", isMut: false, isSigner: false },
        { name: "eventAuthority", isMut: false, isSigner: false },
        { name: "program", isMut: false, isSigner: false }
      ],
      args: [
        { name: "fromBinId", type: "i32" },
        { name: "toBinId", type: "i32" },
        { name: "bpsToRemove", type: "u16" }
      ]
    },
    {
      name: "addLiquidityOneSidePrecise",
      accounts: [
        { name: "position", isMut: true, isSigner: false },
        { name: "lbPair", isMut: true, isSigner: false },
        {
          name: "binArrayBitmapExtension",
          isMut: true,
          isSigner: false,
          isOptional: true
        },
        { name: "userToken", isMut: true, isSigner: false },
        { name: "reserve", isMut: true, isSigner: false },
        { name: "tokenMint", isMut: false, isSigner: false },
        { name: "binArrayLower", isMut: true, isSigner: false },
        { name: "binArrayUpper", isMut: true, isSigner: false },
        { name: "sender", isMut: false, isSigner: true },
        { name: "tokenProgram", isMut: false, isSigner: false },
        { name: "eventAuthority", isMut: false, isSigner: false },
        { name: "program", isMut: false, isSigner: false }
      ],
      args: [
        {
          name: "parameter",
          type: { defined: "AddLiquiditySingleSidePreciseParameter" }
        }
      ]
    },
    {
      name: "goToABin",
      accounts: [
        { name: "lbPair", isMut: true, isSigner: false },
        {
          name: "binArrayBitmapExtension",
          isMut: false,
          isSigner: false,
          isOptional: true
        },
        {
          name: "fromBinArray",
          isMut: false,
          isSigner: false,
          isOptional: true
        },
        {
          name: "toBinArray",
          isMut: false,
          isSigner: false,
          isOptional: true
        },
        { name: "eventAuthority", isMut: false, isSigner: false },
        { name: "program", isMut: false, isSigner: false }
      ],
      args: [{ name: "binId", type: "i32" }]
    }
  ],
  accounts: [
    {
      name: "BinArrayBitmapExtension",
      type: {
        kind: "struct",
        fields: [
          { name: "lbPair", type: "publicKey" },
          {
            name: "positiveBinArrayBitmap",
            docs: [
              "Packed initialized bin array state for start_bin_index is positive"
            ],
            type: { array: [{ array: ["u64", 8] }, 12] }
          },
          {
            name: "negativeBinArrayBitmap",
            docs: [
              "Packed initialized bin array state for start_bin_index is negative"
            ],
            type: { array: [{ array: ["u64", 8] }, 12] }
          }
        ]
      }
    },
    {
      name: "BinArray",
      docs: [
        "An account to contain a range of bin. For example: Bin 100 <-> 200.",
        "For example:",
        "BinArray index: 0 contains bin 0 <-> 599",
        "index: 2 contains bin 600 <-> 1199, ..."
      ],
      type: {
        kind: "struct",
        fields: [
          { name: "index", type: "i64" },
          { name: "version", docs: ["Version of binArray"], type: "u8" },
          { name: "padding", type: { array: ["u8", 7] } },
          { name: "lbPair", type: "publicKey" },
          { name: "bins", type: { array: [{ defined: "Bin" }, 70] } }
        ]
      }
    },
    {
      name: "LbPair",
      type: {
        kind: "struct",
        fields: [
          { name: "parameters", type: { defined: "StaticParameters" } },
          {
            name: "vParameters",
            type: { defined: "VariableParameters" }
          },
          { name: "bumpSeed", type: { array: ["u8", 1] } },
          {
            name: "binStepSeed",
            docs: ["Bin step signer seed"],
            type: { array: ["u8", 2] }
          },
          { name: "pairType", docs: ["Type of the pair"], type: "u8" },
          { name: "activeId", docs: ["Active bin id"], type: "i32" },
          {
            name: "binStep",
            docs: ["Bin step. Represent the price increment / decrement."],
            type: "u16"
          },
          {
            name: "status",
            docs: ["Status of the pair. Check PairStatus enum."],
            type: "u8"
          },
          { name: "padding1", type: { array: ["u8", 5] } },
          {
            name: "tokenXMint",
            docs: ["Token X mint"],
            type: "publicKey"
          },
          {
            name: "tokenYMint",
            docs: ["Token Y mint"],
            type: "publicKey"
          },
          {
            name: "reserveX",
            docs: ["LB token X vault"],
            type: "publicKey"
          },
          {
            name: "reserveY",
            docs: ["LB token Y vault"],
            type: "publicKey"
          },
          {
            name: "protocolFee",
            docs: ["Uncollected protocol fee"],
            type: { defined: "ProtocolFee" }
          },
          {
            name: "feeOwner",
            docs: ["Protocol fee owner,"],
            type: "publicKey"
          },
          {
            name: "rewardInfos",
            docs: ["Farming reward information"],
            type: { array: [{ defined: "RewardInfo" }, 2] }
          },
          { name: "oracle", docs: ["Oracle pubkey"], type: "publicKey" },
          {
            name: "binArrayBitmap",
            docs: ["Packed initialized bin array state"],
            type: { array: ["u64", 16] }
          },
          {
            name: "lastUpdatedAt",
            docs: ["Last time the pool fee parameter was updated"],
            type: "i64"
          },
          {
            name: "whitelistedWallet",
            docs: ["Whitelisted wallet"],
            type: { array: ["publicKey", 2] }
          },
          {
            name: "baseKey",
            docs: ["Base keypair. Only required for permission pair"],
            type: "publicKey"
          },
          {
            name: "activationSlot",
            docs: [
              "Slot to enable the pair. Only applicable for permission pair."
            ],
            type: "u64"
          },
          {
            name: "swapCapDeactivateSlot",
            docs: [
              "Last slot until pool remove max_swapped_amount for buying"
            ],
            type: "u64"
          },
          {
            name: "maxSwappedAmount",
            docs: [
              "Max X swapped amount user can swap from y to x between activation_slot and last_slot"
            ],
            type: "u64"
          },
          {
            name: "lockDurationsInSlot",
            docs: [
              "Liquidity lock duration for positions which created before activate. Only applicable for permission pair."
            ],
            type: "u64"
          },
          { name: "creator", docs: ["Pool creator"], type: "publicKey" },
          {
            name: "reserved",
            docs: ["Reserved space for future use"],
            type: { array: ["u8", 24] }
          }
        ]
      }
    },
    {
      name: "Oracle",
      type: {
        kind: "struct",
        fields: [
          {
            name: "idx",
            docs: ["Index of latest observation slot"],
            type: "u64"
          },
          {
            name: "activeSize",
            docs: [
              "Size of active sample. Active sample is initialized observation."
            ],
            type: "u64"
          },
          {
            name: "length",
            docs: ["Number of observations"],
            type: "u64"
          }
        ]
      }
    },
    {
      name: "Position",
      type: {
        kind: "struct",
        fields: [
          {
            name: "lbPair",
            docs: ["The LB pair of this position"],
            type: "publicKey"
          },
          {
            name: "owner",
            docs: [
              "Owner of the position. Client rely on this to to fetch their positions."
            ],
            type: "publicKey"
          },
          {
            name: "liquidityShares",
            docs: [
              "Liquidity shares of this position in bins (lower_bin_id <-> upper_bin_id). This is the same as LP concept."
            ],
            type: { array: ["u64", 70] }
          },
          {
            name: "rewardInfos",
            docs: ["Farming reward information"],
            type: { array: [{ defined: "UserRewardInfo" }, 70] }
          },
          {
            name: "feeInfos",
            docs: ["Swap fee to claim information"],
            type: { array: [{ defined: "FeeInfo" }, 70] }
          },
          { name: "lowerBinId", docs: ["Lower bin ID"], type: "i32" },
          { name: "upperBinId", docs: ["Upper bin ID"], type: "i32" },
          {
            name: "lastUpdatedAt",
            docs: ["Last updated timestamp"],
            type: "i64"
          },
          {
            name: "totalClaimedFeeXAmount",
            docs: ["Total claimed token fee X"],
            type: "u64"
          },
          {
            name: "totalClaimedFeeYAmount",
            docs: ["Total claimed token fee Y"],
            type: "u64"
          },
          {
            name: "totalClaimedRewards",
            docs: ["Total claimed rewards"],
            type: { array: ["u64", 2] }
          },
          {
            name: "reserved",
            docs: ["Reserved space for future use"],
            type: { array: ["u8", 160] }
          }
        ]
      }
    },
    {
      name: "PositionV2",
      type: {
        kind: "struct",
        fields: [
          {
            name: "lbPair",
            docs: ["The LB pair of this position"],
            type: "publicKey"
          },
          {
            name: "owner",
            docs: [
              "Owner of the position. Client rely on this to to fetch their positions."
            ],
            type: "publicKey"
          },
          {
            name: "liquidityShares",
            docs: [
              "Liquidity shares of this position in bins (lower_bin_id <-> upper_bin_id). This is the same as LP concept."
            ],
            type: { array: ["u128", 70] }
          },
          {
            name: "rewardInfos",
            docs: ["Farming reward information"],
            type: { array: [{ defined: "UserRewardInfo" }, 70] }
          },
          {
            name: "feeInfos",
            docs: ["Swap fee to claim information"],
            type: { array: [{ defined: "FeeInfo" }, 70] }
          },
          { name: "lowerBinId", docs: ["Lower bin ID"], type: "i32" },
          { name: "upperBinId", docs: ["Upper bin ID"], type: "i32" },
          {
            name: "lastUpdatedAt",
            docs: ["Last updated timestamp"],
            type: "i64"
          },
          {
            name: "totalClaimedFeeXAmount",
            docs: ["Total claimed token fee X"],
            type: "u64"
          },
          {
            name: "totalClaimedFeeYAmount",
            docs: ["Total claimed token fee Y"],
            type: "u64"
          },
          {
            name: "totalClaimedRewards",
            docs: ["Total claimed rewards"],
            type: { array: ["u64", 2] }
          },
          {
            name: "operator",
            docs: ["Operator of position"],
            type: "publicKey"
          },
          {
            name: "lockReleaseSlot",
            docs: ["Slot which the locked liquidity can be withdraw"],
            type: "u64"
          },
          {
            name: "subjectedToBootstrapLiquidityLocking",
            docs: [
              "Is the position subjected to liquidity locking for the launch pool."
            ],
            type: "u8"
          },
          {
            name: "feeOwner",
            docs: [
              "Address is able to claim fee in this position, only valid for bootstrap_liquidity_position"
            ],
            type: "publicKey"
          },
          {
            name: "reserved",
            docs: ["Reserved space for future use"],
            type: { array: ["u8", 87] }
          }
        ]
      }
    },
    {
      name: "PresetParameter",
      type: {
        kind: "struct",
        fields: [
          {
            name: "binStep",
            docs: ["Bin step. Represent the price increment / decrement."],
            type: "u16"
          },
          {
            name: "baseFactor",
            docs: [
              "Used for base fee calculation. base_fee_rate = base_factor * bin_step"
            ],
            type: "u16"
          },
          {
            name: "filterPeriod",
            docs: [
              "Filter period determine high frequency trading time window."
            ],
            type: "u16"
          },
          {
            name: "decayPeriod",
            docs: [
              "Decay period determine when the volatile fee start decay / decrease."
            ],
            type: "u16"
          },
          {
            name: "reductionFactor",
            docs: [
              "Reduction factor controls the volatile fee rate decrement rate."
            ],
            type: "u16"
          },
          {
            name: "variableFeeControl",
            docs: [
              "Used to scale the variable fee component depending on the dynamic of the market"
            ],
            type: "u32"
          },
          {
            name: "maxVolatilityAccumulator",
            docs: [
              "Maximum number of bin crossed can be accumulated. Used to cap volatile fee rate."
            ],
            type: "u32"
          },
          {
            name: "minBinId",
            docs: [
              "Min bin id supported by the pool based on the configured bin step."
            ],
            type: "i32"
          },
          {
            name: "maxBinId",
            docs: [
              "Max bin id supported by the pool based on the configured bin step."
            ],
            type: "i32"
          },
          {
            name: "protocolShare",
            docs: [
              "Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee"
            ],
            type: "u16"
          }
        ]
      }
    }
  ],
  types: [
    {
      name: "LiquidityParameterByStrategyOneSide",
      type: {
        kind: "struct",
        fields: [
          {
            name: "amount",
            docs: ["Amount of X token or Y token to deposit"],
            type: "u64"
          },
          {
            name: "activeId",
            docs: ["Active bin that integrator observe off-chain"],
            type: "i32"
          },
          {
            name: "maxActiveBinSlippage",
            docs: ["max active bin slippage allowed"],
            type: "i32"
          },
          {
            name: "strategyParameters",
            docs: ["strategy parameters"],
            type: { defined: "StrategyParameters" }
          }
        ]
      }
    },
    {
      name: "LiquidityParameterByStrategy",
      type: {
        kind: "struct",
        fields: [
          {
            name: "amountX",
            docs: ["Amount of X token to deposit"],
            type: "u64"
          },
          {
            name: "amountY",
            docs: ["Amount of Y token to deposit"],
            type: "u64"
          },
          {
            name: "activeId",
            docs: ["Active bin that integrator observe off-chain"],
            type: "i32"
          },
          {
            name: "maxActiveBinSlippage",
            docs: ["max active bin slippage allowed"],
            type: "i32"
          },
          {
            name: "strategyParameters",
            docs: ["strategy parameters"],
            type: { defined: "StrategyParameters" }
          }
        ]
      }
    },
    {
      name: "StrategyParameters",
      type: {
        kind: "struct",
        fields: [
          { name: "minBinId", docs: ["min bin id"], type: "i32" },
          { name: "maxBinId", docs: ["max bin id"], type: "i32" },
          {
            name: "strategyType",
            docs: ["strategy type"],
            type: { defined: "StrategyType" }
          },
          {
            name: "parameteres",
            docs: ["parameters"],
            type: { array: ["u8", 64] }
          }
        ]
      }
    },
    {
      name: "LiquidityOneSideParameter",
      type: {
        kind: "struct",
        fields: [
          {
            name: "amount",
            docs: ["Amount of X token or Y token to deposit"],
            type: "u64"
          },
          {
            name: "activeId",
            docs: ["Active bin that integrator observe off-chain"],
            type: "i32"
          },
          {
            name: "maxActiveBinSlippage",
            docs: ["max active bin slippage allowed"],
            type: "i32"
          },
          {
            name: "binLiquidityDist",
            docs: ["Liquidity distribution to each bins"],
            type: { vec: { defined: "BinLiquidityDistributionByWeight" } }
          }
        ]
      }
    },
    {
      name: "BinLiquidityDistributionByWeight",
      type: {
        kind: "struct",
        fields: [
          {
            name: "binId",
            docs: ["Define the bin ID wish to deposit to."],
            type: "i32"
          },
          {
            name: "weight",
            docs: ["weight of liquidity distributed for this bin id"],
            type: "u16"
          }
        ]
      }
    },
    {
      name: "LiquidityParameterByWeight",
      type: {
        kind: "struct",
        fields: [
          {
            name: "amountX",
            docs: ["Amount of X token to deposit"],
            type: "u64"
          },
          {
            name: "amountY",
            docs: ["Amount of Y token to deposit"],
            type: "u64"
          },
          {
            name: "activeId",
            docs: ["Active bin that integrator observe off-chain"],
            type: "i32"
          },
          {
            name: "maxActiveBinSlippage",
            docs: ["max active bin slippage allowed"],
            type: "i32"
          },
          {
            name: "binLiquidityDist",
            docs: ["Liquidity distribution to each bins"],
            type: { vec: { defined: "BinLiquidityDistributionByWeight" } }
          }
        ]
      }
    },
    {
      name: "AddLiquiditySingleSidePreciseParameter",
      type: {
        kind: "struct",
        fields: [
          {
            name: "bins",
            type: { vec: { defined: "CompressedBinDepositAmount" } }
          },
          { name: "decompressMultiplier", type: "u64" }
        ]
      }
    },
    {
      name: "CompressedBinDepositAmount",
      type: {
        kind: "struct",
        fields: [
          { name: "binId", type: "i32" },
          { name: "amount", type: "u32" }
        ]
      }
    },
    {
      name: "BinLiquidityDistribution",
      type: {
        kind: "struct",
        fields: [
          {
            name: "binId",
            docs: ["Define the bin ID wish to deposit to."],
            type: "i32"
          },
          {
            name: "distributionX",
            docs: [
              "DistributionX (or distributionY) is the percentages of amountX (or amountY) you want to add to each bin."
            ],
            type: "u16"
          },
          {
            name: "distributionY",
            docs: [
              "DistributionX (or distributionY) is the percentages of amountX (or amountY) you want to add to each bin."
            ],
            type: "u16"
          }
        ]
      }
    },
    {
      name: "LiquidityParameter",
      type: {
        kind: "struct",
        fields: [
          {
            name: "amountX",
            docs: ["Amount of X token to deposit"],
            type: "u64"
          },
          {
            name: "amountY",
            docs: ["Amount of Y token to deposit"],
            type: "u64"
          },
          {
            name: "binLiquidityDist",
            docs: ["Liquidity distribution to each bins"],
            type: { vec: { defined: "BinLiquidityDistribution" } }
          }
        ]
      }
    },
    {
      name: "InitPermissionPairIx",
      type: {
        kind: "struct",
        fields: [
          { name: "activeId", type: "i32" },
          { name: "binStep", type: "u16" },
          { name: "baseFactor", type: "u16" },
          { name: "minBinId", type: "i32" },
          { name: "maxBinId", type: "i32" },
          { name: "lockDurationInSlot", type: "u64" }
        ]
      }
    },
    {
      name: "InitPresetParametersIx",
      type: {
        kind: "struct",
        fields: [
          {
            name: "binStep",
            docs: ["Bin step. Represent the price increment / decrement."],
            type: "u16"
          },
          {
            name: "baseFactor",
            docs: [
              "Used for base fee calculation. base_fee_rate = base_factor * bin_step"
            ],
            type: "u16"
          },
          {
            name: "filterPeriod",
            docs: [
              "Filter period determine high frequency trading time window."
            ],
            type: "u16"
          },
          {
            name: "decayPeriod",
            docs: [
              "Decay period determine when the volatile fee start decay / decrease."
            ],
            type: "u16"
          },
          {
            name: "reductionFactor",
            docs: [
              "Reduction factor controls the volatile fee rate decrement rate."
            ],
            type: "u16"
          },
          {
            name: "variableFeeControl",
            docs: [
              "Used to scale the variable fee component depending on the dynamic of the market"
            ],
            type: "u32"
          },
          {
            name: "maxVolatilityAccumulator",
            docs: [
              "Maximum number of bin crossed can be accumulated. Used to cap volatile fee rate."
            ],
            type: "u32"
          },
          {
            name: "minBinId",
            docs: [
              "Min bin id supported by the pool based on the configured bin step."
            ],
            type: "i32"
          },
          {
            name: "maxBinId",
            docs: [
              "Max bin id supported by the pool based on the configured bin step."
            ],
            type: "i32"
          },
          {
            name: "protocolShare",
            docs: [
              "Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee"
            ],
            type: "u16"
          }
        ]
      }
    },
    {
      name: "BinLiquidityReduction",
      type: {
        kind: "struct",
        fields: [
          { name: "binId", type: "i32" },
          { name: "bpsToRemove", type: "u16" }
        ]
      }
    },
    {
      name: "FeeParameter",
      type: {
        kind: "struct",
        fields: [
          {
            name: "protocolShare",
            docs: [
              "Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee"
            ],
            type: "u16"
          },
          {
            name: "baseFactor",
            docs: ["Base factor for base fee rate"],
            type: "u16"
          }
        ]
      }
    },
    {
      name: "Bin",
      type: {
        kind: "struct",
        fields: [
          {
            name: "amountX",
            docs: [
              "Amount of token X in the bin. This already excluded protocol fees."
            ],
            type: "u64"
          },
          {
            name: "amountY",
            docs: [
              "Amount of token Y in the bin. This already excluded protocol fees."
            ],
            type: "u64"
          },
          { name: "price", docs: ["Bin price"], type: "u128" },
          {
            name: "liquiditySupply",
            docs: [
              "Liquidities of the bin. This is the same as LP mint supply. q-number"
            ],
            type: "u128"
          },
          {
            name: "rewardPerTokenStored",
            docs: ["reward_a_per_token_stored"],
            type: { array: ["u128", 2] }
          },
          {
            name: "feeAmountXPerTokenStored",
            docs: ["Swap fee amount of token X per liquidity deposited."],
            type: "u128"
          },
          {
            name: "feeAmountYPerTokenStored",
            docs: ["Swap fee amount of token Y per liquidity deposited."],
            type: "u128"
          },
          {
            name: "amountXIn",
            docs: [
              "Total token X swap into the bin. Only used for tracking purpose."
            ],
            type: "u128"
          },
          {
            name: "amountYIn",
            docs: [
              "Total token Y swap into he bin. Only used for tracking purpose."
            ],
            type: "u128"
          }
        ]
      }
    },
    {
      name: "ProtocolFee",
      type: {
        kind: "struct",
        fields: [
          { name: "amountX", type: "u64" },
          { name: "amountY", type: "u64" }
        ]
      }
    },
    {
      name: "RewardInfo",
      docs: [
        "Stores the state relevant for tracking liquidity mining rewards"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "mint",
            docs: ["Reward token mint."],
            type: "publicKey"
          },
          {
            name: "vault",
            docs: ["Reward vault token account."],
            type: "publicKey"
          },
          {
            name: "funder",
            docs: ["Authority account that allows to fund rewards"],
            type: "publicKey"
          },
          {
            name: "rewardDuration",
            docs: ["TODO check whether we need to store it in pool"],
            type: "u64"
          },
          {
            name: "rewardDurationEnd",
            docs: ["TODO check whether we need to store it in pool"],
            type: "u64"
          },
          {
            name: "rewardRate",
            docs: ["TODO check whether we need to store it in pool"],
            type: "u128"
          },
          {
            name: "lastUpdateTime",
            docs: ["The last time reward states were updated."],
            type: "u64"
          },
          {
            name: "cumulativeSecondsWithEmptyLiquidityReward",
            docs: [
              "Accumulated seconds where when farm distribute rewards, but the bin is empty. The reward will be accumulated for next reward time window."
            ],
            type: "u64"
          }
        ]
      }
    },
    {
      name: "Observation",
      type: {
        kind: "struct",
        fields: [
          {
            name: "cumulativeActiveBinId",
            docs: ["Cumulative active bin ID"],
            type: "i128"
          },
          {
            name: "createdAt",
            docs: ["Observation sample created timestamp"],
            type: "i64"
          },
          {
            name: "lastUpdatedAt",
            docs: ["Observation sample last updated timestamp"],
            type: "i64"
          }
        ]
      }
    },
    {
      name: "StaticParameters",
      docs: ["Parameter that set by the protocol"],
      type: {
        kind: "struct",
        fields: [
          {
            name: "baseFactor",
            docs: [
              "Used for base fee calculation. base_fee_rate = base_factor * bin_step"
            ],
            type: "u16"
          },
          {
            name: "filterPeriod",
            docs: [
              "Filter period determine high frequency trading time window."
            ],
            type: "u16"
          },
          {
            name: "decayPeriod",
            docs: [
              "Decay period determine when the volatile fee start decay / decrease."
            ],
            type: "u16"
          },
          {
            name: "reductionFactor",
            docs: [
              "Reduction factor controls the volatile fee rate decrement rate."
            ],
            type: "u16"
          },
          {
            name: "variableFeeControl",
            docs: [
              "Used to scale the variable fee component depending on the dynamic of the market"
            ],
            type: "u32"
          },
          {
            name: "maxVolatilityAccumulator",
            docs: [
              "Maximum number of bin crossed can be accumulated. Used to cap volatile fee rate."
            ],
            type: "u32"
          },
          {
            name: "minBinId",
            docs: [
              "Min bin id supported by the pool based on the configured bin step."
            ],
            type: "i32"
          },
          {
            name: "maxBinId",
            docs: [
              "Max bin id supported by the pool based on the configured bin step."
            ],
            type: "i32"
          },
          {
            name: "protocolShare",
            docs: [
              "Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee"
            ],
            type: "u16"
          },
          {
            name: "padding",
            docs: ["Padding for bytemuck safe alignment"],
            type: { array: ["u8", 6] }
          }
        ]
      }
    },
    {
      name: "VariableParameters",
      docs: ["Parameters that changes based on dynamic of the market"],
      type: {
        kind: "struct",
        fields: [
          {
            name: "volatilityAccumulator",
            docs: [
              "Volatility accumulator measure the number of bin crossed since reference bin ID. Normally (without filter period taken into consideration), reference bin ID is the active bin of last swap.",
              "It affects the variable fee rate"
            ],
            type: "u32"
          },
          {
            name: "volatilityReference",
            docs: [
              "Volatility reference is decayed volatility accumulator. It is always <= volatility_accumulator"
            ],
            type: "u32"
          },
          {
            name: "indexReference",
            docs: ["Active bin id of last swap."],
            type: "i32"
          },
          {
            name: "padding",
            docs: ["Padding for bytemuck safe alignment"],
            type: { array: ["u8", 4] }
          },
          {
            name: "lastUpdateTimestamp",
            docs: ["Last timestamp the variable parameters was updated"],
            type: "i64"
          },
          {
            name: "padding1",
            docs: ["Padding for bytemuck safe alignment"],
            type: { array: ["u8", 8] }
          }
        ]
      }
    },
    {
      name: "FeeInfo",
      type: {
        kind: "struct",
        fields: [
          { name: "feeXPerTokenComplete", type: "u128" },
          { name: "feeYPerTokenComplete", type: "u128" },
          { name: "feeXPending", type: "u64" },
          { name: "feeYPending", type: "u64" }
        ]
      }
    },
    {
      name: "UserRewardInfo",
      type: {
        kind: "struct",
        fields: [
          {
            name: "rewardPerTokenCompletes",
            type: { array: ["u128", 2] }
          },
          { name: "rewardPendings", type: { array: ["u64", 2] } }
        ]
      }
    },
    {
      name: "StrategyType",
      type: {
        kind: "enum",
        variants: [
          { name: "SpotOneSide" },
          { name: "CurveOneSide" },
          { name: "BidAskOneSide" },
          { name: "SpotBalanced" },
          { name: "CurveBalanced" },
          { name: "BidAskBalanced" },
          { name: "SpotImBalanced" },
          { name: "CurveImBalanced" },
          { name: "BidAskImBalanced" }
        ]
      }
    },
    {
      name: "Rounding",
      type: {
        kind: "enum",
        variants: [{ name: "Up" }, { name: "Down" }]
      }
    },
    {
      name: "LayoutVersion",
      docs: ["Layout version"],
      type: {
        kind: "enum",
        variants: [{ name: "V0" }, { name: "V1" }]
      }
    },
    {
      name: "PairType",
      docs: [
        "Type of the Pair. 0 = Permissionless, 1 = Permission. Putting 0 as permissionless for backward compatibility."
      ],
      type: {
        kind: "enum",
        variants: [{ name: "Permissionless" }, { name: "Permission" }]
      }
    },
    {
      name: "PairStatus",
      docs: [
        "Pair status. 0 = Enabled, 1 = Disabled. Putting 0 as enabled for backward compatibility."
      ],
      type: {
        kind: "enum",
        variants: [{ name: "Enabled" }, { name: "Disabled" }]
      }
    }
  ],
  events: [
    {
      name: "CompositionFee",
      fields: [
        { name: "from", type: "publicKey", index: false },
        { name: "binId", type: "i16", index: false },
        { name: "tokenXFeeAmount", type: "u64", index: false },
        { name: "tokenYFeeAmount", type: "u64", index: false },
        { name: "protocolTokenXFeeAmount", type: "u64", index: false },
        { name: "protocolTokenYFeeAmount", type: "u64", index: false }
      ]
    },
    {
      name: "AddLiquidity",
      fields: [
        { name: "lbPair", type: "publicKey", index: false },
        { name: "from", type: "publicKey", index: false },
        { name: "position", type: "publicKey", index: false },
        { name: "amounts", type: { array: ["u64", 2] }, index: false },
        { name: "activeBinId", type: "i32", index: false }
      ]
    },
    {
      name: "RemoveLiquidity",
      fields: [
        { name: "lbPair", type: "publicKey", index: false },
        { name: "from", type: "publicKey", index: false },
        { name: "position", type: "publicKey", index: false },
        { name: "amounts", type: { array: ["u64", 2] }, index: false },
        { name: "activeBinId", type: "i32", index: false }
      ]
    },
    {
      name: "Swap",
      fields: [
        { name: "lbPair", type: "publicKey", index: false },
        { name: "from", type: "publicKey", index: false },
        { name: "startBinId", type: "i32", index: false },
        { name: "endBinId", type: "i32", index: false },
        { name: "amountIn", type: "u64", index: false },
        { name: "amountOut", type: "u64", index: false },
        { name: "swapForY", type: "bool", index: false },
        { name: "fee", type: "u64", index: false },
        { name: "protocolFee", type: "u64", index: false },
        { name: "feeBps", type: "u128", index: false },
        { name: "hostFee", type: "u64", index: false }
      ]
    },
    {
      name: "ClaimReward",
      fields: [
        { name: "lbPair", type: "publicKey", index: false },
        { name: "position", type: "publicKey", index: false },
        { name: "owner", type: "publicKey", index: false },
        { name: "rewardIndex", type: "u64", index: false },
        { name: "totalReward", type: "u64", index: false }
      ]
    },
    {
      name: "FundReward",
      fields: [
        { name: "lbPair", type: "publicKey", index: false },
        { name: "funder", type: "publicKey", index: false },
        { name: "rewardIndex", type: "u64", index: false },
        { name: "amount", type: "u64", index: false }
      ]
    },
    {
      name: "InitializeReward",
      fields: [
        { name: "lbPair", type: "publicKey", index: false },
        { name: "rewardMint", type: "publicKey", index: false },
        { name: "funder", type: "publicKey", index: false },
        { name: "rewardIndex", type: "u64", index: false },
        { name: "rewardDuration", type: "u64", index: false }
      ]
    },
    {
      name: "UpdateRewardDuration",
      fields: [
        { name: "lbPair", type: "publicKey", index: false },
        { name: "rewardIndex", type: "u64", index: false },
        { name: "oldRewardDuration", type: "u64", index: false },
        { name: "newRewardDuration", type: "u64", index: false }
      ]
    },
    {
      name: "UpdateRewardFunder",
      fields: [
        { name: "lbPair", type: "publicKey", index: false },
        { name: "rewardIndex", type: "u64", index: false },
        { name: "oldFunder", type: "publicKey", index: false },
        { name: "newFunder", type: "publicKey", index: false }
      ]
    },
    {
      name: "PositionClose",
      fields: [
        { name: "position", type: "publicKey", index: false },
        { name: "owner", type: "publicKey", index: false }
      ]
    },
    {
      name: "ClaimFee",
      fields: [
        { name: "lbPair", type: "publicKey", index: false },
        { name: "position", type: "publicKey", index: false },
        { name: "owner", type: "publicKey", index: false },
        { name: "feeX", type: "u64", index: false },
        { name: "feeY", type: "u64", index: false }
      ]
    },
    {
      name: "LbPairCreate",
      fields: [
        { name: "lbPair", type: "publicKey", index: false },
        { name: "binStep", type: "u16", index: false },
        { name: "tokenX", type: "publicKey", index: false },
        { name: "tokenY", type: "publicKey", index: false }
      ]
    },
    {
      name: "PositionCreate",
      fields: [
        { name: "lbPair", type: "publicKey", index: false },
        { name: "position", type: "publicKey", index: false },
        { name: "owner", type: "publicKey", index: false }
      ]
    },
    {
      name: "FeeParameterUpdate",
      fields: [
        { name: "lbPair", type: "publicKey", index: false },
        { name: "protocolShare", type: "u16", index: false },
        { name: "baseFactor", type: "u16", index: false }
      ]
    },
    {
      name: "IncreaseObservation",
      fields: [
        { name: "oracle", type: "publicKey", index: false },
        { name: "newObservationLength", type: "u64", index: false }
      ]
    },
    {
      name: "WithdrawIneligibleReward",
      fields: [
        { name: "lbPair", type: "publicKey", index: false },
        { name: "rewardMint", type: "publicKey", index: false },
        { name: "amount", type: "u64", index: false }
      ]
    },
    {
      name: "UpdatePositionOperator",
      fields: [
        { name: "position", type: "publicKey", index: false },
        { name: "oldOperator", type: "publicKey", index: false },
        { name: "newOperator", type: "publicKey", index: false }
      ]
    },
    {
      name: "UpdatePositionLockReleaseSlot",
      fields: [
        { name: "position", type: "publicKey", index: false },
        { name: "currentSlot", type: "u64", index: false },
        { name: "newLockReleaseSlot", type: "u64", index: false },
        { name: "oldLockReleaseSlot", type: "u64", index: false },
        { name: "sender", type: "publicKey", index: false }
      ]
    },
    {
      name: "GoToABin",
      fields: [
        { name: "lbPair", type: "publicKey", index: false },
        { name: "fromBinId", type: "i32", index: false },
        { name: "toBinId", type: "i32", index: false }
      ]
    }
  ],
  errors: [
    {
      code: 6e3,
      name: "InvalidStartBinIndex",
      msg: "Invalid start bin index"
    },
    { code: 6001, name: "InvalidBinId", msg: "Invalid bin id" },
    { code: 6002, name: "InvalidInput", msg: "Invalid input data" },
    {
      code: 6003,
      name: "ExceededAmountSlippageTolerance",
      msg: "Exceeded amount slippage tolerance"
    },
    {
      code: 6004,
      name: "ExceededBinSlippageTolerance",
      msg: "Exceeded bin slippage tolerance"
    },
    {
      code: 6005,
      name: "CompositionFactorFlawed",
      msg: "Composition factor flawed"
    },
    { code: 6006, name: "NonPresetBinStep", msg: "Non preset bin step" },
    { code: 6007, name: "ZeroLiquidity", msg: "Zero liquidity" },
    { code: 6008, name: "InvalidPosition", msg: "Invalid position" },
    { code: 6009, name: "BinArrayNotFound", msg: "Bin array not found" },
    { code: 6010, name: "InvalidTokenMint", msg: "Invalid token mint" },
    {
      code: 6011,
      name: "InvalidAccountForSingleDeposit",
      msg: "Invalid account for single deposit"
    },
    {
      code: 6012,
      name: "PairInsufficientLiquidity",
      msg: "Pair insufficient liquidity"
    },
    { code: 6013, name: "InvalidFeeOwner", msg: "Invalid fee owner" },
    {
      code: 6014,
      name: "InvalidFeeWithdrawAmount",
      msg: "Invalid fee withdraw amount"
    },
    { code: 6015, name: "InvalidAdmin", msg: "Invalid admin" },
    { code: 6016, name: "IdenticalFeeOwner", msg: "Identical fee owner" },
    { code: 6017, name: "InvalidBps", msg: "Invalid basis point" },
    { code: 6018, name: "MathOverflow", msg: "Math operation overflow" },
    { code: 6019, name: "TypeCastFailed", msg: "Type cast error" },
    {
      code: 6020,
      name: "InvalidRewardIndex",
      msg: "Invalid reward index"
    },
    {
      code: 6021,
      name: "InvalidRewardDuration",
      msg: "Invalid reward duration"
    },
    {
      code: 6022,
      name: "RewardInitialized",
      msg: "Reward already initialized"
    },
    {
      code: 6023,
      name: "RewardUninitialized",
      msg: "Reward not initialized"
    },
    { code: 6024, name: "IdenticalFunder", msg: "Identical funder" },
    {
      code: 6025,
      name: "RewardCampaignInProgress",
      msg: "Reward campaign in progress"
    },
    {
      code: 6026,
      name: "IdenticalRewardDuration",
      msg: "Reward duration is the same"
    },
    { code: 6027, name: "InvalidBinArray", msg: "Invalid bin array" },
    {
      code: 6028,
      name: "NonContinuousBinArrays",
      msg: "Bin arrays must be continuous"
    },
    {
      code: 6029,
      name: "InvalidRewardVault",
      msg: "Invalid reward vault"
    },
    {
      code: 6030,
      name: "NonEmptyPosition",
      msg: "Position is not empty"
    },
    {
      code: 6031,
      name: "UnauthorizedAccess",
      msg: "Unauthorized access"
    },
    {
      code: 6032,
      name: "InvalidFeeParameter",
      msg: "Invalid fee parameter"
    },
    { code: 6033, name: "MissingOracle", msg: "Missing oracle account" },
    {
      code: 6034,
      name: "InsufficientSample",
      msg: "Insufficient observation sample"
    },
    {
      code: 6035,
      name: "InvalidLookupTimestamp",
      msg: "Invalid lookup timestamp"
    },
    {
      code: 6036,
      name: "BitmapExtensionAccountIsNotProvided",
      msg: "Bitmap extension account is not provided"
    },
    {
      code: 6037,
      name: "CannotFindNonZeroLiquidityBinArrayId",
      msg: "Cannot find non-zero liquidity binArrayId"
    },
    { code: 6038, name: "BinIdOutOfBound", msg: "Bin id out of bound" },
    {
      code: 6039,
      name: "InsufficientOutAmount",
      msg: "Insufficient amount in for minimum out"
    },
    {
      code: 6040,
      name: "InvalidPositionWidth",
      msg: "Invalid position width"
    },
    {
      code: 6041,
      name: "ExcessiveFeeUpdate",
      msg: "Excessive fee update"
    },
    { code: 6042, name: "PoolDisabled", msg: "Pool disabled" },
    { code: 6043, name: "InvalidPoolType", msg: "Invalid pool type" },
    {
      code: 6044,
      name: "ExceedMaxWhitelist",
      msg: "Whitelist for wallet is full"
    },
    { code: 6045, name: "InvalidIndex", msg: "Invalid index" },
    { code: 6046, name: "RewardNotEnded", msg: "Reward not ended" },
    {
      code: 6047,
      name: "MustWithdrawnIneligibleReward",
      msg: "Must withdraw ineligible reward"
    },
    {
      code: 6048,
      name: "UnauthorizedAddress",
      msg: "Unauthorized address"
    },
    {
      code: 6049,
      name: "OperatorsAreTheSame",
      msg: "Cannot update because operators are the same"
    },
    {
      code: 6050,
      name: "WithdrawToWrongTokenAccount",
      msg: "Withdraw to wrong token account"
    },
    { code: 6051, name: "WrongRentReceiver", msg: "Wrong rent receiver" },
    {
      code: 6052,
      name: "AlreadyPassActivationSlot",
      msg: "Already activated"
    },
    {
      code: 6053,
      name: "LastSlotCannotBeSmallerThanActivateSlot",
      msg: "Last slot cannot be smaller than activate slot"
    },
    {
      code: 6054,
      name: "ExceedMaxSwappedAmount",
      msg: "Swapped amount is exceeded max swapped amount"
    },
    {
      code: 6055,
      name: "InvalidStrategyParameters",
      msg: "Invalid strategy parameters"
    },
    { code: 6056, name: "LiquidityLocked", msg: "Liquidity locked" },
    {
      code: 6057,
      name: "InvalidLockReleaseSlot",
      msg: "Invalid lock release slot"
    },
    {
      code: 6058,
      name: "BinRangeIsNotEmpty",
      msg: "Bin range is not empty"
    }
  ]
};

// idl/meteora-amm.json
var meteora_amm_default = {
  version: "0.4.12",
  name: "amm",
  docs: ["Program for AMM"],
  instructions: [
    {
      name: "initializePermissionedPool",
      docs: ["Initialize a new permissioned pool."],
      accounts: [
        {
          name: "pool",
          isMut: true,
          isSigner: true,
          docs: ["Pool account (arbitrary address)"]
        },
        {
          name: "lpMint",
          isMut: true,
          isSigner: false,
          docs: ["LP token mint of the pool"]
        },
        {
          name: "tokenAMint",
          isMut: false,
          isSigner: false,
          docs: ["Token A mint of the pool. Eg: USDT"]
        },
        {
          name: "tokenBMint",
          isMut: false,
          isSigner: false,
          docs: ["Token B mint of the pool. Eg: USDC"]
        },
        {
          name: "aVault",
          isMut: true,
          isSigner: false,
          docs: [
            "Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account."
          ]
        },
        {
          name: "bVault",
          isMut: true,
          isSigner: false,
          docs: [
            "Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account."
          ]
        },
        {
          name: "aVaultLpMint",
          isMut: true,
          isSigner: false,
          docs: ["LP token mint of vault A"]
        },
        {
          name: "bVaultLpMint",
          isMut: true,
          isSigner: false,
          docs: ["LP token mint of vault B"]
        },
        {
          name: "aVaultLp",
          isMut: true,
          isSigner: false,
          docs: [
            "LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault."
          ]
        },
        {
          name: "bVaultLp",
          isMut: true,
          isSigner: false,
          docs: [
            "LP token account of vault B. Used to receive/burn vault LP upon deposit/withdraw from the vault."
          ]
        },
        {
          name: "adminTokenA",
          isMut: true,
          isSigner: false,
          docs: [
            "Admin token account for pool token A mint. Used to bootstrap the pool with initial liquidity."
          ]
        },
        {
          name: "adminTokenB",
          isMut: true,
          isSigner: false,
          docs: [
            "Admin token account for pool token B mint. Used to bootstrap the pool with initial liquidity."
          ]
        },
        {
          name: "adminPoolLp",
          isMut: true,
          isSigner: false,
          docs: [
            "Admin pool LP token account. Used to receive LP during first deposit (initialize pool)",
            "Admin pool LP token account. Used to receive LP during first deposit (initialize pool)"
          ]
        },
        {
          name: "adminTokenAFee",
          isMut: true,
          isSigner: false,
          docs: [
            "Admin fee token account for token A. Used to receive trading fee."
          ]
        },
        {
          name: "adminTokenBFee",
          isMut: true,
          isSigner: false,
          docs: [
            "Admin fee token account for token B. Used to receive trading fee."
          ]
        },
        {
          name: "admin",
          isMut: true,
          isSigner: true,
          docs: [
            "Admin account. This account will be the admin of the pool, and the payer for PDA during initialize pool."
          ]
        },
        { name: "feeOwner", isMut: false, isSigner: false },
        {
          name: "rent",
          isMut: false,
          isSigner: false,
          docs: ["Rent account."]
        },
        { name: "mintMetadata", isMut: true, isSigner: false },
        { name: "metadataProgram", isMut: false, isSigner: false },
        {
          name: "vaultProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Vault program. The pool will deposit/withdraw liquidity from the vault."
          ]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          docs: ["Token program."]
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false,
          docs: ["Associated token program."]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: ["System program."]
        }
      ],
      args: [{ name: "curveType", type: { defined: "CurveType" } }]
    },
    {
      name: "initializePermissionlessPool",
      docs: ["Initialize a new permissionless pool."],
      accounts: [
        {
          name: "pool",
          isMut: true,
          isSigner: false,
          docs: ["Pool account (PDA address)"]
        },
        {
          name: "lpMint",
          isMut: true,
          isSigner: false,
          docs: ["LP token mint of the pool"]
        },
        {
          name: "tokenAMint",
          isMut: false,
          isSigner: false,
          docs: ["Token A mint of the pool. Eg: USDT"]
        },
        {
          name: "tokenBMint",
          isMut: false,
          isSigner: false,
          docs: ["Token B mint of the pool. Eg: USDC"]
        },
        {
          name: "aVault",
          isMut: true,
          isSigner: false,
          docs: [
            "Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account."
          ]
        },
        {
          name: "bVault",
          isMut: true,
          isSigner: false,
          docs: [
            "Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account."
          ]
        },
        {
          name: "aTokenVault",
          isMut: true,
          isSigner: false,
          docs: ["Token vault account of vault A"]
        },
        {
          name: "bTokenVault",
          isMut: true,
          isSigner: false,
          docs: ["Token vault account of vault B"]
        },
        {
          name: "aVaultLpMint",
          isMut: true,
          isSigner: false,
          docs: ["LP token mint of vault A"]
        },
        {
          name: "bVaultLpMint",
          isMut: true,
          isSigner: false,
          docs: ["LP token mint of vault B"]
        },
        {
          name: "aVaultLp",
          isMut: true,
          isSigner: false,
          docs: [
            "LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault."
          ]
        },
        {
          name: "bVaultLp",
          isMut: true,
          isSigner: false,
          docs: [
            "LP token account of vault B. Used to receive/burn vault LP upon deposit/withdraw from the vault."
          ]
        },
        {
          name: "payerTokenA",
          isMut: true,
          isSigner: false,
          docs: [
            "Payer token account for pool token A mint. Used to bootstrap the pool with initial liquidity."
          ]
        },
        {
          name: "payerTokenB",
          isMut: true,
          isSigner: false,
          docs: [
            "Admin token account for pool token B mint. Used to bootstrap the pool with initial liquidity."
          ]
        },
        { name: "payerPoolLp", isMut: true, isSigner: false },
        {
          name: "adminTokenAFee",
          isMut: true,
          isSigner: false,
          docs: [
            "Admin fee token account for token A. Used to receive trading fee."
          ]
        },
        {
          name: "adminTokenBFee",
          isMut: true,
          isSigner: false,
          docs: [
            "Admin fee token account for token B. Used to receive trading fee."
          ]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: [
            "Admin account. This account will be the admin of the pool, and the payer for PDA during initialize pool."
          ]
        },
        { name: "feeOwner", isMut: false, isSigner: false },
        {
          name: "rent",
          isMut: false,
          isSigner: false,
          docs: ["Rent account."]
        },
        { name: "mintMetadata", isMut: true, isSigner: false },
        { name: "metadataProgram", isMut: false, isSigner: false },
        {
          name: "vaultProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Vault program. The pool will deposit/withdraw liquidity from the vault."
          ]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          docs: ["Token program."]
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false,
          docs: ["Associated token program."]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: ["System program."]
        }
      ],
      args: [
        { name: "curveType", type: { defined: "CurveType" } },
        { name: "tokenAAmount", type: "u64" },
        { name: "tokenBAmount", type: "u64" }
      ]
    },
    {
      name: "initializePermissionlessPoolWithFeeTier",
      docs: ["Initialize a new permissionless pool with customized fee tier"],
      accounts: [
        {
          name: "pool",
          isMut: true,
          isSigner: false,
          docs: ["Pool account (PDA address)"]
        },
        {
          name: "lpMint",
          isMut: true,
          isSigner: false,
          docs: ["LP token mint of the pool"]
        },
        {
          name: "tokenAMint",
          isMut: false,
          isSigner: false,
          docs: ["Token A mint of the pool. Eg: USDT"]
        },
        {
          name: "tokenBMint",
          isMut: false,
          isSigner: false,
          docs: ["Token B mint of the pool. Eg: USDC"]
        },
        {
          name: "aVault",
          isMut: true,
          isSigner: false,
          docs: [
            "Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account."
          ]
        },
        {
          name: "bVault",
          isMut: true,
          isSigner: false,
          docs: [
            "Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account."
          ]
        },
        {
          name: "aTokenVault",
          isMut: true,
          isSigner: false,
          docs: ["Token vault account of vault A"]
        },
        {
          name: "bTokenVault",
          isMut: true,
          isSigner: false,
          docs: ["Token vault account of vault B"]
        },
        {
          name: "aVaultLpMint",
          isMut: true,
          isSigner: false,
          docs: ["LP token mint of vault A"]
        },
        {
          name: "bVaultLpMint",
          isMut: true,
          isSigner: false,
          docs: ["LP token mint of vault B"]
        },
        {
          name: "aVaultLp",
          isMut: true,
          isSigner: false,
          docs: [
            "LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault."
          ]
        },
        {
          name: "bVaultLp",
          isMut: true,
          isSigner: false,
          docs: [
            "LP token account of vault B. Used to receive/burn vault LP upon deposit/withdraw from the vault."
          ]
        },
        {
          name: "payerTokenA",
          isMut: true,
          isSigner: false,
          docs: [
            "Payer token account for pool token A mint. Used to bootstrap the pool with initial liquidity."
          ]
        },
        {
          name: "payerTokenB",
          isMut: true,
          isSigner: false,
          docs: [
            "Admin token account for pool token B mint. Used to bootstrap the pool with initial liquidity."
          ]
        },
        { name: "payerPoolLp", isMut: true, isSigner: false },
        {
          name: "adminTokenAFee",
          isMut: true,
          isSigner: false,
          docs: [
            "Admin fee token account for token A. Used to receive trading fee."
          ]
        },
        {
          name: "adminTokenBFee",
          isMut: true,
          isSigner: false,
          docs: [
            "Admin fee token account for token B. Used to receive trading fee."
          ]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: [
            "Admin account. This account will be the admin of the pool, and the payer for PDA during initialize pool."
          ]
        },
        { name: "feeOwner", isMut: false, isSigner: false },
        {
          name: "rent",
          isMut: false,
          isSigner: false,
          docs: ["Rent account."]
        },
        { name: "mintMetadata", isMut: true, isSigner: false },
        { name: "metadataProgram", isMut: false, isSigner: false },
        {
          name: "vaultProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Vault program. The pool will deposit/withdraw liquidity from the vault."
          ]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          docs: ["Token program."]
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false,
          docs: ["Associated token program."]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: ["System program."]
        }
      ],
      args: [
        { name: "curveType", type: { defined: "CurveType" } },
        { name: "tradeFeeBps", type: "u64" },
        { name: "tokenAAmount", type: "u64" },
        { name: "tokenBAmount", type: "u64" }
      ]
    },
    {
      name: "enableOrDisablePool",
      docs: [
        "Enable or disable a pool. A disabled pool allow only remove balanced liquidity operation."
      ],
      accounts: [
        {
          name: "pool",
          isMut: true,
          isSigner: false,
          docs: ["Pool account (PDA)"]
        },
        {
          name: "admin",
          isMut: false,
          isSigner: true,
          docs: ["Admin account. Must be owner of the pool."]
        }
      ],
      args: [{ name: "enable", type: "bool" }]
    },
    {
      name: "swap",
      docs: [
        "Swap token A to B, or vice versa. An amount of trading fee will be charged for liquidity provider, and the admin of the pool."
      ],
      accounts: [
        {
          name: "pool",
          isMut: true,
          isSigner: false,
          docs: ["Pool account (PDA)"]
        },
        {
          name: "userSourceToken",
          isMut: true,
          isSigner: false,
          docs: [
            "User token account. Token from this account will be transfer into the vault by the pool in exchange for another token of the pool."
          ]
        },
        {
          name: "userDestinationToken",
          isMut: true,
          isSigner: false,
          docs: [
            "User token account. The exchanged token will be transfer into this account from the pool."
          ]
        },
        {
          name: "aVault",
          isMut: true,
          isSigner: false,
          docs: [
            "Vault account for token a. token a of the pool will be deposit / withdraw from this vault account."
          ]
        },
        {
          name: "bVault",
          isMut: true,
          isSigner: false,
          docs: [
            "Vault account for token b. token b of the pool will be deposit / withdraw from this vault account."
          ]
        },
        {
          name: "aTokenVault",
          isMut: true,
          isSigner: false,
          docs: ["Token vault account of vault A"]
        },
        {
          name: "bTokenVault",
          isMut: true,
          isSigner: false,
          docs: ["Token vault account of vault B"]
        },
        {
          name: "aVaultLpMint",
          isMut: true,
          isSigner: false,
          docs: ["Lp token mint of vault a"]
        },
        {
          name: "bVaultLpMint",
          isMut: true,
          isSigner: false,
          docs: ["Lp token mint of vault b"]
        },
        {
          name: "aVaultLp",
          isMut: true,
          isSigner: false,
          docs: [
            "LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault."
          ]
        },
        {
          name: "bVaultLp",
          isMut: true,
          isSigner: false,
          docs: [
            "LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault."
          ]
        },
        {
          name: "adminTokenFee",
          isMut: true,
          isSigner: false,
          docs: [
            "Admin fee token account. Used to receive trading fee. It's mint field must matched with user_source_token mint field."
          ]
        },
        {
          name: "user",
          isMut: false,
          isSigner: true,
          docs: ["User account. Must be owner of user_source_token."]
        },
        {
          name: "vaultProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Vault program. the pool will deposit/withdraw liquidity from the vault."
          ]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          docs: ["Token program."]
        }
      ],
      args: [
        { name: "inAmount", type: "u64" },
        { name: "minimumOutAmount", type: "u64" }
      ]
    },
    {
      name: "removeLiquiditySingleSide",
      docs: [
        "Withdraw only single token from the pool. Only supported by pool with stable swap curve."
      ],
      accounts: [
        {
          name: "pool",
          isMut: true,
          isSigner: false,
          docs: ["Pool account (PDA)"]
        },
        {
          name: "lpMint",
          isMut: true,
          isSigner: false,
          docs: ["LP token mint of the pool"]
        },
        {
          name: "userPoolLp",
          isMut: true,
          isSigner: false,
          docs: [
            "User pool lp token account. LP will be burned from this account upon success liquidity removal."
          ]
        },
        {
          name: "aVaultLp",
          isMut: true,
          isSigner: false,
          docs: [
            "LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault."
          ]
        },
        {
          name: "bVaultLp",
          isMut: true,
          isSigner: false,
          docs: [
            "LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault."
          ]
        },
        {
          name: "aVault",
          isMut: true,
          isSigner: false,
          docs: [
            "Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account."
          ]
        },
        {
          name: "bVault",
          isMut: true,
          isSigner: false,
          docs: [
            "Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account."
          ]
        },
        {
          name: "aVaultLpMint",
          isMut: true,
          isSigner: false,
          docs: ["LP token mint of vault A"]
        },
        {
          name: "bVaultLpMint",
          isMut: true,
          isSigner: false,
          docs: ["LP token mint of vault B"]
        },
        {
          name: "aTokenVault",
          isMut: true,
          isSigner: false,
          docs: ["Token vault account of vault A"]
        },
        {
          name: "bTokenVault",
          isMut: true,
          isSigner: false,
          docs: ["Token vault account of vault B"]
        },
        {
          name: "userDestinationToken",
          isMut: true,
          isSigner: false,
          docs: [
            "User token account to receive token upon success liquidity removal."
          ]
        },
        {
          name: "user",
          isMut: false,
          isSigner: true,
          docs: ["User account. Must be owner of the user_pool_lp account."]
        },
        {
          name: "vaultProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Vault program. The pool will deposit/withdraw liquidity from the vault."
          ]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          docs: ["Token program."]
        }
      ],
      args: [
        { name: "poolTokenAmount", type: "u64" },
        { name: "minimumOutAmount", type: "u64" }
      ]
    },
    {
      name: "addImbalanceLiquidity",
      docs: [
        "Deposit tokens to the pool in an imbalance ratio. Only supported by pool with stable swap curve."
      ],
      accounts: [
        {
          name: "pool",
          isMut: true,
          isSigner: false,
          docs: ["Pool account (PDA)"]
        },
        {
          name: "lpMint",
          isMut: true,
          isSigner: false,
          docs: ["LP token mint of the pool"]
        },
        {
          name: "userPoolLp",
          isMut: true,
          isSigner: false,
          docs: [
            "user pool lp token account. lp will be burned from this account upon success liquidity removal."
          ]
        },
        {
          name: "aVaultLp",
          isMut: true,
          isSigner: false,
          docs: [
            "LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault."
          ]
        },
        {
          name: "bVaultLp",
          isMut: true,
          isSigner: false,
          docs: [
            "LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault."
          ]
        },
        {
          name: "aVault",
          isMut: true,
          isSigner: false,
          docs: [
            "Vault account for token a. token a of the pool will be deposit / withdraw from this vault account."
          ]
        },
        {
          name: "bVault",
          isMut: true,
          isSigner: false,
          docs: [
            "Vault account for token b. token b of the pool will be deposit / withdraw from this vault account."
          ]
        },
        {
          name: "aVaultLpMint",
          isMut: true,
          isSigner: false,
          docs: ["LP token mint of vault a"]
        },
        {
          name: "bVaultLpMint",
          isMut: true,
          isSigner: false,
          docs: ["LP token mint of vault b"]
        },
        {
          name: "aTokenVault",
          isMut: true,
          isSigner: false,
          docs: ["Token vault account of vault A"]
        },
        {
          name: "bTokenVault",
          isMut: true,
          isSigner: false,
          docs: ["Token vault account of vault B"]
        },
        {
          name: "userAToken",
          isMut: true,
          isSigner: false,
          docs: [
            "User token A account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account."
          ]
        },
        {
          name: "userBToken",
          isMut: true,
          isSigner: false,
          docs: [
            "User token B account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account."
          ]
        },
        {
          name: "user",
          isMut: false,
          isSigner: true,
          docs: [
            "User account. Must be owner of user_a_token, and user_b_token."
          ]
        },
        {
          name: "vaultProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Vault program. the pool will deposit/withdraw liquidity from the vault."
          ]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          docs: ["Token program."]
        }
      ],
      args: [
        { name: "minimumPoolTokenAmount", type: "u64" },
        { name: "tokenAAmount", type: "u64" },
        { name: "tokenBAmount", type: "u64" }
      ]
    },
    {
      name: "removeBalanceLiquidity",
      docs: [
        "Withdraw tokens from the pool in a balanced ratio. User will still able to withdraw from pool even the pool is disabled. This allow user to exit their liquidity when there's some unforeseen event happen."
      ],
      accounts: [
        {
          name: "pool",
          isMut: true,
          isSigner: false,
          docs: ["Pool account (PDA)"]
        },
        {
          name: "lpMint",
          isMut: true,
          isSigner: false,
          docs: ["LP token mint of the pool"]
        },
        {
          name: "userPoolLp",
          isMut: true,
          isSigner: false,
          docs: [
            "user pool lp token account. lp will be burned from this account upon success liquidity removal."
          ]
        },
        {
          name: "aVaultLp",
          isMut: true,
          isSigner: false,
          docs: [
            "LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault."
          ]
        },
        {
          name: "bVaultLp",
          isMut: true,
          isSigner: false,
          docs: [
            "LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault."
          ]
        },
        {
          name: "aVault",
          isMut: true,
          isSigner: false,
          docs: [
            "Vault account for token a. token a of the pool will be deposit / withdraw from this vault account."
          ]
        },
        {
          name: "bVault",
          isMut: true,
          isSigner: false,
          docs: [
            "Vault account for token b. token b of the pool will be deposit / withdraw from this vault account."
          ]
        },
        {
          name: "aVaultLpMint",
          isMut: true,
          isSigner: false,
          docs: ["LP token mint of vault a"]
        },
        {
          name: "bVaultLpMint",
          isMut: true,
          isSigner: false,
          docs: ["LP token mint of vault b"]
        },
        {
          name: "aTokenVault",
          isMut: true,
          isSigner: false,
          docs: ["Token vault account of vault A"]
        },
        {
          name: "bTokenVault",
          isMut: true,
          isSigner: false,
          docs: ["Token vault account of vault B"]
        },
        {
          name: "userAToken",
          isMut: true,
          isSigner: false,
          docs: [
            "User token A account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account."
          ]
        },
        {
          name: "userBToken",
          isMut: true,
          isSigner: false,
          docs: [
            "User token B account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account."
          ]
        },
        {
          name: "user",
          isMut: false,
          isSigner: true,
          docs: [
            "User account. Must be owner of user_a_token, and user_b_token."
          ]
        },
        {
          name: "vaultProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Vault program. the pool will deposit/withdraw liquidity from the vault."
          ]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          docs: ["Token program."]
        }
      ],
      args: [
        { name: "poolTokenAmount", type: "u64" },
        { name: "minimumATokenOut", type: "u64" },
        { name: "minimumBTokenOut", type: "u64" }
      ]
    },
    {
      name: "addBalanceLiquidity",
      docs: ["Deposit tokens to the pool in a balanced ratio."],
      accounts: [
        {
          name: "pool",
          isMut: true,
          isSigner: false,
          docs: ["Pool account (PDA)"]
        },
        {
          name: "lpMint",
          isMut: true,
          isSigner: false,
          docs: ["LP token mint of the pool"]
        },
        {
          name: "userPoolLp",
          isMut: true,
          isSigner: false,
          docs: [
            "user pool lp token account. lp will be burned from this account upon success liquidity removal."
          ]
        },
        {
          name: "aVaultLp",
          isMut: true,
          isSigner: false,
          docs: [
            "LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault."
          ]
        },
        {
          name: "bVaultLp",
          isMut: true,
          isSigner: false,
          docs: [
            "LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault."
          ]
        },
        {
          name: "aVault",
          isMut: true,
          isSigner: false,
          docs: [
            "Vault account for token a. token a of the pool will be deposit / withdraw from this vault account."
          ]
        },
        {
          name: "bVault",
          isMut: true,
          isSigner: false,
          docs: [
            "Vault account for token b. token b of the pool will be deposit / withdraw from this vault account."
          ]
        },
        {
          name: "aVaultLpMint",
          isMut: true,
          isSigner: false,
          docs: ["LP token mint of vault a"]
        },
        {
          name: "bVaultLpMint",
          isMut: true,
          isSigner: false,
          docs: ["LP token mint of vault b"]
        },
        {
          name: "aTokenVault",
          isMut: true,
          isSigner: false,
          docs: ["Token vault account of vault A"]
        },
        {
          name: "bTokenVault",
          isMut: true,
          isSigner: false,
          docs: ["Token vault account of vault B"]
        },
        {
          name: "userAToken",
          isMut: true,
          isSigner: false,
          docs: [
            "User token A account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account."
          ]
        },
        {
          name: "userBToken",
          isMut: true,
          isSigner: false,
          docs: [
            "User token B account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account."
          ]
        },
        {
          name: "user",
          isMut: false,
          isSigner: true,
          docs: [
            "User account. Must be owner of user_a_token, and user_b_token."
          ]
        },
        {
          name: "vaultProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Vault program. the pool will deposit/withdraw liquidity from the vault."
          ]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          docs: ["Token program."]
        }
      ],
      args: [
        { name: "poolTokenAmount", type: "u64" },
        { name: "maximumTokenAAmount", type: "u64" },
        { name: "maximumTokenBAmount", type: "u64" }
      ]
    },
    {
      name: "setPoolFees",
      docs: ["Update trading fee charged for liquidity provider, and admin."],
      accounts: [
        {
          name: "pool",
          isMut: true,
          isSigner: false,
          docs: ["Pool account (PDA)"]
        },
        {
          name: "admin",
          isMut: false,
          isSigner: true,
          docs: ["Admin account. Must be owner of the pool."]
        }
      ],
      args: [{ name: "fees", type: { defined: "PoolFees" } }]
    },
    {
      name: "overrideCurveParam",
      docs: [
        "Update swap curve parameters. This function do not allow update of curve type. For example: stable swap curve to constant product curve. Only supported by pool with stable swap curve.",
        "Only amp is allowed to be override. The other attributes of stable swap curve will be ignored."
      ],
      accounts: [
        {
          name: "pool",
          isMut: true,
          isSigner: false,
          docs: ["Pool account (PDA)"]
        },
        {
          name: "admin",
          isMut: false,
          isSigner: true,
          docs: ["Admin account. Must be owner of the pool."]
        }
      ],
      args: [{ name: "curveType", type: { defined: "CurveType" } }]
    },
    {
      name: "transferAdmin",
      docs: ["Transfer the admin of the pool to new admin."],
      accounts: [
        {
          name: "pool",
          isMut: true,
          isSigner: false,
          docs: ["Pool account (PDA)"]
        },
        {
          name: "admin",
          isMut: false,
          isSigner: true,
          docs: ["Admin account. Must be owner of the pool."]
        },
        {
          name: "newAdmin",
          isMut: false,
          isSigner: true,
          docs: ["New admin account."]
        }
      ],
      args: []
    },
    {
      name: "getPoolInfo",
      docs: ["Get the general information of the pool."],
      accounts: [
        {
          name: "pool",
          isMut: false,
          isSigner: false,
          docs: ["Pool account (PDA)"]
        },
        {
          name: "lpMint",
          isMut: false,
          isSigner: false,
          docs: ["LP token mint of the pool"]
        },
        {
          name: "aVaultLp",
          isMut: false,
          isSigner: false,
          docs: [
            "LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault."
          ]
        },
        {
          name: "bVaultLp",
          isMut: false,
          isSigner: false,
          docs: [
            "LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault."
          ]
        },
        {
          name: "aVault",
          isMut: false,
          isSigner: false,
          docs: [
            "Vault account for token a. token a of the pool will be deposit / withdraw from this vault account."
          ]
        },
        {
          name: "bVault",
          isMut: false,
          isSigner: false,
          docs: [
            "Vault account for token b. token b of the pool will be deposit / withdraw from this vault account."
          ]
        },
        {
          name: "aVaultLpMint",
          isMut: false,
          isSigner: false,
          docs: ["LP token mint of vault a"]
        },
        {
          name: "bVaultLpMint",
          isMut: false,
          isSigner: false,
          docs: ["LP token mint of vault b"]
        }
      ],
      args: []
    },
    {
      name: "bootstrapLiquidity",
      docs: ["Bootstrap the pool when liquidity is depleted."],
      accounts: [
        {
          name: "pool",
          isMut: true,
          isSigner: false,
          docs: ["Pool account (PDA)"]
        },
        {
          name: "lpMint",
          isMut: true,
          isSigner: false,
          docs: ["LP token mint of the pool"]
        },
        {
          name: "userPoolLp",
          isMut: true,
          isSigner: false,
          docs: [
            "user pool lp token account. lp will be burned from this account upon success liquidity removal."
          ]
        },
        {
          name: "aVaultLp",
          isMut: true,
          isSigner: false,
          docs: [
            "LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault."
          ]
        },
        {
          name: "bVaultLp",
          isMut: true,
          isSigner: false,
          docs: [
            "LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault."
          ]
        },
        {
          name: "aVault",
          isMut: true,
          isSigner: false,
          docs: [
            "Vault account for token a. token a of the pool will be deposit / withdraw from this vault account."
          ]
        },
        {
          name: "bVault",
          isMut: true,
          isSigner: false,
          docs: [
            "Vault account for token b. token b of the pool will be deposit / withdraw from this vault account."
          ]
        },
        {
          name: "aVaultLpMint",
          isMut: true,
          isSigner: false,
          docs: ["LP token mint of vault a"]
        },
        {
          name: "bVaultLpMint",
          isMut: true,
          isSigner: false,
          docs: ["LP token mint of vault b"]
        },
        {
          name: "aTokenVault",
          isMut: true,
          isSigner: false,
          docs: ["Token vault account of vault A"]
        },
        {
          name: "bTokenVault",
          isMut: true,
          isSigner: false,
          docs: ["Token vault account of vault B"]
        },
        {
          name: "userAToken",
          isMut: true,
          isSigner: false,
          docs: [
            "User token A account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account."
          ]
        },
        {
          name: "userBToken",
          isMut: true,
          isSigner: false,
          docs: [
            "User token B account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account."
          ]
        },
        {
          name: "user",
          isMut: false,
          isSigner: true,
          docs: [
            "User account. Must be owner of user_a_token, and user_b_token."
          ]
        },
        {
          name: "vaultProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Vault program. the pool will deposit/withdraw liquidity from the vault."
          ]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          docs: ["Token program."]
        }
      ],
      args: [
        { name: "tokenAAmount", type: "u64" },
        { name: "tokenBAmount", type: "u64" }
      ]
    },
    {
      name: "migrateFeeAccount",
      docs: ["Migrate old token fee owner to PDA"],
      accounts: [
        {
          name: "pool",
          isMut: true,
          isSigner: false,
          docs: ["Pool account"]
        },
        {
          name: "aVaultLp",
          isMut: false,
          isSigner: false,
          docs: ["A vault LP token account of the pool."]
        },
        {
          name: "adminTokenAFee",
          isMut: true,
          isSigner: false,
          docs: [
            "Admin fee token account for token A. Used to receive trading fee."
          ]
        },
        {
          name: "adminTokenBFee",
          isMut: true,
          isSigner: false,
          docs: [
            "Admin fee token account for token B. Used to receive trading fee."
          ]
        },
        {
          name: "tokenAMint",
          isMut: false,
          isSigner: false,
          docs: ["Token A mint"]
        },
        {
          name: "tokenBMint",
          isMut: false,
          isSigner: false,
          docs: ["Token B mint"]
        },
        {
          name: "newAdminTokenAFee",
          isMut: true,
          isSigner: false,
          docs: ["Token fee account. Controlled by pool a_vault_lp PDA."]
        },
        {
          name: "newAdminTokenBFee",
          isMut: true,
          isSigner: false,
          docs: ["Token fee account. Controlled by pool a_vault_lp PDA."]
        },
        {
          name: "admin",
          isMut: true,
          isSigner: true,
          docs: ["Admin account. Must be owner of the pool."]
        },
        {
          name: "treasuryTokenAFee",
          isMut: true,
          isSigner: false,
          docs: ["Treasury token a fee ATA."]
        },
        {
          name: "treasuryTokenBFee",
          isMut: true,
          isSigner: false,
          docs: ["Treasury token b fee ATA."]
        },
        {
          name: "treasury",
          isMut: false,
          isSigner: true,
          docs: ["Treasury signer"]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          docs: ["Token program."]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: ["System program."]
        }
      ],
      args: []
    },
    {
      name: "createMintMetadata",
      docs: ["Create mint metadata account for old pools"],
      accounts: [
        {
          name: "pool",
          isMut: false,
          isSigner: false,
          docs: ["Pool account"]
        },
        {
          name: "lpMint",
          isMut: false,
          isSigner: false,
          docs: ["LP mint account of the pool"]
        },
        {
          name: "aVaultLp",
          isMut: false,
          isSigner: false,
          docs: ["Vault A LP account of the pool"]
        },
        { name: "mintMetadata", isMut: true, isSigner: false },
        { name: "metadataProgram", isMut: false, isSigner: false },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: ["System program."]
        },
        { name: "payer", isMut: true, isSigner: true, docs: ["Payer"] }
      ],
      args: []
    },
    {
      name: "createLockEscrow",
      docs: ["Create lock account"],
      accounts: [
        {
          name: "pool",
          isMut: false,
          isSigner: false,
          docs: ["Pool account"]
        },
        {
          name: "lockEscrow",
          isMut: true,
          isSigner: false,
          docs: ["Lock account"]
        },
        { name: "owner", isMut: false, isSigner: false },
        {
          name: "lpMint",
          isMut: false,
          isSigner: false,
          docs: ["LP token mint of the pool"]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: ["Payer account"]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: ["System program."]
        }
      ],
      args: []
    },
    {
      name: "lock",
      docs: ["Lock Lp token"],
      accounts: [
        {
          name: "pool",
          isMut: true,
          isSigner: false,
          docs: ["Pool account"]
        },
        {
          name: "lpMint",
          isMut: false,
          isSigner: false,
          docs: ["LP token mint of the pool"]
        },
        {
          name: "lockEscrow",
          isMut: true,
          isSigner: false,
          docs: ["Lock account"]
        },
        {
          name: "owner",
          isMut: true,
          isSigner: true,
          docs: ["Owner of lock account"]
        },
        {
          name: "sourceTokens",
          isMut: true,
          isSigner: false,
          docs: ["owner lp token account"]
        },
        {
          name: "escrowVault",
          isMut: true,
          isSigner: false,
          docs: ["Escrow vault"]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          docs: ["Token program."]
        },
        {
          name: "aVault",
          isMut: false,
          isSigner: false,
          docs: [
            "Vault account for token a. token a of the pool will be deposit / withdraw from this vault account."
          ]
        },
        {
          name: "bVault",
          isMut: false,
          isSigner: false,
          docs: [
            "Vault account for token b. token b of the pool will be deposit / withdraw from this vault account."
          ]
        },
        {
          name: "aVaultLp",
          isMut: false,
          isSigner: false,
          docs: [
            "LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault."
          ]
        },
        {
          name: "bVaultLp",
          isMut: false,
          isSigner: false,
          docs: [
            "LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault."
          ]
        },
        {
          name: "aVaultLpMint",
          isMut: false,
          isSigner: false,
          docs: ["LP token mint of vault a"]
        },
        {
          name: "bVaultLpMint",
          isMut: false,
          isSigner: false,
          docs: ["LP token mint of vault b"]
        }
      ],
      args: [{ name: "amount", type: "u64" }]
    },
    {
      name: "claimFee",
      docs: ["Claim fee"],
      accounts: [
        {
          name: "pool",
          isMut: true,
          isSigner: false,
          docs: ["Pool account"]
        },
        {
          name: "lpMint",
          isMut: true,
          isSigner: false,
          docs: ["LP token mint of the pool"]
        },
        {
          name: "lockEscrow",
          isMut: true,
          isSigner: false,
          docs: ["Lock account"]
        },
        {
          name: "owner",
          isMut: true,
          isSigner: true,
          docs: ["Owner of lock account"]
        },
        {
          name: "sourceTokens",
          isMut: true,
          isSigner: false,
          docs: ["owner lp token account"]
        },
        {
          name: "escrowVault",
          isMut: true,
          isSigner: false,
          docs: ["Escrow vault"]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          docs: ["Token program."]
        },
        {
          name: "aTokenVault",
          isMut: true,
          isSigner: false,
          docs: ["Token vault account of vault A"]
        },
        {
          name: "bTokenVault",
          isMut: true,
          isSigner: false,
          docs: ["Token vault account of vault B"]
        },
        {
          name: "aVault",
          isMut: true,
          isSigner: false,
          docs: [
            "Vault account for token a. token a of the pool will be deposit / withdraw from this vault account."
          ]
        },
        {
          name: "bVault",
          isMut: true,
          isSigner: false,
          docs: [
            "Vault account for token b. token b of the pool will be deposit / withdraw from this vault account."
          ]
        },
        {
          name: "aVaultLp",
          isMut: true,
          isSigner: false,
          docs: [
            "LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault."
          ]
        },
        {
          name: "bVaultLp",
          isMut: true,
          isSigner: false,
          docs: [
            "LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault."
          ]
        },
        {
          name: "aVaultLpMint",
          isMut: true,
          isSigner: false,
          docs: ["LP token mint of vault a"]
        },
        {
          name: "bVaultLpMint",
          isMut: true,
          isSigner: false,
          docs: ["LP token mint of vault b"]
        },
        {
          name: "userAToken",
          isMut: true,
          isSigner: false,
          docs: [
            "User token A account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account."
          ]
        },
        {
          name: "userBToken",
          isMut: true,
          isSigner: false,
          docs: [
            "User token B account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account."
          ]
        },
        {
          name: "vaultProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Vault program. the pool will deposit/withdraw liquidity from the vault."
          ]
        }
      ],
      args: [{ name: "maxAmount", type: "u64" }]
    }
  ],
  accounts: [
    {
      name: "Pool",
      docs: ["State of pool account"],
      type: {
        kind: "struct",
        fields: [
          {
            name: "lpMint",
            docs: ["LP token mint of the pool"],
            type: "publicKey"
          },
          {
            name: "tokenAMint",
            docs: ["Token A mint of the pool. Eg: USDT"],
            type: "publicKey"
          },
          {
            name: "tokenBMint",
            docs: ["Token B mint of the pool. Eg: USDC"],
            type: "publicKey"
          },
          {
            name: "aVault",
            docs: [
              "Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account."
            ],
            type: "publicKey"
          },
          {
            name: "bVault",
            docs: [
              "Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account."
            ],
            type: "publicKey"
          },
          {
            name: "aVaultLp",
            docs: [
              "LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault."
            ],
            type: "publicKey"
          },
          {
            name: "bVaultLp",
            docs: [
              "LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault."
            ],
            type: "publicKey"
          },
          {
            name: "aVaultLpBump",
            docs: ['"A" vault lp bump. Used to create signer seeds.'],
            type: "u8"
          },
          {
            name: "enabled",
            docs: [
              "Flag to determine whether the pool is enabled, or disabled."
            ],
            type: "bool"
          },
          {
            name: "adminTokenAFee",
            docs: [
              "Admin fee token account for token A. Used to receive trading fee."
            ],
            type: "publicKey"
          },
          {
            name: "adminTokenBFee",
            docs: [
              "Admin fee token account for token B. Used to receive trading fee."
            ],
            type: "publicKey"
          },
          {
            name: "admin",
            docs: ["Owner of the pool."],
            type: "publicKey"
          },
          {
            name: "fees",
            docs: ["Store the fee charges setting."],
            type: { defined: "PoolFees" }
          },
          {
            name: "poolType",
            docs: ["Pool type"],
            type: { defined: "PoolType" }
          },
          {
            name: "stake",
            docs: ["Stake pubkey of SPL stake pool"],
            type: "publicKey"
          },
          {
            name: "totalLockedLp",
            docs: ["Total locked lp token"],
            type: "u64"
          },
          {
            name: "padding",
            docs: ["Padding for future pool field"],
            type: { defined: "Padding" }
          },
          {
            name: "curveType",
            docs: ["The type of the swap curve supported by the pool."],
            type: { defined: "CurveType" }
          }
        ]
      }
    },
    {
      name: "LockEscrow",
      docs: ["State of lock escrow account"],
      type: {
        kind: "struct",
        fields: [
          { name: "pool", docs: ["Pool address"], type: "publicKey" },
          { name: "owner", docs: ["Owner address"], type: "publicKey" },
          {
            name: "escrowVault",
            docs: ["Vault address, store the lock user lock"],
            type: "publicKey"
          },
          { name: "bump", docs: ["bump, used to sign"], type: "u8" },
          {
            name: "totalLockedAmount",
            docs: ["Total locked amount"],
            type: "u64"
          },
          {
            name: "lpPerToken",
            docs: ["Lp per token, virtual price of lp token"],
            type: "u128"
          },
          {
            name: "unclaimedFeePending",
            docs: ["Unclaimed fee pending"],
            type: "u64"
          },
          {
            name: "aFee",
            docs: ["Total a fee claimed so far"],
            type: "u64"
          },
          {
            name: "bFee",
            docs: ["Total b fee claimed so far"],
            type: "u64"
          }
        ]
      }
    }
  ],
  types: [
    {
      name: "TokenMultiplier",
      docs: [
        "Multiplier for the pool token. Used to normalized token with different decimal into the same precision."
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "tokenAMultiplier",
            docs: ["Multiplier for token A of the pool."],
            type: "u64"
          },
          {
            name: "tokenBMultiplier",
            docs: ["Multiplier for token B of the pool."],
            type: "u64"
          },
          {
            name: "precisionFactor",
            docs: [
              "Record the highest token decimal in the pool. For example, Token A is 6 decimal, token B is 9 decimal. This will save value of 9."
            ],
            type: "u8"
          }
        ]
      }
    },
    {
      name: "PoolFees",
      docs: ["Information regarding fee charges"],
      type: {
        kind: "struct",
        fields: [
          {
            name: "tradeFeeNumerator",
            docs: [
              "Trade fees are extra token amounts that are held inside the token",
              "accounts during a trade, making the value of liquidity tokens rise.",
              "Trade fee numerator"
            ],
            type: "u64"
          },
          {
            name: "tradeFeeDenominator",
            docs: ["Trade fee denominator"],
            type: "u64"
          },
          {
            name: "ownerTradeFeeNumerator",
            docs: [
              "Owner trading fees are extra token amounts that are held inside the token",
              "accounts during a trade, with the equivalent in pool tokens minted to",
              "the owner of the program.",
              "Owner trade fee numerator"
            ],
            type: "u64"
          },
          {
            name: "ownerTradeFeeDenominator",
            docs: ["Owner trade fee denominator"],
            type: "u64"
          }
        ]
      }
    },
    {
      name: "Depeg",
      docs: ["Contains information for depeg pool"],
      type: {
        kind: "struct",
        fields: [
          {
            name: "baseVirtualPrice",
            docs: ["The virtual price of staking / interest bearing token"],
            type: "u64"
          },
          {
            name: "baseCacheUpdated",
            docs: ["The virtual price of staking / interest bearing token"],
            type: "u64"
          },
          {
            name: "depegType",
            docs: ["Type of the depeg pool"],
            type: { defined: "DepegType" }
          }
        ]
      }
    },
    {
      name: "Padding",
      docs: ["Padding for future pool fields"],
      type: {
        kind: "struct",
        fields: [
          {
            name: "padding0",
            docs: ["Padding 0"],
            type: { array: ["u8", 7] }
          },
          {
            name: "padding",
            docs: ["Padding 1"],
            type: { array: ["u128", 29] }
          }
        ]
      }
    },
    {
      name: "RoundDirection",
      docs: ["Rounding direction"],
      type: {
        kind: "enum",
        variants: [{ name: "Floor" }, { name: "Ceiling" }]
      }
    },
    {
      name: "TradeDirection",
      docs: ["Trade (swap) direction"],
      type: {
        kind: "enum",
        variants: [{ name: "AtoB" }, { name: "BtoA" }]
      }
    },
    {
      name: "NewCurveType",
      docs: ["Type of the swap curve"],
      type: {
        kind: "enum",
        variants: [
          { name: "ConstantProduct" },
          {
            name: "Stable",
            fields: [
              {
                name: "amp",
                docs: ["Amplification coefficient"],
                type: "u64"
              },
              {
                name: "token_multiplier",
                docs: [
                  "Multiplier for the pool token. Used to normalized token with different decimal into the same precision."
                ],
                type: { defined: "TokenMultiplier" }
              },
              {
                name: "depeg",
                docs: [
                  "Depeg pool information. Contains functions to allow token amount to be repeg using stake / interest bearing token virtual price"
                ],
                type: { defined: "Depeg" }
              },
              {
                name: "last_amp_updated_timestamp",
                docs: [
                  "The last amp updated timestamp. Used to prevent update_curve_info called infinitely many times within a short period"
                ],
                type: "u64"
              }
            ]
          },
          {
            name: "NewCurve",
            fields: [
              { name: "field_one", type: "u64" },
              { name: "field_two", type: "u64" }
            ]
          }
        ]
      }
    },
    {
      name: "CurveType",
      docs: ["Type of the swap curve"],
      type: {
        kind: "enum",
        variants: [
          { name: "ConstantProduct" },
          {
            name: "Stable",
            fields: [
              {
                name: "amp",
                docs: ["Amplification coefficient"],
                type: "u64"
              },
              {
                name: "token_multiplier",
                docs: [
                  "Multiplier for the pool token. Used to normalized token with different decimal into the same precision."
                ],
                type: { defined: "TokenMultiplier" }
              },
              {
                name: "depeg",
                docs: [
                  "Depeg pool information. Contains functions to allow token amount to be repeg using stake / interest bearing token virtual price"
                ],
                type: { defined: "Depeg" }
              },
              {
                name: "last_amp_updated_timestamp",
                docs: [
                  "The last amp updated timestamp. Used to prevent update_curve_info called infinitely many times within a short period"
                ],
                type: "u64"
              }
            ]
          }
        ]
      }
    },
    {
      name: "DepegType",
      docs: ["Type of depeg pool"],
      type: {
        kind: "enum",
        variants: [
          { name: "None" },
          { name: "Marinade" },
          { name: "Lido" },
          { name: "SplStake" }
        ]
      }
    },
    {
      name: "Rounding",
      docs: ["Round up, down"],
      type: {
        kind: "enum",
        variants: [{ name: "Up" }, { name: "Down" }]
      }
    },
    {
      name: "PoolType",
      docs: ["Pool type"],
      type: {
        kind: "enum",
        variants: [{ name: "Permissioned" }, { name: "Permissionless" }]
      }
    }
  ],
  events: [
    {
      name: "AddLiquidity",
      fields: [
        { name: "lpMintAmount", type: "u64", index: false },
        { name: "tokenAAmount", type: "u64", index: false },
        { name: "tokenBAmount", type: "u64", index: false }
      ]
    },
    {
      name: "RemoveLiquidity",
      fields: [
        { name: "lpUnmintAmount", type: "u64", index: false },
        { name: "tokenAOutAmount", type: "u64", index: false },
        { name: "tokenBOutAmount", type: "u64", index: false }
      ]
    },
    {
      name: "BootstrapLiquidity",
      fields: [
        { name: "lpMintAmount", type: "u64", index: false },
        { name: "tokenAAmount", type: "u64", index: false },
        { name: "tokenBAmount", type: "u64", index: false },
        { name: "pool", type: "publicKey", index: false }
      ]
    },
    {
      name: "Swap",
      fields: [
        { name: "inAmount", type: "u64", index: false },
        { name: "outAmount", type: "u64", index: false },
        { name: "tradeFee", type: "u64", index: false },
        { name: "adminFee", type: "u64", index: false },
        { name: "hostFee", type: "u64", index: false }
      ]
    },
    {
      name: "SetPoolFees",
      fields: [
        { name: "tradeFeeNumerator", type: "u64", index: false },
        { name: "tradeFeeDenominator", type: "u64", index: false },
        { name: "ownerTradeFeeNumerator", type: "u64", index: false },
        { name: "ownerTradeFeeDenominator", type: "u64", index: false },
        { name: "pool", type: "publicKey", index: false }
      ]
    },
    {
      name: "PoolInfo",
      fields: [
        { name: "tokenAAmount", type: "u64", index: false },
        { name: "tokenBAmount", type: "u64", index: false },
        { name: "virtualPrice", type: "f64", index: false },
        { name: "currentTimestamp", type: "u64", index: false }
      ]
    },
    {
      name: "TransferAdmin",
      fields: [
        { name: "admin", type: "publicKey", index: false },
        { name: "newAdmin", type: "publicKey", index: false },
        { name: "pool", type: "publicKey", index: false }
      ]
    },
    {
      name: "SetAdminFeeAccount",
      fields: [
        { name: "adminTokenAFee", type: "publicKey", index: false },
        { name: "adminTokenBFee", type: "publicKey", index: false },
        { name: "newAdminTokenAFee", type: "publicKey", index: false },
        { name: "newAdminTokenBFee", type: "publicKey", index: false }
      ]
    },
    {
      name: "OverrideCurveParam",
      fields: [
        { name: "newAmp", type: "u64", index: false },
        { name: "updatedTimestamp", type: "u64", index: false },
        { name: "pool", type: "publicKey", index: false }
      ]
    },
    {
      name: "PoolCreated",
      fields: [
        { name: "lpMint", type: "publicKey", index: false },
        { name: "tokenAMint", type: "publicKey", index: false },
        { name: "tokenBMint", type: "publicKey", index: false },
        {
          name: "poolType",
          type: { defined: "PoolType" },
          index: false
        },
        { name: "pool", type: "publicKey", index: false }
      ]
    },
    {
      name: "PoolEnabled",
      fields: [
        { name: "pool", type: "publicKey", index: false },
        { name: "enabled", type: "bool", index: false }
      ]
    },
    {
      name: "MigrateFeeAccount",
      fields: [
        { name: "pool", type: "publicKey", index: false },
        { name: "newAdminTokenAFee", type: "publicKey", index: false },
        { name: "newAdminTokenBFee", type: "publicKey", index: false },
        { name: "tokenAAmount", type: "u64", index: false },
        { name: "tokenBAmount", type: "u64", index: false }
      ]
    },
    {
      name: "CreateLockEscrow",
      fields: [
        { name: "pool", type: "publicKey", index: false },
        { name: "owner", type: "publicKey", index: false }
      ]
    },
    {
      name: "Lock",
      fields: [
        { name: "pool", type: "publicKey", index: false },
        { name: "owner", type: "publicKey", index: false },
        { name: "amount", type: "u64", index: false }
      ]
    },
    {
      name: "ClaimFee",
      fields: [
        { name: "pool", type: "publicKey", index: false },
        { name: "owner", type: "publicKey", index: false },
        { name: "amount", type: "u64", index: false },
        { name: "aFee", type: "u64", index: false },
        { name: "bFee", type: "u64", index: false }
      ]
    }
  ],
  errors: [
    { code: 6e3, name: "MathOverflow", msg: "Math operation overflow" },
    { code: 6001, name: "InvalidFee", msg: "Invalid fee setup" },
    { code: 6002, name: "InvalidInvariant", msg: "Invalid invariant d" },
    {
      code: 6003,
      name: "FeeCalculationFailure",
      msg: "Fee calculation failure"
    },
    {
      code: 6004,
      name: "ExceededSlippage",
      msg: "Exceeded slippage tolerance"
    },
    {
      code: 6005,
      name: "InvalidCalculation",
      msg: "Invalid curve calculation"
    },
    {
      code: 6006,
      name: "ZeroTradingTokens",
      msg: "Given pool token amount results in zero trading tokens"
    },
    {
      code: 6007,
      name: "ConversionError",
      msg: "Math conversion overflow"
    },
    {
      code: 6008,
      name: "FaultyLpMint",
      msg: "LP mint authority must be 'A' vault lp, without freeze authority, and 0 supply"
    },
    {
      code: 6009,
      name: "MismatchedTokenMint",
      msg: "Token mint mismatched"
    },
    { code: 6010, name: "MismatchedLpMint", msg: "LP mint mismatched" },
    {
      code: 6011,
      name: "MismatchedOwner",
      msg: "Invalid lp token owner"
    },
    {
      code: 6012,
      name: "InvalidVaultAccount",
      msg: "Invalid vault account"
    },
    {
      code: 6013,
      name: "InvalidVaultLpAccount",
      msg: "Invalid vault lp account"
    },
    {
      code: 6014,
      name: "InvalidPoolLpMintAccount",
      msg: "Invalid pool lp mint account"
    },
    { code: 6015, name: "PoolDisabled", msg: "Pool disabled" },
    {
      code: 6016,
      name: "InvalidAdminAccount",
      msg: "Invalid admin account"
    },
    {
      code: 6017,
      name: "InvalidAdminFeeAccount",
      msg: "Invalid admin fee account"
    },
    { code: 6018, name: "SameAdminAccount", msg: "Same admin account" },
    {
      code: 6019,
      name: "IdenticalSourceDestination",
      msg: "Identical user source and destination token account"
    },
    {
      code: 6020,
      name: "ApyCalculationError",
      msg: "Apy calculation error"
    },
    {
      code: 6021,
      name: "InsufficientSnapshot",
      msg: "Insufficient virtual price snapshot"
    },
    {
      code: 6022,
      name: "NonUpdatableCurve",
      msg: "Current curve is non-updatable"
    },
    {
      code: 6023,
      name: "MisMatchedCurve",
      msg: "New curve is mismatched with old curve"
    },
    {
      code: 6024,
      name: "InvalidAmplification",
      msg: "Amplification is invalid"
    },
    {
      code: 6025,
      name: "UnsupportedOperation",
      msg: "Operation is not supported"
    },
    {
      code: 6026,
      name: "ExceedMaxAChanges",
      msg: "Exceed max amplification changes"
    },
    {
      code: 6027,
      name: "InvalidRemainingAccountsLen",
      msg: "Invalid remaining accounts length"
    },
    {
      code: 6028,
      name: "InvalidRemainingAccounts",
      msg: "Invalid remaining account"
    },
    {
      code: 6029,
      name: "MismatchedDepegMint",
      msg: "Token mint B doesn't matches depeg type token mint"
    },
    { code: 6030, name: "InvalidApyAccount", msg: "Invalid APY account" },
    {
      code: 6031,
      name: "InvalidTokenMultiplier",
      msg: "Invalid token multiplier"
    },
    {
      code: 6032,
      name: "InvalidDepegInformation",
      msg: "Invalid depeg information"
    },
    {
      code: 6033,
      name: "UpdateTimeConstraint",
      msg: "Update time constraint violated"
    },
    { code: 6034, name: "ExceedMaxFeeBps", msg: "Exceeded max fee bps" },
    {
      code: 6035,
      name: "OwnerFeeOverHalfOfTradeFee",
      msg: "Owner fee exceed half of trade fee"
    },
    { code: 6036, name: "InvalidAdmin", msg: "Invalid admin" },
    {
      code: 6037,
      name: "PoolIsNotPermissioned",
      msg: "Pool is not permissioned"
    },
    {
      code: 6038,
      name: "InvalidDepositAmount",
      msg: "Invalid deposit amount"
    },
    { code: 6039, name: "InvalidFeeOwner", msg: "Invalid fee owner" },
    { code: 6040, name: "NonDepletedPool", msg: "Pool is not depleted" },
    { code: 6041, name: "AmountNotPeg", msg: "Token amount is not 1:1" },
    { code: 6042, name: "AmountIsZero", msg: "Amount is zero" },
    { code: 6043, name: "TypeCastFailed", msg: "Type cast error" },
    { code: 6044, name: "AmountIsNotEnough", msg: "Amount is not enough" }
  ]
};

// idl/meteora-cp-amm.json
var meteora_cp_amm_default = {
  address: "cpamdpZCGKUy5JxQXB4dcpGPiikHawvSWAd6mEn1sGG",
  metadata: {
    name: "cp_amm",
    version: "0.1.1",
    spec: "0.1.0",
    description: "Created with Anchor"
  },
  instructions: [
    {
      name: "add_liquidity",
      discriminator: [
        181,
        157,
        89,
        67,
        143,
        182,
        52,
        72
      ],
      accounts: [
        {
          name: "pool",
          writable: true,
          relations: [
            "position"
          ]
        },
        {
          name: "position",
          writable: true
        },
        {
          name: "token_a_account",
          docs: [
            "The user token a account"
          ],
          writable: true
        },
        {
          name: "token_b_account",
          docs: [
            "The user token b account"
          ],
          writable: true
        },
        {
          name: "token_a_vault",
          docs: [
            "The vault token account for input token"
          ],
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "token_b_vault",
          docs: [
            "The vault token account for output token"
          ],
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "token_a_mint",
          docs: [
            "The mint of token a"
          ],
          relations: [
            "pool"
          ]
        },
        {
          name: "token_b_mint",
          docs: [
            "The mint of token b"
          ],
          relations: [
            "pool"
          ]
        },
        {
          name: "position_nft_account",
          docs: [
            "The token account for nft"
          ]
        },
        {
          name: "owner",
          docs: [
            "owner of position"
          ],
          signer: true
        },
        {
          name: "token_a_program",
          docs: [
            "Token a program"
          ]
        },
        {
          name: "token_b_program",
          docs: [
            "Token b program"
          ]
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: {
              name: "AddLiquidityParameters"
            }
          }
        }
      ]
    },
    {
      name: "claim_partner_fee",
      discriminator: [
        97,
        206,
        39,
        105,
        94,
        94,
        126,
        148
      ],
      accounts: [
        {
          name: "pool_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "pool",
          writable: true
        },
        {
          name: "token_a_account",
          docs: [
            "The treasury token a account"
          ],
          writable: true
        },
        {
          name: "token_b_account",
          docs: [
            "The treasury token b account"
          ],
          writable: true
        },
        {
          name: "token_a_vault",
          docs: [
            "The vault token account for input token"
          ],
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "token_b_vault",
          docs: [
            "The vault token account for output token"
          ],
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "token_a_mint",
          docs: [
            "The mint of token a"
          ],
          relations: [
            "pool"
          ]
        },
        {
          name: "token_b_mint",
          docs: [
            "The mint of token b"
          ],
          relations: [
            "pool"
          ]
        },
        {
          name: "partner",
          signer: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "token_a_program",
          docs: [
            "Token a program"
          ]
        },
        {
          name: "token_b_program",
          docs: [
            "Token b program"
          ]
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "max_amount_a",
          type: "u64"
        },
        {
          name: "max_amount_b",
          type: "u64"
        }
      ]
    },
    {
      name: "claim_position_fee",
      discriminator: [
        180,
        38,
        154,
        17,
        133,
        33,
        162,
        211
      ],
      accounts: [
        {
          name: "pool_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "pool",
          relations: [
            "position"
          ]
        },
        {
          name: "position",
          writable: true
        },
        {
          name: "token_a_account",
          docs: [
            "The user token a account"
          ],
          writable: true
        },
        {
          name: "token_b_account",
          docs: [
            "The user token b account"
          ],
          writable: true
        },
        {
          name: "token_a_vault",
          docs: [
            "The vault token account for input token"
          ],
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "token_b_vault",
          docs: [
            "The vault token account for output token"
          ],
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "token_a_mint",
          docs: [
            "The mint of token a"
          ],
          relations: [
            "pool"
          ]
        },
        {
          name: "token_b_mint",
          docs: [
            "The mint of token b"
          ],
          relations: [
            "pool"
          ]
        },
        {
          name: "position_nft_account",
          docs: [
            "The token account for nft"
          ]
        },
        {
          name: "owner",
          docs: [
            "owner of position"
          ],
          signer: true
        },
        {
          name: "token_a_program",
          docs: [
            "Token a program"
          ]
        },
        {
          name: "token_b_program",
          docs: [
            "Token b program"
          ]
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "claim_protocol_fee",
      discriminator: [
        165,
        228,
        133,
        48,
        99,
        249,
        255,
        33
      ],
      accounts: [
        {
          name: "pool_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "pool",
          writable: true
        },
        {
          name: "token_a_vault",
          docs: [
            "The vault token account for input token"
          ],
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "token_b_vault",
          docs: [
            "The vault token account for output token"
          ],
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "token_a_mint",
          docs: [
            "The mint of token a"
          ],
          relations: [
            "pool"
          ]
        },
        {
          name: "token_b_mint",
          docs: [
            "The mint of token b"
          ],
          relations: [
            "pool"
          ]
        },
        {
          name: "token_a_account",
          docs: [
            "The treasury token a account"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  48,
                  9,
                  89,
                  123,
                  106,
                  114,
                  131,
                  251,
                  50,
                  173,
                  254,
                  250,
                  10,
                  80,
                  160,
                  84,
                  143,
                  100,
                  81,
                  249,
                  134,
                  112,
                  30,
                  213,
                  50,
                  166,
                  239,
                  78,
                  53,
                  175,
                  188,
                  85
                ]
              },
              {
                kind: "account",
                path: "token_a_program"
              },
              {
                kind: "account",
                path: "token_a_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "token_b_account",
          docs: [
            "The treasury token b account"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  48,
                  9,
                  89,
                  123,
                  106,
                  114,
                  131,
                  251,
                  50,
                  173,
                  254,
                  250,
                  10,
                  80,
                  160,
                  84,
                  143,
                  100,
                  81,
                  249,
                  134,
                  112,
                  30,
                  213,
                  50,
                  166,
                  239,
                  78,
                  53,
                  175,
                  188,
                  85
                ]
              },
              {
                kind: "account",
                path: "token_b_program"
              },
              {
                kind: "account",
                path: "token_b_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "claim_fee_operator",
          docs: [
            "Claim fee operator"
          ]
        },
        {
          name: "operator",
          docs: [
            "Operator"
          ],
          signer: true,
          relations: [
            "claim_fee_operator"
          ]
        },
        {
          name: "token_a_program",
          docs: [
            "Token a program"
          ]
        },
        {
          name: "token_b_program",
          docs: [
            "Token b program"
          ]
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "claim_reward",
      discriminator: [
        149,
        95,
        181,
        242,
        94,
        90,
        158,
        162
      ],
      accounts: [
        {
          name: "pool_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "pool",
          writable: true,
          relations: [
            "position"
          ]
        },
        {
          name: "position",
          writable: true
        },
        {
          name: "reward_vault",
          docs: [
            "The vault token account for reward token"
          ],
          writable: true
        },
        {
          name: "reward_mint"
        },
        {
          name: "user_token_account",
          writable: true
        },
        {
          name: "position_nft_account",
          docs: [
            "The token account for nft"
          ]
        },
        {
          name: "owner",
          docs: [
            "owner of position"
          ],
          signer: true
        },
        {
          name: "token_program"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "reward_index",
          type: "u8"
        }
      ]
    },
    {
      name: "close_claim_fee_operator",
      discriminator: [
        38,
        134,
        82,
        216,
        95,
        124,
        17,
        99
      ],
      accounts: [
        {
          name: "claim_fee_operator",
          writable: true
        },
        {
          name: "rent_receiver",
          writable: true
        },
        {
          name: "admin",
          signer: true
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "close_config",
      discriminator: [
        145,
        9,
        72,
        157,
        95,
        125,
        61,
        85
      ],
      accounts: [
        {
          name: "config",
          writable: true
        },
        {
          name: "admin",
          writable: true,
          signer: true
        },
        {
          name: "rent_receiver",
          writable: true
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "close_position",
      discriminator: [
        123,
        134,
        81,
        0,
        49,
        68,
        98,
        98
      ],
      accounts: [
        {
          name: "position_nft_mint",
          docs: [
            "position_nft_mint"
          ],
          writable: true
        },
        {
          name: "position_nft_account",
          docs: [
            "The token account for nft"
          ],
          writable: true
        },
        {
          name: "pool",
          writable: true,
          relations: [
            "position"
          ]
        },
        {
          name: "position",
          writable: true
        },
        {
          name: "pool_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "rent_receiver",
          writable: true
        },
        {
          name: "owner",
          docs: [
            "Owner of position"
          ],
          signer: true
        },
        {
          name: "token_program",
          docs: [
            "Program to create NFT mint/token account and transfer for token22 account"
          ],
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "create_claim_fee_operator",
      discriminator: [
        169,
        62,
        207,
        107,
        58,
        187,
        162,
        109
      ],
      accounts: [
        {
          name: "claim_fee_operator",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  99,
                  102,
                  95,
                  111,
                  112,
                  101,
                  114,
                  97,
                  116,
                  111,
                  114
                ]
              },
              {
                kind: "account",
                path: "operator"
              }
            ]
          }
        },
        {
          name: "operator"
        },
        {
          name: "admin",
          writable: true,
          signer: true
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "create_config",
      docs: [
        "ADMIN FUNCTIONS /////"
      ],
      discriminator: [
        201,
        207,
        243,
        114,
        75,
        111,
        47,
        189
      ],
      accounts: [
        {
          name: "config",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  99,
                  111,
                  110,
                  102,
                  105,
                  103
                ]
              },
              {
                kind: "arg",
                path: "index"
              }
            ]
          }
        },
        {
          name: "admin",
          writable: true,
          signer: true
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "index",
          type: "u64"
        },
        {
          name: "config_parameters",
          type: {
            defined: {
              name: "StaticConfigParameters"
            }
          }
        }
      ]
    },
    {
      name: "create_dynamic_config",
      discriminator: [
        81,
        251,
        122,
        78,
        66,
        57,
        208,
        82
      ],
      accounts: [
        {
          name: "config",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  99,
                  111,
                  110,
                  102,
                  105,
                  103
                ]
              },
              {
                kind: "arg",
                path: "index"
              }
            ]
          }
        },
        {
          name: "admin",
          writable: true,
          signer: true
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "index",
          type: "u64"
        },
        {
          name: "config_parameters",
          type: {
            defined: {
              name: "DynamicConfigParameters"
            }
          }
        }
      ]
    },
    {
      name: "create_position",
      discriminator: [
        48,
        215,
        197,
        153,
        96,
        203,
        180,
        133
      ],
      accounts: [
        {
          name: "owner"
        },
        {
          name: "position_nft_mint",
          docs: [
            "position_nft_mint"
          ],
          writable: true,
          signer: true
        },
        {
          name: "position_nft_account",
          docs: [
            "position nft account"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  115,
                  105,
                  116,
                  105,
                  111,
                  110,
                  95,
                  110,
                  102,
                  116,
                  95,
                  97,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              },
              {
                kind: "account",
                path: "position_nft_mint"
              }
            ]
          }
        },
        {
          name: "pool",
          writable: true
        },
        {
          name: "position",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  115,
                  105,
                  116,
                  105,
                  111,
                  110
                ]
              },
              {
                kind: "account",
                path: "position_nft_mint"
              }
            ]
          }
        },
        {
          name: "pool_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "payer",
          docs: [
            "Address paying to create the position. Can be anyone"
          ],
          writable: true,
          signer: true
        },
        {
          name: "token_program",
          docs: [
            "Program to create NFT mint/token account and transfer for token22 account"
          ],
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "create_token_badge",
      discriminator: [
        88,
        206,
        0,
        91,
        60,
        175,
        151,
        118
      ],
      accounts: [
        {
          name: "token_badge",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  116,
                  111,
                  107,
                  101,
                  110,
                  95,
                  98,
                  97,
                  100,
                  103,
                  101
                ]
              },
              {
                kind: "account",
                path: "token_mint"
              }
            ]
          }
        },
        {
          name: "token_mint"
        },
        {
          name: "admin",
          writable: true,
          signer: true
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "fund_reward",
      discriminator: [
        188,
        50,
        249,
        165,
        93,
        151,
        38,
        63
      ],
      accounts: [
        {
          name: "pool",
          writable: true
        },
        {
          name: "reward_vault",
          writable: true
        },
        {
          name: "reward_mint"
        },
        {
          name: "funder_token_account",
          writable: true
        },
        {
          name: "funder",
          signer: true
        },
        {
          name: "token_program"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "reward_index",
          type: "u8"
        },
        {
          name: "amount",
          type: "u64"
        },
        {
          name: "carry_forward",
          type: "bool"
        }
      ]
    },
    {
      name: "initialize_customizable_pool",
      discriminator: [
        20,
        161,
        241,
        24,
        189,
        221,
        180,
        2
      ],
      accounts: [
        {
          name: "creator"
        },
        {
          name: "position_nft_mint",
          docs: [
            "position_nft_mint"
          ],
          writable: true,
          signer: true
        },
        {
          name: "position_nft_account",
          docs: [
            "position nft account"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  115,
                  105,
                  116,
                  105,
                  111,
                  110,
                  95,
                  110,
                  102,
                  116,
                  95,
                  97,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              },
              {
                kind: "account",
                path: "position_nft_mint"
              }
            ]
          }
        },
        {
          name: "payer",
          docs: [
            "Address paying to create the pool. Can be anyone"
          ],
          writable: true,
          signer: true
        },
        {
          name: "pool_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "pool",
          docs: [
            "Initialize an account to store the pool state"
          ],
          writable: true
        },
        {
          name: "position",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  115,
                  105,
                  116,
                  105,
                  111,
                  110
                ]
              },
              {
                kind: "account",
                path: "position_nft_mint"
              }
            ]
          }
        },
        {
          name: "token_a_mint",
          docs: [
            "Token a mint"
          ]
        },
        {
          name: "token_b_mint",
          docs: [
            "Token b mint"
          ]
        },
        {
          name: "token_a_vault",
          docs: [
            "Token a vault for the pool"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  116,
                  111,
                  107,
                  101,
                  110,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              {
                kind: "account",
                path: "token_a_mint"
              },
              {
                kind: "account",
                path: "pool"
              }
            ]
          }
        },
        {
          name: "token_b_vault",
          docs: [
            "Token b vault for the pool"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  116,
                  111,
                  107,
                  101,
                  110,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              {
                kind: "account",
                path: "token_b_mint"
              },
              {
                kind: "account",
                path: "pool"
              }
            ]
          }
        },
        {
          name: "payer_token_a",
          docs: [
            "payer token a account"
          ],
          writable: true
        },
        {
          name: "payer_token_b",
          docs: [
            "creator token b account"
          ],
          writable: true
        },
        {
          name: "token_a_program",
          docs: [
            "Program to create mint account and mint tokens"
          ]
        },
        {
          name: "token_b_program",
          docs: [
            "Program to create mint account and mint tokens"
          ]
        },
        {
          name: "token_2022_program",
          docs: [
            "Program to create NFT mint/token account and transfer for token22 account"
          ],
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: {
              name: "InitializeCustomizablePoolParameters"
            }
          }
        }
      ]
    },
    {
      name: "initialize_pool",
      docs: [
        "USER FUNCTIONS ////"
      ],
      discriminator: [
        95,
        180,
        10,
        172,
        84,
        174,
        232,
        40
      ],
      accounts: [
        {
          name: "creator"
        },
        {
          name: "position_nft_mint",
          docs: [
            "position_nft_mint"
          ],
          writable: true,
          signer: true
        },
        {
          name: "position_nft_account",
          docs: [
            "position nft account"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  115,
                  105,
                  116,
                  105,
                  111,
                  110,
                  95,
                  110,
                  102,
                  116,
                  95,
                  97,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              },
              {
                kind: "account",
                path: "position_nft_mint"
              }
            ]
          }
        },
        {
          name: "payer",
          docs: [
            "Address paying to create the pool. Can be anyone"
          ],
          writable: true,
          signer: true
        },
        {
          name: "config",
          docs: [
            "Which config the pool belongs to."
          ]
        },
        {
          name: "pool_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "pool",
          docs: [
            "Initialize an account to store the pool state"
          ],
          writable: true
        },
        {
          name: "position",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  115,
                  105,
                  116,
                  105,
                  111,
                  110
                ]
              },
              {
                kind: "account",
                path: "position_nft_mint"
              }
            ]
          }
        },
        {
          name: "token_a_mint",
          docs: [
            "Token a mint"
          ]
        },
        {
          name: "token_b_mint",
          docs: [
            "Token b mint"
          ]
        },
        {
          name: "token_a_vault",
          docs: [
            "Token a vault for the pool"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  116,
                  111,
                  107,
                  101,
                  110,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              {
                kind: "account",
                path: "token_a_mint"
              },
              {
                kind: "account",
                path: "pool"
              }
            ]
          }
        },
        {
          name: "token_b_vault",
          docs: [
            "Token b vault for the pool"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  116,
                  111,
                  107,
                  101,
                  110,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              {
                kind: "account",
                path: "token_b_mint"
              },
              {
                kind: "account",
                path: "pool"
              }
            ]
          }
        },
        {
          name: "payer_token_a",
          docs: [
            "payer token a account"
          ],
          writable: true
        },
        {
          name: "payer_token_b",
          docs: [
            "creator token b account"
          ],
          writable: true
        },
        {
          name: "token_a_program",
          docs: [
            "Program to create mint account and mint tokens"
          ]
        },
        {
          name: "token_b_program",
          docs: [
            "Program to create mint account and mint tokens"
          ]
        },
        {
          name: "token_2022_program",
          docs: [
            "Program to create NFT mint/token account and transfer for token22 account"
          ],
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: {
              name: "InitializePoolParameters"
            }
          }
        }
      ]
    },
    {
      name: "initialize_pool_with_dynamic_config",
      discriminator: [
        149,
        82,
        72,
        197,
        253,
        252,
        68,
        15
      ],
      accounts: [
        {
          name: "creator"
        },
        {
          name: "position_nft_mint",
          docs: [
            "position_nft_mint"
          ],
          writable: true,
          signer: true
        },
        {
          name: "position_nft_account",
          docs: [
            "position nft account"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  115,
                  105,
                  116,
                  105,
                  111,
                  110,
                  95,
                  110,
                  102,
                  116,
                  95,
                  97,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              },
              {
                kind: "account",
                path: "position_nft_mint"
              }
            ]
          }
        },
        {
          name: "payer",
          docs: [
            "Address paying to create the pool. Can be anyone"
          ],
          writable: true,
          signer: true
        },
        {
          name: "pool_creator_authority",
          signer: true,
          relations: [
            "config"
          ]
        },
        {
          name: "config",
          docs: [
            "Which config the pool belongs to."
          ]
        },
        {
          name: "pool_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "pool",
          docs: [
            "Initialize an account to store the pool state"
          ],
          writable: true
        },
        {
          name: "position",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  115,
                  105,
                  116,
                  105,
                  111,
                  110
                ]
              },
              {
                kind: "account",
                path: "position_nft_mint"
              }
            ]
          }
        },
        {
          name: "token_a_mint",
          docs: [
            "Token a mint"
          ]
        },
        {
          name: "token_b_mint",
          docs: [
            "Token b mint"
          ]
        },
        {
          name: "token_a_vault",
          docs: [
            "Token a vault for the pool"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  116,
                  111,
                  107,
                  101,
                  110,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              {
                kind: "account",
                path: "token_a_mint"
              },
              {
                kind: "account",
                path: "pool"
              }
            ]
          }
        },
        {
          name: "token_b_vault",
          docs: [
            "Token b vault for the pool"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  116,
                  111,
                  107,
                  101,
                  110,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              {
                kind: "account",
                path: "token_b_mint"
              },
              {
                kind: "account",
                path: "pool"
              }
            ]
          }
        },
        {
          name: "payer_token_a",
          docs: [
            "payer token a account"
          ],
          writable: true
        },
        {
          name: "payer_token_b",
          docs: [
            "creator token b account"
          ],
          writable: true
        },
        {
          name: "token_a_program",
          docs: [
            "Program to create mint account and mint tokens"
          ]
        },
        {
          name: "token_b_program",
          docs: [
            "Program to create mint account and mint tokens"
          ]
        },
        {
          name: "token_2022_program",
          docs: [
            "Program to create NFT mint/token account and transfer for token22 account"
          ],
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: {
              name: "InitializeCustomizablePoolParameters"
            }
          }
        }
      ]
    },
    {
      name: "initialize_reward",
      discriminator: [
        95,
        135,
        192,
        196,
        242,
        129,
        230,
        68
      ],
      accounts: [
        {
          name: "pool_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "pool",
          writable: true
        },
        {
          name: "reward_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  114,
                  101,
                  119,
                  97,
                  114,
                  100,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              {
                kind: "account",
                path: "pool"
              },
              {
                kind: "arg",
                path: "reward_index"
              }
            ]
          }
        },
        {
          name: "reward_mint"
        },
        {
          name: "admin",
          writable: true,
          signer: true
        },
        {
          name: "token_program"
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "reward_index",
          type: "u8"
        },
        {
          name: "reward_duration",
          type: "u64"
        },
        {
          name: "funder",
          type: "pubkey"
        }
      ]
    },
    {
      name: "lock_position",
      discriminator: [
        227,
        62,
        2,
        252,
        247,
        10,
        171,
        185
      ],
      accounts: [
        {
          name: "pool",
          relations: [
            "position"
          ]
        },
        {
          name: "position",
          writable: true
        },
        {
          name: "vesting",
          writable: true,
          signer: true
        },
        {
          name: "position_nft_account",
          docs: [
            "The token account for nft"
          ]
        },
        {
          name: "owner",
          docs: [
            "owner of position"
          ],
          signer: true
        },
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: {
              name: "VestingParameters"
            }
          }
        }
      ]
    },
    {
      name: "permanent_lock_position",
      discriminator: [
        165,
        176,
        125,
        6,
        231,
        171,
        186,
        213
      ],
      accounts: [
        {
          name: "pool",
          writable: true,
          relations: [
            "position"
          ]
        },
        {
          name: "position",
          writable: true
        },
        {
          name: "position_nft_account",
          docs: [
            "The token account for nft"
          ]
        },
        {
          name: "owner",
          docs: [
            "owner of position"
          ],
          signer: true
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "permanent_lock_liquidity",
          type: "u128"
        }
      ]
    },
    {
      name: "refresh_vesting",
      discriminator: [
        9,
        94,
        216,
        14,
        116,
        204,
        247,
        0
      ],
      accounts: [
        {
          name: "pool",
          relations: [
            "position"
          ]
        },
        {
          name: "position",
          writable: true
        },
        {
          name: "position_nft_account",
          docs: [
            "The token account for nft"
          ]
        },
        {
          name: "owner"
        }
      ],
      args: []
    },
    {
      name: "remove_all_liquidity",
      discriminator: [
        10,
        51,
        61,
        35,
        112,
        105,
        24,
        85
      ],
      accounts: [
        {
          name: "pool_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "pool",
          writable: true,
          relations: [
            "position"
          ]
        },
        {
          name: "position",
          writable: true
        },
        {
          name: "token_a_account",
          docs: [
            "The user token a account"
          ],
          writable: true
        },
        {
          name: "token_b_account",
          docs: [
            "The user token b account"
          ],
          writable: true
        },
        {
          name: "token_a_vault",
          docs: [
            "The vault token account for input token"
          ],
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "token_b_vault",
          docs: [
            "The vault token account for output token"
          ],
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "token_a_mint",
          docs: [
            "The mint of token a"
          ],
          relations: [
            "pool"
          ]
        },
        {
          name: "token_b_mint",
          docs: [
            "The mint of token b"
          ],
          relations: [
            "pool"
          ]
        },
        {
          name: "position_nft_account",
          docs: [
            "The token account for nft"
          ]
        },
        {
          name: "owner",
          docs: [
            "owner of position"
          ],
          signer: true
        },
        {
          name: "token_a_program",
          docs: [
            "Token a program"
          ]
        },
        {
          name: "token_b_program",
          docs: [
            "Token b program"
          ]
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "token_a_amount_threshold",
          type: "u64"
        },
        {
          name: "token_b_amount_threshold",
          type: "u64"
        }
      ]
    },
    {
      name: "remove_liquidity",
      discriminator: [
        80,
        85,
        209,
        72,
        24,
        206,
        177,
        108
      ],
      accounts: [
        {
          name: "pool_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "pool",
          writable: true,
          relations: [
            "position"
          ]
        },
        {
          name: "position",
          writable: true
        },
        {
          name: "token_a_account",
          docs: [
            "The user token a account"
          ],
          writable: true
        },
        {
          name: "token_b_account",
          docs: [
            "The user token b account"
          ],
          writable: true
        },
        {
          name: "token_a_vault",
          docs: [
            "The vault token account for input token"
          ],
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "token_b_vault",
          docs: [
            "The vault token account for output token"
          ],
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "token_a_mint",
          docs: [
            "The mint of token a"
          ],
          relations: [
            "pool"
          ]
        },
        {
          name: "token_b_mint",
          docs: [
            "The mint of token b"
          ],
          relations: [
            "pool"
          ]
        },
        {
          name: "position_nft_account",
          docs: [
            "The token account for nft"
          ]
        },
        {
          name: "owner",
          docs: [
            "owner of position"
          ],
          signer: true
        },
        {
          name: "token_a_program",
          docs: [
            "Token a program"
          ]
        },
        {
          name: "token_b_program",
          docs: [
            "Token b program"
          ]
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: {
              name: "RemoveLiquidityParameters"
            }
          }
        }
      ]
    },
    {
      name: "set_pool_status",
      discriminator: [
        112,
        87,
        135,
        223,
        83,
        204,
        132,
        53
      ],
      accounts: [
        {
          name: "pool",
          writable: true
        },
        {
          name: "admin",
          signer: true
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "status",
          type: "u8"
        }
      ]
    },
    {
      name: "swap",
      discriminator: [
        248,
        198,
        158,
        145,
        225,
        117,
        135,
        200
      ],
      accounts: [
        {
          name: "pool_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "pool",
          docs: [
            "Pool account"
          ],
          writable: true
        },
        {
          name: "input_token_account",
          docs: [
            "The user token account for input token"
          ],
          writable: true
        },
        {
          name: "output_token_account",
          docs: [
            "The user token account for output token"
          ],
          writable: true
        },
        {
          name: "token_a_vault",
          docs: [
            "The vault token account for input token"
          ],
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "token_b_vault",
          docs: [
            "The vault token account for output token"
          ],
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "token_a_mint",
          docs: [
            "The mint of token a"
          ]
        },
        {
          name: "token_b_mint",
          docs: [
            "The mint of token b"
          ]
        },
        {
          name: "payer",
          docs: [
            "The user performing the swap"
          ],
          signer: true
        },
        {
          name: "token_a_program",
          docs: [
            "Token a program"
          ]
        },
        {
          name: "token_b_program",
          docs: [
            "Token b program"
          ]
        },
        {
          name: "referral_token_account",
          docs: [
            "referral token account"
          ],
          writable: true,
          optional: true
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: {
              name: "SwapParameters"
            }
          }
        }
      ]
    },
    {
      name: "update_reward_duration",
      discriminator: [
        138,
        174,
        196,
        169,
        213,
        235,
        254,
        107
      ],
      accounts: [
        {
          name: "pool",
          writable: true
        },
        {
          name: "admin",
          signer: true
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "reward_index",
          type: "u8"
        },
        {
          name: "new_duration",
          type: "u64"
        }
      ]
    },
    {
      name: "update_reward_funder",
      discriminator: [
        211,
        28,
        48,
        32,
        215,
        160,
        35,
        23
      ],
      accounts: [
        {
          name: "pool",
          writable: true
        },
        {
          name: "admin",
          signer: true
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "reward_index",
          type: "u8"
        },
        {
          name: "new_funder",
          type: "pubkey"
        }
      ]
    },
    {
      name: "withdraw_ineligible_reward",
      discriminator: [
        148,
        206,
        42,
        195,
        247,
        49,
        103,
        8
      ],
      accounts: [
        {
          name: "pool_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "pool",
          writable: true
        },
        {
          name: "reward_vault",
          writable: true
        },
        {
          name: "reward_mint"
        },
        {
          name: "funder_token_account",
          writable: true
        },
        {
          name: "funder",
          signer: true
        },
        {
          name: "token_program"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "reward_index",
          type: "u8"
        }
      ]
    }
  ],
  accounts: [
    {
      name: "ClaimFeeOperator",
      discriminator: [
        166,
        48,
        134,
        86,
        34,
        200,
        188,
        150
      ]
    },
    {
      name: "Config",
      discriminator: [
        155,
        12,
        170,
        224,
        30,
        250,
        204,
        130
      ]
    },
    {
      name: "Pool",
      discriminator: [
        241,
        154,
        109,
        4,
        17,
        177,
        109,
        188
      ]
    },
    {
      name: "Position",
      discriminator: [
        170,
        188,
        143,
        228,
        122,
        64,
        247,
        208
      ]
    },
    {
      name: "TokenBadge",
      discriminator: [
        116,
        219,
        204,
        229,
        249,
        116,
        255,
        150
      ]
    },
    {
      name: "Vesting",
      discriminator: [
        100,
        149,
        66,
        138,
        95,
        200,
        128,
        241
      ]
    }
  ],
  events: [
    {
      name: "EvtAddLiquidity",
      discriminator: [
        175,
        242,
        8,
        157,
        30,
        247,
        185,
        169
      ]
    },
    {
      name: "EvtClaimPartnerFee",
      discriminator: [
        118,
        99,
        77,
        10,
        226,
        1,
        1,
        87
      ]
    },
    {
      name: "EvtClaimPositionFee",
      discriminator: [
        198,
        182,
        183,
        52,
        97,
        12,
        49,
        56
      ]
    },
    {
      name: "EvtClaimProtocolFee",
      discriminator: [
        186,
        244,
        75,
        251,
        188,
        13,
        25,
        33
      ]
    },
    {
      name: "EvtClaimReward",
      discriminator: [
        218,
        86,
        147,
        200,
        235,
        188,
        215,
        231
      ]
    },
    {
      name: "EvtCloseClaimFeeOperator",
      discriminator: [
        111,
        39,
        37,
        55,
        110,
        216,
        194,
        23
      ]
    },
    {
      name: "EvtCloseConfig",
      discriminator: [
        36,
        30,
        239,
        45,
        58,
        132,
        14,
        5
      ]
    },
    {
      name: "EvtClosePosition",
      discriminator: [
        20,
        145,
        144,
        68,
        143,
        142,
        214,
        178
      ]
    },
    {
      name: "EvtCreateClaimFeeOperator",
      discriminator: [
        21,
        6,
        153,
        120,
        68,
        116,
        28,
        177
      ]
    },
    {
      name: "EvtCreateConfig",
      discriminator: [
        131,
        207,
        180,
        174,
        180,
        73,
        165,
        54
      ]
    },
    {
      name: "EvtCreateDynamicConfig",
      discriminator: [
        231,
        197,
        13,
        164,
        248,
        213,
        133,
        152
      ]
    },
    {
      name: "EvtCreatePosition",
      discriminator: [
        156,
        15,
        119,
        198,
        29,
        181,
        221,
        55
      ]
    },
    {
      name: "EvtCreateTokenBadge",
      discriminator: [
        141,
        120,
        134,
        116,
        34,
        28,
        114,
        160
      ]
    },
    {
      name: "EvtFundReward",
      discriminator: [
        104,
        233,
        237,
        122,
        199,
        191,
        121,
        85
      ]
    },
    {
      name: "EvtInitializePool",
      discriminator: [
        228,
        50,
        246,
        85,
        203,
        66,
        134,
        37
      ]
    },
    {
      name: "EvtInitializeReward",
      discriminator: [
        129,
        91,
        188,
        3,
        246,
        52,
        185,
        249
      ]
    },
    {
      name: "EvtLockPosition",
      discriminator: [
        168,
        63,
        108,
        83,
        219,
        82,
        2,
        200
      ]
    },
    {
      name: "EvtPermanentLockPosition",
      discriminator: [
        145,
        143,
        162,
        218,
        218,
        80,
        67,
        11
      ]
    },
    {
      name: "EvtRemoveLiquidity",
      discriminator: [
        87,
        46,
        88,
        98,
        175,
        96,
        34,
        91
      ]
    },
    {
      name: "EvtSetPoolStatus",
      discriminator: [
        100,
        213,
        74,
        3,
        95,
        91,
        228,
        146
      ]
    },
    {
      name: "EvtSwap",
      discriminator: [
        27,
        60,
        21,
        213,
        138,
        170,
        187,
        147
      ]
    },
    {
      name: "EvtUpdateRewardDuration",
      discriminator: [
        149,
        135,
        65,
        231,
        129,
        153,
        65,
        57
      ]
    },
    {
      name: "EvtUpdateRewardFunder",
      discriminator: [
        76,
        154,
        208,
        13,
        40,
        115,
        246,
        146
      ]
    },
    {
      name: "EvtWithdrawIneligibleReward",
      discriminator: [
        248,
        215,
        184,
        78,
        31,
        180,
        179,
        168
      ]
    }
  ],
  errors: [
    {
      code: 6e3,
      name: "MathOverflow",
      msg: "Math operation overflow"
    },
    {
      code: 6001,
      name: "InvalidFee",
      msg: "Invalid fee setup"
    },
    {
      code: 6002,
      name: "ExceededSlippage",
      msg: "Exceeded slippage tolerance"
    },
    {
      code: 6003,
      name: "PoolDisabled",
      msg: "Pool disabled"
    },
    {
      code: 6004,
      name: "ExceedMaxFeeBps",
      msg: "Exceeded max fee bps"
    },
    {
      code: 6005,
      name: "InvalidAdmin",
      msg: "Invalid admin"
    },
    {
      code: 6006,
      name: "AmountIsZero",
      msg: "Amount is zero"
    },
    {
      code: 6007,
      name: "TypeCastFailed",
      msg: "Type cast error"
    },
    {
      code: 6008,
      name: "UnableToModifyActivationPoint",
      msg: "Unable to modify activation point"
    },
    {
      code: 6009,
      name: "InvalidAuthorityToCreateThePool",
      msg: "Invalid authority to create the pool"
    },
    {
      code: 6010,
      name: "InvalidActivationType",
      msg: "Invalid activation type"
    },
    {
      code: 6011,
      name: "InvalidActivationPoint",
      msg: "Invalid activation point"
    },
    {
      code: 6012,
      name: "InvalidQuoteMint",
      msg: "Quote token must be SOL,USDC"
    },
    {
      code: 6013,
      name: "InvalidFeeCurve",
      msg: "Invalid fee curve"
    },
    {
      code: 6014,
      name: "InvalidPriceRange",
      msg: "Invalid Price Range"
    },
    {
      code: 6015,
      name: "PriceRangeViolation",
      msg: "Trade is over price range"
    },
    {
      code: 6016,
      name: "InvalidParameters",
      msg: "Invalid parameters"
    },
    {
      code: 6017,
      name: "InvalidCollectFeeMode",
      msg: "Invalid collect fee mode"
    },
    {
      code: 6018,
      name: "InvalidInput",
      msg: "Invalid input"
    },
    {
      code: 6019,
      name: "CannotCreateTokenBadgeOnSupportedMint",
      msg: "Cannot create token badge on supported mint"
    },
    {
      code: 6020,
      name: "InvalidTokenBadge",
      msg: "Invalid token badge"
    },
    {
      code: 6021,
      name: "InvalidMinimumLiquidity",
      msg: "Invalid minimum liquidity"
    },
    {
      code: 6022,
      name: "InvalidVestingInfo",
      msg: "Invalid vesting information"
    },
    {
      code: 6023,
      name: "InsufficientLiquidity",
      msg: "Insufficient liquidity"
    },
    {
      code: 6024,
      name: "InvalidVestingAccount",
      msg: "Invalid vesting account"
    },
    {
      code: 6025,
      name: "InvalidPoolStatus",
      msg: "Invalid pool status"
    },
    {
      code: 6026,
      name: "UnsupportNativeMintToken2022",
      msg: "Unsupported native mint token2022"
    },
    {
      code: 6027,
      name: "InvalidRewardIndex",
      msg: "Invalid reward index"
    },
    {
      code: 6028,
      name: "InvalidRewardDuration",
      msg: "Invalid reward duration"
    },
    {
      code: 6029,
      name: "RewardInitialized",
      msg: "Reward already initialized"
    },
    {
      code: 6030,
      name: "RewardUninitialized",
      msg: "Reward not initialized"
    },
    {
      code: 6031,
      name: "InvalidRewardVault",
      msg: "Invalid reward vault"
    },
    {
      code: 6032,
      name: "MustWithdrawnIneligibleReward",
      msg: "Must withdraw ineligible reward"
    },
    {
      code: 6033,
      name: "IdenticalRewardDuration",
      msg: "Reward duration is the same"
    },
    {
      code: 6034,
      name: "RewardCampaignInProgress",
      msg: "Reward campaign in progress"
    },
    {
      code: 6035,
      name: "IdenticalFunder",
      msg: "Identical funder"
    },
    {
      code: 6036,
      name: "InvalidFunder",
      msg: "Invalid funder"
    },
    {
      code: 6037,
      name: "RewardNotEnded",
      msg: "Reward not ended"
    },
    {
      code: 6038,
      name: "FeeInverseIsIncorrect",
      msg: "Fee inverse is incorrect"
    },
    {
      code: 6039,
      name: "PositionIsNotEmpty",
      msg: "Position is not empty"
    },
    {
      code: 6040,
      name: "InvalidPoolCreatorAuthority",
      msg: "Invalid pool creator authority"
    },
    {
      code: 6041,
      name: "InvalidConfigType",
      msg: "Invalid config type"
    }
  ],
  types: [
    {
      name: "AddLiquidityParameters",
      type: {
        kind: "struct",
        fields: [
          {
            name: "liquidity_delta",
            docs: [
              "delta liquidity"
            ],
            type: "u128"
          },
          {
            name: "token_a_amount_threshold",
            docs: [
              "maximum token a amount"
            ],
            type: "u64"
          },
          {
            name: "token_b_amount_threshold",
            docs: [
              "maximum token b amount"
            ],
            type: "u64"
          }
        ]
      }
    },
    {
      name: "BaseFeeConfig",
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "cliff_fee_numerator",
            type: "u64"
          },
          {
            name: "fee_scheduler_mode",
            type: "u8"
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                5
              ]
            }
          },
          {
            name: "number_of_period",
            type: "u16"
          },
          {
            name: "period_frequency",
            type: "u64"
          },
          {
            name: "reduction_factor",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "BaseFeeParameters",
      type: {
        kind: "struct",
        fields: [
          {
            name: "cliff_fee_numerator",
            type: "u64"
          },
          {
            name: "number_of_period",
            type: "u16"
          },
          {
            name: "period_frequency",
            type: "u64"
          },
          {
            name: "reduction_factor",
            type: "u64"
          },
          {
            name: "fee_scheduler_mode",
            type: "u8"
          }
        ]
      }
    },
    {
      name: "BaseFeeStruct",
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "cliff_fee_numerator",
            type: "u64"
          },
          {
            name: "fee_scheduler_mode",
            type: "u8"
          },
          {
            name: "padding_0",
            type: {
              array: [
                "u8",
                5
              ]
            }
          },
          {
            name: "number_of_period",
            type: "u16"
          },
          {
            name: "period_frequency",
            type: "u64"
          },
          {
            name: "reduction_factor",
            type: "u64"
          },
          {
            name: "padding_1",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "ClaimFeeOperator",
      docs: [
        "Parameter that set by the protocol"
      ],
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "operator",
            docs: [
              "operator"
            ],
            type: "pubkey"
          },
          {
            name: "_padding",
            docs: [
              "Reserve"
            ],
            type: {
              array: [
                "u8",
                128
              ]
            }
          }
        ]
      }
    },
    {
      name: "Config",
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "vault_config_key",
            docs: [
              "Vault config key"
            ],
            type: "pubkey"
          },
          {
            name: "pool_creator_authority",
            docs: [
              "Only pool_creator_authority can use the current config to initialize new pool. When it's Pubkey::default, it's a public config."
            ],
            type: "pubkey"
          },
          {
            name: "pool_fees",
            docs: [
              "Pool fee"
            ],
            type: {
              defined: {
                name: "PoolFeesConfig"
              }
            }
          },
          {
            name: "activation_type",
            docs: [
              "Activation type"
            ],
            type: "u8"
          },
          {
            name: "collect_fee_mode",
            docs: [
              "Collect fee mode"
            ],
            type: "u8"
          },
          {
            name: "config_type",
            docs: [
              "Config type mode, 0 for static, 1 for dynamic"
            ],
            type: "u8"
          },
          {
            name: "_padding_0",
            docs: [
              "padding 0"
            ],
            type: {
              array: [
                "u8",
                5
              ]
            }
          },
          {
            name: "index",
            docs: [
              "config index"
            ],
            type: "u64"
          },
          {
            name: "sqrt_min_price",
            docs: [
              "sqrt min price"
            ],
            type: "u128"
          },
          {
            name: "sqrt_max_price",
            docs: [
              "sqrt max price"
            ],
            type: "u128"
          },
          {
            name: "_padding_1",
            docs: [
              "Fee curve point",
              "Padding for further use"
            ],
            type: {
              array: [
                "u64",
                10
              ]
            }
          }
        ]
      }
    },
    {
      name: "DynamicConfigParameters",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool_creator_authority",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "DynamicFeeConfig",
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "initialized",
            type: "u8"
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                7
              ]
            }
          },
          {
            name: "max_volatility_accumulator",
            type: "u32"
          },
          {
            name: "variable_fee_control",
            type: "u32"
          },
          {
            name: "bin_step",
            type: "u16"
          },
          {
            name: "filter_period",
            type: "u16"
          },
          {
            name: "decay_period",
            type: "u16"
          },
          {
            name: "reduction_factor",
            type: "u16"
          },
          {
            name: "padding_1",
            type: {
              array: [
                "u8",
                8
              ]
            }
          },
          {
            name: "bin_step_u128",
            type: "u128"
          }
        ]
      }
    },
    {
      name: "DynamicFeeParameters",
      type: {
        kind: "struct",
        fields: [
          {
            name: "bin_step",
            type: "u16"
          },
          {
            name: "bin_step_u128",
            type: "u128"
          },
          {
            name: "filter_period",
            type: "u16"
          },
          {
            name: "decay_period",
            type: "u16"
          },
          {
            name: "reduction_factor",
            type: "u16"
          },
          {
            name: "max_volatility_accumulator",
            type: "u32"
          },
          {
            name: "variable_fee_control",
            type: "u32"
          }
        ]
      }
    },
    {
      name: "DynamicFeeStruct",
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "initialized",
            type: "u8"
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                7
              ]
            }
          },
          {
            name: "max_volatility_accumulator",
            type: "u32"
          },
          {
            name: "variable_fee_control",
            type: "u32"
          },
          {
            name: "bin_step",
            type: "u16"
          },
          {
            name: "filter_period",
            type: "u16"
          },
          {
            name: "decay_period",
            type: "u16"
          },
          {
            name: "reduction_factor",
            type: "u16"
          },
          {
            name: "last_update_timestamp",
            type: "u64"
          },
          {
            name: "bin_step_u128",
            type: "u128"
          },
          {
            name: "sqrt_price_reference",
            type: "u128"
          },
          {
            name: "volatility_accumulator",
            type: "u128"
          },
          {
            name: "volatility_reference",
            type: "u128"
          }
        ]
      }
    },
    {
      name: "EvtAddLiquidity",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "position",
            type: "pubkey"
          },
          {
            name: "owner",
            type: "pubkey"
          },
          {
            name: "params",
            type: {
              defined: {
                name: "AddLiquidityParameters"
              }
            }
          },
          {
            name: "token_a_amount",
            type: "u64"
          },
          {
            name: "token_b_amount",
            type: "u64"
          },
          {
            name: "total_amount_a",
            type: "u64"
          },
          {
            name: "total_amount_b",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "EvtClaimPartnerFee",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "token_a_amount",
            type: "u64"
          },
          {
            name: "token_b_amount",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "EvtClaimPositionFee",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "position",
            type: "pubkey"
          },
          {
            name: "owner",
            type: "pubkey"
          },
          {
            name: "fee_a_claimed",
            type: "u64"
          },
          {
            name: "fee_b_claimed",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "EvtClaimProtocolFee",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "token_a_amount",
            type: "u64"
          },
          {
            name: "token_b_amount",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "EvtClaimReward",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "position",
            type: "pubkey"
          },
          {
            name: "owner",
            type: "pubkey"
          },
          {
            name: "mint_reward",
            type: "pubkey"
          },
          {
            name: "reward_index",
            type: "u8"
          },
          {
            name: "total_reward",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "EvtCloseClaimFeeOperator",
      docs: [
        "Close claim fee operator"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "claim_fee_operator",
            type: "pubkey"
          },
          {
            name: "operator",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "EvtCloseConfig",
      docs: [
        "Close config"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "config",
            docs: [
              "Config pubkey"
            ],
            type: "pubkey"
          },
          {
            name: "admin",
            docs: [
              "admin pk"
            ],
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "EvtClosePosition",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "owner",
            type: "pubkey"
          },
          {
            name: "position",
            type: "pubkey"
          },
          {
            name: "position_nft_mint",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "EvtCreateClaimFeeOperator",
      docs: [
        "Create claim fee operator"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "operator",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "EvtCreateConfig",
      docs: [
        "Create static config"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool_fees",
            type: {
              defined: {
                name: "PoolFeeParameters"
              }
            }
          },
          {
            name: "vault_config_key",
            type: "pubkey"
          },
          {
            name: "pool_creator_authority",
            type: "pubkey"
          },
          {
            name: "activation_type",
            type: "u8"
          },
          {
            name: "sqrt_min_price",
            type: "u128"
          },
          {
            name: "sqrt_max_price",
            type: "u128"
          },
          {
            name: "collect_fee_mode",
            type: "u8"
          },
          {
            name: "index",
            type: "u64"
          },
          {
            name: "config",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "EvtCreateDynamicConfig",
      docs: [
        "Create dynamic config"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "config",
            type: "pubkey"
          },
          {
            name: "pool_creator_authority",
            type: "pubkey"
          },
          {
            name: "index",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "EvtCreatePosition",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "owner",
            type: "pubkey"
          },
          {
            name: "position",
            type: "pubkey"
          },
          {
            name: "position_nft_mint",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "EvtCreateTokenBadge",
      docs: [
        "Create token badge"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "token_mint",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "EvtFundReward",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "funder",
            type: "pubkey"
          },
          {
            name: "mint_reward",
            type: "pubkey"
          },
          {
            name: "reward_index",
            type: "u8"
          },
          {
            name: "amount",
            type: "u64"
          },
          {
            name: "transfer_fee_excluded_amount_in",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "EvtInitializePool",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "token_a_mint",
            type: "pubkey"
          },
          {
            name: "token_b_mint",
            type: "pubkey"
          },
          {
            name: "creator",
            type: "pubkey"
          },
          {
            name: "payer",
            type: "pubkey"
          },
          {
            name: "alpha_vault",
            type: "pubkey"
          },
          {
            name: "pool_fees",
            type: {
              defined: {
                name: "PoolFeeParameters"
              }
            }
          },
          {
            name: "sqrt_min_price",
            type: "u128"
          },
          {
            name: "sqrt_max_price",
            type: "u128"
          },
          {
            name: "activation_type",
            type: "u8"
          },
          {
            name: "collect_fee_mode",
            type: "u8"
          },
          {
            name: "liquidity",
            type: "u128"
          },
          {
            name: "sqrt_price",
            type: "u128"
          },
          {
            name: "activation_point",
            type: "u64"
          },
          {
            name: "token_a_flag",
            type: "u8"
          },
          {
            name: "token_b_flag",
            type: "u8"
          },
          {
            name: "token_a_amount",
            type: "u64"
          },
          {
            name: "token_b_amount",
            type: "u64"
          },
          {
            name: "total_amount_a",
            type: "u64"
          },
          {
            name: "total_amount_b",
            type: "u64"
          },
          {
            name: "pool_type",
            type: "u8"
          }
        ]
      }
    },
    {
      name: "EvtInitializeReward",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "reward_mint",
            type: "pubkey"
          },
          {
            name: "funder",
            type: "pubkey"
          },
          {
            name: "reward_index",
            type: "u8"
          },
          {
            name: "reward_duration",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "EvtLockPosition",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "position",
            type: "pubkey"
          },
          {
            name: "owner",
            type: "pubkey"
          },
          {
            name: "vesting",
            type: "pubkey"
          },
          {
            name: "cliff_point",
            type: "u64"
          },
          {
            name: "period_frequency",
            type: "u64"
          },
          {
            name: "cliff_unlock_liquidity",
            type: "u128"
          },
          {
            name: "liquidity_per_period",
            type: "u128"
          },
          {
            name: "number_of_period",
            type: "u16"
          }
        ]
      }
    },
    {
      name: "EvtPermanentLockPosition",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "position",
            type: "pubkey"
          },
          {
            name: "lock_liquidity_amount",
            type: "u128"
          },
          {
            name: "total_permanent_locked_liquidity",
            type: "u128"
          }
        ]
      }
    },
    {
      name: "EvtRemoveLiquidity",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "position",
            type: "pubkey"
          },
          {
            name: "owner",
            type: "pubkey"
          },
          {
            name: "params",
            type: {
              defined: {
                name: "RemoveLiquidityParameters"
              }
            }
          },
          {
            name: "token_a_amount",
            type: "u64"
          },
          {
            name: "token_b_amount",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "EvtSetPoolStatus",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "status",
            type: "u8"
          }
        ]
      }
    },
    {
      name: "EvtSwap",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "trade_direction",
            type: "u8"
          },
          {
            name: "has_referral",
            type: "bool"
          },
          {
            name: "params",
            type: {
              defined: {
                name: "SwapParameters"
              }
            }
          },
          {
            name: "swap_result",
            type: {
              defined: {
                name: "SwapResult"
              }
            }
          },
          {
            name: "actual_amount_in",
            type: "u64"
          },
          {
            name: "current_timestamp",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "EvtUpdateRewardDuration",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "reward_index",
            type: "u8"
          },
          {
            name: "old_reward_duration",
            type: "u64"
          },
          {
            name: "new_reward_duration",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "EvtUpdateRewardFunder",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "reward_index",
            type: "u8"
          },
          {
            name: "old_funder",
            type: "pubkey"
          },
          {
            name: "new_funder",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "EvtWithdrawIneligibleReward",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "reward_mint",
            type: "pubkey"
          },
          {
            name: "amount",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "InitializeCustomizablePoolParameters",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool_fees",
            docs: [
              "pool fees"
            ],
            type: {
              defined: {
                name: "PoolFeeParameters"
              }
            }
          },
          {
            name: "sqrt_min_price",
            docs: [
              "sqrt min price"
            ],
            type: "u128"
          },
          {
            name: "sqrt_max_price",
            docs: [
              "sqrt max price"
            ],
            type: "u128"
          },
          {
            name: "has_alpha_vault",
            docs: [
              "has alpha vault"
            ],
            type: "bool"
          },
          {
            name: "liquidity",
            docs: [
              "initialize liquidity"
            ],
            type: "u128"
          },
          {
            name: "sqrt_price",
            docs: [
              "The init price of the pool as a sqrt(token_b/token_a) Q64.64 value"
            ],
            type: "u128"
          },
          {
            name: "activation_type",
            docs: [
              "activation type"
            ],
            type: "u8"
          },
          {
            name: "collect_fee_mode",
            docs: [
              "collect fee mode"
            ],
            type: "u8"
          },
          {
            name: "activation_point",
            docs: [
              "activation point"
            ],
            type: {
              option: "u64"
            }
          }
        ]
      }
    },
    {
      name: "InitializePoolParameters",
      type: {
        kind: "struct",
        fields: [
          {
            name: "liquidity",
            docs: [
              "initialize liquidity"
            ],
            type: "u128"
          },
          {
            name: "sqrt_price",
            docs: [
              "The init price of the pool as a sqrt(token_b/token_a) Q64.64 value"
            ],
            type: "u128"
          },
          {
            name: "activation_point",
            docs: [
              "activation point"
            ],
            type: {
              option: "u64"
            }
          }
        ]
      }
    },
    {
      name: "Pool",
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool_fees",
            docs: [
              "Pool fee"
            ],
            type: {
              defined: {
                name: "PoolFeesStruct"
              }
            }
          },
          {
            name: "token_a_mint",
            docs: [
              "token a mint"
            ],
            type: "pubkey"
          },
          {
            name: "token_b_mint",
            docs: [
              "token b mint"
            ],
            type: "pubkey"
          },
          {
            name: "token_a_vault",
            docs: [
              "token a vault"
            ],
            type: "pubkey"
          },
          {
            name: "token_b_vault",
            docs: [
              "token b vault"
            ],
            type: "pubkey"
          },
          {
            name: "whitelisted_vault",
            docs: [
              "Whitelisted vault to be able to buy pool before activation_point"
            ],
            type: "pubkey"
          },
          {
            name: "partner",
            docs: [
              "partner"
            ],
            type: "pubkey"
          },
          {
            name: "liquidity",
            docs: [
              "liquidity share"
            ],
            type: "u128"
          },
          {
            name: "_padding",
            docs: [
              "padding, previous reserve amount, be careful to use that field"
            ],
            type: "u128"
          },
          {
            name: "protocol_a_fee",
            docs: [
              "protocol a fee"
            ],
            type: "u64"
          },
          {
            name: "protocol_b_fee",
            docs: [
              "protocol b fee"
            ],
            type: "u64"
          },
          {
            name: "partner_a_fee",
            docs: [
              "partner a fee"
            ],
            type: "u64"
          },
          {
            name: "partner_b_fee",
            docs: [
              "partner b fee"
            ],
            type: "u64"
          },
          {
            name: "sqrt_min_price",
            docs: [
              "min price"
            ],
            type: "u128"
          },
          {
            name: "sqrt_max_price",
            docs: [
              "max price"
            ],
            type: "u128"
          },
          {
            name: "sqrt_price",
            docs: [
              "current price"
            ],
            type: "u128"
          },
          {
            name: "activation_point",
            docs: [
              "Activation point, can be slot or timestamp"
            ],
            type: "u64"
          },
          {
            name: "activation_type",
            docs: [
              "Activation type, 0 means by slot, 1 means by timestamp"
            ],
            type: "u8"
          },
          {
            name: "pool_status",
            docs: [
              "pool status, 0: enable, 1 disable"
            ],
            type: "u8"
          },
          {
            name: "token_a_flag",
            docs: [
              "token a flag"
            ],
            type: "u8"
          },
          {
            name: "token_b_flag",
            docs: [
              "token b flag"
            ],
            type: "u8"
          },
          {
            name: "collect_fee_mode",
            docs: [
              "0 is collect fee in both token, 1 only collect fee in token a, 2 only collect fee in token b"
            ],
            type: "u8"
          },
          {
            name: "pool_type",
            docs: [
              "pool type"
            ],
            type: "u8"
          },
          {
            name: "_padding_0",
            docs: [
              "padding"
            ],
            type: {
              array: [
                "u8",
                2
              ]
            }
          },
          {
            name: "fee_a_per_liquidity",
            docs: [
              "cumulative"
            ],
            type: {
              array: [
                "u8",
                32
              ]
            }
          },
          {
            name: "fee_b_per_liquidity",
            docs: [
              "cumulative"
            ],
            type: {
              array: [
                "u8",
                32
              ]
            }
          },
          {
            name: "permanent_lock_liquidity",
            type: "u128"
          },
          {
            name: "metrics",
            docs: [
              "metrics"
            ],
            type: {
              defined: {
                name: "PoolMetrics"
              }
            }
          },
          {
            name: "_padding_1",
            docs: [
              "Padding for further use"
            ],
            type: {
              array: [
                "u64",
                10
              ]
            }
          },
          {
            name: "reward_infos",
            docs: [
              "Farming reward information"
            ],
            type: {
              array: [
                {
                  defined: {
                    name: "RewardInfo"
                  }
                },
                2
              ]
            }
          }
        ]
      }
    },
    {
      name: "PoolFeeParameters",
      docs: [
        "Information regarding fee charges"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "base_fee",
            docs: [
              "Base fee"
            ],
            type: {
              defined: {
                name: "BaseFeeParameters"
              }
            }
          },
          {
            name: "protocol_fee_percent",
            docs: [
              "Protocol trade fee percent"
            ],
            type: "u8"
          },
          {
            name: "partner_fee_percent",
            docs: [
              "partner fee percent"
            ],
            type: "u8"
          },
          {
            name: "referral_fee_percent",
            docs: [
              "referral fee percent"
            ],
            type: "u8"
          },
          {
            name: "dynamic_fee",
            docs: [
              "dynamic fee"
            ],
            type: {
              option: {
                defined: {
                  name: "DynamicFeeParameters"
                }
              }
            }
          }
        ]
      }
    },
    {
      name: "PoolFeesConfig",
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "base_fee",
            type: {
              defined: {
                name: "BaseFeeConfig"
              }
            }
          },
          {
            name: "dynamic_fee",
            type: {
              defined: {
                name: "DynamicFeeConfig"
              }
            }
          },
          {
            name: "protocol_fee_percent",
            type: "u8"
          },
          {
            name: "partner_fee_percent",
            type: "u8"
          },
          {
            name: "referral_fee_percent",
            type: "u8"
          },
          {
            name: "padding_0",
            type: {
              array: [
                "u8",
                5
              ]
            }
          },
          {
            name: "padding_1",
            type: {
              array: [
                "u64",
                5
              ]
            }
          }
        ]
      }
    },
    {
      name: "PoolFeesStruct",
      docs: [
        "Information regarding fee charges",
        "trading_fee = amount * trade_fee_numerator / denominator",
        "protocol_fee = trading_fee * protocol_fee_percentage / 100",
        "referral_fee = protocol_fee * referral_percentage / 100",
        "partner_fee = (protocol_fee - referral_fee) * partner_fee_percentage / denominator"
      ],
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "base_fee",
            docs: [
              "Trade fees are extra token amounts that are held inside the token",
              "accounts during a trade, making the value of liquidity tokens rise.",
              "Trade fee numerator"
            ],
            type: {
              defined: {
                name: "BaseFeeStruct"
              }
            }
          },
          {
            name: "protocol_fee_percent",
            docs: [
              "Protocol trading fees are extra token amounts that are held inside the token",
              "accounts during a trade, with the equivalent in pool tokens minted to",
              "the protocol of the program.",
              "Protocol trade fee numerator"
            ],
            type: "u8"
          },
          {
            name: "partner_fee_percent",
            docs: [
              "partner fee"
            ],
            type: "u8"
          },
          {
            name: "referral_fee_percent",
            docs: [
              "referral fee"
            ],
            type: "u8"
          },
          {
            name: "padding_0",
            docs: [
              "padding"
            ],
            type: {
              array: [
                "u8",
                5
              ]
            }
          },
          {
            name: "dynamic_fee",
            docs: [
              "dynamic fee"
            ],
            type: {
              defined: {
                name: "DynamicFeeStruct"
              }
            }
          },
          {
            name: "padding_1",
            docs: [
              "padding"
            ],
            type: {
              array: [
                "u64",
                2
              ]
            }
          }
        ]
      }
    },
    {
      name: "PoolMetrics",
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "total_lp_a_fee",
            type: "u128"
          },
          {
            name: "total_lp_b_fee",
            type: "u128"
          },
          {
            name: "total_protocol_a_fee",
            type: "u64"
          },
          {
            name: "total_protocol_b_fee",
            type: "u64"
          },
          {
            name: "total_partner_a_fee",
            type: "u64"
          },
          {
            name: "total_partner_b_fee",
            type: "u64"
          },
          {
            name: "total_position",
            type: "u64"
          },
          {
            name: "padding",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "Position",
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "nft_mint",
            docs: [
              "nft mint"
            ],
            type: "pubkey"
          },
          {
            name: "fee_a_per_token_checkpoint",
            docs: [
              "fee a checkpoint"
            ],
            type: {
              array: [
                "u8",
                32
              ]
            }
          },
          {
            name: "fee_b_per_token_checkpoint",
            docs: [
              "fee b checkpoint"
            ],
            type: {
              array: [
                "u8",
                32
              ]
            }
          },
          {
            name: "fee_a_pending",
            docs: [
              "fee a pending"
            ],
            type: "u64"
          },
          {
            name: "fee_b_pending",
            docs: [
              "fee b pending"
            ],
            type: "u64"
          },
          {
            name: "unlocked_liquidity",
            docs: [
              "unlock liquidity"
            ],
            type: "u128"
          },
          {
            name: "vested_liquidity",
            docs: [
              "vesting liquidity"
            ],
            type: "u128"
          },
          {
            name: "permanent_locked_liquidity",
            docs: [
              "permanent locked liquidity"
            ],
            type: "u128"
          },
          {
            name: "metrics",
            docs: [
              "metrics"
            ],
            type: {
              defined: {
                name: "PositionMetrics"
              }
            }
          },
          {
            name: "reward_infos",
            docs: [
              "Farming reward information"
            ],
            type: {
              array: [
                {
                  defined: {
                    name: "UserRewardInfo"
                  }
                },
                2
              ]
            }
          },
          {
            name: "padding",
            docs: [
              "padding for future usage"
            ],
            type: {
              array: [
                "u128",
                6
              ]
            }
          }
        ]
      }
    },
    {
      name: "PositionMetrics",
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "total_claimed_a_fee",
            type: "u64"
          },
          {
            name: "total_claimed_b_fee",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "RemoveLiquidityParameters",
      type: {
        kind: "struct",
        fields: [
          {
            name: "liquidity_delta",
            docs: [
              "delta liquidity"
            ],
            type: "u128"
          },
          {
            name: "token_a_amount_threshold",
            docs: [
              "minimum token a amount"
            ],
            type: "u64"
          },
          {
            name: "token_b_amount_threshold",
            docs: [
              "minimum token b amount"
            ],
            type: "u64"
          }
        ]
      }
    },
    {
      name: "RewardInfo",
      docs: [
        "Stores the state relevant for tracking liquidity mining rewards"
      ],
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "initialized",
            docs: [
              "Indicates if the reward has been initialized"
            ],
            type: "u8"
          },
          {
            name: "reward_token_flag",
            docs: [
              "reward token flag"
            ],
            type: "u8"
          },
          {
            name: "_padding_0",
            docs: [
              "padding"
            ],
            type: {
              array: [
                "u8",
                6
              ]
            }
          },
          {
            name: "_padding_1",
            docs: [
              "Padding to ensure `reward_rate: u128` is 16-byte aligned"
            ],
            type: {
              array: [
                "u8",
                8
              ]
            }
          },
          {
            name: "mint",
            docs: [
              "Reward token mint."
            ],
            type: "pubkey"
          },
          {
            name: "vault",
            docs: [
              "Reward vault token account."
            ],
            type: "pubkey"
          },
          {
            name: "funder",
            docs: [
              "Authority account that allows to fund rewards"
            ],
            type: "pubkey"
          },
          {
            name: "reward_duration",
            docs: [
              "reward duration"
            ],
            type: "u64"
          },
          {
            name: "reward_duration_end",
            docs: [
              "reward duration end"
            ],
            type: "u64"
          },
          {
            name: "reward_rate",
            docs: [
              "reward rate"
            ],
            type: "u128"
          },
          {
            name: "reward_per_token_stored",
            docs: [
              "Reward per token stored"
            ],
            type: {
              array: [
                "u8",
                32
              ]
            }
          },
          {
            name: "last_update_time",
            docs: [
              "The last time reward states were updated."
            ],
            type: "u64"
          },
          {
            name: "cumulative_seconds_with_empty_liquidity_reward",
            docs: [
              "Accumulated seconds when the farm distributed rewards but the bin was empty.",
              "These rewards will be carried over to the next reward time window."
            ],
            type: "u64"
          }
        ]
      }
    },
    {
      name: "StaticConfigParameters",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool_fees",
            type: {
              defined: {
                name: "PoolFeeParameters"
              }
            }
          },
          {
            name: "sqrt_min_price",
            type: "u128"
          },
          {
            name: "sqrt_max_price",
            type: "u128"
          },
          {
            name: "vault_config_key",
            type: "pubkey"
          },
          {
            name: "pool_creator_authority",
            type: "pubkey"
          },
          {
            name: "activation_type",
            type: "u8"
          },
          {
            name: "collect_fee_mode",
            type: "u8"
          }
        ]
      }
    },
    {
      name: "SwapParameters",
      type: {
        kind: "struct",
        fields: [
          {
            name: "amount_in",
            type: "u64"
          },
          {
            name: "minimum_amount_out",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "SwapResult",
      docs: [
        "Encodes all results of swapping"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "output_amount",
            type: "u64"
          },
          {
            name: "next_sqrt_price",
            type: "u128"
          },
          {
            name: "lp_fee",
            type: "u64"
          },
          {
            name: "protocol_fee",
            type: "u64"
          },
          {
            name: "partner_fee",
            type: "u64"
          },
          {
            name: "referral_fee",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "TokenBadge",
      docs: [
        "Parameter that set by the protocol"
      ],
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "token_mint",
            docs: [
              "token mint"
            ],
            type: "pubkey"
          },
          {
            name: "_padding",
            docs: [
              "Reserve"
            ],
            type: {
              array: [
                "u8",
                128
              ]
            }
          }
        ]
      }
    },
    {
      name: "UserRewardInfo",
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "reward_per_token_checkpoint",
            docs: [
              "The latest update reward checkpoint"
            ],
            type: {
              array: [
                "u8",
                32
              ]
            }
          },
          {
            name: "reward_pendings",
            docs: [
              "Current pending rewards"
            ],
            type: "u64"
          },
          {
            name: "total_claimed_rewards",
            docs: [
              "Total claimed rewards"
            ],
            type: "u64"
          }
        ]
      }
    },
    {
      name: "Vesting",
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "position",
            type: "pubkey"
          },
          {
            name: "cliff_point",
            type: "u64"
          },
          {
            name: "period_frequency",
            type: "u64"
          },
          {
            name: "cliff_unlock_liquidity",
            type: "u128"
          },
          {
            name: "liquidity_per_period",
            type: "u128"
          },
          {
            name: "total_released_liquidity",
            type: "u128"
          },
          {
            name: "number_of_period",
            type: "u16"
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                14
              ]
            }
          },
          {
            name: "padding2",
            type: {
              array: [
                "u128",
                4
              ]
            }
          }
        ]
      }
    },
    {
      name: "VestingParameters",
      type: {
        kind: "struct",
        fields: [
          {
            name: "cliff_point",
            type: {
              option: "u64"
            }
          },
          {
            name: "period_frequency",
            type: "u64"
          },
          {
            name: "cliff_unlock_liquidity",
            type: "u128"
          },
          {
            name: "liquidity_per_period",
            type: "u128"
          },
          {
            name: "number_of_period",
            type: "u16"
          }
        ]
      }
    }
  ]
};

// idl/meteora-dbc.json
var meteora_dbc_default = {
  address: "dbcij3LWUppWqq96dh6gJWwBifmcGfLSB5D4DuSMaqN",
  metadata: {
    name: "dynamic_bonding_curve",
    version: "0.1.6",
    spec: "0.1.0",
    description: "Created with Anchor"
  },
  instructions: [
    {
      name: "claim_creator_trading_fee",
      discriminator: [
        82,
        220,
        250,
        189,
        3,
        85,
        107,
        45
      ],
      accounts: [
        {
          name: "pool_authority",
          address: "FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM"
        },
        {
          name: "pool",
          writable: true
        },
        {
          name: "token_a_account",
          docs: [
            "The treasury token a account"
          ],
          writable: true
        },
        {
          name: "token_b_account",
          docs: [
            "The treasury token b account"
          ],
          writable: true
        },
        {
          name: "base_vault",
          docs: [
            "The vault token account for input token"
          ],
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "quote_vault",
          docs: [
            "The vault token account for output token"
          ],
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "base_mint",
          docs: [
            "The mint of token a"
          ],
          relations: [
            "pool"
          ]
        },
        {
          name: "quote_mint",
          docs: [
            "The mint of token b"
          ]
        },
        {
          name: "creator",
          signer: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "token_base_program",
          docs: [
            "Token a program"
          ]
        },
        {
          name: "token_quote_program",
          docs: [
            "Token b program"
          ]
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "max_base_amount",
          type: "u64"
        },
        {
          name: "max_quote_amount",
          type: "u64"
        }
      ]
    },
    {
      name: "claim_protocol_fee",
      discriminator: [
        165,
        228,
        133,
        48,
        99,
        249,
        255,
        33
      ],
      accounts: [
        {
          name: "pool_authority",
          address: "FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM"
        },
        {
          name: "config",
          relations: [
            "pool"
          ]
        },
        {
          name: "pool",
          writable: true
        },
        {
          name: "base_vault",
          docs: [
            "The vault token account for input token"
          ],
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "quote_vault",
          docs: [
            "The vault token account for output token"
          ],
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "base_mint",
          docs: [
            "The mint of token a"
          ],
          relations: [
            "pool"
          ]
        },
        {
          name: "quote_mint",
          docs: [
            "The mint of token b"
          ],
          relations: [
            "config"
          ]
        },
        {
          name: "token_base_account",
          docs: [
            "The treasury token a account"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  48,
                  9,
                  89,
                  123,
                  106,
                  114,
                  131,
                  251,
                  50,
                  173,
                  254,
                  250,
                  10,
                  80,
                  160,
                  84,
                  143,
                  100,
                  81,
                  249,
                  134,
                  112,
                  30,
                  213,
                  50,
                  166,
                  239,
                  78,
                  53,
                  175,
                  188,
                  85
                ]
              },
              {
                kind: "account",
                path: "token_base_program"
              },
              {
                kind: "account",
                path: "base_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "token_quote_account",
          docs: [
            "The treasury token b account"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  48,
                  9,
                  89,
                  123,
                  106,
                  114,
                  131,
                  251,
                  50,
                  173,
                  254,
                  250,
                  10,
                  80,
                  160,
                  84,
                  143,
                  100,
                  81,
                  249,
                  134,
                  112,
                  30,
                  213,
                  50,
                  166,
                  239,
                  78,
                  53,
                  175,
                  188,
                  85
                ]
              },
              {
                kind: "account",
                path: "token_quote_program"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "claim_fee_operator",
          docs: [
            "Claim fee operator"
          ]
        },
        {
          name: "operator",
          docs: [
            "Operator"
          ],
          signer: true,
          relations: [
            "claim_fee_operator"
          ]
        },
        {
          name: "token_base_program",
          docs: [
            "Token a program"
          ]
        },
        {
          name: "token_quote_program",
          docs: [
            "Token b program"
          ]
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "claim_trading_fee",
      discriminator: [
        8,
        236,
        89,
        49,
        152,
        125,
        177,
        81
      ],
      accounts: [
        {
          name: "pool_authority",
          address: "FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM"
        },
        {
          name: "config",
          relations: [
            "pool"
          ]
        },
        {
          name: "pool",
          writable: true
        },
        {
          name: "token_a_account",
          docs: [
            "The treasury token a account"
          ],
          writable: true
        },
        {
          name: "token_b_account",
          docs: [
            "The treasury token b account"
          ],
          writable: true
        },
        {
          name: "base_vault",
          docs: [
            "The vault token account for input token"
          ],
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "quote_vault",
          docs: [
            "The vault token account for output token"
          ],
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "base_mint",
          docs: [
            "The mint of token a"
          ],
          relations: [
            "pool"
          ]
        },
        {
          name: "quote_mint",
          docs: [
            "The mint of token b"
          ],
          relations: [
            "config"
          ]
        },
        {
          name: "fee_claimer",
          signer: true,
          relations: [
            "config"
          ]
        },
        {
          name: "token_base_program",
          docs: [
            "Token a program"
          ]
        },
        {
          name: "token_quote_program",
          docs: [
            "Token b program"
          ]
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "max_amount_a",
          type: "u64"
        },
        {
          name: "max_amount_b",
          type: "u64"
        }
      ]
    },
    {
      name: "close_claim_fee_operator",
      discriminator: [
        38,
        134,
        82,
        216,
        95,
        124,
        17,
        99
      ],
      accounts: [
        {
          name: "claim_fee_operator",
          writable: true
        },
        {
          name: "rent_receiver",
          writable: true
        },
        {
          name: "admin",
          signer: true
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "create_claim_fee_operator",
      docs: [
        "ADMIN FUNCTIONS_ ///"
      ],
      discriminator: [
        169,
        62,
        207,
        107,
        58,
        187,
        162,
        109
      ],
      accounts: [
        {
          name: "claim_fee_operator",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  99,
                  102,
                  95,
                  111,
                  112,
                  101,
                  114,
                  97,
                  116,
                  111,
                  114
                ]
              },
              {
                kind: "account",
                path: "operator"
              }
            ]
          }
        },
        {
          name: "operator"
        },
        {
          name: "admin",
          writable: true,
          signer: true
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "create_config",
      discriminator: [
        201,
        207,
        243,
        114,
        75,
        111,
        47,
        189
      ],
      accounts: [
        {
          name: "config",
          writable: true,
          signer: true
        },
        {
          name: "fee_claimer"
        },
        {
          name: "leftover_receiver"
        },
        {
          name: "quote_mint",
          docs: [
            "quote mint"
          ]
        },
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "config_parameters",
          type: {
            defined: {
              name: "ConfigParameters"
            }
          }
        }
      ]
    },
    {
      name: "create_locker",
      docs: [
        "PERMISSIONLESS FUNCTIONS ///",
        "create locker"
      ],
      discriminator: [
        167,
        90,
        137,
        154,
        75,
        47,
        17,
        84
      ],
      accounts: [
        {
          name: "virtual_pool",
          docs: [
            "Virtual pool"
          ],
          writable: true
        },
        {
          name: "config",
          docs: [
            "Config"
          ],
          relations: [
            "virtual_pool"
          ]
        },
        {
          name: "pool_authority",
          writable: true,
          address: "FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM"
        },
        {
          name: "base_vault",
          writable: true,
          relations: [
            "virtual_pool"
          ]
        },
        {
          name: "base_mint",
          writable: true,
          relations: [
            "virtual_pool"
          ]
        },
        {
          name: "base",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  98,
                  97,
                  115,
                  101,
                  95,
                  108,
                  111,
                  99,
                  107,
                  101,
                  114
                ]
              },
              {
                kind: "account",
                path: "virtual_pool"
              }
            ]
          }
        },
        {
          name: "creator",
          relations: [
            "virtual_pool"
          ]
        },
        {
          name: "escrow",
          writable: true
        },
        {
          name: "escrow_token",
          writable: true
        },
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "token_program"
        },
        {
          name: "locker_program",
          address: "LocpQgucEQHbqNABEYvBvwoxCPsSbG91A1QaQhQQqjn"
        },
        {
          name: "locker_event_authority"
        },
        {
          name: "system_program",
          docs: [
            "System program."
          ],
          address: "11111111111111111111111111111111"
        }
      ],
      args: []
    },
    {
      name: "create_partner_metadata",
      docs: [
        "PARTNER FUNCTIONS ////"
      ],
      discriminator: [
        192,
        168,
        234,
        191,
        188,
        226,
        227,
        255
      ],
      accounts: [
        {
          name: "partner_metadata",
          docs: [
            "Partner metadata"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  97,
                  114,
                  116,
                  110,
                  101,
                  114,
                  95,
                  109,
                  101,
                  116,
                  97,
                  100,
                  97,
                  116,
                  97
                ]
              },
              {
                kind: "account",
                path: "fee_claimer"
              }
            ]
          }
        },
        {
          name: "payer",
          docs: [
            "Payer of the partner metadata."
          ],
          writable: true,
          signer: true
        },
        {
          name: "fee_claimer",
          docs: [
            "Fee claimer for partner"
          ],
          signer: true
        },
        {
          name: "system_program",
          docs: [
            "System program."
          ],
          address: "11111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "metadata",
          type: {
            defined: {
              name: "CreatePartnerMetadataParameters"
            }
          }
        }
      ]
    },
    {
      name: "create_virtual_pool_metadata",
      discriminator: [
        45,
        97,
        187,
        103,
        254,
        109,
        124,
        134
      ],
      accounts: [
        {
          name: "virtual_pool",
          writable: true
        },
        {
          name: "virtual_pool_metadata",
          docs: [
            "Virtual pool metadata"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  118,
                  105,
                  114,
                  116,
                  117,
                  97,
                  108,
                  95,
                  112,
                  111,
                  111,
                  108,
                  95,
                  109,
                  101,
                  116,
                  97,
                  100,
                  97,
                  116,
                  97
                ]
              },
              {
                kind: "account",
                path: "virtual_pool"
              }
            ]
          }
        },
        {
          name: "creator",
          signer: true,
          relations: [
            "virtual_pool"
          ]
        },
        {
          name: "payer",
          docs: [
            "Payer of the virtual pool metadata."
          ],
          writable: true,
          signer: true
        },
        {
          name: "system_program",
          docs: [
            "System program."
          ],
          address: "11111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "metadata",
          type: {
            defined: {
              name: "CreateVirtualPoolMetadataParameters"
            }
          }
        }
      ]
    },
    {
      name: "creator_withdraw_surplus",
      discriminator: [
        165,
        3,
        137,
        7,
        28,
        134,
        76,
        80
      ],
      accounts: [
        {
          name: "pool_authority",
          address: "FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM"
        },
        {
          name: "config",
          relations: [
            "virtual_pool"
          ]
        },
        {
          name: "virtual_pool",
          writable: true
        },
        {
          name: "token_quote_account",
          docs: [
            "The receiver token account"
          ],
          writable: true
        },
        {
          name: "quote_vault",
          docs: [
            "The vault token account for output token"
          ],
          writable: true,
          relations: [
            "virtual_pool"
          ]
        },
        {
          name: "quote_mint",
          docs: [
            "The mint of quote token"
          ],
          relations: [
            "config"
          ]
        },
        {
          name: "creator",
          signer: true,
          relations: [
            "virtual_pool"
          ]
        },
        {
          name: "token_quote_program",
          docs: [
            "Token b program"
          ]
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "initialize_virtual_pool_with_spl_token",
      docs: [
        "POOL CREATOR FUNCTIONS ////"
      ],
      discriminator: [
        140,
        85,
        215,
        176,
        102,
        54,
        104,
        79
      ],
      accounts: [
        {
          name: "config",
          docs: [
            "Which config the pool belongs to."
          ]
        },
        {
          name: "pool_authority",
          address: "FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM"
        },
        {
          name: "creator",
          signer: true
        },
        {
          name: "base_mint",
          writable: true,
          signer: true
        },
        {
          name: "quote_mint",
          relations: [
            "config"
          ]
        },
        {
          name: "pool",
          docs: [
            "Initialize an account to store the pool state"
          ],
          writable: true
        },
        {
          name: "base_vault",
          docs: [
            "Token a vault for the pool"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  116,
                  111,
                  107,
                  101,
                  110,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              {
                kind: "account",
                path: "base_mint"
              },
              {
                kind: "account",
                path: "pool"
              }
            ]
          }
        },
        {
          name: "quote_vault",
          docs: [
            "Token b vault for the pool"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  116,
                  111,
                  107,
                  101,
                  110,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              {
                kind: "account",
                path: "quote_mint"
              },
              {
                kind: "account",
                path: "pool"
              }
            ]
          }
        },
        {
          name: "mint_metadata",
          writable: true
        },
        {
          name: "metadata_program",
          address: "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"
        },
        {
          name: "payer",
          docs: [
            "Address paying to create the pool. Can be anyone"
          ],
          writable: true,
          signer: true
        },
        {
          name: "token_quote_program",
          docs: [
            "Program to create mint account and mint tokens"
          ]
        },
        {
          name: "token_program",
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: {
              name: "InitializePoolParameters"
            }
          }
        }
      ]
    },
    {
      name: "initialize_virtual_pool_with_token2022",
      discriminator: [
        169,
        118,
        51,
        78,
        145,
        110,
        220,
        155
      ],
      accounts: [
        {
          name: "config",
          docs: [
            "Which config the pool belongs to."
          ]
        },
        {
          name: "pool_authority",
          address: "FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM"
        },
        {
          name: "creator",
          signer: true
        },
        {
          name: "base_mint",
          docs: [
            "Unique token mint address, initialize in contract"
          ],
          writable: true,
          signer: true
        },
        {
          name: "quote_mint",
          relations: [
            "config"
          ]
        },
        {
          name: "pool",
          docs: [
            "Initialize an account to store the pool state"
          ],
          writable: true
        },
        {
          name: "base_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  116,
                  111,
                  107,
                  101,
                  110,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              {
                kind: "account",
                path: "base_mint"
              },
              {
                kind: "account",
                path: "pool"
              }
            ]
          }
        },
        {
          name: "quote_vault",
          docs: [
            "Token quote vault for the pool"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  116,
                  111,
                  107,
                  101,
                  110,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              {
                kind: "account",
                path: "quote_mint"
              },
              {
                kind: "account",
                path: "pool"
              }
            ]
          }
        },
        {
          name: "payer",
          docs: [
            "Address paying to create the pool. Can be anyone"
          ],
          writable: true,
          signer: true
        },
        {
          name: "token_quote_program",
          docs: [
            "Program to create mint account and mint tokens"
          ]
        },
        {
          name: "token_program",
          docs: [
            "token program for base mint"
          ],
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: {
              name: "InitializePoolParameters"
            }
          }
        }
      ]
    },
    {
      name: "migrate_meteora_damm",
      discriminator: [
        27,
        1,
        48,
        22,
        180,
        63,
        118,
        217
      ],
      accounts: [
        {
          name: "virtual_pool",
          docs: [
            "virtual pool"
          ],
          writable: true,
          relations: [
            "migration_metadata"
          ]
        },
        {
          name: "migration_metadata",
          writable: true
        },
        {
          name: "config",
          relations: [
            "virtual_pool"
          ]
        },
        {
          name: "pool_authority",
          writable: true,
          address: "FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM"
        },
        {
          name: "pool",
          writable: true
        },
        {
          name: "damm_config",
          docs: [
            "pool config"
          ]
        },
        {
          name: "lp_mint",
          writable: true
        },
        {
          name: "token_a_mint",
          writable: true
        },
        {
          name: "token_b_mint"
        },
        {
          name: "a_vault",
          writable: true
        },
        {
          name: "b_vault",
          writable: true
        },
        {
          name: "a_token_vault",
          writable: true
        },
        {
          name: "b_token_vault",
          writable: true
        },
        {
          name: "a_vault_lp_mint",
          writable: true
        },
        {
          name: "b_vault_lp_mint",
          writable: true
        },
        {
          name: "a_vault_lp",
          writable: true
        },
        {
          name: "b_vault_lp",
          writable: true
        },
        {
          name: "base_vault",
          writable: true,
          relations: [
            "virtual_pool"
          ]
        },
        {
          name: "quote_vault",
          writable: true,
          relations: [
            "virtual_pool"
          ]
        },
        {
          name: "virtual_pool_lp",
          writable: true
        },
        {
          name: "protocol_token_a_fee",
          writable: true
        },
        {
          name: "protocol_token_b_fee",
          writable: true
        },
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "rent"
        },
        {
          name: "mint_metadata",
          writable: true
        },
        {
          name: "metadata_program"
        },
        {
          name: "amm_program",
          address: "Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB"
        },
        {
          name: "vault_program"
        },
        {
          name: "token_program",
          docs: [
            "token_program"
          ],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "associated_token_program"
        },
        {
          name: "system_program",
          docs: [
            "System program."
          ],
          address: "11111111111111111111111111111111"
        }
      ],
      args: []
    },
    {
      name: "migrate_meteora_damm_claim_lp_token",
      discriminator: [
        139,
        133,
        2,
        30,
        91,
        145,
        127,
        154
      ],
      accounts: [
        {
          name: "virtual_pool",
          relations: [
            "migration_metadata"
          ]
        },
        {
          name: "migration_metadata",
          docs: [
            "migration metadata"
          ],
          writable: true
        },
        {
          name: "pool_authority",
          writable: true,
          address: "FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM"
        },
        {
          name: "lp_mint",
          relations: [
            "migration_metadata"
          ]
        },
        {
          name: "source_token",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "pool_authority"
              },
              {
                kind: "const",
                value: [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              {
                kind: "account",
                path: "migration_metadata"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "destination_token",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "owner"
              },
              {
                kind: "const",
                value: [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              {
                kind: "account",
                path: "migration_metadata"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "owner"
        },
        {
          name: "sender",
          signer: true
        },
        {
          name: "token_program",
          docs: [
            "token_program"
          ],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        }
      ],
      args: []
    },
    {
      name: "migrate_meteora_damm_lock_lp_token",
      discriminator: [
        177,
        55,
        238,
        157,
        251,
        88,
        165,
        42
      ],
      accounts: [
        {
          name: "virtual_pool",
          relations: [
            "migration_metadata"
          ]
        },
        {
          name: "migration_metadata",
          docs: [
            "migration_metadata"
          ],
          writable: true
        },
        {
          name: "pool_authority",
          writable: true,
          address: "FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM"
        },
        {
          name: "pool",
          writable: true,
          relations: [
            "lock_escrow"
          ]
        },
        {
          name: "lp_mint",
          relations: [
            "migration_metadata"
          ]
        },
        {
          name: "lock_escrow",
          writable: true
        },
        {
          name: "owner",
          relations: [
            "lock_escrow"
          ]
        },
        {
          name: "source_tokens",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "pool_authority"
              },
              {
                kind: "const",
                value: [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              {
                kind: "account",
                path: "migration_metadata"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "escrow_vault",
          writable: true
        },
        {
          name: "amm_program",
          address: "Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB"
        },
        {
          name: "a_vault"
        },
        {
          name: "b_vault"
        },
        {
          name: "a_vault_lp"
        },
        {
          name: "b_vault_lp"
        },
        {
          name: "a_vault_lp_mint"
        },
        {
          name: "b_vault_lp_mint"
        },
        {
          name: "token_program",
          docs: [
            "token_program"
          ],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        }
      ],
      args: []
    },
    {
      name: "migration_damm_v2",
      discriminator: [
        156,
        169,
        230,
        103,
        53,
        228,
        80,
        64
      ],
      accounts: [
        {
          name: "virtual_pool",
          docs: [
            "virtual pool"
          ],
          writable: true,
          relations: [
            "migration_metadata"
          ]
        },
        {
          name: "migration_metadata",
          docs: [
            "migration metadata"
          ]
        },
        {
          name: "config",
          docs: [
            "virtual pool config key"
          ],
          relations: [
            "virtual_pool"
          ]
        },
        {
          name: "pool_authority",
          writable: true,
          address: "FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM"
        },
        {
          name: "pool",
          writable: true
        },
        {
          name: "first_position_nft_mint",
          writable: true
        },
        {
          name: "first_position_nft_account",
          writable: true
        },
        {
          name: "first_position",
          writable: true
        },
        {
          name: "second_position_nft_mint",
          writable: true,
          optional: true
        },
        {
          name: "second_position_nft_account",
          writable: true,
          optional: true
        },
        {
          name: "second_position",
          writable: true,
          optional: true
        },
        {
          name: "damm_pool_authority"
        },
        {
          name: "amm_program",
          address: "cpamdpZCGKUy5JxQXB4dcpGPiikHawvSWAd6mEn1sGG"
        },
        {
          name: "base_mint",
          writable: true
        },
        {
          name: "quote_mint",
          writable: true
        },
        {
          name: "token_a_vault",
          writable: true
        },
        {
          name: "token_b_vault",
          writable: true
        },
        {
          name: "base_vault",
          writable: true,
          relations: [
            "virtual_pool"
          ]
        },
        {
          name: "quote_vault",
          writable: true,
          relations: [
            "virtual_pool"
          ]
        },
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "token_base_program"
        },
        {
          name: "token_quote_program"
        },
        {
          name: "token_2022_program"
        },
        {
          name: "damm_event_authority"
        },
        {
          name: "system_program",
          docs: [
            "System program."
          ],
          address: "11111111111111111111111111111111"
        }
      ],
      args: []
    },
    {
      name: "migration_damm_v2_create_metadata",
      discriminator: [
        109,
        189,
        19,
        36,
        195,
        183,
        222,
        82
      ],
      accounts: [
        {
          name: "virtual_pool"
        },
        {
          name: "config",
          relations: [
            "virtual_pool"
          ]
        },
        {
          name: "migration_metadata",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  100,
                  97,
                  109,
                  109,
                  95,
                  118,
                  50
                ]
              },
              {
                kind: "account",
                path: "virtual_pool"
              }
            ]
          }
        },
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "migration_meteora_damm_create_metadata",
      docs: [
        "migrate damm v1"
      ],
      discriminator: [
        47,
        94,
        126,
        115,
        221,
        226,
        194,
        133
      ],
      accounts: [
        {
          name: "virtual_pool"
        },
        {
          name: "config",
          relations: [
            "virtual_pool"
          ]
        },
        {
          name: "migration_metadata",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  109,
                  101,
                  116,
                  101,
                  111,
                  114,
                  97
                ]
              },
              {
                kind: "account",
                path: "virtual_pool"
              }
            ]
          }
        },
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "partner_withdraw_surplus",
      discriminator: [
        168,
        173,
        72,
        100,
        201,
        98,
        38,
        92
      ],
      accounts: [
        {
          name: "pool_authority",
          address: "FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM"
        },
        {
          name: "config",
          relations: [
            "virtual_pool"
          ]
        },
        {
          name: "virtual_pool",
          writable: true
        },
        {
          name: "token_quote_account",
          docs: [
            "The receiver token account"
          ],
          writable: true
        },
        {
          name: "quote_vault",
          docs: [
            "The vault token account for output token"
          ],
          writable: true,
          relations: [
            "virtual_pool"
          ]
        },
        {
          name: "quote_mint",
          docs: [
            "The mint of quote token"
          ],
          relations: [
            "config"
          ]
        },
        {
          name: "fee_claimer",
          signer: true,
          relations: [
            "config"
          ]
        },
        {
          name: "token_quote_program",
          docs: [
            "Token b program"
          ]
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "protocol_withdraw_surplus",
      discriminator: [
        54,
        136,
        225,
        138,
        172,
        182,
        214,
        167
      ],
      accounts: [
        {
          name: "pool_authority",
          address: "FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM"
        },
        {
          name: "config",
          relations: [
            "virtual_pool"
          ]
        },
        {
          name: "virtual_pool",
          writable: true
        },
        {
          name: "token_quote_account",
          docs: [
            "The treasury quote token account"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  48,
                  9,
                  89,
                  123,
                  106,
                  114,
                  131,
                  251,
                  50,
                  173,
                  254,
                  250,
                  10,
                  80,
                  160,
                  84,
                  143,
                  100,
                  81,
                  249,
                  134,
                  112,
                  30,
                  213,
                  50,
                  166,
                  239,
                  78,
                  53,
                  175,
                  188,
                  85
                ]
              },
              {
                kind: "account",
                path: "token_quote_program"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "quote_vault",
          docs: [
            "The vault token account for quote token"
          ],
          writable: true,
          relations: [
            "virtual_pool"
          ]
        },
        {
          name: "quote_mint",
          docs: [
            "The mint of token"
          ],
          relations: [
            "config"
          ]
        },
        {
          name: "token_quote_program",
          docs: [
            "Token b program"
          ]
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "swap",
      docs: [
        "TRADING BOTS FUNCTIONS ////"
      ],
      discriminator: [
        248,
        198,
        158,
        145,
        225,
        117,
        135,
        200
      ],
      accounts: [
        {
          name: "pool_authority",
          address: "FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM"
        },
        {
          name: "config",
          docs: [
            "config key"
          ],
          relations: [
            "pool"
          ]
        },
        {
          name: "pool",
          docs: [
            "Pool account"
          ],
          writable: true
        },
        {
          name: "input_token_account",
          docs: [
            "The user token account for input token"
          ],
          writable: true
        },
        {
          name: "output_token_account",
          docs: [
            "The user token account for output token"
          ],
          writable: true
        },
        {
          name: "base_vault",
          docs: [
            "The vault token account for base token"
          ],
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "quote_vault",
          docs: [
            "The vault token account for quote token"
          ],
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "base_mint",
          docs: [
            "The mint of base token"
          ]
        },
        {
          name: "quote_mint",
          docs: [
            "The mint of quote token"
          ]
        },
        {
          name: "payer",
          docs: [
            "The user performing the swap"
          ],
          signer: true
        },
        {
          name: "token_base_program",
          docs: [
            "Token base program"
          ]
        },
        {
          name: "token_quote_program",
          docs: [
            "Token quote program"
          ]
        },
        {
          name: "referral_token_account",
          docs: [
            "referral token account"
          ],
          writable: true,
          optional: true
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: {
              name: "SwapParameters"
            }
          }
        }
      ]
    },
    {
      name: "swap2",
      discriminator: [
        65,
        75,
        63,
        76,
        235,
        91,
        91,
        136
      ],
      accounts: [
        {
          name: "pool_authority",
          address: "FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM"
        },
        {
          name: "config",
          docs: [
            "config key"
          ],
          relations: [
            "pool"
          ]
        },
        {
          name: "pool",
          docs: [
            "Pool account"
          ],
          writable: true
        },
        {
          name: "input_token_account",
          docs: [
            "The user token account for input token"
          ],
          writable: true
        },
        {
          name: "output_token_account",
          docs: [
            "The user token account for output token"
          ],
          writable: true
        },
        {
          name: "base_vault",
          docs: [
            "The vault token account for base token"
          ],
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "quote_vault",
          docs: [
            "The vault token account for quote token"
          ],
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "base_mint",
          docs: [
            "The mint of base token"
          ]
        },
        {
          name: "quote_mint",
          docs: [
            "The mint of quote token"
          ]
        },
        {
          name: "payer",
          docs: [
            "The user performing the swap"
          ],
          signer: true
        },
        {
          name: "token_base_program",
          docs: [
            "Token base program"
          ]
        },
        {
          name: "token_quote_program",
          docs: [
            "Token quote program"
          ]
        },
        {
          name: "referral_token_account",
          docs: [
            "referral token account"
          ],
          writable: true,
          optional: true
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: {
              name: "SwapParameters2"
            }
          }
        }
      ]
    },
    {
      name: "transfer_pool_creator",
      discriminator: [
        20,
        7,
        169,
        33,
        58,
        147,
        166,
        33
      ],
      accounts: [
        {
          name: "virtual_pool",
          writable: true
        },
        {
          name: "config",
          relations: [
            "virtual_pool"
          ]
        },
        {
          name: "creator",
          signer: true,
          relations: [
            "virtual_pool"
          ]
        },
        {
          name: "new_creator"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "withdraw_leftover",
      discriminator: [
        20,
        198,
        202,
        237,
        235,
        243,
        183,
        66
      ],
      accounts: [
        {
          name: "pool_authority",
          address: "FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM"
        },
        {
          name: "config",
          relations: [
            "virtual_pool"
          ]
        },
        {
          name: "virtual_pool",
          writable: true
        },
        {
          name: "token_base_account",
          docs: [
            "The receiver token account, withdraw to ATA"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "leftover_receiver"
              },
              {
                kind: "account",
                path: "token_base_program"
              },
              {
                kind: "account",
                path: "base_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "base_vault",
          docs: [
            "The vault token account for output token"
          ],
          writable: true,
          relations: [
            "virtual_pool"
          ]
        },
        {
          name: "base_mint",
          docs: [
            "The mint of quote token"
          ],
          relations: [
            "virtual_pool"
          ]
        },
        {
          name: "leftover_receiver",
          relations: [
            "config"
          ]
        },
        {
          name: "token_base_program",
          docs: [
            "Token base program"
          ]
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "withdraw_migration_fee",
      docs: [
        "BOTH partner and creator FUNCTIONS ///"
      ],
      discriminator: [
        237,
        142,
        45,
        23,
        129,
        6,
        222,
        162
      ],
      accounts: [
        {
          name: "pool_authority",
          address: "FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM"
        },
        {
          name: "config",
          relations: [
            "virtual_pool"
          ]
        },
        {
          name: "virtual_pool",
          writable: true
        },
        {
          name: "token_quote_account",
          docs: [
            "The receiver token account"
          ],
          writable: true
        },
        {
          name: "quote_vault",
          docs: [
            "The vault token account for output token"
          ],
          writable: true,
          relations: [
            "virtual_pool"
          ]
        },
        {
          name: "quote_mint",
          docs: [
            "The mint of quote token"
          ],
          relations: [
            "config"
          ]
        },
        {
          name: "sender",
          signer: true
        },
        {
          name: "token_quote_program",
          docs: [
            "Token b program"
          ]
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "flag",
          type: "u8"
        }
      ]
    }
  ],
  accounts: [
    {
      name: "ClaimFeeOperator",
      discriminator: [
        166,
        48,
        134,
        86,
        34,
        200,
        188,
        150
      ]
    },
    {
      name: "Config",
      discriminator: [
        155,
        12,
        170,
        224,
        30,
        250,
        204,
        130
      ]
    },
    {
      name: "LockEscrow",
      discriminator: [
        190,
        106,
        121,
        6,
        200,
        182,
        21,
        75
      ]
    },
    {
      name: "MeteoraDammMigrationMetadata",
      discriminator: [
        17,
        155,
        141,
        215,
        207,
        4,
        133,
        156
      ]
    },
    {
      name: "MeteoraDammV2Metadata",
      discriminator: [
        104,
        221,
        219,
        203,
        10,
        142,
        250,
        163
      ]
    },
    {
      name: "PartnerMetadata",
      discriminator: [
        68,
        68,
        130,
        19,
        16,
        209,
        98,
        156
      ]
    },
    {
      name: "PoolConfig",
      discriminator: [
        26,
        108,
        14,
        123,
        116,
        230,
        129,
        43
      ]
    },
    {
      name: "VirtualPool",
      discriminator: [
        213,
        224,
        5,
        209,
        98,
        69,
        119,
        92
      ]
    },
    {
      name: "VirtualPoolMetadata",
      discriminator: [
        217,
        37,
        82,
        250,
        43,
        47,
        228,
        254
      ]
    }
  ],
  events: [
    {
      name: "EvtClaimCreatorTradingFee",
      discriminator: [
        154,
        228,
        215,
        202,
        133,
        155,
        214,
        138
      ]
    },
    {
      name: "EvtClaimProtocolFee",
      discriminator: [
        186,
        244,
        75,
        251,
        188,
        13,
        25,
        33
      ]
    },
    {
      name: "EvtClaimTradingFee",
      discriminator: [
        26,
        83,
        117,
        240,
        92,
        202,
        112,
        254
      ]
    },
    {
      name: "EvtCloseClaimFeeOperator",
      discriminator: [
        111,
        39,
        37,
        55,
        110,
        216,
        194,
        23
      ]
    },
    {
      name: "EvtCreateClaimFeeOperator",
      discriminator: [
        21,
        6,
        153,
        120,
        68,
        116,
        28,
        177
      ]
    },
    {
      name: "EvtCreateConfig",
      discriminator: [
        131,
        207,
        180,
        174,
        180,
        73,
        165,
        54
      ]
    },
    {
      name: "EvtCreateConfigV2",
      discriminator: [
        163,
        74,
        66,
        187,
        119,
        195,
        26,
        144
      ]
    },
    {
      name: "EvtCreateDammV2MigrationMetadata",
      discriminator: [
        103,
        111,
        132,
        168,
        140,
        253,
        150,
        114
      ]
    },
    {
      name: "EvtCreateMeteoraMigrationMetadata",
      discriminator: [
        99,
        167,
        133,
        63,
        214,
        143,
        175,
        139
      ]
    },
    {
      name: "EvtCreatorWithdrawSurplus",
      discriminator: [
        152,
        73,
        21,
        15,
        66,
        87,
        53,
        157
      ]
    },
    {
      name: "EvtCurveComplete",
      discriminator: [
        229,
        231,
        86,
        84,
        156,
        134,
        75,
        24
      ]
    },
    {
      name: "EvtInitializePool",
      discriminator: [
        228,
        50,
        246,
        85,
        203,
        66,
        134,
        37
      ]
    },
    {
      name: "EvtPartnerMetadata",
      discriminator: [
        200,
        127,
        6,
        55,
        13,
        32,
        8,
        150
      ]
    },
    {
      name: "EvtPartnerWithdrawMigrationFee",
      discriminator: [
        181,
        105,
        127,
        67,
        8,
        187,
        120,
        57
      ]
    },
    {
      name: "EvtPartnerWithdrawSurplus",
      discriminator: [
        195,
        56,
        152,
        9,
        232,
        72,
        35,
        22
      ]
    },
    {
      name: "EvtProtocolWithdrawSurplus",
      discriminator: [
        109,
        111,
        28,
        221,
        134,
        195,
        230,
        203
      ]
    },
    {
      name: "EvtSwap",
      discriminator: [
        27,
        60,
        21,
        213,
        138,
        170,
        187,
        147
      ]
    },
    {
      name: "EvtSwap2",
      discriminator: [
        189,
        66,
        51,
        168,
        38,
        80,
        117,
        153
      ]
    },
    {
      name: "EvtUpdatePoolCreator",
      discriminator: [
        107,
        225,
        165,
        237,
        91,
        158,
        213,
        220
      ]
    },
    {
      name: "EvtVirtualPoolMetadata",
      discriminator: [
        188,
        18,
        72,
        76,
        195,
        91,
        38,
        74
      ]
    },
    {
      name: "EvtWithdrawLeftover",
      discriminator: [
        191,
        189,
        104,
        143,
        111,
        156,
        94,
        229
      ]
    },
    {
      name: "EvtWithdrawMigrationFee",
      discriminator: [
        26,
        203,
        84,
        85,
        161,
        23,
        100,
        214
      ]
    }
  ],
  errors: [
    {
      code: 6e3,
      name: "MathOverflow",
      msg: "Math operation overflow"
    },
    {
      code: 6001,
      name: "InvalidFee",
      msg: "Invalid fee setup"
    },
    {
      code: 6002,
      name: "ExceededSlippage",
      msg: "Exceeded slippage tolerance"
    },
    {
      code: 6003,
      name: "ExceedMaxFeeBps",
      msg: "Exceeded max fee bps"
    },
    {
      code: 6004,
      name: "InvalidAdmin",
      msg: "Invalid admin"
    },
    {
      code: 6005,
      name: "AmountIsZero",
      msg: "Amount is zero"
    },
    {
      code: 6006,
      name: "TypeCastFailed",
      msg: "Type cast error"
    },
    {
      code: 6007,
      name: "InvalidActivationType",
      msg: "Invalid activation type"
    },
    {
      code: 6008,
      name: "InvalidQuoteMint",
      msg: "Invalid quote mint"
    },
    {
      code: 6009,
      name: "InvalidCollectFeeMode",
      msg: "Invalid collect fee mode"
    },
    {
      code: 6010,
      name: "InvalidMigrationFeeOption",
      msg: "Invalid migration fee option"
    },
    {
      code: 6011,
      name: "InvalidInput",
      msg: "Invalid input"
    },
    {
      code: 6012,
      name: "NotEnoughLiquidity",
      msg: "Not enough liquidity"
    },
    {
      code: 6013,
      name: "PoolIsCompleted",
      msg: "Pool is completed"
    },
    {
      code: 6014,
      name: "PoolIsIncompleted",
      msg: "Pool is incompleted"
    },
    {
      code: 6015,
      name: "InvalidMigrationOption",
      msg: "Invalid migration option"
    },
    {
      code: 6016,
      name: "InvalidTokenDecimals",
      msg: "Invalid activation type"
    },
    {
      code: 6017,
      name: "InvalidTokenType",
      msg: "Invalid token type"
    },
    {
      code: 6018,
      name: "InvalidFeePercentage",
      msg: "Invalid fee percentage"
    },
    {
      code: 6019,
      name: "InvalidQuoteThreshold",
      msg: "Invalid quote threshold"
    },
    {
      code: 6020,
      name: "InvalidTokenSupply",
      msg: "Invalid token supply"
    },
    {
      code: 6021,
      name: "InvalidCurve",
      msg: "Invalid curve"
    },
    {
      code: 6022,
      name: "NotPermitToDoThisAction",
      msg: "Not permit to do this action"
    },
    {
      code: 6023,
      name: "InvalidOwnerAccount",
      msg: "Invalid owner account"
    },
    {
      code: 6024,
      name: "InvalidConfigAccount",
      msg: "Invalid config account"
    },
    {
      code: 6025,
      name: "SurplusHasBeenWithdraw",
      msg: "Surplus has been withdraw"
    },
    {
      code: 6026,
      name: "LeftoverHasBeenWithdraw",
      msg: "Leftover has been withdraw"
    },
    {
      code: 6027,
      name: "TotalBaseTokenExceedMaxSupply",
      msg: "Total base token is exceeded max supply"
    },
    {
      code: 6028,
      name: "UnsupportNativeMintToken2022",
      msg: "Unsupport native mint token 2022"
    },
    {
      code: 6029,
      name: "InsufficientLiquidityForMigration",
      msg: "Insufficient liquidity for migration"
    },
    {
      code: 6030,
      name: "MissingPoolConfigInRemainingAccount",
      msg: "Missing pool config in remaining account"
    },
    {
      code: 6031,
      name: "InvalidVestingParameters",
      msg: "Invalid vesting parameters"
    },
    {
      code: 6032,
      name: "InvalidLeftoverAddress",
      msg: "Invalid leftover address"
    },
    {
      code: 6033,
      name: "SwapAmountIsOverAThreshold",
      msg: "Swap amount is over a threshold"
    },
    {
      code: 6034,
      name: "InvalidFeeScheduler",
      msg: "Invalid fee scheduler"
    },
    {
      code: 6035,
      name: "InvalidCreatorTradingFeePercentage",
      msg: "Invalid creator trading fee percentage"
    },
    {
      code: 6036,
      name: "InvalidNewCreator",
      msg: "Invalid new creator"
    },
    {
      code: 6037,
      name: "InvalidTokenAuthorityOption",
      msg: "Invalid token authority option"
    },
    {
      code: 6038,
      name: "InvalidAccount",
      msg: "Invalid account for the instruction"
    },
    {
      code: 6039,
      name: "InvalidMigratorFeePercentage",
      msg: "Invalid migrator fee percentage"
    },
    {
      code: 6040,
      name: "MigrationFeeHasBeenWithdraw",
      msg: "Migration fee has been withdraw"
    },
    {
      code: 6041,
      name: "InvalidBaseFeeMode",
      msg: "Invalid base fee mode"
    },
    {
      code: 6042,
      name: "InvalidFeeRateLimiter",
      msg: "Invalid fee rate limiter"
    },
    {
      code: 6043,
      name: "FailToValidateSingleSwapInstruction",
      msg: "Fail to validate single swap instruction in rate limiter"
    },
    {
      code: 6044,
      name: "InvalidMigratedPoolFee",
      msg: "Invalid migrated pool fee params"
    },
    {
      code: 6045,
      name: "UndeterminedError",
      msg: "Undertermined error"
    },
    {
      code: 6046,
      name: "RateLimiterNotSupported",
      msg: "Rate limiter not supported"
    },
    {
      code: 6047,
      name: "AmountLeftIsNotZero",
      msg: "Amount left is not zero"
    },
    {
      code: 6048,
      name: "NextSqrtPriceIsSmallerThanStartSqrtPrice",
      msg: "Next sqrt price is smaller than start sqrt price"
    }
  ],
  types: [
    {
      name: "BaseFeeConfig",
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "cliff_fee_numerator",
            type: "u64"
          },
          {
            name: "second_factor",
            type: "u64"
          },
          {
            name: "third_factor",
            type: "u64"
          },
          {
            name: "first_factor",
            type: "u16"
          },
          {
            name: "base_fee_mode",
            type: "u8"
          },
          {
            name: "padding_0",
            type: {
              array: [
                "u8",
                5
              ]
            }
          }
        ]
      }
    },
    {
      name: "BaseFeeParameters",
      type: {
        kind: "struct",
        fields: [
          {
            name: "cliff_fee_numerator",
            type: "u64"
          },
          {
            name: "first_factor",
            type: "u16"
          },
          {
            name: "second_factor",
            type: "u64"
          },
          {
            name: "third_factor",
            type: "u64"
          },
          {
            name: "base_fee_mode",
            type: "u8"
          }
        ]
      }
    },
    {
      name: "ClaimFeeOperator",
      docs: [
        "Parameter that set by the protocol"
      ],
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "operator",
            docs: [
              "operator"
            ],
            type: "pubkey"
          },
          {
            name: "_padding",
            docs: [
              "Reserve"
            ],
            type: {
              array: [
                "u8",
                128
              ]
            }
          }
        ]
      }
    },
    {
      name: "Config",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool_fees",
            type: {
              defined: {
                name: "PoolFees"
              }
            }
          },
          {
            name: "activation_duration",
            type: "u64"
          },
          {
            name: "vault_config_key",
            type: "pubkey"
          },
          {
            name: "pool_creator_authority",
            type: "pubkey"
          },
          {
            name: "activation_type",
            type: "u8"
          },
          {
            name: "partner_fee_numerator",
            type: "u64"
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                219
              ]
            }
          }
        ]
      }
    },
    {
      name: "ConfigParameters",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool_fees",
            type: {
              defined: {
                name: "PoolFeeParameters"
              }
            }
          },
          {
            name: "collect_fee_mode",
            type: "u8"
          },
          {
            name: "migration_option",
            type: "u8"
          },
          {
            name: "activation_type",
            type: "u8"
          },
          {
            name: "token_type",
            type: "u8"
          },
          {
            name: "token_decimal",
            type: "u8"
          },
          {
            name: "partner_lp_percentage",
            type: "u8"
          },
          {
            name: "partner_locked_lp_percentage",
            type: "u8"
          },
          {
            name: "creator_lp_percentage",
            type: "u8"
          },
          {
            name: "creator_locked_lp_percentage",
            type: "u8"
          },
          {
            name: "migration_quote_threshold",
            type: "u64"
          },
          {
            name: "sqrt_start_price",
            type: "u128"
          },
          {
            name: "locked_vesting",
            type: {
              defined: {
                name: "LockedVestingParams"
              }
            }
          },
          {
            name: "migration_fee_option",
            type: "u8"
          },
          {
            name: "token_supply",
            type: {
              option: {
                defined: {
                  name: "TokenSupplyParams"
                }
              }
            }
          },
          {
            name: "creator_trading_fee_percentage",
            type: "u8"
          },
          {
            name: "token_update_authority",
            type: "u8"
          },
          {
            name: "migration_fee",
            type: {
              defined: {
                name: "MigrationFee"
              }
            }
          },
          {
            name: "migrated_pool_fee",
            type: {
              defined: {
                name: "MigratedPoolFee"
              }
            }
          },
          {
            name: "padding",
            docs: [
              "padding for future use"
            ],
            type: {
              array: [
                "u64",
                7
              ]
            }
          },
          {
            name: "curve",
            type: {
              vec: {
                defined: {
                  name: "LiquidityDistributionParameters"
                }
              }
            }
          }
        ]
      }
    },
    {
      name: "CreatePartnerMetadataParameters",
      type: {
        kind: "struct",
        fields: [
          {
            name: "padding",
            type: {
              array: [
                "u8",
                96
              ]
            }
          },
          {
            name: "name",
            type: "string"
          },
          {
            name: "website",
            type: "string"
          },
          {
            name: "logo",
            type: "string"
          }
        ]
      }
    },
    {
      name: "CreateVirtualPoolMetadataParameters",
      type: {
        kind: "struct",
        fields: [
          {
            name: "padding",
            type: {
              array: [
                "u8",
                96
              ]
            }
          },
          {
            name: "name",
            type: "string"
          },
          {
            name: "website",
            type: "string"
          },
          {
            name: "logo",
            type: "string"
          }
        ]
      }
    },
    {
      name: "DynamicFeeConfig",
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "initialized",
            type: "u8"
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                7
              ]
            }
          },
          {
            name: "max_volatility_accumulator",
            type: "u32"
          },
          {
            name: "variable_fee_control",
            type: "u32"
          },
          {
            name: "bin_step",
            type: "u16"
          },
          {
            name: "filter_period",
            type: "u16"
          },
          {
            name: "decay_period",
            type: "u16"
          },
          {
            name: "reduction_factor",
            type: "u16"
          },
          {
            name: "padding2",
            type: {
              array: [
                "u8",
                8
              ]
            }
          },
          {
            name: "bin_step_u128",
            type: "u128"
          }
        ]
      }
    },
    {
      name: "DynamicFeeParameters",
      type: {
        kind: "struct",
        fields: [
          {
            name: "bin_step",
            type: "u16"
          },
          {
            name: "bin_step_u128",
            type: "u128"
          },
          {
            name: "filter_period",
            type: "u16"
          },
          {
            name: "decay_period",
            type: "u16"
          },
          {
            name: "reduction_factor",
            type: "u16"
          },
          {
            name: "max_volatility_accumulator",
            type: "u32"
          },
          {
            name: "variable_fee_control",
            type: "u32"
          }
        ]
      }
    },
    {
      name: "EvtClaimCreatorTradingFee",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "token_base_amount",
            type: "u64"
          },
          {
            name: "token_quote_amount",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "EvtClaimProtocolFee",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "token_base_amount",
            type: "u64"
          },
          {
            name: "token_quote_amount",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "EvtClaimTradingFee",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "token_base_amount",
            type: "u64"
          },
          {
            name: "token_quote_amount",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "EvtCloseClaimFeeOperator",
      docs: [
        "Close claim fee operator"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "claim_fee_operator",
            type: "pubkey"
          },
          {
            name: "operator",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "EvtCreateClaimFeeOperator",
      docs: [
        "Create claim fee operator"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "operator",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "EvtCreateConfig",
      docs: [
        "Create config"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "config",
            type: "pubkey"
          },
          {
            name: "quote_mint",
            type: "pubkey"
          },
          {
            name: "fee_claimer",
            type: "pubkey"
          },
          {
            name: "owner",
            type: "pubkey"
          },
          {
            name: "pool_fees",
            type: {
              defined: {
                name: "PoolFeeParameters"
              }
            }
          },
          {
            name: "collect_fee_mode",
            type: "u8"
          },
          {
            name: "migration_option",
            type: "u8"
          },
          {
            name: "activation_type",
            type: "u8"
          },
          {
            name: "token_decimal",
            type: "u8"
          },
          {
            name: "token_type",
            type: "u8"
          },
          {
            name: "partner_locked_lp_percentage",
            type: "u8"
          },
          {
            name: "partner_lp_percentage",
            type: "u8"
          },
          {
            name: "creator_locked_lp_percentage",
            type: "u8"
          },
          {
            name: "creator_lp_percentage",
            type: "u8"
          },
          {
            name: "swap_base_amount",
            type: "u64"
          },
          {
            name: "migration_quote_threshold",
            type: "u64"
          },
          {
            name: "migration_base_amount",
            type: "u64"
          },
          {
            name: "sqrt_start_price",
            type: "u128"
          },
          {
            name: "locked_vesting",
            type: {
              defined: {
                name: "LockedVestingParams"
              }
            }
          },
          {
            name: "migration_fee_option",
            type: "u8"
          },
          {
            name: "fixed_token_supply_flag",
            type: "u8"
          },
          {
            name: "pre_migration_token_supply",
            type: "u64"
          },
          {
            name: "post_migration_token_supply",
            type: "u64"
          },
          {
            name: "curve",
            type: {
              vec: {
                defined: {
                  name: "LiquidityDistributionParameters"
                }
              }
            }
          }
        ]
      }
    },
    {
      name: "EvtCreateConfigV2",
      type: {
        kind: "struct",
        fields: [
          {
            name: "config",
            type: "pubkey"
          },
          {
            name: "quote_mint",
            type: "pubkey"
          },
          {
            name: "fee_claimer",
            type: "pubkey"
          },
          {
            name: "leftover_receiver",
            type: "pubkey"
          },
          {
            name: "config_parameters",
            type: {
              defined: {
                name: "ConfigParameters"
              }
            }
          }
        ]
      }
    },
    {
      name: "EvtCreateDammV2MigrationMetadata",
      type: {
        kind: "struct",
        fields: [
          {
            name: "virtual_pool",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "EvtCreateMeteoraMigrationMetadata",
      type: {
        kind: "struct",
        fields: [
          {
            name: "virtual_pool",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "EvtCreatorWithdrawSurplus",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "surplus_amount",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "EvtCurveComplete",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "config",
            type: "pubkey"
          },
          {
            name: "base_reserve",
            type: "u64"
          },
          {
            name: "quote_reserve",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "EvtInitializePool",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "config",
            type: "pubkey"
          },
          {
            name: "creator",
            type: "pubkey"
          },
          {
            name: "base_mint",
            type: "pubkey"
          },
          {
            name: "pool_type",
            type: "u8"
          },
          {
            name: "activation_point",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "EvtPartnerMetadata",
      docs: [
        "Create partner metadata"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "partner_metadata",
            type: "pubkey"
          },
          {
            name: "fee_claimer",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "EvtPartnerWithdrawMigrationFee",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "fee",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "EvtPartnerWithdrawSurplus",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "surplus_amount",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "EvtProtocolWithdrawSurplus",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "surplus_amount",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "EvtSwap",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "config",
            type: "pubkey"
          },
          {
            name: "trade_direction",
            type: "u8"
          },
          {
            name: "has_referral",
            type: "bool"
          },
          {
            name: "params",
            type: {
              defined: {
                name: "SwapParameters"
              }
            }
          },
          {
            name: "swap_result",
            type: {
              defined: {
                name: "SwapResult"
              }
            }
          },
          {
            name: "amount_in",
            type: "u64"
          },
          {
            name: "current_timestamp",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "EvtSwap2",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "config",
            type: "pubkey"
          },
          {
            name: "trade_direction",
            type: "u8"
          },
          {
            name: "has_referral",
            type: "bool"
          },
          {
            name: "swap_parameters",
            type: {
              defined: {
                name: "SwapParameters2"
              }
            }
          },
          {
            name: "swap_result",
            type: {
              defined: {
                name: "SwapResult2"
              }
            }
          },
          {
            name: "quote_reserve_amount",
            type: "u64"
          },
          {
            name: "migration_threshold",
            type: "u64"
          },
          {
            name: "current_timestamp",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "EvtUpdatePoolCreator",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "creator",
            type: "pubkey"
          },
          {
            name: "new_creator",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "EvtVirtualPoolMetadata",
      docs: [
        "Create virtual pool metadata"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "virtual_pool_metadata",
            type: "pubkey"
          },
          {
            name: "virtual_pool",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "EvtWithdrawLeftover",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "leftover_receiver",
            type: "pubkey"
          },
          {
            name: "leftover_amount",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "EvtWithdrawMigrationFee",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "fee",
            type: "u64"
          },
          {
            name: "flag",
            type: "u8"
          }
        ]
      }
    },
    {
      name: "InitializePoolParameters",
      type: {
        kind: "struct",
        fields: [
          {
            name: "name",
            type: "string"
          },
          {
            name: "symbol",
            type: "string"
          },
          {
            name: "uri",
            type: "string"
          }
        ]
      }
    },
    {
      name: "LiquidityDistributionConfig",
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "sqrt_price",
            type: "u128"
          },
          {
            name: "liquidity",
            type: "u128"
          }
        ]
      }
    },
    {
      name: "LiquidityDistributionParameters",
      type: {
        kind: "struct",
        fields: [
          {
            name: "sqrt_price",
            type: "u128"
          },
          {
            name: "liquidity",
            type: "u128"
          }
        ]
      }
    },
    {
      name: "LockEscrow",
      docs: [
        "State of lock escrow account"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "owner",
            type: "pubkey"
          },
          {
            name: "escrow_vault",
            type: "pubkey"
          },
          {
            name: "bump",
            type: "u8"
          },
          {
            name: "total_locked_amount",
            type: "u64"
          },
          {
            name: "lp_per_token",
            type: "u128"
          },
          {
            name: "unclaimed_fee_pending",
            type: "u64"
          },
          {
            name: "a_fee",
            type: "u64"
          },
          {
            name: "b_fee",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "LockedVestingConfig",
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "amount_per_period",
            type: "u64"
          },
          {
            name: "cliff_duration_from_migration_time",
            type: "u64"
          },
          {
            name: "frequency",
            type: "u64"
          },
          {
            name: "number_of_period",
            type: "u64"
          },
          {
            name: "cliff_unlock_amount",
            type: "u64"
          },
          {
            name: "_padding",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "LockedVestingParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "amount_per_period",
            type: "u64"
          },
          {
            name: "cliff_duration_from_migration_time",
            type: "u64"
          },
          {
            name: "frequency",
            type: "u64"
          },
          {
            name: "number_of_period",
            type: "u64"
          },
          {
            name: "cliff_unlock_amount",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "MeteoraDammMigrationMetadata",
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "virtual_pool",
            docs: [
              "pool"
            ],
            type: "pubkey"
          },
          {
            name: "padding_0",
            docs: [
              "!!! BE CAREFUL to use tomestone field, previous is pool creator"
            ],
            type: {
              array: [
                "u8",
                32
              ]
            }
          },
          {
            name: "partner",
            docs: [
              "partner"
            ],
            type: "pubkey"
          },
          {
            name: "lp_mint",
            docs: [
              "lp mint"
            ],
            type: "pubkey"
          },
          {
            name: "partner_locked_lp",
            docs: [
              "partner locked lp"
            ],
            type: "u64"
          },
          {
            name: "partner_lp",
            docs: [
              "partner lp"
            ],
            type: "u64"
          },
          {
            name: "creator_locked_lp",
            docs: [
              "creator locked lp"
            ],
            type: "u64"
          },
          {
            name: "creator_lp",
            docs: [
              "creator lp"
            ],
            type: "u64"
          },
          {
            name: "_padding_0",
            docs: [
              "padding"
            ],
            type: "u8"
          },
          {
            name: "creator_locked_status",
            docs: [
              "flag to check whether lp is locked for creator"
            ],
            type: "u8"
          },
          {
            name: "partner_locked_status",
            docs: [
              "flag to check whether lp is locked for partner"
            ],
            type: "u8"
          },
          {
            name: "creator_claim_status",
            docs: [
              "flag to check whether creator has claimed lp token"
            ],
            type: "u8"
          },
          {
            name: "partner_claim_status",
            docs: [
              "flag to check whether partner has claimed lp token"
            ],
            type: "u8"
          },
          {
            name: "_padding",
            docs: [
              "Reserve"
            ],
            type: {
              array: [
                "u8",
                107
              ]
            }
          }
        ]
      }
    },
    {
      name: "MeteoraDammV2Metadata",
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "virtual_pool",
            docs: [
              "pool"
            ],
            type: "pubkey"
          },
          {
            name: "padding_0",
            docs: [
              "!!! BE CAREFUL to use tomestone field, previous is pool creator"
            ],
            type: {
              array: [
                "u8",
                32
              ]
            }
          },
          {
            name: "partner",
            docs: [
              "partner"
            ],
            type: "pubkey"
          },
          {
            name: "_padding",
            docs: [
              "Reserve"
            ],
            type: {
              array: [
                "u8",
                126
              ]
            }
          }
        ]
      }
    },
    {
      name: "MigratedPoolFee",
      type: {
        kind: "struct",
        fields: [
          {
            name: "collect_fee_mode",
            type: "u8"
          },
          {
            name: "dynamic_fee",
            type: "u8"
          },
          {
            name: "pool_fee_bps",
            type: "u16"
          }
        ]
      }
    },
    {
      name: "MigrationFee",
      type: {
        kind: "struct",
        fields: [
          {
            name: "fee_percentage",
            type: "u8"
          },
          {
            name: "creator_fee_percentage",
            type: "u8"
          }
        ]
      }
    },
    {
      name: "PartnerMetadata",
      docs: [
        "Metadata for a partner."
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "fee_claimer",
            docs: [
              "fee claimer"
            ],
            type: "pubkey"
          },
          {
            name: "padding",
            docs: [
              "padding for future use"
            ],
            type: {
              array: [
                "u128",
                6
              ]
            }
          },
          {
            name: "name",
            docs: [
              "Name of partner."
            ],
            type: "string"
          },
          {
            name: "website",
            docs: [
              "Website of partner."
            ],
            type: "string"
          },
          {
            name: "logo",
            docs: [
              "Logo of partner"
            ],
            type: "string"
          }
        ]
      }
    },
    {
      name: "PoolConfig",
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "quote_mint",
            docs: [
              "quote mint"
            ],
            type: "pubkey"
          },
          {
            name: "fee_claimer",
            docs: [
              "Address to get the fee"
            ],
            type: "pubkey"
          },
          {
            name: "leftover_receiver",
            docs: [
              "Address to receive extra base token after migration, in case token is fixed supply"
            ],
            type: "pubkey"
          },
          {
            name: "pool_fees",
            docs: [
              "Pool fee"
            ],
            type: {
              defined: {
                name: "PoolFeesConfig"
              }
            }
          },
          {
            name: "collect_fee_mode",
            docs: [
              "Collect fee mode"
            ],
            type: "u8"
          },
          {
            name: "migration_option",
            docs: [
              "migration option"
            ],
            type: "u8"
          },
          {
            name: "activation_type",
            docs: [
              "whether mode slot or timestamp"
            ],
            type: "u8"
          },
          {
            name: "token_decimal",
            docs: [
              "token decimals"
            ],
            type: "u8"
          },
          {
            name: "version",
            docs: [
              "version"
            ],
            type: "u8"
          },
          {
            name: "token_type",
            docs: [
              "token type of base token"
            ],
            type: "u8"
          },
          {
            name: "quote_token_flag",
            docs: [
              "quote token flag"
            ],
            type: "u8"
          },
          {
            name: "partner_locked_lp_percentage",
            docs: [
              "partner locked lp percentage"
            ],
            type: "u8"
          },
          {
            name: "partner_lp_percentage",
            docs: [
              "partner lp percentage"
            ],
            type: "u8"
          },
          {
            name: "creator_locked_lp_percentage",
            docs: [
              "creator post migration fee percentage"
            ],
            type: "u8"
          },
          {
            name: "creator_lp_percentage",
            docs: [
              "creator lp percentage"
            ],
            type: "u8"
          },
          {
            name: "migration_fee_option",
            docs: [
              "migration fee option"
            ],
            type: "u8"
          },
          {
            name: "fixed_token_supply_flag",
            docs: [
              "flag to indicate whether token is dynamic supply (0) or fixed supply (1)"
            ],
            type: "u8"
          },
          {
            name: "creator_trading_fee_percentage",
            docs: [
              "creator trading fee percentage"
            ],
            type: "u8"
          },
          {
            name: "token_update_authority",
            docs: [
              "token update authority"
            ],
            type: "u8"
          },
          {
            name: "migration_fee_percentage",
            docs: [
              "migration fee percentage"
            ],
            type: "u8"
          },
          {
            name: "creator_migration_fee_percentage",
            docs: [
              "creator migration fee percentage"
            ],
            type: "u8"
          },
          {
            name: "_padding_0",
            docs: [
              "padding 0"
            ],
            type: {
              array: [
                "u8",
                7
              ]
            }
          },
          {
            name: "swap_base_amount",
            docs: [
              "swap base amount"
            ],
            type: "u64"
          },
          {
            name: "migration_quote_threshold",
            docs: [
              "migration quote threshold (in quote token)"
            ],
            type: "u64"
          },
          {
            name: "migration_base_threshold",
            docs: [
              "migration base threshold (in base token)"
            ],
            type: "u64"
          },
          {
            name: "migration_sqrt_price",
            docs: [
              "migration sqrt price"
            ],
            type: "u128"
          },
          {
            name: "locked_vesting_config",
            docs: [
              "locked vesting config"
            ],
            type: {
              defined: {
                name: "LockedVestingConfig"
              }
            }
          },
          {
            name: "pre_migration_token_supply",
            docs: [
              "pre migration token supply"
            ],
            type: "u64"
          },
          {
            name: "post_migration_token_supply",
            docs: [
              "post migration token supply"
            ],
            type: "u64"
          },
          {
            name: "migrated_collect_fee_mode",
            docs: [
              "migrated pool collect fee mode"
            ],
            type: "u8"
          },
          {
            name: "migrated_dynamic_fee",
            docs: [
              "migrated dynamic fee option."
            ],
            type: "u8"
          },
          {
            name: "migrated_pool_fee_bps",
            docs: [
              "migrated pool fee in bps"
            ],
            type: "u16"
          },
          {
            name: "_padding_1",
            docs: [
              "padding 1"
            ],
            type: {
              array: [
                "u8",
                12
              ]
            }
          },
          {
            name: "_padding_2",
            docs: [
              "padding 2"
            ],
            type: "u128"
          },
          {
            name: "sqrt_start_price",
            docs: [
              "minimum price"
            ],
            type: "u128"
          },
          {
            name: "curve",
            docs: [
              "curve, only use 20 point firstly, we can extend that latter"
            ],
            type: {
              array: [
                {
                  defined: {
                    name: "LiquidityDistributionConfig"
                  }
                },
                20
              ]
            }
          }
        ]
      }
    },
    {
      name: "PoolFeeParameters",
      docs: [
        "Information regarding fee charges"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "base_fee",
            docs: [
              "Base fee"
            ],
            type: {
              defined: {
                name: "BaseFeeParameters"
              }
            }
          },
          {
            name: "dynamic_fee",
            docs: [
              "dynamic fee"
            ],
            type: {
              option: {
                defined: {
                  name: "DynamicFeeParameters"
                }
              }
            }
          }
        ]
      }
    },
    {
      name: "PoolFees",
      docs: [
        "Information regarding fee charges"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "trade_fee_numerator",
            type: "u64"
          },
          {
            name: "trade_fee_denominator",
            type: "u64"
          },
          {
            name: "protocol_trade_fee_numerator",
            type: "u64"
          },
          {
            name: "protocol_trade_fee_denominator",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "PoolFeesConfig",
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "base_fee",
            type: {
              defined: {
                name: "BaseFeeConfig"
              }
            }
          },
          {
            name: "dynamic_fee",
            type: {
              defined: {
                name: "DynamicFeeConfig"
              }
            }
          },
          {
            name: "padding_0",
            type: {
              array: [
                "u64",
                5
              ]
            }
          },
          {
            name: "padding_1",
            type: {
              array: [
                "u8",
                6
              ]
            }
          },
          {
            name: "protocol_fee_percent",
            type: "u8"
          },
          {
            name: "referral_fee_percent",
            type: "u8"
          }
        ]
      }
    },
    {
      name: "PoolMetrics",
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "total_protocol_base_fee",
            type: "u64"
          },
          {
            name: "total_protocol_quote_fee",
            type: "u64"
          },
          {
            name: "total_trading_base_fee",
            type: "u64"
          },
          {
            name: "total_trading_quote_fee",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "SwapParameters",
      type: {
        kind: "struct",
        fields: [
          {
            name: "amount_in",
            type: "u64"
          },
          {
            name: "minimum_amount_out",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "SwapParameters2",
      type: {
        kind: "struct",
        fields: [
          {
            name: "amount_0",
            docs: [
              "When it's exact in, partial fill, this will be amount_in. When it's exact out, this will be amount_out"
            ],
            type: "u64"
          },
          {
            name: "amount_1",
            docs: [
              "When it's exact in, partial fill, this will be minimum_amount_out. When it's exact out, this will be maximum_amount_in"
            ],
            type: "u64"
          },
          {
            name: "swap_mode",
            docs: [
              "Swap mode, refer [SwapMode]"
            ],
            type: "u8"
          }
        ]
      }
    },
    {
      name: "SwapResult",
      docs: [
        "Encodes all results of swapping"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "actual_input_amount",
            type: "u64"
          },
          {
            name: "output_amount",
            type: "u64"
          },
          {
            name: "next_sqrt_price",
            type: "u128"
          },
          {
            name: "trading_fee",
            type: "u64"
          },
          {
            name: "protocol_fee",
            type: "u64"
          },
          {
            name: "referral_fee",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "SwapResult2",
      type: {
        kind: "struct",
        fields: [
          {
            name: "included_fee_input_amount",
            type: "u64"
          },
          {
            name: "excluded_fee_input_amount",
            type: "u64"
          },
          {
            name: "amount_left",
            type: "u64"
          },
          {
            name: "output_amount",
            type: "u64"
          },
          {
            name: "next_sqrt_price",
            type: "u128"
          },
          {
            name: "trading_fee",
            type: "u64"
          },
          {
            name: "protocol_fee",
            type: "u64"
          },
          {
            name: "referral_fee",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "TokenSupplyParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pre_migration_token_supply",
            docs: [
              "pre migration token supply"
            ],
            type: "u64"
          },
          {
            name: "post_migration_token_supply",
            docs: [
              "post migration token supply",
              "becase DBC allow user to swap over the migration quote threshold, so in extreme case user may swap more than allowed buffer on curve",
              "that result the total supply in post migration may be increased a bit (between pre_migration_token_supply and post_migration_token_supply)"
            ],
            type: "u64"
          }
        ]
      }
    },
    {
      name: "VirtualPool",
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "volatility_tracker",
            docs: [
              "volatility tracker"
            ],
            type: {
              defined: {
                name: "VolatilityTracker"
              }
            }
          },
          {
            name: "config",
            docs: [
              "config key"
            ],
            type: "pubkey"
          },
          {
            name: "creator",
            docs: [
              "creator"
            ],
            type: "pubkey"
          },
          {
            name: "base_mint",
            docs: [
              "base mint"
            ],
            type: "pubkey"
          },
          {
            name: "base_vault",
            docs: [
              "base vault"
            ],
            type: "pubkey"
          },
          {
            name: "quote_vault",
            docs: [
              "quote vault"
            ],
            type: "pubkey"
          },
          {
            name: "base_reserve",
            docs: [
              "base reserve"
            ],
            type: "u64"
          },
          {
            name: "quote_reserve",
            docs: [
              "quote reserve"
            ],
            type: "u64"
          },
          {
            name: "protocol_base_fee",
            docs: [
              "protocol base fee"
            ],
            type: "u64"
          },
          {
            name: "protocol_quote_fee",
            docs: [
              "protocol quote fee"
            ],
            type: "u64"
          },
          {
            name: "partner_base_fee",
            docs: [
              "partner base fee"
            ],
            type: "u64"
          },
          {
            name: "partner_quote_fee",
            docs: [
              "trading quote fee"
            ],
            type: "u64"
          },
          {
            name: "sqrt_price",
            docs: [
              "current price"
            ],
            type: "u128"
          },
          {
            name: "activation_point",
            docs: [
              "Activation point"
            ],
            type: "u64"
          },
          {
            name: "pool_type",
            docs: [
              "pool type, spl token or token2022"
            ],
            type: "u8"
          },
          {
            name: "is_migrated",
            docs: [
              "is migrated"
            ],
            type: "u8"
          },
          {
            name: "is_partner_withdraw_surplus",
            docs: [
              "is partner withdraw surplus"
            ],
            type: "u8"
          },
          {
            name: "is_protocol_withdraw_surplus",
            docs: [
              "is protocol withdraw surplus"
            ],
            type: "u8"
          },
          {
            name: "migration_progress",
            docs: [
              "migration progress"
            ],
            type: "u8"
          },
          {
            name: "is_withdraw_leftover",
            docs: [
              "is withdraw leftover"
            ],
            type: "u8"
          },
          {
            name: "is_creator_withdraw_surplus",
            docs: [
              "is creator withdraw surplus"
            ],
            type: "u8"
          },
          {
            name: "migration_fee_withdraw_status",
            docs: [
              "migration fee withdraw status, first bit is for partner, second bit is for creator"
            ],
            type: "u8"
          },
          {
            name: "metrics",
            docs: [
              "pool metrics"
            ],
            type: {
              defined: {
                name: "PoolMetrics"
              }
            }
          },
          {
            name: "finish_curve_timestamp",
            docs: [
              "The time curve is finished"
            ],
            type: "u64"
          },
          {
            name: "creator_base_fee",
            docs: [
              "creator base fee"
            ],
            type: "u64"
          },
          {
            name: "creator_quote_fee",
            docs: [
              "creator quote fee"
            ],
            type: "u64"
          },
          {
            name: "_padding_1",
            docs: [
              "Padding for further use"
            ],
            type: {
              array: [
                "u64",
                7
              ]
            }
          }
        ]
      }
    },
    {
      name: "VirtualPoolMetadata",
      docs: [
        "Metadata for a virtual pool."
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "virtual_pool",
            docs: [
              "virtual pool"
            ],
            type: "pubkey"
          },
          {
            name: "padding",
            docs: [
              "padding for future use"
            ],
            type: {
              array: [
                "u128",
                6
              ]
            }
          },
          {
            name: "name",
            docs: [
              "Name of project."
            ],
            type: "string"
          },
          {
            name: "website",
            docs: [
              "Website of project."
            ],
            type: "string"
          },
          {
            name: "logo",
            docs: [
              "Logo of project"
            ],
            type: "string"
          }
        ]
      }
    },
    {
      name: "VolatilityTracker",
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "last_update_timestamp",
            type: "u64"
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                8
              ]
            }
          },
          {
            name: "sqrt_price_reference",
            type: "u128"
          },
          {
            name: "volatility_accumulator",
            type: "u128"
          },
          {
            name: "volatility_reference",
            type: "u128"
          }
        ]
      }
    }
  ]
};

// idl/raydium-amm.json
var raydium_amm_default = {
  version: "0.3.0",
  name: "raydium_amm",
  instructions: [
    {
      name: "initialize",
      accounts: [
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "amm",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammOpenOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "lpMintAddress",
          isMut: true,
          isSigner: false
        },
        {
          name: "coinMintAddress",
          isMut: false,
          isSigner: false
        },
        {
          name: "pcMintAddress",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolCoinTokenAccount",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolPcTokenAccount",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolWithdrawQueue",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolTargetOrdersAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userLpTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolTempLpTokenAccount",
          isMut: false,
          isSigner: false
        },
        {
          name: "serumProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "serumMarket",
          isMut: false,
          isSigner: false
        },
        {
          name: "userWallet",
          isMut: true,
          isSigner: true
        }
      ],
      args: [
        {
          name: "nonce",
          type: "u8"
        },
        {
          name: "openTime",
          type: "u64"
        }
      ]
    },
    {
      name: "initialize2",
      accounts: [
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "splAssociatedTokenAccount",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "amm",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammOpenOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "lpMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "coinMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "pcMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolCoinTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolPcTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolWithdrawQueue",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammTargetOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolTempLp",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "serumMarket",
          isMut: false,
          isSigner: false
        },
        {
          name: "userWallet",
          isMut: true,
          isSigner: true
        },
        {
          name: "userTokenCoin",
          isMut: true,
          isSigner: false
        },
        {
          name: "userTokenPc",
          isMut: true,
          isSigner: false
        },
        {
          name: "userLpTokenAccount",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "nonce",
          type: "u8"
        },
        {
          name: "openTime",
          type: "u64"
        },
        {
          name: "initPcAmount",
          type: "u64"
        },
        {
          name: "initCoinAmount",
          type: "u64"
        }
      ]
    },
    {
      name: "monitorStep",
      accounts: [
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "clock",
          isMut: false,
          isSigner: false
        },
        {
          name: "amm",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammOpenOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammTargetOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolCoinTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolPcTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolWithdrawQueue",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "serumMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumCoinVaultAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumPcVaultAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumVaultSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "serumReqQ",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumEventQ",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumBids",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumAsks",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "planOrderLimit",
          type: "u16"
        },
        {
          name: "placeOrderLimit",
          type: "u16"
        },
        {
          name: "cancelOrderLimit",
          type: "u16"
        }
      ]
    },
    {
      name: "deposit",
      accounts: [
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "amm",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammOpenOrders",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammTargetOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "lpMintAddress",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolCoinTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolPcTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumMarket",
          isMut: false,
          isSigner: false
        },
        {
          name: "userCoinTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userPcTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userLpTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userOwner",
          isMut: false,
          isSigner: true
        },
        {
          name: "serumEventQueue",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "maxCoinAmount",
          type: "u64"
        },
        {
          name: "maxPcAmount",
          type: "u64"
        },
        {
          name: "baseSide",
          type: "u64"
        }
      ]
    },
    {
      name: "withdraw",
      accounts: [
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "amm",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammOpenOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammTargetOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "lpMintAddress",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolCoinTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolPcTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolWithdrawQueue",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolTempLpTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "serumMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumCoinVaultAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumPcVaultAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumVaultSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "userLpTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "uerCoinTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "uerPcTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userOwner",
          isMut: false,
          isSigner: true
        },
        {
          name: "serumEventQ",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumBids",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumAsks",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "amount",
          type: "u64"
        }
      ]
    },
    {
      name: "migrateToOpenBook",
      accounts: [
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "amm",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammOpenOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammTokenCoin",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammTokenPc",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammTargetOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "serumMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumBids",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumAsks",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumEventQueue",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumCoinVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumPcVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumVaultSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "newAmmOpenOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "newSerumProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "newSerumMarket",
          isMut: false,
          isSigner: false
        },
        {
          name: "admin",
          isMut: true,
          isSigner: true
        }
      ],
      args: []
    },
    {
      name: "setParams",
      accounts: [
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "amm",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammOpenOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammTargetOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammCoinVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammPcVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "serumMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumCoinVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumPcVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumVaultSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "serumEventQueue",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumBids",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumAsks",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammAdminAccount",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "param",
          type: "u8"
        },
        {
          name: "value",
          type: {
            option: "u64"
          }
        },
        {
          name: "newPubkey",
          type: {
            option: "publicKey"
          }
        },
        {
          name: "fees",
          type: {
            option: {
              defined: "Fees"
            }
          }
        },
        {
          name: "lastOrderDistance",
          type: {
            option: {
              defined: "LastOrderDistance"
            }
          }
        },
        {
          name: "needTakeAmounts",
          type: {
            option: {
              defined: "NeedTake"
            }
          }
        }
      ]
    },
    {
      name: "withdrawPnl",
      accounts: [
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "amm",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammConfig",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammOpenOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolCoinTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolPcTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "coinPnlTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "pcPnlTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "pnlOwnerAccount",
          isMut: false,
          isSigner: true
        },
        {
          name: "ammTargetOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "serumMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumEventQueue",
          isMut: false,
          isSigner: false
        },
        {
          name: "serumCoinVaultAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumPcVaultAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumVaultSigner",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "withdrawSrm",
      accounts: [
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "amm",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammOwnerAccount",
          isMut: false,
          isSigner: true
        },
        {
          name: "ammAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "srmToken",
          isMut: true,
          isSigner: false
        },
        {
          name: "destSrmToken",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "amount",
          type: "u64"
        }
      ]
    },
    {
      name: "swapBaseIn",
      accounts: [
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "amm",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammOpenOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammTargetOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolCoinTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolPcTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "serumMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumBids",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumAsks",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumEventQueue",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumCoinVaultAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumPcVaultAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumVaultSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "uerSourceTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "uerDestinationTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userSourceOwner",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "amountIn",
          type: "u64"
        },
        {
          name: "minimumAmountOut",
          type: "u64"
        }
      ]
    },
    {
      name: "preInitialize",
      accounts: [
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammTargetOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolWithdrawQueue",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "lpMintAddress",
          isMut: true,
          isSigner: false
        },
        {
          name: "coinMintAddress",
          isMut: false,
          isSigner: false
        },
        {
          name: "pcMintAddress",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolCoinTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolPcTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolTempLpTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumMarket",
          isMut: false,
          isSigner: false
        },
        {
          name: "userWallet",
          isMut: true,
          isSigner: true
        }
      ],
      args: [
        {
          name: "nonce",
          type: "u8"
        }
      ]
    },
    {
      name: "swapBaseOut",
      accounts: [
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "amm",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammOpenOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammTargetOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolCoinTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolPcTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "serumMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumBids",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumAsks",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumEventQueue",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumCoinVaultAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumPcVaultAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumVaultSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "uerSourceTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "uerDestinationTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userSourceOwner",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "maxAmountIn",
          type: "u64"
        },
        {
          name: "amountOut",
          type: "u64"
        }
      ]
    },
    {
      name: "simulateInfo",
      accounts: [
        {
          name: "amm",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammOpenOrders",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolCoinTokenAccount",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolPcTokenAccount",
          isMut: false,
          isSigner: false
        },
        {
          name: "lpMintAddress",
          isMut: false,
          isSigner: false
        },
        {
          name: "serumMarket",
          isMut: false,
          isSigner: false
        },
        {
          name: "serumEventQueue",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "param",
          type: "u8"
        },
        {
          name: "swapBaseInValue",
          type: {
            option: {
              defined: "SwapInstructionBaseIn"
            }
          }
        },
        {
          name: "swapBaseOutValue",
          type: {
            option: {
              defined: "SwapInstructionBaseOut"
            }
          }
        }
      ]
    },
    {
      name: "adminCancelOrders",
      accounts: [
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "amm",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "ammOpenOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammTargetOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolCoinTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolPcTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "ammOwnerAccount",
          isMut: false,
          isSigner: true
        },
        {
          name: "ammConfig",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "serumMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumCoinVaultAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumPcVaultAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumVaultSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "serumEventQ",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumBids",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumAsks",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "limit",
          type: "u16"
        }
      ]
    },
    {
      name: "createConfigAccount",
      accounts: [
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "ammConfig",
          isMut: true,
          isSigner: false
        },
        {
          name: "owner",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "updateConfigAccount",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "ammConfig",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "param",
          type: "u8"
        },
        {
          name: "owner",
          type: "publicKey"
        }
      ]
    }
  ],
  accounts: [
    {
      name: "TargetOrders",
      type: {
        kind: "struct",
        fields: [
          {
            name: "owner",
            type: {
              array: ["u64", 4]
            }
          },
          {
            name: "buyOrders",
            type: {
              array: [
                {
                  defined: "TargetOrder"
                },
                50
              ]
            }
          },
          {
            name: "padding1",
            type: {
              array: ["u64", 8]
            }
          },
          {
            name: "targetX",
            type: "u128"
          },
          {
            name: "targetY",
            type: "u128"
          },
          {
            name: "planXBuy",
            type: "u128"
          },
          {
            name: "planYBuy",
            type: "u128"
          },
          {
            name: "planXSell",
            type: "u128"
          },
          {
            name: "planYSell",
            type: "u128"
          },
          {
            name: "placedX",
            type: "u128"
          },
          {
            name: "placedY",
            type: "u128"
          },
          {
            name: "calcPnlX",
            type: "u128"
          },
          {
            name: "calcPnlY",
            type: "u128"
          },
          {
            name: "sellOrders",
            type: {
              array: [
                {
                  defined: "TargetOrder"
                },
                50
              ]
            }
          },
          {
            name: "padding2",
            type: {
              array: ["u64", 6]
            }
          },
          {
            name: "replaceBuyClientId",
            type: {
              array: ["u64", 10]
            }
          },
          {
            name: "replaceSellClientId",
            type: {
              array: ["u64", 10]
            }
          },
          {
            name: "lastOrderNumerator",
            type: "u64"
          },
          {
            name: "lastOrderDenominator",
            type: "u64"
          },
          {
            name: "planOrdersCur",
            type: "u64"
          },
          {
            name: "placeOrdersCur",
            type: "u64"
          },
          {
            name: "validBuyOrderNum",
            type: "u64"
          },
          {
            name: "validSellOrderNum",
            type: "u64"
          },
          {
            name: "padding3",
            type: {
              array: ["u64", 10]
            }
          },
          {
            name: "freeSlotBits",
            type: "u128"
          }
        ]
      }
    },
    {
      name: "Fees",
      type: {
        kind: "struct",
        fields: [
          {
            name: "minSeparateNumerator",
            type: "u64"
          },
          {
            name: "minSeparateDenominator",
            type: "u64"
          },
          {
            name: "tradeFeeNumerator",
            type: "u64"
          },
          {
            name: "tradeFeeDenominator",
            type: "u64"
          },
          {
            name: "pnlNumerator",
            type: "u64"
          },
          {
            name: "pnlDenominator",
            type: "u64"
          },
          {
            name: "swapFeeNumerator",
            type: "u64"
          },
          {
            name: "swapFeeDenominator",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "AmmInfo",
      type: {
        kind: "struct",
        fields: [
          {
            name: "status",
            type: "u64"
          },
          {
            name: "nonce",
            type: "u64"
          },
          {
            name: "orderNum",
            type: "u64"
          },
          {
            name: "depth",
            type: "u64"
          },
          {
            name: "coinDecimals",
            type: "u64"
          },
          {
            name: "pcDecimals",
            type: "u64"
          },
          {
            name: "state",
            type: "u64"
          },
          {
            name: "resetFlag",
            type: "u64"
          },
          {
            name: "minSize",
            type: "u64"
          },
          {
            name: "volMaxCutRatio",
            type: "u64"
          },
          {
            name: "amountWave",
            type: "u64"
          },
          {
            name: "coinLotSize",
            type: "u64"
          },
          {
            name: "pcLotSize",
            type: "u64"
          },
          {
            name: "minPriceMultiplier",
            type: "u64"
          },
          {
            name: "maxPriceMultiplier",
            type: "u64"
          },
          {
            name: "sysDecimalValue",
            type: "u64"
          },
          {
            name: "fees",
            type: {
              defined: "Fees"
            }
          },
          {
            name: "outPut",
            type: {
              defined: "OutPutData"
            }
          },
          {
            name: "tokenCoin",
            type: "publicKey"
          },
          {
            name: "tokenPc",
            type: "publicKey"
          },
          {
            name: "coinMint",
            type: "publicKey"
          },
          {
            name: "pcMint",
            type: "publicKey"
          },
          {
            name: "lpMint",
            type: "publicKey"
          },
          {
            name: "openOrders",
            type: "publicKey"
          },
          {
            name: "market",
            type: "publicKey"
          },
          {
            name: "serumDex",
            type: "publicKey"
          },
          {
            name: "targetOrders",
            type: "publicKey"
          },
          {
            name: "withdrawQueue",
            type: "publicKey"
          },
          {
            name: "tokenTempLp",
            type: "publicKey"
          },
          {
            name: "ammOwner",
            type: "publicKey"
          },
          {
            name: "lpAmount",
            type: "u64"
          },
          {
            name: "clientOrderId",
            type: "u64"
          },
          {
            name: "padding",
            type: {
              array: ["u64", 2]
            }
          }
        ]
      }
    }
  ],
  types: [
    {
      name: "WithdrawDestToken",
      type: {
        kind: "struct",
        fields: [
          {
            name: "withdrawAmount",
            type: "u64"
          },
          {
            name: "coinAmount",
            type: "u64"
          },
          {
            name: "pcAmount",
            type: "u64"
          },
          {
            name: "destTokenCoin",
            type: "publicKey"
          },
          {
            name: "destTokenPc",
            type: "publicKey"
          }
        ]
      }
    },
    {
      name: "WithdrawQueue",
      type: {
        kind: "struct",
        fields: [
          {
            name: "owner",
            type: {
              array: ["u64", 4]
            }
          },
          {
            name: "head",
            type: "u64"
          },
          {
            name: "count",
            type: "u64"
          },
          {
            name: "buf",
            type: {
              array: [
                {
                  defined: "WithdrawDestToken"
                },
                64
              ]
            }
          }
        ]
      }
    },
    {
      name: "TargetOrder",
      type: {
        kind: "struct",
        fields: [
          {
            name: "price",
            type: "u64"
          },
          {
            name: "vol",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "OutPutData",
      type: {
        kind: "struct",
        fields: [
          {
            name: "needTakePnlCoin",
            type: "u64"
          },
          {
            name: "needTakePnlPc",
            type: "u64"
          },
          {
            name: "totalPnlPc",
            type: "u64"
          },
          {
            name: "totalPnlCoin",
            type: "u64"
          },
          {
            name: "poolOpenTime",
            type: "u64"
          },
          {
            name: "punishPcAmount",
            type: "u64"
          },
          {
            name: "punishCoinAmount",
            type: "u64"
          },
          {
            name: "orderbookToInitTime",
            type: "u64"
          },
          {
            name: "swapCoinInAmount",
            type: "u128"
          },
          {
            name: "swapPcOutAmount",
            type: "u128"
          },
          {
            name: "swapTakePcFee",
            type: "u64"
          },
          {
            name: "swapPcInAmount",
            type: "u128"
          },
          {
            name: "swapCoinOutAmount",
            type: "u128"
          },
          {
            name: "swapTakeCoinFee",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "AmmConfig",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pnlOwner",
            type: "publicKey"
          },
          {
            name: "cancelOwner",
            type: "publicKey"
          },
          {
            name: "pending1",
            type: {
              array: ["u64", 28]
            }
          },
          {
            name: "pending2",
            type: {
              array: ["u64", 32]
            }
          }
        ]
      }
    },
    {
      name: "LastOrderDistance",
      type: {
        kind: "struct",
        fields: [
          {
            name: "lastOrderNumerator",
            type: "u64"
          },
          {
            name: "lastOrderDenominator",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "NeedTake",
      type: {
        kind: "struct",
        fields: [
          {
            name: "needTakePc",
            type: "u64"
          },
          {
            name: "needTakeCoin",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "SwapInstructionBaseIn",
      type: {
        kind: "struct",
        fields: [
          {
            name: "amountIn",
            type: "u64"
          },
          {
            name: "minimumAmountOut",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "SwapInstructionBaseOut",
      type: {
        kind: "struct",
        fields: [
          {
            name: "maxAmountIn",
            type: "u64"
          },
          {
            name: "amountOut",
            type: "u64"
          }
        ]
      }
    }
  ],
  errors: [
    {
      code: 0,
      name: "AlreadyInUse",
      msg: "AlreadyInUse"
    },
    {
      code: 1,
      name: "InvalidProgramAddress",
      msg: "InvalidProgramAddress"
    },
    {
      code: 2,
      name: "ExpectedMint",
      msg: "ExpectedMint"
    },
    {
      code: 3,
      name: "ExpectedAccount",
      msg: "ExpectedAccount"
    },
    {
      code: 4,
      name: "InvalidCoinVault",
      msg: "InvalidCoinVault"
    },
    {
      code: 5,
      name: "InvalidPCVault",
      msg: "InvalidPCVault"
    },
    {
      code: 6,
      name: "InvalidTokenLP",
      msg: "InvalidTokenLP"
    },
    {
      code: 7,
      name: "InvalidDestTokenCoin",
      msg: "InvalidDestTokenCoin"
    },
    {
      code: 8,
      name: "InvalidDestTokenPC",
      msg: "InvalidDestTokenPC"
    },
    {
      code: 9,
      name: "InvalidPoolMint",
      msg: "InvalidPoolMint"
    },
    {
      code: 10,
      name: "InvalidOpenOrders",
      msg: "InvalidOpenOrders"
    },
    {
      code: 11,
      name: "InvalidSerumMarket",
      msg: "InvalidSerumMarket"
    },
    {
      code: 12,
      name: "InvalidSerumProgram",
      msg: "InvalidSerumProgram"
    },
    {
      code: 13,
      name: "InvalidTargetOrders",
      msg: "InvalidTargetOrders"
    },
    {
      code: 14,
      name: "InvalidWithdrawQueue",
      msg: "InvalidWithdrawQueue"
    },
    {
      code: 15,
      name: "InvalidTempLp",
      msg: "InvalidTempLp"
    },
    {
      code: 16,
      name: "InvalidCoinMint",
      msg: "InvalidCoinMint"
    },
    {
      code: 17,
      name: "InvalidPCMint",
      msg: "InvalidPCMint"
    },
    {
      code: 18,
      name: "InvalidOwner",
      msg: "InvalidOwner"
    },
    {
      code: 19,
      name: "InvalidSupply",
      msg: "InvalidSupply"
    },
    {
      code: 20,
      name: "InvalidDelegate",
      msg: "InvalidDelegate"
    },
    {
      code: 21,
      name: "InvalidSignAccount",
      msg: "Invalid Sign Account"
    },
    {
      code: 22,
      name: "InvalidStatus",
      msg: "InvalidStatus"
    },
    {
      code: 23,
      name: "InvalidInstruction",
      msg: "Invalid instruction"
    },
    {
      code: 24,
      name: "WrongAccountsNumber",
      msg: "Wrong accounts number"
    },
    {
      code: 25,
      name: "WithdrawTransferBusy",
      msg: "Withdraw_transfer is busy"
    },
    {
      code: 26,
      name: "WithdrawQueueFull",
      msg: "WithdrawQueue is full"
    },
    {
      code: 27,
      name: "WithdrawQueueEmpty",
      msg: "WithdrawQueue is empty"
    },
    {
      code: 28,
      name: "InvalidParamsSet",
      msg: "Params Set is invalid"
    },
    {
      code: 29,
      name: "InvalidInput",
      msg: "InvalidInput"
    },
    {
      code: 30,
      name: "ExceededSlippage",
      msg: "instruction exceeds desired slippage limit"
    },
    {
      code: 31,
      name: "CalculationExRateFailure",
      msg: "CalculationExRateFailure"
    },
    {
      code: 32,
      name: "CheckedSubOverflow",
      msg: "Checked_Sub Overflow"
    },
    {
      code: 33,
      name: "CheckedAddOverflow",
      msg: "Checked_Add Overflow"
    },
    {
      code: 34,
      name: "CheckedMulOverflow",
      msg: "Checked_Mul Overflow"
    },
    {
      code: 35,
      name: "CheckedDivOverflow",
      msg: "Checked_Div Overflow"
    },
    {
      code: 36,
      name: "CheckedEmptyFunds",
      msg: "Empty Funds"
    },
    {
      code: 37,
      name: "CalcPnlError",
      msg: "Calc pnl error"
    },
    {
      code: 38,
      name: "InvalidSplTokenProgram",
      msg: "InvalidSplTokenProgram"
    },
    {
      code: 39,
      name: "TakePnlError",
      msg: "Take Pnl error"
    },
    {
      code: 40,
      name: "InsufficientFunds",
      msg: "Insufficient funds"
    },
    {
      code: 41,
      name: "ConversionFailure",
      msg: "Conversion to u64 failed with an overflow or underflow"
    },
    {
      code: 42,
      name: "InvalidUserToken",
      msg: "user token input does not match amm"
    },
    {
      code: 43,
      name: "InvalidSrmMint",
      msg: "InvalidSrmMint"
    },
    {
      code: 44,
      name: "InvalidSrmToken",
      msg: "InvalidSrmToken"
    },
    {
      code: 45,
      name: "TooManyOpenOrders",
      msg: "TooManyOpenOrders"
    },
    {
      code: 46,
      name: "OrderAtSlotIsPlaced",
      msg: "OrderAtSlotIsPlaced"
    },
    {
      code: 47,
      name: "InvalidSysProgramAddress",
      msg: "InvalidSysProgramAddress"
    },
    {
      code: 48,
      name: "InvalidFee",
      msg: "The provided fee does not match the program owner's constraints"
    },
    {
      code: 49,
      name: "RepeatCreateAmm",
      msg: "Repeat create amm about market"
    },
    {
      code: 50,
      name: "NotAllowZeroLP",
      msg: "Not allow Zero LP"
    },
    {
      code: 51,
      name: "InvalidCloseAuthority",
      msg: "Token account has a close authority"
    },
    {
      code: 52,
      name: "InvalidFreezeAuthority",
      msg: "Pool token mint has a freeze authority"
    },
    {
      code: 53,
      name: "InvalidReferPCMint",
      msg: "InvalidReferPCMint"
    },
    {
      code: 54,
      name: "InvalidConfigAccount",
      msg: "InvalidConfigAccount"
    },
    {
      code: 55,
      name: "RepeatCreateConfigAccount",
      msg: "Repeat create staking config account"
    },
    {
      code: 56,
      name: "UnknownAmmError",
      msg: "Unknown Amm Error"
    }
  ]
};

// idl/raydium-amm-v3.json
var raydium_amm_v3_default = {
  address: "CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK",
  metadata: {
    name: "amm_v3",
    version: "0.1.0",
    spec: "0.1.0",
    description: "Anchor client and source for Raydium concentrated liquidity AMM"
  },
  instructions: [
    {
      name: "close_position",
      docs: [
        "Close the user's position and NFT account. If the NFT mint belongs to token2022, it will also be closed and the funds returned to the NFT owner.",
        "",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        ""
      ],
      discriminator: [123, 134, 81, 0, 49, 68, 98, 98],
      accounts: [
        {
          name: "nft_owner",
          docs: ["The position nft owner"],
          writable: true,
          signer: true
        },
        {
          name: "position_nft_mint",
          docs: ["Mint address bound to the personal position."],
          writable: true
        },
        {
          name: "position_nft_account",
          docs: ["User token account where position NFT be minted to"],
          writable: true
        },
        {
          name: "personal_position",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [112, 111, 115, 105, 116, 105, 111, 110]
              },
              {
                kind: "account",
                path: "position_nft_mint"
              }
            ]
          }
        },
        {
          name: "system_program",
          docs: ["System program to close the position state account"],
          address: "11111111111111111111111111111111"
        },
        {
          name: "token_program",
          docs: ["Token/Token2022 program to close token/mint account"]
        }
      ],
      args: []
    },
    {
      name: "collect_fund_fee",
      docs: [
        "Collect the fund fee accrued to the pool",
        "",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        "* `amount_0_requested` - The maximum amount of token_0 to send",
        "* `amount_1_requested` - The maximum amount of token_1 to send",
        ""
      ],
      discriminator: [167, 138, 78, 149, 223, 194, 6, 126],
      accounts: [
        {
          name: "owner",
          docs: ["Only admin or fund_owner can collect fee now"],
          signer: true
        },
        {
          name: "pool_state",
          docs: ["Pool state stores accumulated protocol fee amount"],
          writable: true
        },
        {
          name: "amm_config",
          docs: ["Amm config account stores fund_owner"]
        },
        {
          name: "token_vault_0",
          docs: ["The address that holds pool tokens for token_0"],
          writable: true
        },
        {
          name: "token_vault_1",
          docs: ["The address that holds pool tokens for token_1"],
          writable: true
        },
        {
          name: "vault_0_mint",
          docs: ["The mint of token vault 0"]
        },
        {
          name: "vault_1_mint",
          docs: ["The mint of token vault 1"]
        },
        {
          name: "recipient_token_account_0",
          docs: [
            "The address that receives the collected token_0 protocol fees"
          ],
          writable: true
        },
        {
          name: "recipient_token_account_1",
          docs: [
            "The address that receives the collected token_1 protocol fees"
          ],
          writable: true
        },
        {
          name: "token_program",
          docs: ["The SPL program to perform token transfers"],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "token_program_2022",
          docs: ["The SPL program 2022 to perform token transfers"],
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        }
      ],
      args: [
        {
          name: "amount_0_requested",
          type: "u64"
        },
        {
          name: "amount_1_requested",
          type: "u64"
        }
      ]
    },
    {
      name: "collect_protocol_fee",
      docs: [
        "Collect the protocol fee accrued to the pool",
        "",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        "* `amount_0_requested` - The maximum amount of token_0 to send",
        "* `amount_1_requested` - The maximum amount of token_1 to send",
        ""
      ],
      discriminator: [136, 136, 252, 221, 194, 66, 126, 89],
      accounts: [
        {
          name: "owner",
          docs: ["Only admin or config owner can collect fee now"],
          signer: true
        },
        {
          name: "pool_state",
          docs: ["Pool state stores accumulated protocol fee amount"],
          writable: true
        },
        {
          name: "amm_config",
          docs: ["Amm config account stores owner"]
        },
        {
          name: "token_vault_0",
          docs: ["The address that holds pool tokens for token_0"],
          writable: true
        },
        {
          name: "token_vault_1",
          docs: ["The address that holds pool tokens for token_1"],
          writable: true
        },
        {
          name: "vault_0_mint",
          docs: ["The mint of token vault 0"]
        },
        {
          name: "vault_1_mint",
          docs: ["The mint of token vault 1"]
        },
        {
          name: "recipient_token_account_0",
          docs: [
            "The address that receives the collected token_0 protocol fees"
          ],
          writable: true
        },
        {
          name: "recipient_token_account_1",
          docs: [
            "The address that receives the collected token_1 protocol fees"
          ],
          writable: true
        },
        {
          name: "token_program",
          docs: ["The SPL program to perform token transfers"],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "token_program_2022",
          docs: ["The SPL program 2022 to perform token transfers"],
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        }
      ],
      args: [
        {
          name: "amount_0_requested",
          type: "u64"
        },
        {
          name: "amount_1_requested",
          type: "u64"
        }
      ]
    },
    {
      name: "collect_remaining_rewards",
      docs: [
        "Collect remaining reward token for reward founder",
        "",
        "# Arguments",
        "",
        "* `ctx`- The context of accounts",
        "* `reward_index` - the index to reward info, it must be smaller than 3",
        ""
      ],
      discriminator: [18, 237, 166, 197, 34, 16, 213, 144],
      accounts: [
        {
          name: "reward_funder",
          docs: ["The founder who init reward info previously"],
          signer: true
        },
        {
          name: "funder_token_account",
          docs: ["The funder's reward token account"],
          writable: true
        },
        {
          name: "pool_state",
          docs: ["Set reward for this pool"],
          writable: true
        },
        {
          name: "reward_token_vault",
          docs: [
            "Reward vault transfer remaining token to founder token account"
          ]
        },
        {
          name: "reward_vault_mint",
          docs: ["The mint of reward token vault"]
        },
        {
          name: "token_program",
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "token_program_2022",
          docs: ["Token program 2022"],
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          name: "memo_program",
          docs: ["memo program"],
          address: "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr"
        }
      ],
      args: [
        {
          name: "reward_index",
          type: "u8"
        }
      ]
    },
    {
      name: "create_amm_config",
      docs: [
        "# Arguments",
        "",
        "* `ctx`- The accounts needed by instruction.",
        "* `index` - The index of amm config, there may be multiple config.",
        "* `tick_spacing` - The tickspacing binding with config, cannot be changed.",
        "* `trade_fee_rate` - Trade fee rate, can be changed.",
        "* `protocol_fee_rate` - The rate of protocol fee within trade fee.",
        "* `fund_fee_rate` - The rate of fund fee within trade fee.",
        ""
      ],
      discriminator: [137, 52, 237, 212, 215, 117, 108, 104],
      accounts: [
        {
          name: "owner",
          docs: ["Address to be set as protocol owner."],
          writable: true,
          signer: true,
          address: "GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ"
        },
        {
          name: "amm_config",
          docs: [
            "Initialize config state account to store protocol owner address and fee rates."
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [97, 109, 109, 95, 99, 111, 110, 102, 105, 103]
              },
              {
                kind: "arg",
                path: "index"
              }
            ]
          }
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        }
      ],
      args: [
        {
          name: "index",
          type: "u16"
        },
        {
          name: "tick_spacing",
          type: "u16"
        },
        {
          name: "trade_fee_rate",
          type: "u32"
        },
        {
          name: "protocol_fee_rate",
          type: "u32"
        },
        {
          name: "fund_fee_rate",
          type: "u32"
        }
      ]
    },
    {
      name: "create_operation_account",
      docs: [
        "Creates an operation account for the program",
        "",
        "# Arguments",
        "",
        "* `ctx`- The context of accounts",
        ""
      ],
      discriminator: [63, 87, 148, 33, 109, 35, 8, 104],
      accounts: [
        {
          name: "owner",
          docs: ["Address to be set as operation account owner."],
          writable: true,
          signer: true,
          address: "GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ"
        },
        {
          name: "operation_state",
          docs: [
            "Initialize operation state account to store operation owner address and white list mint."
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [111, 112, 101, 114, 97, 116, 105, 111, 110]
              }
            ]
          }
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        }
      ],
      args: []
    },
    {
      name: "create_pool",
      docs: [
        "Creates a pool for the given token pair and the initial price",
        "",
        "# Arguments",
        "",
        "* `ctx`- The context of accounts",
        "* `sqrt_price_x64` - the initial sqrt price (amount_token_1 / amount_token_0) of the pool as a Q64.64",
        "Note: The open_time must be smaller than the current block_timestamp on chain."
      ],
      discriminator: [233, 146, 209, 142, 207, 104, 64, 188],
      accounts: [
        {
          name: "pool_creator",
          docs: ["Address paying to create the pool. Can be anyone"],
          writable: true,
          signer: true
        },
        {
          name: "amm_config",
          docs: ["Which config the pool belongs to."]
        },
        {
          name: "pool_state",
          docs: ["Initialize an account to store the pool state"],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [112, 111, 111, 108]
              },
              {
                kind: "account",
                path: "amm_config"
              },
              {
                kind: "account",
                path: "token_mint_0"
              },
              {
                kind: "account",
                path: "token_mint_1"
              }
            ]
          }
        },
        {
          name: "token_mint_0",
          docs: ["Token_0 mint, the key must be smaller then token_1 mint."]
        },
        {
          name: "token_mint_1",
          docs: ["Token_1 mint"]
        },
        {
          name: "token_vault_0",
          docs: ["Token_0 vault for the pool"],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [112, 111, 111, 108, 95, 118, 97, 117, 108, 116]
              },
              {
                kind: "account",
                path: "pool_state"
              },
              {
                kind: "account",
                path: "token_mint_0"
              }
            ]
          }
        },
        {
          name: "token_vault_1",
          docs: ["Token_1 vault for the pool"],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [112, 111, 111, 108, 95, 118, 97, 117, 108, 116]
              },
              {
                kind: "account",
                path: "pool_state"
              },
              {
                kind: "account",
                path: "token_mint_1"
              }
            ]
          }
        },
        {
          name: "observation_state",
          docs: ["Initialize an account to store oracle observations"],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [111, 98, 115, 101, 114, 118, 97, 116, 105, 111, 110]
              },
              {
                kind: "account",
                path: "pool_state"
              }
            ]
          }
        },
        {
          name: "tick_array_bitmap",
          docs: [
            "Initialize an account to store if a tick array is initialized."
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  116,
                  105,
                  99,
                  107,
                  95,
                  97,
                  114,
                  114,
                  97,
                  121,
                  95,
                  98,
                  105,
                  116,
                  109,
                  97,
                  112,
                  95,
                  101,
                  120,
                  116,
                  101,
                  110,
                  115,
                  105,
                  111,
                  110
                ]
              },
              {
                kind: "account",
                path: "pool_state"
              }
            ]
          }
        },
        {
          name: "token_program_0",
          docs: ["Spl token program or token program 2022"]
        },
        {
          name: "token_program_1",
          docs: ["Spl token program or token program 2022"]
        },
        {
          name: "system_program",
          docs: ["To create a new program account"],
          address: "11111111111111111111111111111111"
        },
        {
          name: "rent",
          docs: ["Sysvar for program account"],
          address: "SysvarRent111111111111111111111111111111111"
        }
      ],
      args: [
        {
          name: "sqrt_price_x64",
          type: "u128"
        },
        {
          name: "open_time",
          type: "u64"
        }
      ]
    },
    {
      name: "create_support_mint_associated",
      docs: [
        "Create support token22 mint account which can create pool and send rewards with ignoring the not support extensions."
      ],
      discriminator: [17, 251, 65, 92, 136, 242, 14, 169],
      accounts: [
        {
          name: "owner",
          docs: ["Address to be set as protocol owner."],
          writable: true,
          signer: true,
          address: "GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ"
        },
        {
          name: "token_mint",
          docs: ["Support token mint"]
        },
        {
          name: "support_mint_associated",
          docs: [
            "Initialize support mint state account to store support mint address and bump."
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  115,
                  117,
                  112,
                  112,
                  111,
                  114,
                  116,
                  95,
                  109,
                  105,
                  110,
                  116
                ]
              },
              {
                kind: "account",
                path: "token_mint"
              }
            ]
          }
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        }
      ],
      args: []
    },
    {
      name: "decrease_liquidity",
      docs: [
        '#[deprecated(note = "Use `decrease_liquidity_v2` instead.")]',
        "Decreases liquidity for an existing position",
        "",
        "# Arguments",
        "",
        "* `ctx` -  The context of accounts",
        "* `liquidity` - The amount by which liquidity will be decreased",
        "* `amount_0_min` - The minimum amount of token_0 that should be accounted for the burned liquidity",
        "* `amount_1_min` - The minimum amount of token_1 that should be accounted for the burned liquidity",
        ""
      ],
      discriminator: [160, 38, 208, 111, 104, 91, 44, 1],
      accounts: [
        {
          name: "nft_owner",
          docs: ["The position owner or delegated authority"],
          signer: true
        },
        {
          name: "nft_account",
          docs: ["The token account for the tokenized position"]
        },
        {
          name: "personal_position",
          docs: ["Decrease liquidity for this position"],
          writable: true
        },
        {
          name: "pool_state",
          writable: true
        },
        {
          name: "protocol_position",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [112, 111, 115, 105, 116, 105, 111, 110]
              },
              {
                kind: "account",
                path: "pool_state"
              },
              {
                kind: "account",
                path: "personal_position.tick_lower_index",
                account: "PersonalPositionState"
              },
              {
                kind: "account",
                path: "personal_position.tick_upper_index",
                account: "PersonalPositionState"
              }
            ]
          }
        },
        {
          name: "token_vault_0",
          docs: ["Token_0 vault"],
          writable: true
        },
        {
          name: "token_vault_1",
          docs: ["Token_1 vault"],
          writable: true
        },
        {
          name: "tick_array_lower",
          docs: ["Stores init state for the lower tick"],
          writable: true
        },
        {
          name: "tick_array_upper",
          docs: ["Stores init state for the upper tick"],
          writable: true
        },
        {
          name: "recipient_token_account_0",
          docs: ["The destination token account for receive amount_0"],
          writable: true
        },
        {
          name: "recipient_token_account_1",
          docs: ["The destination token account for receive amount_1"],
          writable: true
        },
        {
          name: "token_program",
          docs: ["SPL program to transfer out tokens"],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        }
      ],
      args: [
        {
          name: "liquidity",
          type: "u128"
        },
        {
          name: "amount_0_min",
          type: "u64"
        },
        {
          name: "amount_1_min",
          type: "u64"
        }
      ]
    },
    {
      name: "decrease_liquidity_v2",
      docs: [
        "Decreases liquidity for an existing position, support Token2022",
        "",
        "# Arguments",
        "",
        "* `ctx` -  The context of accounts",
        "* `liquidity` - The amount by which liquidity will be decreased",
        "* `amount_0_min` - The minimum amount of token_0 that should be accounted for the burned liquidity",
        "* `amount_1_min` - The minimum amount of token_1 that should be accounted for the burned liquidity",
        ""
      ],
      discriminator: [58, 127, 188, 62, 79, 82, 196, 96],
      accounts: [
        {
          name: "nft_owner",
          docs: ["The position owner or delegated authority"],
          signer: true
        },
        {
          name: "nft_account",
          docs: ["The token account for the tokenized position"]
        },
        {
          name: "personal_position",
          docs: ["Decrease liquidity for this position"],
          writable: true
        },
        {
          name: "pool_state",
          writable: true
        },
        {
          name: "protocol_position",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [112, 111, 115, 105, 116, 105, 111, 110]
              },
              {
                kind: "account",
                path: "pool_state"
              },
              {
                kind: "account",
                path: "personal_position.tick_lower_index",
                account: "PersonalPositionState"
              },
              {
                kind: "account",
                path: "personal_position.tick_upper_index",
                account: "PersonalPositionState"
              }
            ]
          }
        },
        {
          name: "token_vault_0",
          docs: ["Token_0 vault"],
          writable: true
        },
        {
          name: "token_vault_1",
          docs: ["Token_1 vault"],
          writable: true
        },
        {
          name: "tick_array_lower",
          docs: ["Stores init state for the lower tick"],
          writable: true
        },
        {
          name: "tick_array_upper",
          docs: ["Stores init state for the upper tick"],
          writable: true
        },
        {
          name: "recipient_token_account_0",
          docs: ["The destination token account for receive amount_0"],
          writable: true
        },
        {
          name: "recipient_token_account_1",
          docs: ["The destination token account for receive amount_1"],
          writable: true
        },
        {
          name: "token_program",
          docs: ["SPL program to transfer out tokens"],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "token_program_2022",
          docs: ["Token program 2022"],
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          name: "memo_program",
          docs: ["memo program"],
          address: "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr"
        },
        {
          name: "vault_0_mint",
          docs: ["The mint of token vault 0"]
        },
        {
          name: "vault_1_mint",
          docs: ["The mint of token vault 1"]
        }
      ],
      args: [
        {
          name: "liquidity",
          type: "u128"
        },
        {
          name: "amount_0_min",
          type: "u64"
        },
        {
          name: "amount_1_min",
          type: "u64"
        }
      ]
    },
    {
      name: "increase_liquidity",
      docs: [
        '#[deprecated(note = "Use `increase_liquidity_v2` instead.")]',
        "Increases liquidity for an existing position, with amount paid by `payer`",
        "",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        "* `liquidity` - The desired liquidity to be added, can't be zero",
        "* `amount_0_max` - The max amount of token_0 to spend, which serves as a slippage check",
        "* `amount_1_max` - The max amount of token_1 to spend, which serves as a slippage check",
        ""
      ],
      discriminator: [46, 156, 243, 118, 13, 205, 251, 178],
      accounts: [
        {
          name: "nft_owner",
          docs: ["Pays to mint the position"],
          signer: true
        },
        {
          name: "nft_account",
          docs: ["The token account for nft"]
        },
        {
          name: "pool_state",
          writable: true
        },
        {
          name: "protocol_position",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [112, 111, 115, 105, 116, 105, 111, 110]
              },
              {
                kind: "account",
                path: "pool_state"
              },
              {
                kind: "account",
                path: "personal_position.tick_lower_index",
                account: "PersonalPositionState"
              },
              {
                kind: "account",
                path: "personal_position.tick_upper_index",
                account: "PersonalPositionState"
              }
            ]
          }
        },
        {
          name: "personal_position",
          docs: ["Increase liquidity for this position"],
          writable: true
        },
        {
          name: "tick_array_lower",
          docs: ["Stores init state for the lower tick"],
          writable: true
        },
        {
          name: "tick_array_upper",
          docs: ["Stores init state for the upper tick"],
          writable: true
        },
        {
          name: "token_account_0",
          docs: ["The payer's token account for token_0"],
          writable: true
        },
        {
          name: "token_account_1",
          docs: ["The token account spending token_1 to mint the position"],
          writable: true
        },
        {
          name: "token_vault_0",
          docs: ["The address that holds pool tokens for token_0"],
          writable: true
        },
        {
          name: "token_vault_1",
          docs: ["The address that holds pool tokens for token_1"],
          writable: true
        },
        {
          name: "token_program",
          docs: ["Program to create mint account and mint tokens"],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        }
      ],
      args: [
        {
          name: "liquidity",
          type: "u128"
        },
        {
          name: "amount_0_max",
          type: "u64"
        },
        {
          name: "amount_1_max",
          type: "u64"
        }
      ]
    },
    {
      name: "increase_liquidity_v2",
      docs: [
        "Increases liquidity for an existing position, with amount paid by `payer`, support Token2022",
        "",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        "* `liquidity` - The desired liquidity to be added, if zero, calculate liquidity base amount_0 or amount_1 according base_flag",
        "* `amount_0_max` - The max amount of token_0 to spend, which serves as a slippage check",
        "* `amount_1_max` - The max amount of token_1 to spend, which serves as a slippage check",
        "* `base_flag` - must be specified if liquidity is zero, true: calculate liquidity base amount_0_max otherwise base amount_1_max",
        ""
      ],
      discriminator: [133, 29, 89, 223, 69, 238, 176, 10],
      accounts: [
        {
          name: "nft_owner",
          docs: ["Pays to mint the position"],
          signer: true
        },
        {
          name: "nft_account",
          docs: ["The token account for nft"]
        },
        {
          name: "pool_state",
          writable: true
        },
        {
          name: "protocol_position",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [112, 111, 115, 105, 116, 105, 111, 110]
              },
              {
                kind: "account",
                path: "pool_state"
              },
              {
                kind: "account",
                path: "personal_position.tick_lower_index",
                account: "PersonalPositionState"
              },
              {
                kind: "account",
                path: "personal_position.tick_upper_index",
                account: "PersonalPositionState"
              }
            ]
          }
        },
        {
          name: "personal_position",
          docs: ["Increase liquidity for this position"],
          writable: true
        },
        {
          name: "tick_array_lower",
          docs: ["Stores init state for the lower tick"],
          writable: true
        },
        {
          name: "tick_array_upper",
          docs: ["Stores init state for the upper tick"],
          writable: true
        },
        {
          name: "token_account_0",
          docs: ["The payer's token account for token_0"],
          writable: true
        },
        {
          name: "token_account_1",
          docs: ["The token account spending token_1 to mint the position"],
          writable: true
        },
        {
          name: "token_vault_0",
          docs: ["The address that holds pool tokens for token_0"],
          writable: true
        },
        {
          name: "token_vault_1",
          docs: ["The address that holds pool tokens for token_1"],
          writable: true
        },
        {
          name: "token_program",
          docs: ["Program to create mint account and mint tokens"],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "token_program_2022",
          docs: ["Token program 2022"],
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          name: "vault_0_mint",
          docs: ["The mint of token vault 0"]
        },
        {
          name: "vault_1_mint",
          docs: ["The mint of token vault 1"]
        }
      ],
      args: [
        {
          name: "liquidity",
          type: "u128"
        },
        {
          name: "amount_0_max",
          type: "u64"
        },
        {
          name: "amount_1_max",
          type: "u64"
        },
        {
          name: "base_flag",
          type: {
            option: "bool"
          }
        }
      ]
    },
    {
      name: "initialize_reward",
      docs: [
        "Initialize a reward info for a given pool and reward index",
        "",
        "# Arguments",
        "",
        "* `ctx`- The context of accounts",
        "* `reward_index` - the index to reward info",
        "* `open_time` - reward open timestamp",
        "* `end_time` - reward end timestamp",
        "* `emissions_per_second_x64` - Token reward per second are earned per unit of liquidity.",
        ""
      ],
      discriminator: [95, 135, 192, 196, 242, 129, 230, 68],
      accounts: [
        {
          name: "reward_funder",
          docs: ["The founder deposit reward token to vault"],
          writable: true,
          signer: true
        },
        {
          name: "funder_token_account",
          writable: true
        },
        {
          name: "amm_config",
          docs: ["For check the reward_funder authority"]
        },
        {
          name: "pool_state",
          docs: ["Set reward for this pool"],
          writable: true
        },
        {
          name: "operation_state",
          docs: ["load info from the account to judge reward permission"],
          pda: {
            seeds: [
              {
                kind: "const",
                value: [111, 112, 101, 114, 97, 116, 105, 111, 110]
              }
            ]
          }
        },
        {
          name: "reward_token_mint",
          docs: ["Reward mint"]
        },
        {
          name: "reward_token_vault",
          docs: ["A pda, reward vault"],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  114,
                  101,
                  119,
                  97,
                  114,
                  100,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              {
                kind: "account",
                path: "pool_state"
              },
              {
                kind: "account",
                path: "reward_token_mint"
              }
            ]
          }
        },
        {
          name: "reward_token_program"
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "rent",
          address: "SysvarRent111111111111111111111111111111111"
        }
      ],
      args: [
        {
          name: "param",
          type: {
            defined: {
              name: "InitializeRewardParam"
            }
          }
        }
      ]
    },
    {
      name: "open_position",
      docs: [
        '#[deprecated(note = "Use `open_position_with_token22_nft` instead.")]',
        "Creates a new position wrapped in a NFT",
        "",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        "* `tick_lower_index` - The low boundary of market",
        "* `tick_upper_index` - The upper boundary of market",
        "* `tick_array_lower_start_index` - The start index of tick array which include tick low",
        "* `tick_array_upper_start_index` - The start index of tick array which include tick upper",
        "* `liquidity` - The liquidity to be added",
        "* `amount_0_max` - The max amount of token_0 to spend, which serves as a slippage check",
        "* `amount_1_max` - The max amount of token_1 to spend, which serves as a slippage check",
        ""
      ],
      discriminator: [135, 128, 47, 77, 15, 152, 240, 49],
      accounts: [
        {
          name: "payer",
          docs: ["Pays to mint the position"],
          writable: true,
          signer: true
        },
        {
          name: "position_nft_owner"
        },
        {
          name: "position_nft_mint",
          docs: ["Unique token mint address"],
          writable: true,
          signer: true
        },
        {
          name: "position_nft_account",
          docs: [
            "Token account where position NFT will be minted",
            "This account created in the contract by cpi to avoid large stack variables"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "position_nft_owner"
              },
              {
                kind: "const",
                value: [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              {
                kind: "account",
                path: "position_nft_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "metadata_account",
          docs: ["To store metaplex metadata"],
          writable: true
        },
        {
          name: "pool_state",
          docs: ["Add liquidity for this pool"],
          writable: true
        },
        {
          name: "protocol_position",
          docs: ["Store the information of market marking in range"],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [112, 111, 115, 105, 116, 105, 111, 110]
              },
              {
                kind: "account",
                path: "pool_state"
              },
              {
                kind: "arg",
                path: "tick_lower_index"
              },
              {
                kind: "arg",
                path: "tick_upper_index"
              }
            ]
          }
        },
        {
          name: "tick_array_lower",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [116, 105, 99, 107, 95, 97, 114, 114, 97, 121]
              },
              {
                kind: "account",
                path: "pool_state"
              },
              {
                kind: "arg",
                path: "tick_array_lower_start_index"
              }
            ]
          }
        },
        {
          name: "tick_array_upper",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [116, 105, 99, 107, 95, 97, 114, 114, 97, 121]
              },
              {
                kind: "account",
                path: "pool_state"
              },
              {
                kind: "arg",
                path: "tick_array_upper_start_index"
              }
            ]
          }
        },
        {
          name: "personal_position",
          docs: ["personal position state"],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [112, 111, 115, 105, 116, 105, 111, 110]
              },
              {
                kind: "account",
                path: "position_nft_mint"
              }
            ]
          }
        },
        {
          name: "token_account_0",
          docs: ["The token_0 account deposit token to the pool"],
          writable: true
        },
        {
          name: "token_account_1",
          docs: ["The token_1 account deposit token to the pool"],
          writable: true
        },
        {
          name: "token_vault_0",
          docs: ["The address that holds pool tokens for token_0"],
          writable: true
        },
        {
          name: "token_vault_1",
          docs: ["The address that holds pool tokens for token_1"],
          writable: true
        },
        {
          name: "rent",
          docs: ["Sysvar for token mint and ATA creation"],
          address: "SysvarRent111111111111111111111111111111111"
        },
        {
          name: "system_program",
          docs: ["Program to create the position manager state account"],
          address: "11111111111111111111111111111111"
        },
        {
          name: "token_program",
          docs: ["Program to create mint account and mint tokens"],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "associated_token_program",
          docs: ["Program to create an ATA for receiving position NFT"],
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "metadata_program",
          docs: ["Program to create NFT metadata"],
          address: "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"
        }
      ],
      args: [
        {
          name: "tick_lower_index",
          type: "i32"
        },
        {
          name: "tick_upper_index",
          type: "i32"
        },
        {
          name: "tick_array_lower_start_index",
          type: "i32"
        },
        {
          name: "tick_array_upper_start_index",
          type: "i32"
        },
        {
          name: "liquidity",
          type: "u128"
        },
        {
          name: "amount_0_max",
          type: "u64"
        },
        {
          name: "amount_1_max",
          type: "u64"
        }
      ]
    },
    {
      name: "open_position_v2",
      docs: [
        '#[deprecated(note = "Use `open_position_with_token22_nft` instead.")]',
        "Creates a new position wrapped in a NFT, support Token2022",
        "",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        "* `tick_lower_index` - The low boundary of market",
        "* `tick_upper_index` - The upper boundary of market",
        "* `tick_array_lower_start_index` - The start index of tick array which include tick low",
        "* `tick_array_upper_start_index` - The start index of tick array which include tick upper",
        "* `liquidity` - The liquidity to be added, if zero, and the base_flag is specified, calculate liquidity base amount_0_max or amount_1_max according base_flag, otherwise open position with zero liquidity",
        "* `amount_0_max` - The max amount of token_0 to spend, which serves as a slippage check",
        "* `amount_1_max` - The max amount of token_1 to spend, which serves as a slippage check",
        "* `with_metadata` - The flag indicating whether to create NFT mint metadata",
        "* `base_flag` - if the liquidity specified as zero, true: calculate liquidity base amount_0_max otherwise base amount_1_max",
        ""
      ],
      discriminator: [77, 184, 74, 214, 112, 86, 241, 199],
      accounts: [
        {
          name: "payer",
          docs: ["Pays to mint the position"],
          writable: true,
          signer: true
        },
        {
          name: "position_nft_owner"
        },
        {
          name: "position_nft_mint",
          docs: ["Unique token mint address"],
          writable: true,
          signer: true
        },
        {
          name: "position_nft_account",
          docs: ["Token account where position NFT will be minted"],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "position_nft_owner"
              },
              {
                kind: "const",
                value: [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              {
                kind: "account",
                path: "position_nft_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "metadata_account",
          docs: ["To store metaplex metadata"],
          writable: true
        },
        {
          name: "pool_state",
          docs: ["Add liquidity for this pool"],
          writable: true
        },
        {
          name: "protocol_position",
          docs: ["Store the information of market marking in range"],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [112, 111, 115, 105, 116, 105, 111, 110]
              },
              {
                kind: "account",
                path: "pool_state"
              },
              {
                kind: "arg",
                path: "tick_lower_index"
              },
              {
                kind: "arg",
                path: "tick_upper_index"
              }
            ]
          }
        },
        {
          name: "tick_array_lower",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [116, 105, 99, 107, 95, 97, 114, 114, 97, 121]
              },
              {
                kind: "account",
                path: "pool_state"
              },
              {
                kind: "arg",
                path: "tick_array_lower_start_index"
              }
            ]
          }
        },
        {
          name: "tick_array_upper",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [116, 105, 99, 107, 95, 97, 114, 114, 97, 121]
              },
              {
                kind: "account",
                path: "pool_state"
              },
              {
                kind: "arg",
                path: "tick_array_upper_start_index"
              }
            ]
          }
        },
        {
          name: "personal_position",
          docs: ["personal position state"],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [112, 111, 115, 105, 116, 105, 111, 110]
              },
              {
                kind: "account",
                path: "position_nft_mint"
              }
            ]
          }
        },
        {
          name: "token_account_0",
          docs: ["The token_0 account deposit token to the pool"],
          writable: true
        },
        {
          name: "token_account_1",
          docs: ["The token_1 account deposit token to the pool"],
          writable: true
        },
        {
          name: "token_vault_0",
          docs: ["The address that holds pool tokens for token_0"],
          writable: true
        },
        {
          name: "token_vault_1",
          docs: ["The address that holds pool tokens for token_1"],
          writable: true
        },
        {
          name: "rent",
          docs: ["Sysvar for token mint and ATA creation"],
          address: "SysvarRent111111111111111111111111111111111"
        },
        {
          name: "system_program",
          docs: ["Program to create the position manager state account"],
          address: "11111111111111111111111111111111"
        },
        {
          name: "token_program",
          docs: ["Program to create mint account and mint tokens"],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "associated_token_program",
          docs: ["Program to create an ATA for receiving position NFT"],
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "metadata_program",
          docs: ["Program to create NFT metadata"],
          address: "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"
        },
        {
          name: "token_program_2022",
          docs: ["Program to create mint account and mint tokens"],
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          name: "vault_0_mint",
          docs: ["The mint of token vault 0"]
        },
        {
          name: "vault_1_mint",
          docs: ["The mint of token vault 1"]
        }
      ],
      args: [
        {
          name: "tick_lower_index",
          type: "i32"
        },
        {
          name: "tick_upper_index",
          type: "i32"
        },
        {
          name: "tick_array_lower_start_index",
          type: "i32"
        },
        {
          name: "tick_array_upper_start_index",
          type: "i32"
        },
        {
          name: "liquidity",
          type: "u128"
        },
        {
          name: "amount_0_max",
          type: "u64"
        },
        {
          name: "amount_1_max",
          type: "u64"
        },
        {
          name: "with_metadata",
          type: "bool"
        },
        {
          name: "base_flag",
          type: {
            option: "bool"
          }
        }
      ]
    },
    {
      name: "open_position_with_token22_nft",
      docs: [
        "Creates a new position wrapped in a Token2022 NFT without relying on metadata_program and metadata_account, reduce the cost for user to create a personal position.",
        "",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        "* `tick_lower_index` - The low boundary of market",
        "* `tick_upper_index` - The upper boundary of market",
        "* `tick_array_lower_start_index` - The start index of tick array which include tick low",
        "* `tick_array_upper_start_index` - The start index of tick array which include tick upper",
        "* `liquidity` - The liquidity to be added, if zero, and the base_flag is specified, calculate liquidity base amount_0_max or amount_1_max according base_flag, otherwise open position with zero liquidity",
        "* `amount_0_max` - The max amount of token_0 to spend, which serves as a slippage check",
        "* `amount_1_max` - The max amount of token_1 to spend, which serves as a slippage check",
        "* `with_metadata` - The flag indicating whether to create NFT mint metadata",
        "* `base_flag` - if the liquidity specified as zero, true: calculate liquidity base amount_0_max otherwise base amount_1_max",
        ""
      ],
      discriminator: [77, 255, 174, 82, 125, 29, 201, 46],
      accounts: [
        {
          name: "payer",
          docs: ["Pays to mint the position"],
          writable: true,
          signer: true
        },
        {
          name: "position_nft_owner"
        },
        {
          name: "position_nft_mint",
          docs: ["Unique token mint address, initialize in contract"],
          writable: true,
          signer: true
        },
        {
          name: "position_nft_account",
          writable: true
        },
        {
          name: "pool_state",
          docs: ["Add liquidity for this pool"],
          writable: true
        },
        {
          name: "protocol_position",
          docs: ["Store the information of market marking in range"],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [112, 111, 115, 105, 116, 105, 111, 110]
              },
              {
                kind: "account",
                path: "pool_state"
              },
              {
                kind: "arg",
                path: "tick_lower_index"
              },
              {
                kind: "arg",
                path: "tick_upper_index"
              }
            ]
          }
        },
        {
          name: "tick_array_lower",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [116, 105, 99, 107, 95, 97, 114, 114, 97, 121]
              },
              {
                kind: "account",
                path: "pool_state"
              },
              {
                kind: "arg",
                path: "tick_array_lower_start_index"
              }
            ]
          }
        },
        {
          name: "tick_array_upper",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [116, 105, 99, 107, 95, 97, 114, 114, 97, 121]
              },
              {
                kind: "account",
                path: "pool_state"
              },
              {
                kind: "arg",
                path: "tick_array_upper_start_index"
              }
            ]
          }
        },
        {
          name: "personal_position",
          docs: ["personal position state"],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [112, 111, 115, 105, 116, 105, 111, 110]
              },
              {
                kind: "account",
                path: "position_nft_mint"
              }
            ]
          }
        },
        {
          name: "token_account_0",
          docs: ["The token_0 account deposit token to the pool"],
          writable: true
        },
        {
          name: "token_account_1",
          docs: ["The token_1 account deposit token to the pool"],
          writable: true
        },
        {
          name: "token_vault_0",
          docs: ["The address that holds pool tokens for token_0"],
          writable: true
        },
        {
          name: "token_vault_1",
          docs: ["The address that holds pool tokens for token_1"],
          writable: true
        },
        {
          name: "rent",
          docs: ["Sysvar for token mint and ATA creation"],
          address: "SysvarRent111111111111111111111111111111111"
        },
        {
          name: "system_program",
          docs: ["Program to create the position manager state account"],
          address: "11111111111111111111111111111111"
        },
        {
          name: "token_program",
          docs: ["Program to transfer for token account"],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "associated_token_program",
          docs: ["Program to create an ATA for receiving position NFT"],
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "token_program_2022",
          docs: [
            "Program to create NFT mint/token account and transfer for token22 account"
          ],
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          name: "vault_0_mint",
          docs: ["The mint of token vault 0"]
        },
        {
          name: "vault_1_mint",
          docs: ["The mint of token vault 1"]
        }
      ],
      args: [
        {
          name: "tick_lower_index",
          type: "i32"
        },
        {
          name: "tick_upper_index",
          type: "i32"
        },
        {
          name: "tick_array_lower_start_index",
          type: "i32"
        },
        {
          name: "tick_array_upper_start_index",
          type: "i32"
        },
        {
          name: "liquidity",
          type: "u128"
        },
        {
          name: "amount_0_max",
          type: "u64"
        },
        {
          name: "amount_1_max",
          type: "u64"
        },
        {
          name: "with_metadata",
          type: "bool"
        },
        {
          name: "base_flag",
          type: {
            option: "bool"
          }
        }
      ]
    },
    {
      name: "set_reward_params",
      docs: [
        "Reset reward param, start a new reward cycle or extend the current cycle.",
        "",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        "* `reward_index` - The index of reward token in the pool, it must be smaller than 3",
        "* `emissions_per_second_x64` - The per second emission reward, when extend the current cycle,",
        "new value can't be less than old value",
        "* `open_time` - reward open timestamp, must be set when starting a new cycle",
        "* `end_time` - reward end timestamp",
        ""
      ],
      discriminator: [112, 52, 167, 75, 32, 201, 211, 137],
      accounts: [
        {
          name: "authority",
          docs: [
            "Address to be set as protocol owner. It pays to create factory state account."
          ],
          signer: true
        },
        {
          name: "amm_config"
        },
        {
          name: "pool_state",
          writable: true
        },
        {
          name: "operation_state",
          docs: ["load info from the account to judge reward permission"],
          pda: {
            seeds: [
              {
                kind: "const",
                value: [111, 112, 101, 114, 97, 116, 105, 111, 110]
              }
            ]
          }
        },
        {
          name: "token_program",
          docs: ["Token program"],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "token_program_2022",
          docs: ["Token program 2022"],
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        }
      ],
      args: [
        {
          name: "reward_index",
          type: "u8"
        },
        {
          name: "emissions_per_second_x64",
          type: "u128"
        },
        {
          name: "open_time",
          type: "u64"
        },
        {
          name: "end_time",
          type: "u64"
        }
      ]
    },
    {
      name: "swap",
      docs: [
        '#[deprecated(note = "Use `swap_v2` instead.")]',
        "Swaps one token for as much as possible of another token across a single pool",
        "",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        "* `amount` - Arranged in pairs with other_amount_threshold. (amount_in, amount_out_minimum) or (amount_out, amount_in_maximum)",
        "* `other_amount_threshold` - For slippage check",
        "* `sqrt_price_limit_x64` - The Q64.64 format \u221AP limit price, and if it is 0, the maximum and minimum prices that can be reached are set by default according to the swap direction.",
        "* `is_base_input` - swap base input or swap base output",
        ""
      ],
      discriminator: [248, 198, 158, 145, 225, 117, 135, 200],
      accounts: [
        {
          name: "payer",
          docs: ["The user performing the swap"],
          signer: true
        },
        {
          name: "amm_config",
          docs: ["The factory state to read protocol fees"]
        },
        {
          name: "pool_state",
          docs: [
            "The program account of the pool in which the swap will be performed"
          ],
          writable: true
        },
        {
          name: "input_token_account",
          docs: ["The user token account for input token"],
          writable: true
        },
        {
          name: "output_token_account",
          docs: ["The user token account for output token"],
          writable: true
        },
        {
          name: "input_vault",
          docs: ["The vault token account for input token"],
          writable: true
        },
        {
          name: "output_vault",
          docs: ["The vault token account for output token"],
          writable: true
        },
        {
          name: "observation_state",
          docs: [
            "The program account for the most recent oracle observation"
          ],
          writable: true
        },
        {
          name: "token_program",
          docs: ["SPL program for token transfers"],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "tick_array",
          writable: true
        }
      ],
      args: [
        {
          name: "amount",
          type: "u64"
        },
        {
          name: "other_amount_threshold",
          type: "u64"
        },
        {
          name: "sqrt_price_limit_x64",
          type: "u128"
        },
        {
          name: "is_base_input",
          type: "bool"
        }
      ]
    },
    {
      name: "swap_router_base_in",
      docs: [
        "Swap token for as much as possible of another token across the path provided, base input",
        "",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        "* `amount_in` - Token amount to be swapped in",
        "* `amount_out_minimum` - Minimum output amount for slip control"
      ],
      discriminator: [69, 125, 115, 218, 245, 186, 242, 196],
      accounts: [
        {
          name: "payer",
          docs: ["The user performing the swap"],
          signer: true
        },
        {
          name: "input_token_account",
          docs: ["The token account that pays input tokens for the swap"],
          writable: true
        },
        {
          name: "input_token_mint",
          docs: ["The mint of input token"],
          writable: true
        },
        {
          name: "token_program",
          docs: ["SPL program for token transfers"],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "token_program_2022",
          docs: ["SPL program 2022 for token transfers"],
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          name: "memo_program",
          docs: ["Memo program"],
          address: "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr"
        }
      ],
      args: [
        {
          name: "amount_in",
          type: "u64"
        },
        {
          name: "amount_out_minimum",
          type: "u64"
        }
      ]
    },
    {
      name: "swap_v2",
      docs: [
        "Swaps one token for as much as possible of another token across a single pool, support token program 2022",
        "",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        "* `amount` - Arranged in pairs with other_amount_threshold. (amount_in, amount_out_minimum) or (amount_out, amount_in_maximum)",
        "* `other_amount_threshold` - For slippage check",
        "* `sqrt_price_limit` - The Q64.64 format \u221AP limit price, and if it is 0, the maximum and minimum prices that can be reached are set by default according to the swap direction.",
        "* `is_base_input` - swap base input or swap base output",
        ""
      ],
      discriminator: [43, 4, 237, 11, 26, 201, 30, 98],
      accounts: [
        {
          name: "payer",
          docs: ["The user performing the swap"],
          signer: true
        },
        {
          name: "amm_config",
          docs: ["The factory state to read protocol fees"]
        },
        {
          name: "pool_state",
          docs: [
            "The program account of the pool in which the swap will be performed"
          ],
          writable: true
        },
        {
          name: "input_token_account",
          docs: ["The user token account for input token"],
          writable: true
        },
        {
          name: "output_token_account",
          docs: ["The user token account for output token"],
          writable: true
        },
        {
          name: "input_vault",
          docs: ["The vault token account for input token"],
          writable: true
        },
        {
          name: "output_vault",
          docs: ["The vault token account for output token"],
          writable: true
        },
        {
          name: "observation_state",
          docs: [
            "The program account for the most recent oracle observation"
          ],
          writable: true
        },
        {
          name: "token_program",
          docs: ["SPL program for token transfers"],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "token_program_2022",
          docs: ["SPL program 2022 for token transfers"],
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          name: "memo_program",
          docs: ["Memo program"],
          address: "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr"
        },
        {
          name: "input_vault_mint",
          docs: ["The mint of token vault 0"]
        },
        {
          name: "output_vault_mint",
          docs: ["The mint of token vault 1"]
        }
      ],
      args: [
        {
          name: "amount",
          type: "u64"
        },
        {
          name: "other_amount_threshold",
          type: "u64"
        },
        {
          name: "sqrt_price_limit_x64",
          type: "u128"
        },
        {
          name: "is_base_input",
          type: "bool"
        }
      ]
    },
    {
      name: "transfer_reward_owner",
      docs: [
        "Transfer reward owner",
        "",
        "# Arguments",
        "",
        "* `ctx`- The context of accounts",
        "* `new_owner`- new owner pubkey",
        ""
      ],
      discriminator: [7, 22, 12, 83, 242, 43, 48, 121],
      accounts: [
        {
          name: "authority",
          docs: ["Address to be set as operation account owner."],
          signer: true,
          address: "GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ"
        },
        {
          name: "pool_state",
          writable: true
        }
      ],
      args: [
        {
          name: "new_owner",
          type: "pubkey"
        }
      ]
    },
    {
      name: "update_amm_config",
      docs: [
        "Updates the owner of the amm config",
        "Must be called by the current owner or admin",
        "",
        "# Arguments",
        "",
        "* `ctx`- The context of accounts",
        "* `trade_fee_rate`- The new trade fee rate of amm config, be set when `param` is 0",
        "* `protocol_fee_rate`- The new protocol fee rate of amm config, be set when `param` is 1",
        "* `fund_fee_rate`- The new fund fee rate of amm config, be set when `param` is 2",
        "* `new_owner`- The config's new owner, be set when `param` is 3",
        "* `new_fund_owner`- The config's new fund owner, be set when `param` is 4",
        "* `param`- The value can be 0 | 1 | 2 | 3 | 4, otherwise will report a error",
        ""
      ],
      discriminator: [49, 60, 174, 136, 154, 28, 116, 200],
      accounts: [
        {
          name: "owner",
          docs: ["The amm config owner or admin"],
          signer: true,
          address: "GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ"
        },
        {
          name: "amm_config",
          docs: ["Amm config account to be changed"],
          writable: true
        }
      ],
      args: [
        {
          name: "param",
          type: "u8"
        },
        {
          name: "value",
          type: "u32"
        }
      ]
    },
    {
      name: "update_operation_account",
      docs: [
        "Update the operation account",
        "",
        "# Arguments",
        "",
        "* `ctx`- The context of accounts",
        "* `param`- The value can be 0 | 1 | 2 | 3, otherwise will report a error",
        "* `keys`- update operation owner when the `param` is 0",
        "remove operation owner when the `param` is 1",
        "update whitelist mint when the `param` is 2",
        "remove whitelist mint when the `param` is 3",
        ""
      ],
      discriminator: [127, 70, 119, 40, 188, 227, 61, 7],
      accounts: [
        {
          name: "owner",
          docs: ["Address to be set as operation account owner."],
          signer: true,
          address: "GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ"
        },
        {
          name: "operation_state",
          docs: [
            "Initialize operation state account to store operation owner address and white list mint."
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [111, 112, 101, 114, 97, 116, 105, 111, 110]
              }
            ]
          }
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        }
      ],
      args: [
        {
          name: "param",
          type: "u8"
        },
        {
          name: "keys",
          type: {
            vec: "pubkey"
          }
        }
      ]
    },
    {
      name: "update_pool_status",
      docs: [
        "Update pool status for given value",
        "",
        "# Arguments",
        "",
        "* `ctx`- The context of accounts",
        "* `status` - The value of status",
        ""
      ],
      discriminator: [130, 87, 108, 6, 46, 224, 117, 123],
      accounts: [
        {
          name: "authority",
          signer: true,
          address: "GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ"
        },
        {
          name: "pool_state",
          writable: true
        }
      ],
      args: [
        {
          name: "status",
          type: "u8"
        }
      ]
    },
    {
      name: "update_reward_infos",
      docs: [
        "Update rewards info of the given pool, can be called for everyone",
        "",
        "# Arguments",
        "",
        "* `ctx`- The context of accounts",
        ""
      ],
      discriminator: [163, 172, 224, 52, 11, 154, 106, 223],
      accounts: [
        {
          name: "pool_state",
          docs: ["The liquidity pool for which reward info to update"],
          writable: true
        }
      ],
      args: []
    }
  ],
  accounts: [
    {
      name: "AmmConfig",
      discriminator: [218, 244, 33, 104, 203, 203, 43, 111]
    },
    {
      name: "ObservationState",
      discriminator: [122, 174, 197, 53, 129, 9, 165, 132]
    },
    {
      name: "OperationState",
      discriminator: [19, 236, 58, 237, 81, 222, 183, 252]
    },
    {
      name: "PersonalPositionState",
      discriminator: [70, 111, 150, 126, 230, 15, 25, 117]
    },
    {
      name: "PoolState",
      discriminator: [247, 237, 227, 245, 215, 195, 222, 70]
    },
    {
      name: "ProtocolPositionState",
      discriminator: [100, 226, 145, 99, 146, 218, 160, 106]
    },
    {
      name: "SupportMintAssociated",
      discriminator: [134, 40, 183, 79, 12, 112, 162, 53]
    },
    {
      name: "TickArrayBitmapExtension",
      discriminator: [60, 150, 36, 219, 97, 128, 139, 153]
    },
    {
      name: "TickArrayState",
      discriminator: [192, 155, 85, 205, 49, 249, 129, 42]
    }
  ],
  events: [
    {
      name: "CollectPersonalFeeEvent",
      discriminator: [166, 174, 105, 192, 81, 161, 83, 105]
    },
    {
      name: "CollectProtocolFeeEvent",
      discriminator: [206, 87, 17, 79, 45, 41, 213, 61]
    },
    {
      name: "ConfigChangeEvent",
      discriminator: [247, 189, 7, 119, 106, 112, 95, 151]
    },
    {
      name: "CreatePersonalPositionEvent",
      discriminator: [100, 30, 87, 249, 196, 223, 154, 206]
    },
    {
      name: "DecreaseLiquidityEvent",
      discriminator: [58, 222, 86, 58, 68, 50, 85, 56]
    },
    {
      name: "IncreaseLiquidityEvent",
      discriminator: [49, 79, 105, 212, 32, 34, 30, 84]
    },
    {
      name: "LiquidityCalculateEvent",
      discriminator: [237, 112, 148, 230, 57, 84, 180, 162]
    },
    {
      name: "LiquidityChangeEvent",
      discriminator: [126, 240, 175, 206, 158, 88, 153, 107]
    },
    {
      name: "PoolCreatedEvent",
      discriminator: [25, 94, 75, 47, 112, 99, 53, 63]
    },
    {
      name: "SwapEvent",
      discriminator: [64, 198, 205, 232, 38, 8, 113, 226]
    },
    {
      name: "UpdateRewardInfosEvent",
      discriminator: [109, 127, 186, 78, 114, 65, 37, 236]
    }
  ],
  errors: [
    {
      code: 6e3,
      name: "LOK",
      msg: "LOK"
    },
    {
      code: 6001,
      name: "NotApproved",
      msg: "Not approved"
    },
    {
      code: 6002,
      name: "InvalidUpdateConfigFlag",
      msg: "invalid update amm config flag"
    },
    {
      code: 6003,
      name: "AccountLack",
      msg: "Account lack"
    },
    {
      code: 6004,
      name: "ClosePositionErr",
      msg: "Remove liquitity, collect fees owed and reward then you can close position account"
    },
    {
      code: 6005,
      name: "ZeroMintAmount",
      msg: "Minting amount should be greater than 0"
    },
    {
      code: 6006,
      name: "InvalidTickIndex",
      msg: "Tick out of range"
    },
    {
      code: 6007,
      name: "TickInvalidOrder",
      msg: "The lower tick must be below the upper tick"
    },
    {
      code: 6008,
      name: "TickLowerOverflow",
      msg: "The tick must be greater, or equal to the minimum tick(-443636)"
    },
    {
      code: 6009,
      name: "TickUpperOverflow",
      msg: "The tick must be lesser than, or equal to the maximum tick(443636)"
    },
    {
      code: 6010,
      name: "TickAndSpacingNotMatch",
      msg: "tick % tick_spacing must be zero"
    },
    {
      code: 6011,
      name: "InvalidTickArray",
      msg: "Invalid tick array account"
    },
    {
      code: 6012,
      name: "InvalidTickArrayBoundary",
      msg: "Invalid tick array boundary"
    },
    {
      code: 6013,
      name: "SqrtPriceLimitOverflow",
      msg: "Square root price limit overflow"
    },
    {
      code: 6014,
      name: "SqrtPriceX64",
      msg: "sqrt_price_x64 out of range"
    },
    {
      code: 6015,
      name: "LiquiditySubValueErr",
      msg: "Liquidity sub delta L must be smaller than before"
    },
    {
      code: 6016,
      name: "LiquidityAddValueErr",
      msg: "Liquidity add delta L must be greater, or equal to before"
    },
    {
      code: 6017,
      name: "InvalidLiquidity",
      msg: "Invalid liquidity when update position"
    },
    {
      code: 6018,
      name: "ForbidBothZeroForSupplyLiquidity",
      msg: "Both token amount must not be zero while supply liquidity"
    },
    {
      code: 6019,
      name: "LiquidityInsufficient",
      msg: "Liquidity insufficient"
    },
    {
      code: 6020,
      name: "TransactionTooOld",
      msg: "Transaction too old"
    },
    {
      code: 6021,
      name: "PriceSlippageCheck",
      msg: "Price slippage check"
    },
    {
      code: 6022,
      name: "TooLittleOutputReceived",
      msg: "Too little output received"
    },
    {
      code: 6023,
      name: "TooMuchInputPaid",
      msg: "Too much input paid"
    },
    {
      code: 6024,
      name: "ZeroAmountSpecified",
      msg: "Swap special amount can not be zero"
    },
    {
      code: 6025,
      name: "InvalidInputPoolVault",
      msg: "Input pool vault is invalid"
    },
    {
      code: 6026,
      name: "TooSmallInputOrOutputAmount",
      msg: "Swap input or output amount is too small"
    },
    {
      code: 6027,
      name: "NotEnoughTickArrayAccount",
      msg: "Not enought tick array account"
    },
    {
      code: 6028,
      name: "InvalidFirstTickArrayAccount",
      msg: "Invalid first tick array account"
    },
    {
      code: 6029,
      name: "InvalidRewardIndex",
      msg: "Invalid reward index"
    },
    {
      code: 6030,
      name: "FullRewardInfo",
      msg: "The init reward token reach to the max"
    },
    {
      code: 6031,
      name: "RewardTokenAlreadyInUse",
      msg: "The init reward token already in use"
    },
    {
      code: 6032,
      name: "ExceptRewardMint",
      msg: "The reward tokens must contain one of pool vault mint except the last reward"
    },
    {
      code: 6033,
      name: "InvalidRewardInitParam",
      msg: "Invalid reward init param"
    },
    {
      code: 6034,
      name: "InvalidRewardDesiredAmount",
      msg: "Invalid collect reward desired amount"
    },
    {
      code: 6035,
      name: "InvalidRewardInputAccountNumber",
      msg: "Invalid collect reward input account number"
    },
    {
      code: 6036,
      name: "InvalidRewardPeriod",
      msg: "Invalid reward period"
    },
    {
      code: 6037,
      name: "NotApproveUpdateRewardEmissiones",
      msg: "Modification of emissiones is allowed within 72 hours from the end of the previous cycle"
    },
    {
      code: 6038,
      name: "UnInitializedRewardInfo",
      msg: "uninitialized reward info"
    },
    {
      code: 6039,
      name: "NotSupportMint",
      msg: "Not support token_2022 mint extension"
    },
    {
      code: 6040,
      name: "MissingTickArrayBitmapExtensionAccount",
      msg: "Missing tickarray bitmap extension account"
    },
    {
      code: 6041,
      name: "InsufficientLiquidityForDirection",
      msg: "Insufficient liquidity for this direction"
    },
    {
      code: 6042,
      name: "MaxTokenOverflow",
      msg: "Max token overflow"
    },
    {
      code: 6043,
      name: "CalculateOverflow",
      msg: "Calculate overflow"
    },
    {
      code: 6044,
      name: "TransferFeeCalculateNotMatch",
      msg: "TransferFee calculate not match"
    }
  ],
  types: [
    {
      name: "AmmConfig",
      docs: ["Holds the current owner of the factory"],
      type: {
        kind: "struct",
        fields: [
          {
            name: "bump",
            docs: ["Bump to identify PDA"],
            type: "u8"
          },
          {
            name: "index",
            type: "u16"
          },
          {
            name: "owner",
            docs: ["Address of the protocol owner"],
            type: "pubkey"
          },
          {
            name: "protocol_fee_rate",
            docs: ["The protocol fee"],
            type: "u32"
          },
          {
            name: "trade_fee_rate",
            docs: [
              "The trade fee, denominated in hundredths of a bip (10^-6)"
            ],
            type: "u32"
          },
          {
            name: "tick_spacing",
            docs: ["The tick spacing"],
            type: "u16"
          },
          {
            name: "fund_fee_rate",
            docs: [
              "The fund fee, denominated in hundredths of a bip (10^-6)"
            ],
            type: "u32"
          },
          {
            name: "padding_u32",
            type: "u32"
          },
          {
            name: "fund_owner",
            type: "pubkey"
          },
          {
            name: "padding",
            type: {
              array: ["u64", 3]
            }
          }
        ]
      }
    },
    {
      name: "CollectPersonalFeeEvent",
      docs: ["Emitted when tokens are collected for a position"],
      type: {
        kind: "struct",
        fields: [
          {
            name: "position_nft_mint",
            docs: [
              "The ID of the token for which underlying tokens were collected"
            ],
            type: "pubkey"
          },
          {
            name: "recipient_token_account_0",
            docs: [
              "The token account that received the collected token_0 tokens"
            ],
            type: "pubkey"
          },
          {
            name: "recipient_token_account_1",
            docs: [
              "The token account that received the collected token_1 tokens"
            ],
            type: "pubkey"
          },
          {
            name: "amount_0",
            docs: [
              "The amount of token_0 owed to the position that was collected"
            ],
            type: "u64"
          },
          {
            name: "amount_1",
            docs: [
              "The amount of token_1 owed to the position that was collected"
            ],
            type: "u64"
          }
        ]
      }
    },
    {
      name: "CollectProtocolFeeEvent",
      docs: [
        "Emitted when the collected protocol fees are withdrawn by the factory owner"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool_state",
            docs: ["The pool whose protocol fee is collected"],
            type: "pubkey"
          },
          {
            name: "recipient_token_account_0",
            docs: [
              "The address that receives the collected token_0 protocol fees"
            ],
            type: "pubkey"
          },
          {
            name: "recipient_token_account_1",
            docs: [
              "The address that receives the collected token_1 protocol fees"
            ],
            type: "pubkey"
          },
          {
            name: "amount_0",
            docs: ["The amount of token_0 protocol fees that is withdrawn"],
            type: "u64"
          },
          {
            name: "amount_1",
            docs: ["The amount of token_0 protocol fees that is withdrawn"],
            type: "u64"
          }
        ]
      }
    },
    {
      name: "ConfigChangeEvent",
      docs: ["Emitted when create or update a config"],
      type: {
        kind: "struct",
        fields: [
          {
            name: "index",
            type: "u16"
          },
          {
            name: "owner",
            type: "pubkey"
          },
          {
            name: "protocol_fee_rate",
            type: "u32"
          },
          {
            name: "trade_fee_rate",
            type: "u32"
          },
          {
            name: "tick_spacing",
            type: "u16"
          },
          {
            name: "fund_fee_rate",
            type: "u32"
          },
          {
            name: "fund_owner",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "CreatePersonalPositionEvent",
      docs: ["Emitted when create a new position"],
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool_state",
            docs: ["The pool for which liquidity was added"],
            type: "pubkey"
          },
          {
            name: "minter",
            docs: ["The address that create the position"],
            type: "pubkey"
          },
          {
            name: "nft_owner",
            docs: [
              "The owner of the position and recipient of any minted liquidity"
            ],
            type: "pubkey"
          },
          {
            name: "tick_lower_index",
            docs: ["The lower tick of the position"],
            type: "i32"
          },
          {
            name: "tick_upper_index",
            docs: ["The upper tick of the position"],
            type: "i32"
          },
          {
            name: "liquidity",
            docs: ["The amount of liquidity minted to the position range"],
            type: "u128"
          },
          {
            name: "deposit_amount_0",
            docs: ["The amount of token_0 was deposit for the liquidity"],
            type: "u64"
          },
          {
            name: "deposit_amount_1",
            docs: ["The amount of token_1 was deposit for the liquidity"],
            type: "u64"
          },
          {
            name: "deposit_amount_0_transfer_fee",
            docs: ["The token transfer fee for deposit_amount_0"],
            type: "u64"
          },
          {
            name: "deposit_amount_1_transfer_fee",
            docs: ["The token transfer fee for deposit_amount_1"],
            type: "u64"
          }
        ]
      }
    },
    {
      name: "DecreaseLiquidityEvent",
      docs: ["Emitted when liquidity is decreased."],
      type: {
        kind: "struct",
        fields: [
          {
            name: "position_nft_mint",
            docs: ["The ID of the token for which liquidity was decreased"],
            type: "pubkey"
          },
          {
            name: "liquidity",
            docs: [
              "The amount by which liquidity for the position was decreased"
            ],
            type: "u128"
          },
          {
            name: "decrease_amount_0",
            docs: [
              "The amount of token_0 that was paid for the decrease in liquidity"
            ],
            type: "u64"
          },
          {
            name: "decrease_amount_1",
            docs: [
              "The amount of token_1 that was paid for the decrease in liquidity"
            ],
            type: "u64"
          },
          {
            name: "fee_amount_0",
            type: "u64"
          },
          {
            name: "fee_amount_1",
            docs: ["The amount of token_1 fee"],
            type: "u64"
          },
          {
            name: "reward_amounts",
            docs: ["The amount of rewards"],
            type: {
              array: ["u64", 3]
            }
          },
          {
            name: "transfer_fee_0",
            docs: ["The amount of token_0 transfer fee"],
            type: "u64"
          },
          {
            name: "transfer_fee_1",
            docs: ["The amount of token_1 transfer fee"],
            type: "u64"
          }
        ]
      }
    },
    {
      name: "IncreaseLiquidityEvent",
      docs: ["Emitted when liquidity is increased."],
      type: {
        kind: "struct",
        fields: [
          {
            name: "position_nft_mint",
            docs: ["The ID of the token for which liquidity was increased"],
            type: "pubkey"
          },
          {
            name: "liquidity",
            docs: [
              "The amount by which liquidity for the NFT position was increased"
            ],
            type: "u128"
          },
          {
            name: "amount_0",
            docs: [
              "The amount of token_0 that was paid for the increase in liquidity"
            ],
            type: "u64"
          },
          {
            name: "amount_1",
            docs: [
              "The amount of token_1 that was paid for the increase in liquidity"
            ],
            type: "u64"
          },
          {
            name: "amount_0_transfer_fee",
            docs: ["The token transfer fee for amount_0"],
            type: "u64"
          },
          {
            name: "amount_1_transfer_fee",
            docs: ["The token transfer fee for amount_1"],
            type: "u64"
          }
        ]
      }
    },
    {
      name: "InitializeRewardParam",
      type: {
        kind: "struct",
        fields: [
          {
            name: "open_time",
            docs: ["Reward open time"],
            type: "u64"
          },
          {
            name: "end_time",
            docs: ["Reward end time"],
            type: "u64"
          },
          {
            name: "emissions_per_second_x64",
            docs: [
              "Token reward per second are earned per unit of liquidity"
            ],
            type: "u128"
          }
        ]
      }
    },
    {
      name: "LiquidityCalculateEvent",
      docs: ["Emitted when liquidity decreased or increase."],
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool_liquidity",
            docs: ["The pool liquidity before decrease or increase"],
            type: "u128"
          },
          {
            name: "pool_sqrt_price_x64",
            docs: ["The pool price when decrease or increase in liquidity"],
            type: "u128"
          },
          {
            name: "pool_tick",
            docs: ["The pool tick when decrease or increase in liquidity"],
            type: "i32"
          },
          {
            name: "calc_amount_0",
            docs: [
              "The amount of token_0 that was calculated for the decrease or increase in liquidity"
            ],
            type: "u64"
          },
          {
            name: "calc_amount_1",
            docs: [
              "The amount of token_1 that was calculated for the decrease or increase in liquidity"
            ],
            type: "u64"
          },
          {
            name: "trade_fee_owed_0",
            type: "u64"
          },
          {
            name: "trade_fee_owed_1",
            docs: ["The amount of token_1 fee"],
            type: "u64"
          },
          {
            name: "transfer_fee_0",
            docs: [
              "The amount of token_0 transfer fee without trade_fee_amount_0"
            ],
            type: "u64"
          },
          {
            name: "transfer_fee_1",
            docs: [
              "The amount of token_1 transfer fee without trade_fee_amount_0"
            ],
            type: "u64"
          }
        ]
      }
    },
    {
      name: "LiquidityChangeEvent",
      docs: [
        "Emitted pool liquidity change when increase and decrease liquidity"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool_state",
            docs: ["The pool for swap"],
            type: "pubkey"
          },
          {
            name: "tick",
            docs: ["The tick of the pool"],
            type: "i32"
          },
          {
            name: "tick_lower",
            docs: ["The tick lower of position"],
            type: "i32"
          },
          {
            name: "tick_upper",
            docs: ["The tick lower of position"],
            type: "i32"
          },
          {
            name: "liquidity_before",
            docs: ["The liquidity of the pool before liquidity change"],
            type: "u128"
          },
          {
            name: "liquidity_after",
            docs: ["The liquidity of the pool after liquidity change"],
            type: "u128"
          }
        ]
      }
    },
    {
      name: "Observation",
      docs: ["The element of observations in ObservationState"],
      serialization: "bytemuckunsafe",
      repr: {
        kind: "c",
        packed: true
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "block_timestamp",
            docs: ["The block timestamp of the observation"],
            type: "u32"
          },
          {
            name: "tick_cumulative",
            docs: ["the cumulative of tick during the duration time"],
            type: "i64"
          },
          {
            name: "padding",
            docs: ["padding for feature update"],
            type: {
              array: ["u64", 4]
            }
          }
        ]
      }
    },
    {
      name: "ObservationState",
      serialization: "bytemuckunsafe",
      repr: {
        kind: "c",
        packed: true
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "initialized",
            docs: ["Whether the ObservationState is initialized"],
            type: "bool"
          },
          {
            name: "recent_epoch",
            docs: ["recent update epoch"],
            type: "u64"
          },
          {
            name: "observation_index",
            docs: [
              "the most-recently updated index of the observations array"
            ],
            type: "u16"
          },
          {
            name: "pool_id",
            docs: ["belongs to which pool"],
            type: "pubkey"
          },
          {
            name: "observations",
            docs: ["observation array"],
            type: {
              array: [
                {
                  defined: {
                    name: "Observation"
                  }
                },
                100
              ]
            }
          },
          {
            name: "padding",
            docs: ["padding for feature update"],
            type: {
              array: ["u64", 4]
            }
          }
        ]
      }
    },
    {
      name: "OperationState",
      docs: ["Holds the current owner of the factory"],
      serialization: "bytemuckunsafe",
      repr: {
        kind: "c",
        packed: true
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "bump",
            docs: ["Bump to identify PDA"],
            type: "u8"
          },
          {
            name: "operation_owners",
            docs: ["Address of the operation owner"],
            type: {
              array: ["pubkey", 10]
            }
          },
          {
            name: "whitelist_mints",
            docs: ["The mint address of whitelist to emit reward"],
            type: {
              array: ["pubkey", 100]
            }
          }
        ]
      }
    },
    {
      name: "PersonalPositionState",
      type: {
        kind: "struct",
        fields: [
          {
            name: "bump",
            docs: ["Bump to identify PDA"],
            type: {
              array: ["u8", 1]
            }
          },
          {
            name: "nft_mint",
            docs: ["Mint address of the tokenized position"],
            type: "pubkey"
          },
          {
            name: "pool_id",
            docs: ["The ID of the pool with which this token is connected"],
            type: "pubkey"
          },
          {
            name: "tick_lower_index",
            docs: ["The lower bound tick of the position"],
            type: "i32"
          },
          {
            name: "tick_upper_index",
            docs: ["The upper bound tick of the position"],
            type: "i32"
          },
          {
            name: "liquidity",
            docs: ["The amount of liquidity owned by this position"],
            type: "u128"
          },
          {
            name: "fee_growth_inside_0_last_x64",
            docs: [
              "The token_0 fee growth of the aggregate position as of the last action on the individual position"
            ],
            type: "u128"
          },
          {
            name: "fee_growth_inside_1_last_x64",
            docs: [
              "The token_1 fee growth of the aggregate position as of the last action on the individual position"
            ],
            type: "u128"
          },
          {
            name: "token_fees_owed_0",
            docs: [
              "The fees owed to the position owner in token_0, as of the last computation"
            ],
            type: "u64"
          },
          {
            name: "token_fees_owed_1",
            docs: [
              "The fees owed to the position owner in token_1, as of the last computation"
            ],
            type: "u64"
          },
          {
            name: "reward_infos",
            type: {
              array: [
                {
                  defined: {
                    name: "PositionRewardInfo"
                  }
                },
                3
              ]
            }
          },
          {
            name: "recent_epoch",
            type: "u64"
          },
          {
            name: "padding",
            type: {
              array: ["u64", 7]
            }
          }
        ]
      }
    },
    {
      name: "PoolCreatedEvent",
      docs: [
        "Emitted when a pool is created and initialized with a starting price",
        ""
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "token_mint_0",
            docs: ["The first token of the pool by address sort order"],
            type: "pubkey"
          },
          {
            name: "token_mint_1",
            docs: ["The second token of the pool by address sort order"],
            type: "pubkey"
          },
          {
            name: "tick_spacing",
            docs: ["The minimum number of ticks between initialized ticks"],
            type: "u16"
          },
          {
            name: "pool_state",
            docs: ["The address of the created pool"],
            type: "pubkey"
          },
          {
            name: "sqrt_price_x64",
            docs: ["The initial sqrt price of the pool, as a Q64.64"],
            type: "u128"
          },
          {
            name: "tick",
            docs: [
              "The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
            ],
            type: "i32"
          },
          {
            name: "token_vault_0",
            docs: ["Vault of token_0"],
            type: "pubkey"
          },
          {
            name: "token_vault_1",
            docs: ["Vault of token_1"],
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "PoolState",
      docs: [
        "The pool state",
        "",
        "PDA of `[POOL_SEED, config, token_mint_0, token_mint_1]`",
        ""
      ],
      serialization: "bytemuckunsafe",
      repr: {
        kind: "c",
        packed: true
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "bump",
            docs: ["Bump to identify PDA"],
            type: {
              array: ["u8", 1]
            }
          },
          {
            name: "amm_config",
            type: "pubkey"
          },
          {
            name: "owner",
            type: "pubkey"
          },
          {
            name: "token_mint_0",
            docs: [
              "Token pair of the pool, where token_mint_0 address < token_mint_1 address"
            ],
            type: "pubkey"
          },
          {
            name: "token_mint_1",
            type: "pubkey"
          },
          {
            name: "token_vault_0",
            docs: ["Token pair vault"],
            type: "pubkey"
          },
          {
            name: "token_vault_1",
            type: "pubkey"
          },
          {
            name: "observation_key",
            docs: ["observation account key"],
            type: "pubkey"
          },
          {
            name: "mint_decimals_0",
            docs: ["mint0 and mint1 decimals"],
            type: "u8"
          },
          {
            name: "mint_decimals_1",
            type: "u8"
          },
          {
            name: "tick_spacing",
            docs: ["The minimum number of ticks between initialized ticks"],
            type: "u16"
          },
          {
            name: "liquidity",
            docs: ["The currently in range liquidity available to the pool."],
            type: "u128"
          },
          {
            name: "sqrt_price_x64",
            docs: [
              "The current price of the pool as a sqrt(token_1/token_0) Q64.64 value"
            ],
            type: "u128"
          },
          {
            name: "tick_current",
            docs: [
              "The current tick of the pool, i.e. according to the last tick transition that was run."
            ],
            type: "i32"
          },
          {
            name: "padding3",
            type: "u16"
          },
          {
            name: "padding4",
            type: "u16"
          },
          {
            name: "fee_growth_global_0_x64",
            docs: [
              "The fee growth as a Q64.64 number, i.e. fees of token_0 and token_1 collected per",
              "unit of liquidity for the entire life of the pool."
            ],
            type: "u128"
          },
          {
            name: "fee_growth_global_1_x64",
            type: "u128"
          },
          {
            name: "protocol_fees_token_0",
            docs: [
              "The amounts of token_0 and token_1 that are owed to the protocol."
            ],
            type: "u64"
          },
          {
            name: "protocol_fees_token_1",
            type: "u64"
          },
          {
            name: "swap_in_amount_token_0",
            docs: ["The amounts in and out of swap token_0 and token_1"],
            type: "u128"
          },
          {
            name: "swap_out_amount_token_1",
            type: "u128"
          },
          {
            name: "swap_in_amount_token_1",
            type: "u128"
          },
          {
            name: "swap_out_amount_token_0",
            type: "u128"
          },
          {
            name: "status",
            docs: [
              "Bitwise representation of the state of the pool",
              "bit0, 1: disable open position and increase liquidity, 0: normal",
              "bit1, 1: disable decrease liquidity, 0: normal",
              "bit2, 1: disable collect fee, 0: normal",
              "bit3, 1: disable collect reward, 0: normal",
              "bit4, 1: disable swap, 0: normal"
            ],
            type: "u8"
          },
          {
            name: "padding",
            docs: ["Leave blank for future use"],
            type: {
              array: ["u8", 7]
            }
          },
          {
            name: "reward_infos",
            type: {
              array: [
                {
                  defined: {
                    name: "RewardInfo"
                  }
                },
                3
              ]
            }
          },
          {
            name: "tick_array_bitmap",
            docs: ["Packed initialized tick array state"],
            type: {
              array: ["u64", 16]
            }
          },
          {
            name: "total_fees_token_0",
            docs: ["except protocol_fee and fund_fee"],
            type: "u64"
          },
          {
            name: "total_fees_claimed_token_0",
            docs: ["except protocol_fee and fund_fee"],
            type: "u64"
          },
          {
            name: "total_fees_token_1",
            type: "u64"
          },
          {
            name: "total_fees_claimed_token_1",
            type: "u64"
          },
          {
            name: "fund_fees_token_0",
            type: "u64"
          },
          {
            name: "fund_fees_token_1",
            type: "u64"
          },
          {
            name: "open_time",
            type: "u64"
          },
          {
            name: "recent_epoch",
            type: "u64"
          },
          {
            name: "padding1",
            type: {
              array: ["u64", 24]
            }
          },
          {
            name: "padding2",
            type: {
              array: ["u64", 32]
            }
          }
        ]
      }
    },
    {
      name: "PositionRewardInfo",
      type: {
        kind: "struct",
        fields: [
          {
            name: "growth_inside_last_x64",
            type: "u128"
          },
          {
            name: "reward_amount_owed",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "ProtocolPositionState",
      docs: ["Info stored for each user's position"],
      type: {
        kind: "struct",
        fields: [
          {
            name: "bump",
            docs: ["Bump to identify PDA"],
            type: "u8"
          },
          {
            name: "pool_id",
            docs: ["The ID of the pool with which this token is connected"],
            type: "pubkey"
          },
          {
            name: "tick_lower_index",
            docs: ["The lower bound tick of the position"],
            type: "i32"
          },
          {
            name: "tick_upper_index",
            docs: ["The upper bound tick of the position"],
            type: "i32"
          },
          {
            name: "liquidity",
            docs: ["The amount of liquidity owned by this position"],
            type: "u128"
          },
          {
            name: "fee_growth_inside_0_last_x64",
            docs: [
              "The token_0 fee growth per unit of liquidity as of the last update to liquidity or fees owed"
            ],
            type: "u128"
          },
          {
            name: "fee_growth_inside_1_last_x64",
            docs: [
              "The token_1 fee growth per unit of liquidity as of the last update to liquidity or fees owed"
            ],
            type: "u128"
          },
          {
            name: "token_fees_owed_0",
            docs: ["The fees owed to the position owner in token_0"],
            type: "u64"
          },
          {
            name: "token_fees_owed_1",
            docs: ["The fees owed to the position owner in token_1"],
            type: "u64"
          },
          {
            name: "reward_growth_inside",
            docs: [
              "The reward growth per unit of liquidity as of the last update to liquidity"
            ],
            type: {
              array: ["u128", 3]
            }
          },
          {
            name: "recent_epoch",
            type: "u64"
          },
          {
            name: "padding",
            type: {
              array: ["u64", 7]
            }
          }
        ]
      }
    },
    {
      name: "RewardInfo",
      serialization: "bytemuckunsafe",
      repr: {
        kind: "c",
        packed: true
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "reward_state",
            docs: ["Reward state"],
            type: "u8"
          },
          {
            name: "open_time",
            docs: ["Reward open time"],
            type: "u64"
          },
          {
            name: "end_time",
            docs: ["Reward end time"],
            type: "u64"
          },
          {
            name: "last_update_time",
            docs: ["Reward last update time"],
            type: "u64"
          },
          {
            name: "emissions_per_second_x64",
            docs: [
              "Q64.64 number indicates how many tokens per second are earned per unit of liquidity."
            ],
            type: "u128"
          },
          {
            name: "reward_total_emissioned",
            docs: ["The total amount of reward emissioned"],
            type: "u64"
          },
          {
            name: "reward_claimed",
            docs: ["The total amount of claimed reward"],
            type: "u64"
          },
          {
            name: "token_mint",
            docs: ["Reward token mint."],
            type: "pubkey"
          },
          {
            name: "token_vault",
            docs: ["Reward vault token account."],
            type: "pubkey"
          },
          {
            name: "authority",
            docs: ["The owner that has permission to set reward param"],
            type: "pubkey"
          },
          {
            name: "reward_growth_global_x64",
            docs: [
              "Q64.64 number that tracks the total tokens earned per unit of liquidity since the reward",
              "emissions were turned on."
            ],
            type: "u128"
          }
        ]
      }
    },
    {
      name: "SupportMintAssociated",
      docs: ["Holds the current owner of the factory"],
      type: {
        kind: "struct",
        fields: [
          {
            name: "bump",
            docs: ["Bump to identify PDA"],
            type: "u8"
          },
          {
            name: "mint",
            docs: ["Address of the supported token22 mint"],
            type: "pubkey"
          },
          {
            name: "padding",
            type: {
              array: ["u64", 8]
            }
          }
        ]
      }
    },
    {
      name: "SwapEvent",
      docs: ["Emitted by when a swap is performed for a pool"],
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool_state",
            docs: ["The pool for which token_0 and token_1 were swapped"],
            type: "pubkey"
          },
          {
            name: "sender",
            docs: [
              "The address that initiated the swap call, and that received the callback"
            ],
            type: "pubkey"
          },
          {
            name: "token_account_0",
            docs: [
              "The payer token account in zero for one swaps, or the recipient token account",
              "in one for zero swaps"
            ],
            type: "pubkey"
          },
          {
            name: "token_account_1",
            docs: [
              "The payer token account in one for zero swaps, or the recipient token account",
              "in zero for one swaps"
            ],
            type: "pubkey"
          },
          {
            name: "amount_0",
            docs: [
              "The real delta amount of the token_0 of the pool or user"
            ],
            type: "u64"
          },
          {
            name: "transfer_fee_0",
            docs: [
              "The transfer fee charged by the withheld_amount of the token_0"
            ],
            type: "u64"
          },
          {
            name: "amount_1",
            docs: ["The real delta of the token_1 of the pool or user"],
            type: "u64"
          },
          {
            name: "transfer_fee_1",
            docs: [
              "The transfer fee charged by the withheld_amount of the token_1"
            ],
            type: "u64"
          },
          {
            name: "zero_for_one",
            docs: ["if true, amount_0 is negtive and amount_1 is positive"],
            type: "bool"
          },
          {
            name: "sqrt_price_x64",
            docs: ["The sqrt(price) of the pool after the swap, as a Q64.64"],
            type: "u128"
          },
          {
            name: "liquidity",
            docs: ["The liquidity of the pool after the swap"],
            type: "u128"
          },
          {
            name: "tick",
            docs: ["The log base 1.0001 of price of the pool after the swap"],
            type: "i32"
          }
        ]
      }
    },
    {
      name: "TickArrayBitmapExtension",
      serialization: "bytemuckunsafe",
      repr: {
        kind: "c",
        packed: true
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool_id",
            type: "pubkey"
          },
          {
            name: "positive_tick_array_bitmap",
            docs: [
              "Packed initialized tick array state for start_tick_index is positive"
            ],
            type: {
              array: [
                {
                  array: ["u64", 8]
                },
                14
              ]
            }
          },
          {
            name: "negative_tick_array_bitmap",
            docs: [
              "Packed initialized tick array state for start_tick_index is negitive"
            ],
            type: {
              array: [
                {
                  array: ["u64", 8]
                },
                14
              ]
            }
          }
        ]
      }
    },
    {
      name: "TickArrayState",
      serialization: "bytemuckunsafe",
      repr: {
        kind: "c",
        packed: true
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool_id",
            type: "pubkey"
          },
          {
            name: "start_tick_index",
            type: "i32"
          },
          {
            name: "ticks",
            type: {
              array: [
                {
                  defined: {
                    name: "TickState"
                  }
                },
                60
              ]
            }
          },
          {
            name: "initialized_tick_count",
            type: "u8"
          },
          {
            name: "recent_epoch",
            type: "u64"
          },
          {
            name: "padding",
            type: {
              array: ["u8", 107]
            }
          }
        ]
      }
    },
    {
      name: "TickState",
      serialization: "bytemuckunsafe",
      repr: {
        kind: "c",
        packed: true
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "tick",
            type: "i32"
          },
          {
            name: "liquidity_net",
            docs: [
              "Amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left)"
            ],
            type: "i128"
          },
          {
            name: "liquidity_gross",
            docs: ["The total position liquidity that references this tick"],
            type: "u128"
          },
          {
            name: "fee_growth_outside_0_x64",
            docs: [
              "Fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)",
              "only has relative meaning, not absolute \u2014 the value depends on when the tick is initialized"
            ],
            type: "u128"
          },
          {
            name: "fee_growth_outside_1_x64",
            type: "u128"
          },
          {
            name: "reward_growths_outside_x64",
            type: {
              array: ["u128", 3]
            }
          },
          {
            name: "padding",
            type: {
              array: ["u32", 13]
            }
          }
        ]
      }
    },
    {
      name: "UpdateRewardInfosEvent",
      docs: ["Emitted when Reward are updated for a pool"],
      type: {
        kind: "struct",
        fields: [
          {
            name: "reward_growth_global_x64",
            docs: ["Reward info"],
            type: {
              array: ["u128", 3]
            }
          }
        ]
      }
    }
  ]
};

// idl/raydium-cp-swap.json
var raydium_cp_swap_default = {
  address: "CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C",
  metadata: {
    name: "raydium_cp_swap",
    version: "0.2.0",
    spec: "0.1.0",
    description: "Raydium constant product AMM, supports Token2022 and without Openbook"
  },
  instructions: [
    {
      name: "collect_fund_fee",
      docs: [
        "Collect the fund fee accrued to the pool",
        "",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        "* `amount_0_requested` - The maximum amount of token_0 to send, can be 0 to collect fees in only token_1",
        "* `amount_1_requested` - The maximum amount of token_1 to send, can be 0 to collect fees in only token_0",
        ""
      ],
      discriminator: [167, 138, 78, 149, 223, 194, 6, 126],
      accounts: [
        {
          name: "owner",
          docs: ["Only admin or fund_owner can collect fee now"],
          signer: true
        },
        {
          name: "authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  110,
                  100,
                  95,
                  108,
                  112,
                  95,
                  109,
                  105,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ]
          }
        },
        {
          name: "pool_state",
          docs: ["Pool state stores accumulated protocol fee amount"],
          writable: true
        },
        {
          name: "amm_config",
          docs: ["Amm config account stores fund_owner"]
        },
        {
          name: "token_0_vault",
          docs: ["The address that holds pool tokens for token_0"],
          writable: true
        },
        {
          name: "token_1_vault",
          docs: ["The address that holds pool tokens for token_1"],
          writable: true
        },
        {
          name: "vault_0_mint",
          docs: ["The mint of token_0 vault"]
        },
        {
          name: "vault_1_mint",
          docs: ["The mint of token_1 vault"]
        },
        {
          name: "recipient_token_0_account",
          docs: ["The address that receives the collected token_0 fund fees"],
          writable: true
        },
        {
          name: "recipient_token_1_account",
          docs: ["The address that receives the collected token_1 fund fees"],
          writable: true
        },
        {
          name: "token_program",
          docs: ["The SPL program to perform token transfers"],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "token_program_2022",
          docs: ["The SPL program 2022 to perform token transfers"],
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        }
      ],
      args: [
        {
          name: "amount_0_requested",
          type: "u64"
        },
        {
          name: "amount_1_requested",
          type: "u64"
        }
      ]
    },
    {
      name: "collect_protocol_fee",
      docs: [
        "Collect the protocol fee accrued to the pool",
        "",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        "* `amount_0_requested` - The maximum amount of token_0 to send, can be 0 to collect fees in only token_1",
        "* `amount_1_requested` - The maximum amount of token_1 to send, can be 0 to collect fees in only token_0",
        ""
      ],
      discriminator: [136, 136, 252, 221, 194, 66, 126, 89],
      accounts: [
        {
          name: "owner",
          docs: ["Only admin or owner can collect fee now"],
          signer: true
        },
        {
          name: "authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  110,
                  100,
                  95,
                  108,
                  112,
                  95,
                  109,
                  105,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ]
          }
        },
        {
          name: "pool_state",
          docs: ["Pool state stores accumulated protocol fee amount"],
          writable: true
        },
        {
          name: "amm_config",
          docs: ["Amm config account stores owner"]
        },
        {
          name: "token_0_vault",
          docs: ["The address that holds pool tokens for token_0"],
          writable: true
        },
        {
          name: "token_1_vault",
          docs: ["The address that holds pool tokens for token_1"],
          writable: true
        },
        {
          name: "vault_0_mint",
          docs: ["The mint of token_0 vault"]
        },
        {
          name: "vault_1_mint",
          docs: ["The mint of token_1 vault"]
        },
        {
          name: "recipient_token_0_account",
          docs: [
            "The address that receives the collected token_0 protocol fees"
          ],
          writable: true
        },
        {
          name: "recipient_token_1_account",
          docs: [
            "The address that receives the collected token_1 protocol fees"
          ],
          writable: true
        },
        {
          name: "token_program",
          docs: ["The SPL program to perform token transfers"],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "token_program_2022",
          docs: ["The SPL program 2022 to perform token transfers"],
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        }
      ],
      args: [
        {
          name: "amount_0_requested",
          type: "u64"
        },
        {
          name: "amount_1_requested",
          type: "u64"
        }
      ]
    },
    {
      name: "create_amm_config",
      docs: [
        "# Arguments",
        "",
        "* `ctx`- The accounts needed by instruction.",
        "* `index` - The index of amm config, there may be multiple config.",
        "* `trade_fee_rate` - Trade fee rate, can be changed.",
        "* `protocol_fee_rate` - The rate of protocol fee within trade fee.",
        "* `fund_fee_rate` - The rate of fund fee within trade fee.",
        ""
      ],
      discriminator: [137, 52, 237, 212, 215, 117, 108, 104],
      accounts: [
        {
          name: "owner",
          docs: ["Address to be set as protocol owner."],
          writable: true,
          signer: true,
          address: "GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ"
        },
        {
          name: "amm_config",
          docs: [
            "Initialize config state account to store protocol owner address and fee rates."
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [97, 109, 109, 95, 99, 111, 110, 102, 105, 103]
              },
              {
                kind: "arg",
                path: "index"
              }
            ]
          }
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        }
      ],
      args: [
        {
          name: "index",
          type: "u16"
        },
        {
          name: "trade_fee_rate",
          type: "u64"
        },
        {
          name: "protocol_fee_rate",
          type: "u64"
        },
        {
          name: "fund_fee_rate",
          type: "u64"
        },
        {
          name: "create_pool_fee",
          type: "u64"
        }
      ]
    },
    {
      name: "deposit",
      docs: [
        "Deposit lp token to the pool",
        "",
        "# Arguments",
        "",
        "* `ctx`- The context of accounts",
        "* `lp_token_amount` - Pool token amount to transfer. token_a and token_b amount are set by the current exchange rate and size of the pool",
        "* `maximum_token_0_amount` -  Maximum token 0 amount to deposit, prevents excessive slippage",
        "* `maximum_token_1_amount` - Maximum token 1 amount to deposit, prevents excessive slippage",
        ""
      ],
      discriminator: [242, 35, 198, 137, 82, 225, 242, 182],
      accounts: [
        {
          name: "owner",
          docs: ["Pays to mint the position"],
          signer: true
        },
        {
          name: "authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  110,
                  100,
                  95,
                  108,
                  112,
                  95,
                  109,
                  105,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ]
          }
        },
        {
          name: "pool_state",
          writable: true
        },
        {
          name: "owner_lp_token",
          docs: ["Owner lp token account"],
          writable: true
        },
        {
          name: "token_0_account",
          docs: ["The payer's token account for token_0"],
          writable: true
        },
        {
          name: "token_1_account",
          docs: ["The payer's token account for token_1"],
          writable: true
        },
        {
          name: "token_0_vault",
          docs: ["The address that holds pool tokens for token_0"],
          writable: true
        },
        {
          name: "token_1_vault",
          docs: ["The address that holds pool tokens for token_1"],
          writable: true
        },
        {
          name: "token_program",
          docs: ["token Program"],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "token_program_2022",
          docs: ["Token program 2022"],
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          name: "vault_0_mint",
          docs: ["The mint of token_0 vault"]
        },
        {
          name: "vault_1_mint",
          docs: ["The mint of token_1 vault"]
        },
        {
          name: "lp_mint",
          docs: ["Lp token mint"],
          writable: true
        }
      ],
      args: [
        {
          name: "lp_token_amount",
          type: "u64"
        },
        {
          name: "maximum_token_0_amount",
          type: "u64"
        },
        {
          name: "maximum_token_1_amount",
          type: "u64"
        }
      ]
    },
    {
      name: "initialize",
      docs: [
        "Creates a pool for the given token pair and the initial price",
        "",
        "# Arguments",
        "",
        "* `ctx`- The context of accounts",
        "* `init_amount_0` - the initial amount_0 to deposit",
        "* `init_amount_1` - the initial amount_1 to deposit",
        "* `open_time` - the timestamp allowed for swap",
        ""
      ],
      discriminator: [175, 175, 109, 31, 13, 152, 155, 237],
      accounts: [
        {
          name: "creator",
          docs: ["Address paying to create the pool. Can be anyone"],
          writable: true,
          signer: true
        },
        {
          name: "amm_config",
          docs: ["Which config the pool belongs to."]
        },
        {
          name: "authority",
          docs: ["pool vault and lp mint authority"],
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  110,
                  100,
                  95,
                  108,
                  112,
                  95,
                  109,
                  105,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ]
          }
        },
        {
          name: "pool_state",
          docs: [
            "PDA account:",
            "seeds = [",
            "POOL_SEED.as_bytes(),",
            "amm_config.key().as_ref(),",
            "token_0_mint.key().as_ref(),",
            "token_1_mint.key().as_ref(),",
            "],",
            "",
            "Or random account: must be signed by cli"
          ],
          writable: true
        },
        {
          name: "token_0_mint",
          docs: ["Token_0 mint, the key must smaller than token_1 mint."]
        },
        {
          name: "token_1_mint",
          docs: ["Token_1 mint, the key must grater then token_0 mint."]
        },
        {
          name: "lp_mint",
          docs: ["pool lp mint"],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  108,
                  112,
                  95,
                  109,
                  105,
                  110,
                  116
                ]
              },
              {
                kind: "account",
                path: "pool_state"
              }
            ]
          }
        },
        {
          name: "creator_token_0",
          docs: ["payer token0 account"],
          writable: true
        },
        {
          name: "creator_token_1",
          docs: ["creator token1 account"],
          writable: true
        },
        {
          name: "creator_lp_token",
          docs: ["creator lp token account"],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "creator"
              },
              {
                kind: "const",
                value: [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              {
                kind: "account",
                path: "lp_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "token_0_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [112, 111, 111, 108, 95, 118, 97, 117, 108, 116]
              },
              {
                kind: "account",
                path: "pool_state"
              },
              {
                kind: "account",
                path: "token_0_mint"
              }
            ]
          }
        },
        {
          name: "token_1_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [112, 111, 111, 108, 95, 118, 97, 117, 108, 116]
              },
              {
                kind: "account",
                path: "pool_state"
              },
              {
                kind: "account",
                path: "token_1_mint"
              }
            ]
          }
        },
        {
          name: "create_pool_fee",
          docs: ["create pool fee account"],
          writable: true,
          address: "DNXgeM9EiiaAbaWvwjHj9fQQLAX5ZsfHyvmYUNRAdNC8"
        },
        {
          name: "observation_state",
          docs: ["an account to store oracle observations"],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [111, 98, 115, 101, 114, 118, 97, 116, 105, 111, 110]
              },
              {
                kind: "account",
                path: "pool_state"
              }
            ]
          }
        },
        {
          name: "token_program",
          docs: ["Program to create mint account and mint tokens"],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "token_0_program",
          docs: ["Spl token program or token program 2022"]
        },
        {
          name: "token_1_program",
          docs: ["Spl token program or token program 2022"]
        },
        {
          name: "associated_token_program",
          docs: ["Program to create an ATA for receiving position NFT"],
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "system_program",
          docs: ["To create a new program account"],
          address: "11111111111111111111111111111111"
        },
        {
          name: "rent",
          docs: ["Sysvar for program account"],
          address: "SysvarRent111111111111111111111111111111111"
        }
      ],
      args: [
        {
          name: "init_amount_0",
          type: "u64"
        },
        {
          name: "init_amount_1",
          type: "u64"
        },
        {
          name: "open_time",
          type: "u64"
        }
      ]
    },
    {
      name: "swap_base_input",
      docs: [
        "Swap the tokens in the pool base input amount",
        "",
        "# Arguments",
        "",
        "* `ctx`- The context of accounts",
        "* `amount_in` -  input amount to transfer, output to DESTINATION is based on the exchange rate",
        "* `minimum_amount_out` -  Minimum amount of output token, prevents excessive slippage",
        ""
      ],
      discriminator: [143, 190, 90, 218, 196, 30, 51, 222],
      accounts: [
        {
          name: "payer",
          docs: ["The user performing the swap"],
          signer: true
        },
        {
          name: "authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  110,
                  100,
                  95,
                  108,
                  112,
                  95,
                  109,
                  105,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ]
          }
        },
        {
          name: "amm_config",
          docs: ["The factory state to read protocol fees"]
        },
        {
          name: "pool_state",
          docs: [
            "The program account of the pool in which the swap will be performed"
          ],
          writable: true
        },
        {
          name: "input_token_account",
          docs: ["The user token account for input token"],
          writable: true
        },
        {
          name: "output_token_account",
          docs: ["The user token account for output token"],
          writable: true
        },
        {
          name: "input_vault",
          docs: ["The vault token account for input token"],
          writable: true
        },
        {
          name: "output_vault",
          docs: ["The vault token account for output token"],
          writable: true
        },
        {
          name: "input_token_program",
          docs: ["SPL program for input token transfers"]
        },
        {
          name: "output_token_program",
          docs: ["SPL program for output token transfers"]
        },
        {
          name: "input_token_mint",
          docs: ["The mint of input token"]
        },
        {
          name: "output_token_mint",
          docs: ["The mint of output token"]
        },
        {
          name: "observation_state",
          docs: [
            "The program account for the most recent oracle observation"
          ],
          writable: true
        }
      ],
      args: [
        {
          name: "amount_in",
          type: "u64"
        },
        {
          name: "minimum_amount_out",
          type: "u64"
        }
      ]
    },
    {
      name: "swap_base_output",
      docs: [
        "Swap the tokens in the pool base output amount",
        "",
        "# Arguments",
        "",
        "* `ctx`- The context of accounts",
        "* `max_amount_in` -  input amount prevents excessive slippage",
        "* `amount_out` -  amount of output token",
        ""
      ],
      discriminator: [55, 217, 98, 86, 163, 74, 180, 173],
      accounts: [
        {
          name: "payer",
          docs: ["The user performing the swap"],
          signer: true
        },
        {
          name: "authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  110,
                  100,
                  95,
                  108,
                  112,
                  95,
                  109,
                  105,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ]
          }
        },
        {
          name: "amm_config",
          docs: ["The factory state to read protocol fees"]
        },
        {
          name: "pool_state",
          docs: [
            "The program account of the pool in which the swap will be performed"
          ],
          writable: true
        },
        {
          name: "input_token_account",
          docs: ["The user token account for input token"],
          writable: true
        },
        {
          name: "output_token_account",
          docs: ["The user token account for output token"],
          writable: true
        },
        {
          name: "input_vault",
          docs: ["The vault token account for input token"],
          writable: true
        },
        {
          name: "output_vault",
          docs: ["The vault token account for output token"],
          writable: true
        },
        {
          name: "input_token_program",
          docs: ["SPL program for input token transfers"]
        },
        {
          name: "output_token_program",
          docs: ["SPL program for output token transfers"]
        },
        {
          name: "input_token_mint",
          docs: ["The mint of input token"]
        },
        {
          name: "output_token_mint",
          docs: ["The mint of output token"]
        },
        {
          name: "observation_state",
          docs: [
            "The program account for the most recent oracle observation"
          ],
          writable: true
        }
      ],
      args: [
        {
          name: "max_amount_in",
          type: "u64"
        },
        {
          name: "amount_out",
          type: "u64"
        }
      ]
    },
    {
      name: "update_amm_config",
      docs: [
        "Updates the owner of the amm config",
        "Must be called by the current owner or admin",
        "",
        "# Arguments",
        "",
        "* `ctx`- The context of accounts",
        "* `trade_fee_rate`- The new trade fee rate of amm config, be set when `param` is 0",
        "* `protocol_fee_rate`- The new protocol fee rate of amm config, be set when `param` is 1",
        "* `fund_fee_rate`- The new fund fee rate of amm config, be set when `param` is 2",
        "* `new_owner`- The config's new owner, be set when `param` is 3",
        "* `new_fund_owner`- The config's new fund owner, be set when `param` is 4",
        "* `param`- The value can be 0 | 1 | 2 | 3 | 4, otherwise will report a error",
        ""
      ],
      discriminator: [49, 60, 174, 136, 154, 28, 116, 200],
      accounts: [
        {
          name: "owner",
          docs: ["The amm config owner or admin"],
          signer: true,
          address: "GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ"
        },
        {
          name: "amm_config",
          docs: ["Amm config account to be changed"],
          writable: true
        }
      ],
      args: [
        {
          name: "param",
          type: "u8"
        },
        {
          name: "value",
          type: "u64"
        }
      ]
    },
    {
      name: "update_pool_status",
      docs: [
        "Update pool status for given value",
        "",
        "# Arguments",
        "",
        "* `ctx`- The context of accounts",
        "* `status` - The value of status",
        ""
      ],
      discriminator: [130, 87, 108, 6, 46, 224, 117, 123],
      accounts: [
        {
          name: "authority",
          signer: true,
          address: "GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ"
        },
        {
          name: "pool_state",
          writable: true
        }
      ],
      args: [
        {
          name: "status",
          type: "u8"
        }
      ]
    },
    {
      name: "withdraw",
      docs: [
        "Withdraw lp for token0 and token1",
        "",
        "# Arguments",
        "",
        "* `ctx`- The context of accounts",
        "* `lp_token_amount` - Amount of pool tokens to burn. User receives an output of token a and b based on the percentage of the pool tokens that are returned.",
        "* `minimum_token_0_amount` -  Minimum amount of token 0 to receive, prevents excessive slippage",
        "* `minimum_token_1_amount` -  Minimum amount of token 1 to receive, prevents excessive slippage",
        ""
      ],
      discriminator: [183, 18, 70, 156, 148, 109, 161, 34],
      accounts: [
        {
          name: "owner",
          docs: ["Pays to mint the position"],
          signer: true
        },
        {
          name: "authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  110,
                  100,
                  95,
                  108,
                  112,
                  95,
                  109,
                  105,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ]
          }
        },
        {
          name: "pool_state",
          docs: ["Pool state account"],
          writable: true
        },
        {
          name: "owner_lp_token",
          docs: ["Owner lp token account"],
          writable: true
        },
        {
          name: "token_0_account",
          docs: ["The token account for receive token_0,"],
          writable: true
        },
        {
          name: "token_1_account",
          docs: ["The token account for receive token_1"],
          writable: true
        },
        {
          name: "token_0_vault",
          docs: ["The address that holds pool tokens for token_0"],
          writable: true
        },
        {
          name: "token_1_vault",
          docs: ["The address that holds pool tokens for token_1"],
          writable: true
        },
        {
          name: "token_program",
          docs: ["token Program"],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "token_program_2022",
          docs: ["Token program 2022"],
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          name: "vault_0_mint",
          docs: ["The mint of token_0 vault"]
        },
        {
          name: "vault_1_mint",
          docs: ["The mint of token_1 vault"]
        },
        {
          name: "lp_mint",
          docs: ["Pool lp token mint"],
          writable: true
        },
        {
          name: "memo_program",
          docs: ["memo program"],
          address: "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr"
        }
      ],
      args: [
        {
          name: "lp_token_amount",
          type: "u64"
        },
        {
          name: "minimum_token_0_amount",
          type: "u64"
        },
        {
          name: "minimum_token_1_amount",
          type: "u64"
        }
      ]
    }
  ],
  accounts: [
    {
      name: "AmmConfig",
      discriminator: [218, 244, 33, 104, 203, 203, 43, 111]
    },
    {
      name: "ObservationState",
      discriminator: [122, 174, 197, 53, 129, 9, 165, 132]
    },
    {
      name: "PoolState",
      discriminator: [247, 237, 227, 245, 215, 195, 222, 70]
    }
  ],
  events: [
    {
      name: "LpChangeEvent",
      discriminator: [121, 163, 205, 201, 57, 218, 117, 60]
    },
    {
      name: "SwapEvent",
      discriminator: [64, 198, 205, 232, 38, 8, 113, 226]
    }
  ],
  errors: [
    {
      code: 6e3,
      name: "NotApproved",
      msg: "Not approved"
    },
    {
      code: 6001,
      name: "InvalidOwner",
      msg: "Input account owner is not the program address"
    },
    {
      code: 6002,
      name: "EmptySupply",
      msg: "Input token account empty"
    },
    {
      code: 6003,
      name: "InvalidInput",
      msg: "InvalidInput"
    },
    {
      code: 6004,
      name: "IncorrectLpMint",
      msg: "Address of the provided lp token mint is incorrect"
    },
    {
      code: 6005,
      name: "ExceededSlippage",
      msg: "Exceeds desired slippage limit"
    },
    {
      code: 6006,
      name: "ZeroTradingTokens",
      msg: "Given pool token amount results in zero trading tokens"
    },
    {
      code: 6007,
      name: "NotSupportMint",
      msg: "Not support token_2022 mint extension"
    },
    {
      code: 6008,
      name: "InvalidVault",
      msg: "invaild vault"
    },
    {
      code: 6009,
      name: "InitLpAmountTooLess",
      msg: "Init lp amount is too less(Because 100 amount lp will be locked)"
    },
    {
      code: 6010,
      name: "TransferFeeCalculateNotMatch",
      msg: "TransferFee calculate not match"
    }
  ],
  types: [
    {
      name: "AmmConfig",
      docs: ["Holds the current owner of the factory"],
      type: {
        kind: "struct",
        fields: [
          {
            name: "bump",
            docs: ["Bump to identify PDA"],
            type: "u8"
          },
          {
            name: "disable_create_pool",
            docs: ["Status to control if new pool can be create"],
            type: "bool"
          },
          {
            name: "index",
            docs: ["Config index"],
            type: "u16"
          },
          {
            name: "trade_fee_rate",
            docs: [
              "The trade fee, denominated in hundredths of a bip (10^-6)"
            ],
            type: "u64"
          },
          {
            name: "protocol_fee_rate",
            docs: ["The protocol fee"],
            type: "u64"
          },
          {
            name: "fund_fee_rate",
            docs: [
              "The fund fee, denominated in hundredths of a bip (10^-6)"
            ],
            type: "u64"
          },
          {
            name: "create_pool_fee",
            docs: ["Fee for create a new pool"],
            type: "u64"
          },
          {
            name: "protocol_owner",
            docs: ["Address of the protocol fee owner"],
            type: "pubkey"
          },
          {
            name: "fund_owner",
            docs: ["Address of the fund fee owner"],
            type: "pubkey"
          },
          {
            name: "padding",
            docs: ["padding"],
            type: {
              array: ["u64", 16]
            }
          }
        ]
      }
    },
    {
      name: "LpChangeEvent",
      docs: ["Emitted when deposit and withdraw"],
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool_id",
            type: "pubkey"
          },
          {
            name: "lp_amount_before",
            type: "u64"
          },
          {
            name: "token_0_vault_before",
            docs: ["pool vault sub trade fees"],
            type: "u64"
          },
          {
            name: "token_1_vault_before",
            docs: ["pool vault sub trade fees"],
            type: "u64"
          },
          {
            name: "token_0_amount",
            docs: ["calculate result without transfer fee"],
            type: "u64"
          },
          {
            name: "token_1_amount",
            docs: ["calculate result without transfer fee"],
            type: "u64"
          },
          {
            name: "token_0_transfer_fee",
            type: "u64"
          },
          {
            name: "token_1_transfer_fee",
            type: "u64"
          },
          {
            name: "change_type",
            type: "u8"
          }
        ]
      }
    },
    {
      name: "Observation",
      docs: ["The element of observations in ObservationState"],
      serialization: "bytemuckunsafe",
      repr: {
        kind: "c",
        packed: true
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "block_timestamp",
            docs: ["The block timestamp of the observation"],
            type: "u64"
          },
          {
            name: "cumulative_token_0_price_x32",
            docs: [
              "the cumulative of token0 price during the duration time, Q32.32, the remaining 64 bit for overflow"
            ],
            type: "u128"
          },
          {
            name: "cumulative_token_1_price_x32",
            docs: [
              "the cumulative of token1 price during the duration time, Q32.32, the remaining 64 bit for overflow"
            ],
            type: "u128"
          }
        ]
      }
    },
    {
      name: "ObservationState",
      serialization: "bytemuckunsafe",
      repr: {
        kind: "c",
        packed: true
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "initialized",
            docs: ["Whether the ObservationState is initialized"],
            type: "bool"
          },
          {
            name: "observation_index",
            docs: [
              "the most-recently updated index of the observations array"
            ],
            type: "u16"
          },
          {
            name: "pool_id",
            type: "pubkey"
          },
          {
            name: "observations",
            docs: ["observation array"],
            type: {
              array: [
                {
                  defined: {
                    name: "Observation"
                  }
                },
                100
              ]
            }
          },
          {
            name: "padding",
            docs: ["padding for feature update"],
            type: {
              array: ["u64", 4]
            }
          }
        ]
      }
    },
    {
      name: "PoolState",
      serialization: "bytemuckunsafe",
      repr: {
        kind: "c",
        packed: true
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "amm_config",
            docs: ["Which config the pool belongs"],
            type: "pubkey"
          },
          {
            name: "pool_creator",
            docs: ["pool creator"],
            type: "pubkey"
          },
          {
            name: "token_0_vault",
            docs: ["Token A"],
            type: "pubkey"
          },
          {
            name: "token_1_vault",
            docs: ["Token B"],
            type: "pubkey"
          },
          {
            name: "lp_mint",
            docs: [
              "Pool tokens are issued when A or B tokens are deposited.",
              "Pool tokens can be withdrawn back to the original A or B token."
            ],
            type: "pubkey"
          },
          {
            name: "token_0_mint",
            docs: ["Mint information for token A"],
            type: "pubkey"
          },
          {
            name: "token_1_mint",
            docs: ["Mint information for token B"],
            type: "pubkey"
          },
          {
            name: "token_0_program",
            docs: ["token_0 program"],
            type: "pubkey"
          },
          {
            name: "token_1_program",
            docs: ["token_1 program"],
            type: "pubkey"
          },
          {
            name: "observation_key",
            docs: ["observation account to store oracle data"],
            type: "pubkey"
          },
          {
            name: "auth_bump",
            type: "u8"
          },
          {
            name: "status",
            docs: [
              "Bitwise representation of the state of the pool",
              "bit0, 1: disable deposit(value is 1), 0: normal",
              "bit1, 1: disable withdraw(value is 2), 0: normal",
              "bit2, 1: disable swap(value is 4), 0: normal"
            ],
            type: "u8"
          },
          {
            name: "lp_mint_decimals",
            type: "u8"
          },
          {
            name: "mint_0_decimals",
            docs: ["mint0 and mint1 decimals"],
            type: "u8"
          },
          {
            name: "mint_1_decimals",
            type: "u8"
          },
          {
            name: "lp_supply",
            docs: ["True circulating supply without burns and lock ups"],
            type: "u64"
          },
          {
            name: "protocol_fees_token_0",
            docs: [
              "The amounts of token_0 and token_1 that are owed to the liquidity provider."
            ],
            type: "u64"
          },
          {
            name: "protocol_fees_token_1",
            type: "u64"
          },
          {
            name: "fund_fees_token_0",
            type: "u64"
          },
          {
            name: "fund_fees_token_1",
            type: "u64"
          },
          {
            name: "open_time",
            docs: ["The timestamp allowed for swap in the pool."],
            type: "u64"
          },
          {
            name: "recent_epoch",
            docs: ["recent epoch"],
            type: "u64"
          },
          {
            name: "padding",
            docs: ["padding for future updates"],
            type: {
              array: ["u64", 31]
            }
          }
        ]
      }
    },
    {
      name: "SwapEvent",
      docs: ["Emitted when swap"],
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool_id",
            type: "pubkey"
          },
          {
            name: "input_vault_before",
            docs: ["pool vault sub trade fees"],
            type: "u64"
          },
          {
            name: "output_vault_before",
            docs: ["pool vault sub trade fees"],
            type: "u64"
          },
          {
            name: "input_amount",
            docs: ["calculate result without transfer fee"],
            type: "u64"
          },
          {
            name: "output_amount",
            docs: ["calculate result without transfer fee"],
            type: "u64"
          },
          {
            name: "input_transfer_fee",
            type: "u64"
          },
          {
            name: "output_transfer_fee",
            type: "u64"
          },
          {
            name: "base_input",
            type: "bool"
          }
        ]
      }
    }
  ]
};

// idl/raydium-launchpad.json
var raydium_launchpad_default = {
  address: "LanMV9sAd7wArD4vJFi2qDdfnVhFxYSUg6eADduJ3uj",
  metadata: {
    name: "raydium_launchpad",
    version: "0.2.0",
    spec: "0.1.0",
    description: "Created with Anchor"
  },
  instructions: [
    {
      name: "buy_exact_in",
      docs: [
        "Use the given amount of quote tokens to purchase base tokens.",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        "* `amount_in` - Amount of quote token to purchase",
        "* `minimum_amount_out` - Minimum amount of base token to receive (slippage protection)",
        "* `share_fee_rate` - Fee rate for the share",
        ""
      ],
      discriminator: [
        250,
        234,
        13,
        123,
        213,
        156,
        19,
        236
      ],
      accounts: [
        {
          name: "payer",
          docs: [
            "The user performing the swap operation",
            "Must sign the transaction and pay for fees"
          ],
          signer: true
        },
        {
          name: "authority",
          docs: [
            "PDA that acts as the authority for pool vault operations",
            "Generated using AUTH_SEED"
          ],
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ]
          }
        },
        {
          name: "global_config",
          docs: [
            "Global configuration account containing protocol-wide settings",
            "Used to read protocol fee rates and curve type"
          ]
        },
        {
          name: "platform_config",
          docs: [
            "Platform configuration account containing platform-wide settings",
            "Used to read platform fee rate"
          ]
        },
        {
          name: "pool_state",
          docs: [
            "The pool state account where the swap will be performed",
            "Contains current pool parameters and balances"
          ],
          writable: true
        },
        {
          name: "user_base_token",
          docs: [
            "The user's token account for base tokens (tokens being bought)",
            "Will receive the output tokens after the swap"
          ],
          writable: true
        },
        {
          name: "user_quote_token",
          docs: [
            "The user's token account for quote tokens (tokens being sold)",
            "Will be debited for the input amount"
          ],
          writable: true
        },
        {
          name: "base_vault",
          docs: [
            "The pool's vault for base tokens",
            "Will be debited to send tokens to the user"
          ],
          writable: true
        },
        {
          name: "quote_vault",
          docs: [
            "The pool's vault for quote tokens",
            "Will receive the input tokens from the user"
          ],
          writable: true
        },
        {
          name: "base_token_mint",
          docs: [
            "The mint of the base token",
            "Used for transfer fee calculations if applicable"
          ]
        },
        {
          name: "quote_token_mint",
          docs: [
            "The mint of the quote token"
          ]
        },
        {
          name: "base_token_program",
          docs: [
            "SPL Token program for base token transfers"
          ]
        },
        {
          name: "quote_token_program",
          docs: [
            "SPL Token program for quote token transfers"
          ],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "amount_in",
          type: "u64"
        },
        {
          name: "minimum_amount_out",
          type: "u64"
        },
        {
          name: "share_fee_rate",
          type: "u64"
        }
      ]
    },
    {
      name: "buy_exact_out",
      docs: [
        "Use quote tokens to purchase the given amount of base tokens.",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        "* `amount_out` - Amount of base token to receive",
        "* `maximum_amount_in` - Maximum amount of quote token to purchase (slippage protection)",
        "* `share_fee_rate` - Fee rate for the share"
      ],
      discriminator: [
        24,
        211,
        116,
        40,
        105,
        3,
        153,
        56
      ],
      accounts: [
        {
          name: "payer",
          docs: [
            "The user performing the swap operation",
            "Must sign the transaction and pay for fees"
          ],
          signer: true
        },
        {
          name: "authority",
          docs: [
            "PDA that acts as the authority for pool vault operations",
            "Generated using AUTH_SEED"
          ],
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ]
          }
        },
        {
          name: "global_config",
          docs: [
            "Global configuration account containing protocol-wide settings",
            "Used to read protocol fee rates and curve type"
          ]
        },
        {
          name: "platform_config",
          docs: [
            "Platform configuration account containing platform-wide settings",
            "Used to read platform fee rate"
          ]
        },
        {
          name: "pool_state",
          docs: [
            "The pool state account where the swap will be performed",
            "Contains current pool parameters and balances"
          ],
          writable: true
        },
        {
          name: "user_base_token",
          docs: [
            "The user's token account for base tokens (tokens being bought)",
            "Will receive the output tokens after the swap"
          ],
          writable: true
        },
        {
          name: "user_quote_token",
          docs: [
            "The user's token account for quote tokens (tokens being sold)",
            "Will be debited for the input amount"
          ],
          writable: true
        },
        {
          name: "base_vault",
          docs: [
            "The pool's vault for base tokens",
            "Will be debited to send tokens to the user"
          ],
          writable: true
        },
        {
          name: "quote_vault",
          docs: [
            "The pool's vault for quote tokens",
            "Will receive the input tokens from the user"
          ],
          writable: true
        },
        {
          name: "base_token_mint",
          docs: [
            "The mint of the base token",
            "Used for transfer fee calculations if applicable"
          ]
        },
        {
          name: "quote_token_mint",
          docs: [
            "The mint of the quote token"
          ]
        },
        {
          name: "base_token_program",
          docs: [
            "SPL Token program for base token transfers"
          ]
        },
        {
          name: "quote_token_program",
          docs: [
            "SPL Token program for quote token transfers"
          ],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "amount_out",
          type: "u64"
        },
        {
          name: "maximum_amount_in",
          type: "u64"
        },
        {
          name: "share_fee_rate",
          type: "u64"
        }
      ]
    },
    {
      name: "claim_creator_fee",
      docs: [
        "Claim the fee from the exclusive creator fee vault.",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        ""
      ],
      discriminator: [
        26,
        97,
        138,
        203,
        132,
        171,
        141,
        252
      ],
      accounts: [
        {
          name: "creator",
          docs: [
            "The pool creator"
          ],
          writable: true,
          signer: true
        },
        {
          name: "fee_vault_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  99,
                  114,
                  101,
                  97,
                  116,
                  111,
                  114,
                  95,
                  102,
                  101,
                  101,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ]
          }
        },
        {
          name: "creator_fee_vault",
          docs: [
            "The creator fee vault"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "creator"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ]
          }
        },
        {
          name: "recipient_token_account",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "creator"
              },
              {
                kind: "account",
                path: "token_program"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "quote_mint",
          docs: [
            "The mint for the quote token"
          ]
        },
        {
          name: "token_program",
          docs: [
            "SPL Token program for the quote token"
          ],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "system_program",
          docs: [
            "Required for account creation"
          ],
          address: "11111111111111111111111111111111"
        },
        {
          name: "associated_token_program",
          docs: [
            "Required for associated token program"
          ],
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        }
      ],
      args: []
    },
    {
      name: "claim_platform_fee",
      docs: [
        "Claim platform fee",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        ""
      ],
      discriminator: [
        156,
        39,
        208,
        135,
        76,
        237,
        61,
        72
      ],
      accounts: [
        {
          name: "platform_fee_wallet",
          docs: [
            "Only the wallet stored in platform_config can collect platform fees"
          ],
          writable: true,
          signer: true
        },
        {
          name: "authority",
          docs: [
            "PDA that acts as the authority for pool vault and mint operations",
            "Generated using AUTH_SEED"
          ],
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ]
          }
        },
        {
          name: "pool_state",
          docs: [
            "Account that stores the pool's state and parameters",
            "PDA generated using POOL_SEED and both token mints"
          ],
          writable: true
        },
        {
          name: "platform_config",
          docs: [
            "The platform config account"
          ]
        },
        {
          name: "quote_vault",
          writable: true
        },
        {
          name: "recipient_token_account",
          docs: [
            "The address that receives the collected quote token fees"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "platform_fee_wallet"
              },
              {
                kind: "account",
                path: "token_program"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "quote_mint",
          docs: [
            "The mint of quote token vault"
          ]
        },
        {
          name: "token_program",
          docs: [
            "SPL program for input token transfers"
          ],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "system_program",
          docs: [
            "Required for account creation"
          ],
          address: "11111111111111111111111111111111"
        },
        {
          name: "associated_token_program",
          docs: [
            "Required for associated token program"
          ],
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        }
      ],
      args: []
    },
    {
      name: "claim_platform_fee_from_vault",
      docs: [
        "Claim the fee from the exclusive platform fee vault.",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        ""
      ],
      discriminator: [
        117,
        241,
        198,
        168,
        248,
        218,
        80,
        29
      ],
      accounts: [
        {
          name: "platform_fee_wallet",
          docs: [
            "Only the wallet stored in platform_config can collect platform fees"
          ],
          writable: true,
          signer: true
        },
        {
          name: "fee_vault_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  108,
                  97,
                  116,
                  102,
                  111,
                  114,
                  109,
                  95,
                  102,
                  101,
                  101,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ]
          }
        },
        {
          name: "platform_config",
          docs: [
            "The platform config account"
          ]
        },
        {
          name: "platform_fee_vault",
          docs: [
            "The platform fee vault"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "platform_config"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ]
          }
        },
        {
          name: "recipient_token_account",
          docs: [
            "The address that receives the collected quote token fees"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "platform_fee_wallet"
              },
              {
                kind: "account",
                path: "token_program"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "quote_mint",
          docs: [
            "The mint of quote token vault"
          ]
        },
        {
          name: "token_program",
          docs: [
            "SPL program for input token transfers"
          ],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "system_program",
          docs: [
            "Required for account creation"
          ],
          address: "11111111111111111111111111111111"
        },
        {
          name: "associated_token_program",
          docs: [
            "Required for associated token program"
          ],
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        }
      ],
      args: []
    },
    {
      name: "claim_vested_token",
      docs: [
        "Claim vested token",
        "# Arguments"
      ],
      discriminator: [
        49,
        33,
        104,
        30,
        189,
        157,
        79,
        35
      ],
      accounts: [
        {
          name: "beneficiary",
          docs: [
            "The beneficiary of the vesting account"
          ],
          writable: true,
          signer: true
        },
        {
          name: "authority",
          docs: [
            "PDA that acts as the authority for pool vault and mint operations",
            "Generated using AUTH_SEED"
          ],
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ]
          }
        },
        {
          name: "pool_state",
          docs: [
            "Account that stores the pool's state and parameters",
            "PDA generated using POOL_SEED and both token mints"
          ],
          writable: true
        },
        {
          name: "vesting_record",
          docs: [
            "The vesting record account"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  118,
                  101,
                  115,
                  116,
                  105,
                  110,
                  103
                ]
              },
              {
                kind: "account",
                path: "pool_state"
              },
              {
                kind: "account",
                path: "beneficiary"
              }
            ]
          }
        },
        {
          name: "base_vault",
          docs: [
            "The pool's vault for base tokens",
            "Will be debited to send tokens to the user"
          ],
          writable: true
        },
        {
          name: "user_base_token",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "beneficiary"
              },
              {
                kind: "account",
                path: "base_token_program"
              },
              {
                kind: "account",
                path: "base_token_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "base_token_mint",
          docs: [
            "The mint for the base token (token being sold)",
            "Created in this instruction with specified decimals"
          ]
        },
        {
          name: "base_token_program",
          docs: [
            "SPL Token program for the base token",
            "Must be the standard Token program"
          ],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "system_program",
          docs: [
            "Required for account creation"
          ],
          address: "11111111111111111111111111111111"
        },
        {
          name: "associated_token_program",
          docs: [
            "Required for associated token program"
          ],
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        }
      ],
      args: []
    },
    {
      name: "collect_fee",
      docs: [
        "Collects accumulated fees from the pool",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        ""
      ],
      discriminator: [
        60,
        173,
        247,
        103,
        4,
        93,
        130,
        48
      ],
      accounts: [
        {
          name: "owner",
          docs: [
            "Only protocol_fee_owner saved in global_config can collect protocol fee now"
          ],
          signer: true
        },
        {
          name: "authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ]
          }
        },
        {
          name: "pool_state",
          docs: [
            "Pool state stores accumulated protocol fee amount"
          ],
          writable: true
        },
        {
          name: "global_config",
          docs: [
            "Global config account stores owner"
          ]
        },
        {
          name: "quote_vault",
          docs: [
            "The address that holds pool tokens for quote token"
          ],
          writable: true
        },
        {
          name: "quote_mint",
          docs: [
            "The mint of quote token vault"
          ]
        },
        {
          name: "recipient_token_account",
          docs: [
            "The address that receives the collected quote token fees"
          ],
          writable: true
        },
        {
          name: "token_program",
          docs: [
            "SPL program for input token transfers"
          ],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        }
      ],
      args: []
    },
    {
      name: "collect_migrate_fee",
      docs: [
        "Collects  migrate fees from the pool",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        ""
      ],
      discriminator: [
        255,
        186,
        150,
        223,
        235,
        118,
        201,
        186
      ],
      accounts: [
        {
          name: "owner",
          docs: [
            "Only migrate_fee_owner saved in global_config can collect migrate fee now"
          ],
          signer: true
        },
        {
          name: "authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ]
          }
        },
        {
          name: "pool_state",
          docs: [
            "Pool state stores accumulated protocol fee amount"
          ],
          writable: true
        },
        {
          name: "global_config",
          docs: [
            "Global config account stores owner"
          ]
        },
        {
          name: "quote_vault",
          docs: [
            "The address that holds pool tokens for quote token"
          ],
          writable: true
        },
        {
          name: "quote_mint",
          docs: [
            "The mint of quote token vault"
          ]
        },
        {
          name: "recipient_token_account",
          docs: [
            "The address that receives the collected quote token fees"
          ],
          writable: true
        },
        {
          name: "token_program",
          docs: [
            "SPL program for input token transfers"
          ],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        }
      ],
      args: []
    },
    {
      name: "create_config",
      docs: [
        "Creates a new configuration",
        "# Arguments",
        "",
        "* `ctx` - The accounts needed by instruction",
        "* `curve_type` - The type of bonding curve (0: ConstantProduct)",
        "* `index` - The index of config, there may be multiple config with the same curve type.",
        "* `trade_fee_rate` - Trade fee rate, must be less than RATE_DENOMINATOR_VALUE",
        ""
      ],
      discriminator: [
        201,
        207,
        243,
        114,
        75,
        111,
        47,
        189
      ],
      accounts: [
        {
          name: "owner",
          docs: [
            "The protocol owner/admin account",
            "Must match the predefined admin address",
            "Has authority to create and modify protocol configurations"
          ],
          writable: true,
          signer: true,
          address: "GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ"
        },
        {
          name: "global_config",
          docs: [
            "Global configuration account that stores protocol-wide settings",
            "PDA generated using GLOBAL_CONFIG_SEED, quote token mint, and curve type",
            "Stores fee rates and protocol parameters"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  103,
                  108,
                  111,
                  98,
                  97,
                  108,
                  95,
                  99,
                  111,
                  110,
                  102,
                  105,
                  103
                ]
              },
              {
                kind: "account",
                path: "quote_token_mint"
              },
              {
                kind: "arg",
                path: "curve_type"
              },
              {
                kind: "arg",
                path: "index"
              }
            ]
          }
        },
        {
          name: "quote_token_mint",
          docs: [
            "The mint address of the quote token (token used for buying)",
            "This will be the standard token used for all pools with this config"
          ]
        },
        {
          name: "protocol_fee_owner",
          docs: [
            "Account that will receive protocol fees"
          ]
        },
        {
          name: "migrate_fee_owner",
          docs: [
            "Account that will receive migrate fees"
          ]
        },
        {
          name: "migrate_to_amm_wallet",
          docs: [
            "The control wallet address for migrating to amm"
          ]
        },
        {
          name: "migrate_to_cpswap_wallet",
          docs: [
            "The control wallet address for migrating to cpswap"
          ]
        },
        {
          name: "system_program",
          docs: [
            "Required for account creation"
          ],
          address: "11111111111111111111111111111111"
        }
      ],
      args: [
        {
          name: "curve_type",
          type: "u8"
        },
        {
          name: "index",
          type: "u16"
        },
        {
          name: "migrate_fee",
          type: "u64"
        },
        {
          name: "trade_fee_rate",
          type: "u64"
        }
      ]
    },
    {
      name: "create_platform_config",
      docs: [
        "Create platform config account",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        "# Fields",
        "* `fee_rate` - Fee rate of the platform",
        "* `name` - Name of the platform",
        "* `web` - Website of the platform",
        "* `img` - Image link of the platform",
        ""
      ],
      discriminator: [
        176,
        90,
        196,
        175,
        253,
        113,
        220,
        20
      ],
      accounts: [
        {
          name: "platform_admin",
          docs: [
            "The account paying for the initialization costs"
          ],
          writable: true,
          signer: true
        },
        {
          name: "platform_fee_wallet"
        },
        {
          name: "platform_nft_wallet"
        },
        {
          name: "platform_config",
          docs: [
            "The platform config account"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  108,
                  97,
                  116,
                  102,
                  111,
                  114,
                  109,
                  95,
                  99,
                  111,
                  110,
                  102,
                  105,
                  103
                ]
              },
              {
                kind: "account",
                path: "platform_admin"
              }
            ]
          }
        },
        {
          name: "cpswap_config"
        },
        {
          name: "system_program",
          docs: [
            "Required for account creation"
          ],
          address: "11111111111111111111111111111111"
        },
        {
          name: "transfer_fee_extension_authority"
        }
      ],
      args: [
        {
          name: "platform_params",
          type: {
            defined: {
              name: "PlatformParams"
            }
          }
        }
      ]
    },
    {
      name: "create_vesting_account",
      docs: [
        "Create vesting account",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        "* `share` - The share amount of base token to be vested",
        ""
      ],
      discriminator: [
        129,
        178,
        2,
        13,
        217,
        172,
        230,
        218
      ],
      accounts: [
        {
          name: "creator",
          docs: [
            "The account paying for the initialization costs",
            "This can be any account with sufficient SOL to cover the transaction"
          ],
          writable: true,
          signer: true
        },
        {
          name: "beneficiary",
          docs: [
            "The beneficiary is used to receive the allocated linear release of tokens.",
            "Once this account is set, it cannot be modified, so please ensure the validity of this account,",
            "otherwise, the unlocked tokens will not be claimable."
          ],
          writable: true
        },
        {
          name: "pool_state",
          docs: [
            "The pool state account"
          ],
          writable: true
        },
        {
          name: "vesting_record",
          docs: [
            "The vesting record account"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  118,
                  101,
                  115,
                  116,
                  105,
                  110,
                  103
                ]
              },
              {
                kind: "account",
                path: "pool_state"
              },
              {
                kind: "account",
                path: "beneficiary"
              }
            ]
          }
        },
        {
          name: "system_program",
          docs: [
            "Required for account creation"
          ],
          address: "11111111111111111111111111111111"
        }
      ],
      args: [
        {
          name: "share_amount",
          type: "u64"
        }
      ]
    },
    {
      name: "initialize",
      docs: [
        "Initializes a new trading pool",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts containing pool and token information",
        ""
      ],
      discriminator: [
        175,
        175,
        109,
        31,
        13,
        152,
        155,
        237
      ],
      accounts: [
        {
          name: "payer",
          docs: [
            "The account paying for the initialization costs",
            "This can be any account with sufficient SOL to cover the transaction"
          ],
          writable: true,
          signer: true
        },
        {
          name: "creator"
        },
        {
          name: "global_config",
          docs: [
            "Global configuration account containing protocol-wide settings",
            "Includes settings like quote token mint and fee parameters"
          ]
        },
        {
          name: "platform_config",
          docs: [
            "Platform configuration account containing platform info",
            "Includes settings like the fee_rate, name, web, img of the platform"
          ]
        },
        {
          name: "authority",
          docs: [
            "PDA that acts as the authority for pool vault and mint operations",
            "Generated using AUTH_SEED"
          ],
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ]
          }
        },
        {
          name: "pool_state",
          docs: [
            "Account that stores the pool's state and parameters",
            "PDA generated using POOL_SEED and both token mints"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108
                ]
              },
              {
                kind: "account",
                path: "base_mint"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ]
          }
        },
        {
          name: "base_mint",
          docs: [
            "The mint for the base token (token being sold)",
            "Created in this instruction with specified decimals"
          ],
          writable: true,
          signer: true
        },
        {
          name: "quote_mint",
          docs: [
            "The mint for the quote token (token used to buy)",
            "Must match the quote_mint specified in global config"
          ]
        },
        {
          name: "base_vault",
          docs: [
            "Token account that holds the pool's base tokens",
            "PDA generated using POOL_VAULT_SEED"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              {
                kind: "account",
                path: "pool_state"
              },
              {
                kind: "account",
                path: "base_mint"
              }
            ]
          }
        },
        {
          name: "quote_vault",
          docs: [
            "Token account that holds the pool's quote tokens",
            "PDA generated using POOL_VAULT_SEED"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              {
                kind: "account",
                path: "pool_state"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ]
          }
        },
        {
          name: "metadata_account",
          docs: [
            "Account to store the base token's metadata",
            "Created using Metaplex metadata program"
          ],
          writable: true
        },
        {
          name: "base_token_program",
          docs: [
            "SPL Token program for the base token",
            "Must be the standard Token program"
          ],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "quote_token_program",
          docs: [
            "SPL Token program for the quote token"
          ],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "metadata_program",
          docs: [
            "Metaplex Token Metadata program",
            "Used to create metadata for the base token"
          ],
          address: "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"
        },
        {
          name: "system_program",
          docs: [
            "Required for account creation"
          ],
          address: "11111111111111111111111111111111"
        },
        {
          name: "rent_program",
          docs: [
            "Required for rent exempt calculations"
          ],
          address: "SysvarRent111111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "base_mint_param",
          type: {
            defined: {
              name: "MintParams"
            }
          }
        },
        {
          name: "curve_param",
          type: {
            defined: {
              name: "CurveParams"
            }
          }
        },
        {
          name: "vesting_param",
          type: {
            defined: {
              name: "VestingParams"
            }
          }
        }
      ]
    },
    {
      name: "initialize_v2",
      docs: [
        "Initializes a new trading pool",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts containing pool and token information",
        ""
      ],
      discriminator: [
        67,
        153,
        175,
        39,
        218,
        16,
        38,
        32
      ],
      accounts: [
        {
          name: "payer",
          docs: [
            "The account paying for the initialization costs",
            "This can be any account with sufficient SOL to cover the transaction"
          ],
          writable: true,
          signer: true
        },
        {
          name: "creator"
        },
        {
          name: "global_config",
          docs: [
            "Global configuration account containing protocol-wide settings",
            "Includes settings like quote token mint and fee parameters"
          ]
        },
        {
          name: "platform_config",
          docs: [
            "Platform configuration account containing platform info",
            "Includes settings like the fee_rate, name, web, img of the platform"
          ]
        },
        {
          name: "authority",
          docs: [
            "PDA that acts as the authority for pool vault and mint operations",
            "Generated using AUTH_SEED"
          ],
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ]
          }
        },
        {
          name: "pool_state",
          docs: [
            "Account that stores the pool's state and parameters",
            "PDA generated using POOL_SEED and both token mints"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108
                ]
              },
              {
                kind: "account",
                path: "base_mint"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ]
          }
        },
        {
          name: "base_mint",
          docs: [
            "The mint for the base token (token being sold)",
            "Created in this instruction with specified decimals"
          ],
          writable: true,
          signer: true
        },
        {
          name: "quote_mint",
          docs: [
            "The mint for the quote token (token used to buy)",
            "Must match the quote_mint specified in global config"
          ]
        },
        {
          name: "base_vault",
          docs: [
            "Token account that holds the pool's base tokens",
            "PDA generated using POOL_VAULT_SEED"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              {
                kind: "account",
                path: "pool_state"
              },
              {
                kind: "account",
                path: "base_mint"
              }
            ]
          }
        },
        {
          name: "quote_vault",
          docs: [
            "Token account that holds the pool's quote tokens",
            "PDA generated using POOL_VAULT_SEED"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              {
                kind: "account",
                path: "pool_state"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ]
          }
        },
        {
          name: "metadata_account",
          docs: [
            "Account to store the base token's metadata",
            "Created using Metaplex metadata program"
          ],
          writable: true
        },
        {
          name: "base_token_program",
          docs: [
            "SPL Token program for the base token",
            "Must be the standard Token program"
          ],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "quote_token_program",
          docs: [
            "SPL Token program for the quote token"
          ],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "metadata_program",
          docs: [
            "Metaplex Token Metadata program",
            "Used to create metadata for the base token"
          ],
          address: "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"
        },
        {
          name: "system_program",
          docs: [
            "Required for account creation"
          ],
          address: "11111111111111111111111111111111"
        },
        {
          name: "rent_program",
          docs: [
            "Required for rent exempt calculations"
          ],
          address: "SysvarRent111111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "base_mint_param",
          type: {
            defined: {
              name: "MintParams"
            }
          }
        },
        {
          name: "curve_param",
          type: {
            defined: {
              name: "CurveParams"
            }
          }
        },
        {
          name: "vesting_param",
          type: {
            defined: {
              name: "VestingParams"
            }
          }
        },
        {
          name: "amm_fee_on",
          type: {
            defined: {
              name: "AmmCreatorFeeOn"
            }
          }
        }
      ]
    },
    {
      name: "initialize_with_token_2022",
      docs: [
        "Initializes a new trading pool with base token belongs to spl-token-2022,",
        "pool created by this instruction must be migrated to cpswap after fundraising ends, i.e., curve_param.migrate_type = 1",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts containing pool and token information",
        ""
      ],
      discriminator: [
        37,
        190,
        126,
        222,
        44,
        154,
        171,
        17
      ],
      accounts: [
        {
          name: "payer",
          docs: [
            "The account paying for the initialization costs",
            "This can be any account with sufficient SOL to cover the transaction"
          ],
          writable: true,
          signer: true
        },
        {
          name: "creator"
        },
        {
          name: "global_config",
          docs: [
            "Global configuration account containing protocol-wide settings",
            "Includes settings like quote token mint and fee parameters"
          ]
        },
        {
          name: "platform_config",
          docs: [
            "Platform configuration account containing platform info",
            "Includes settings like the fee_rate, name, web, img of the platform"
          ]
        },
        {
          name: "authority",
          docs: [
            "PDA that acts as the authority for pool vault and mint operations",
            "Generated using AUTH_SEED"
          ],
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ]
          }
        },
        {
          name: "pool_state",
          docs: [
            "Account that stores the pool's state and parameters",
            "PDA generated using POOL_SEED and both token mints"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108
                ]
              },
              {
                kind: "account",
                path: "base_mint"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ]
          }
        },
        {
          name: "base_mint",
          docs: [
            "The mint for the base token (token being sold)",
            "Created in this instruction with specified decimals"
          ],
          writable: true,
          signer: true
        },
        {
          name: "quote_mint",
          docs: [
            "The mint for the quote token (token used to buy)",
            "Must match the quote_mint specified in global config"
          ]
        },
        {
          name: "base_vault",
          docs: [
            "Token account that holds the pool's base tokens",
            "PDA generated using POOL_VAULT_SEED"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              {
                kind: "account",
                path: "pool_state"
              },
              {
                kind: "account",
                path: "base_mint"
              }
            ]
          }
        },
        {
          name: "quote_vault",
          docs: [
            "Token account that holds the pool's quote tokens",
            "PDA generated using POOL_VAULT_SEED"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              {
                kind: "account",
                path: "pool_state"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ]
          }
        },
        {
          name: "base_token_program",
          docs: [
            "SPL Token program for the base token"
          ],
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          name: "quote_token_program",
          docs: [
            "SPL Token program for the quote token"
          ],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "system_program",
          docs: [
            "Required for account creation"
          ],
          address: "11111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "base_mint_param",
          type: {
            defined: {
              name: "MintParams"
            }
          }
        },
        {
          name: "curve_param",
          type: {
            defined: {
              name: "CurveParams"
            }
          }
        },
        {
          name: "vesting_param",
          type: {
            defined: {
              name: "VestingParams"
            }
          }
        },
        {
          name: "amm_fee_on",
          type: {
            defined: {
              name: "AmmCreatorFeeOn"
            }
          }
        },
        {
          name: "transfer_fee_extension_param",
          type: {
            option: {
              defined: {
                name: "TransferFeeExtensionParams"
              }
            }
          }
        }
      ]
    },
    {
      name: "migrate_to_amm",
      docs: [
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        ""
      ],
      discriminator: [
        207,
        82,
        192,
        145,
        254,
        207,
        145,
        223
      ],
      accounts: [
        {
          name: "payer",
          docs: [
            "Only migrate_to_amm_wallet can migrate to cpswap pool",
            "This signer must match the migrate_to_amm_wallet saved in global_config"
          ],
          writable: true,
          signer: true
        },
        {
          name: "base_mint",
          docs: [
            "The mint for the base token (token being sold)"
          ]
        },
        {
          name: "quote_mint",
          docs: [
            "The mint for the quote token (token used to buy)"
          ]
        },
        {
          name: "openbook_program",
          address: "srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX"
        },
        {
          name: "market",
          docs: [
            "Account created and asigned to openbook_program but not been initialized"
          ],
          writable: true
        },
        {
          name: "request_queue",
          docs: [
            "Account created and asigned to openbook_program but not been initialized"
          ],
          writable: true
        },
        {
          name: "event_queue",
          docs: [
            "Account created and asigned to openbook_program but not been initialized"
          ],
          writable: true
        },
        {
          name: "bids",
          docs: [
            "Account created and asigned to openbook_program but not been initialized"
          ],
          writable: true
        },
        {
          name: "asks",
          docs: [
            "Account created and asigned to openbook_program but not been initialized"
          ],
          writable: true
        },
        {
          name: "market_vault_signer"
        },
        {
          name: "market_base_vault",
          docs: [
            "Token account that holds the market's base tokens"
          ],
          writable: true
        },
        {
          name: "market_quote_vault",
          docs: [
            "Token account that holds the market's quote tokens"
          ],
          writable: true
        },
        {
          name: "amm_program",
          address: "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8"
        },
        {
          name: "amm_pool",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "amm_program"
              },
              {
                kind: "account",
                path: "market"
              },
              {
                kind: "const",
                value: [
                  97,
                  109,
                  109,
                  95,
                  97,
                  115,
                  115,
                  111,
                  99,
                  105,
                  97,
                  116,
                  101,
                  100,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ],
            program: {
              kind: "account",
              path: "amm_program"
            }
          }
        },
        {
          name: "amm_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  97,
                  109,
                  109,
                  32,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ],
            program: {
              kind: "account",
              path: "amm_program"
            }
          }
        },
        {
          name: "amm_open_orders",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "amm_program"
              },
              {
                kind: "account",
                path: "market"
              },
              {
                kind: "const",
                value: [
                  111,
                  112,
                  101,
                  110,
                  95,
                  111,
                  114,
                  100,
                  101,
                  114,
                  95,
                  97,
                  115,
                  115,
                  111,
                  99,
                  105,
                  97,
                  116,
                  101,
                  100,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ],
            program: {
              kind: "account",
              path: "amm_program"
            }
          }
        },
        {
          name: "amm_lp_mint",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "amm_program"
              },
              {
                kind: "account",
                path: "market"
              },
              {
                kind: "const",
                value: [
                  108,
                  112,
                  95,
                  109,
                  105,
                  110,
                  116,
                  95,
                  97,
                  115,
                  115,
                  111,
                  99,
                  105,
                  97,
                  116,
                  101,
                  100,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ],
            program: {
              kind: "account",
              path: "amm_program"
            }
          }
        },
        {
          name: "amm_base_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "amm_program"
              },
              {
                kind: "account",
                path: "market"
              },
              {
                kind: "const",
                value: [
                  99,
                  111,
                  105,
                  110,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  115,
                  115,
                  111,
                  99,
                  105,
                  97,
                  116,
                  101,
                  100,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ],
            program: {
              kind: "account",
              path: "amm_program"
            }
          }
        },
        {
          name: "amm_quote_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "amm_program"
              },
              {
                kind: "account",
                path: "market"
              },
              {
                kind: "const",
                value: [
                  112,
                  99,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  115,
                  115,
                  111,
                  99,
                  105,
                  97,
                  116,
                  101,
                  100,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ],
            program: {
              kind: "account",
              path: "amm_program"
            }
          }
        },
        {
          name: "amm_target_orders",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "amm_program"
              },
              {
                kind: "account",
                path: "market"
              },
              {
                kind: "const",
                value: [
                  116,
                  97,
                  114,
                  103,
                  101,
                  116,
                  95,
                  97,
                  115,
                  115,
                  111,
                  99,
                  105,
                  97,
                  116,
                  101,
                  100,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ],
            program: {
              kind: "account",
              path: "amm_program"
            }
          }
        },
        {
          name: "amm_config",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  97,
                  109,
                  109,
                  95,
                  99,
                  111,
                  110,
                  102,
                  105,
                  103,
                  95,
                  97,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ],
            program: {
              kind: "account",
              path: "amm_program"
            }
          }
        },
        {
          name: "amm_create_fee_destination",
          writable: true
        },
        {
          name: "authority",
          docs: [
            "PDA that acts as the authority for pool vault operations",
            "Generated using AUTH_SEED"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ]
          }
        },
        {
          name: "pool_state",
          docs: [
            "Account that stores the pool's state and parameters",
            "PDA generated using POOL_SEED and both token mints"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108
                ]
              },
              {
                kind: "account",
                path: "base_mint"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ]
          }
        },
        {
          name: "global_config",
          docs: [
            "Global config account stores owner"
          ]
        },
        {
          name: "base_vault",
          docs: [
            "The pool's vault for base tokens",
            "Will be fully drained during migration"
          ],
          writable: true
        },
        {
          name: "quote_vault",
          docs: [
            "The pool's vault for quote tokens",
            "Will be fully drained during migration"
          ],
          writable: true
        },
        {
          name: "pool_lp_token",
          writable: true
        },
        {
          name: "spl_token_program",
          docs: [
            "SPL Token program for the base token",
            "Must be the standard Token program"
          ],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "associated_token_program",
          docs: [
            "Program to create an ATA for receiving fee NFT"
          ],
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "system_program",
          docs: [
            "Required for account creation"
          ],
          address: "11111111111111111111111111111111"
        },
        {
          name: "rent_program",
          docs: [
            "Required for rent exempt calculations"
          ],
          address: "SysvarRent111111111111111111111111111111111"
        }
      ],
      args: [
        {
          name: "base_lot_size",
          type: "u64"
        },
        {
          name: "quote_lot_size",
          type: "u64"
        },
        {
          name: "market_vault_signer_nonce",
          type: "u8"
        }
      ]
    },
    {
      name: "migrate_to_cpswap",
      docs: [
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        ""
      ],
      discriminator: [
        136,
        92,
        200,
        103,
        28,
        218,
        144,
        140
      ],
      accounts: [
        {
          name: "payer",
          docs: [
            "Only migrate_to_cpswap_wallet can migrate to cpswap pool",
            "This signer must match the migrate_to_cpswap_wallet saved in global_config"
          ],
          writable: true,
          signer: true
        },
        {
          name: "base_mint",
          docs: [
            "The mint for the base token (token being sold)"
          ],
          writable: true
        },
        {
          name: "quote_mint",
          docs: [
            "The mint for the quote token (token used to buy)"
          ]
        },
        {
          name: "platform_config",
          docs: [
            "Platform configuration account containing platform-wide settings",
            "Used to read platform fee rate"
          ]
        },
        {
          name: "cpswap_program",
          address: "CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C"
        },
        {
          name: "cpswap_pool",
          docs: [
            "PDA account:",
            "seeds = [",
            'b"pool",',
            "cpswap_config.key().as_ref(),",
            "token_0_mint.key().as_ref(),",
            "token_1_mint.key().as_ref(),",
            "],",
            "seeds::program = cpswap_program,",
            "",
            "Or random account: must be signed by cli"
          ],
          writable: true
        },
        {
          name: "cpswap_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  110,
                  100,
                  95,
                  108,
                  112,
                  95,
                  109,
                  105,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ],
            program: {
              kind: "account",
              path: "cpswap_program"
            }
          }
        },
        {
          name: "cpswap_lp_mint",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  108,
                  112,
                  95,
                  109,
                  105,
                  110,
                  116
                ]
              },
              {
                kind: "account",
                path: "cpswap_pool"
              }
            ],
            program: {
              kind: "account",
              path: "cpswap_program"
            }
          }
        },
        {
          name: "cpswap_base_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              {
                kind: "account",
                path: "cpswap_pool"
              },
              {
                kind: "account",
                path: "base_mint"
              }
            ],
            program: {
              kind: "account",
              path: "cpswap_program"
            }
          }
        },
        {
          name: "cpswap_quote_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              {
                kind: "account",
                path: "cpswap_pool"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ],
            program: {
              kind: "account",
              path: "cpswap_program"
            }
          }
        },
        {
          name: "cpswap_config"
        },
        {
          name: "cpswap_create_pool_fee",
          writable: true
        },
        {
          name: "cpswap_observation",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  111,
                  98,
                  115,
                  101,
                  114,
                  118,
                  97,
                  116,
                  105,
                  111,
                  110
                ]
              },
              {
                kind: "account",
                path: "cpswap_pool"
              }
            ],
            program: {
              kind: "account",
              path: "cpswap_program"
            }
          }
        },
        {
          name: "lock_program",
          address: "LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE"
        },
        {
          name: "lock_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  108,
                  111,
                  99,
                  107,
                  95,
                  99,
                  112,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ],
            program: {
              kind: "account",
              path: "lock_program"
            }
          }
        },
        {
          name: "lock_lp_vault",
          writable: true
        },
        {
          name: "authority",
          docs: [
            "PDA that acts as the authority for pool vault operations",
            "Generated using AUTH_SEED"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ]
          }
        },
        {
          name: "pool_state",
          docs: [
            "Account that stores the pool's state and parameters",
            "PDA generated using POOL_SEED and both token mints"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108
                ]
              },
              {
                kind: "account",
                path: "base_mint"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ]
          }
        },
        {
          name: "global_config",
          docs: [
            "Global config account stores owner"
          ]
        },
        {
          name: "base_vault",
          docs: [
            "The pool's vault for base tokens",
            "Will be fully drained during migration"
          ],
          writable: true
        },
        {
          name: "quote_vault",
          docs: [
            "The pool's vault for quote tokens",
            "Will be fully drained during migration"
          ],
          writable: true
        },
        {
          name: "pool_lp_token",
          writable: true
        },
        {
          name: "base_token_program",
          docs: [
            "SPL Token program for the base token",
            "Must be the standard Token program"
          ]
        },
        {
          name: "quote_token_program",
          docs: [
            "SPL Token program for the quote token"
          ],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "associated_token_program",
          docs: [
            "Program to create an ATA for receiving fee NFT"
          ],
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "system_program",
          docs: [
            "Required for account creation"
          ],
          address: "11111111111111111111111111111111"
        },
        {
          name: "rent_program",
          docs: [
            "Required for rent exempt calculations"
          ],
          address: "SysvarRent111111111111111111111111111111111"
        },
        {
          name: "metadata_program",
          docs: [
            "Program to create NFT metadata accunt"
          ],
          address: "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"
        }
      ],
      args: []
    },
    {
      name: "remove_platform_curve_param",
      docs: [
        "Remove platform launch param",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        "* `index` - The index of the curve param to remove",
        ""
      ],
      discriminator: [
        27,
        30,
        62,
        169,
        93,
        224,
        24,
        145
      ],
      accounts: [
        {
          name: "platform_admin",
          docs: [
            "The account paying for the initialization costs"
          ],
          signer: true
        },
        {
          name: "platform_config",
          docs: [
            "Platform config account to be changed"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  108,
                  97,
                  116,
                  102,
                  111,
                  114,
                  109,
                  95,
                  99,
                  111,
                  110,
                  102,
                  105,
                  103
                ]
              },
              {
                kind: "account",
                path: "platform_admin"
              }
            ]
          }
        }
      ],
      args: [
        {
          name: "index",
          type: "u8"
        }
      ]
    },
    {
      name: "sell_exact_in",
      docs: [
        "Use the given amount of base tokens to sell for quote tokens.",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        "* `amount_in` - Amount of base token to sell",
        "* `minimum_amount_out` - Minimum amount of quote token to receive (slippage protection)",
        "* `share_fee_rate` - Fee rate for the share",
        ""
      ],
      discriminator: [
        149,
        39,
        222,
        155,
        211,
        124,
        152,
        26
      ],
      accounts: [
        {
          name: "payer",
          docs: [
            "The user performing the swap operation",
            "Must sign the transaction and pay for fees"
          ],
          signer: true
        },
        {
          name: "authority",
          docs: [
            "PDA that acts as the authority for pool vault operations",
            "Generated using AUTH_SEED"
          ],
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ]
          }
        },
        {
          name: "global_config",
          docs: [
            "Global configuration account containing protocol-wide settings",
            "Used to read protocol fee rates and curve type"
          ]
        },
        {
          name: "platform_config",
          docs: [
            "Platform configuration account containing platform-wide settings",
            "Used to read platform fee rate"
          ]
        },
        {
          name: "pool_state",
          docs: [
            "The pool state account where the swap will be performed",
            "Contains current pool parameters and balances"
          ],
          writable: true
        },
        {
          name: "user_base_token",
          docs: [
            "The user's token account for base tokens (tokens being bought)",
            "Will receive the output tokens after the swap"
          ],
          writable: true
        },
        {
          name: "user_quote_token",
          docs: [
            "The user's token account for quote tokens (tokens being sold)",
            "Will be debited for the input amount"
          ],
          writable: true
        },
        {
          name: "base_vault",
          docs: [
            "The pool's vault for base tokens",
            "Will be debited to send tokens to the user"
          ],
          writable: true
        },
        {
          name: "quote_vault",
          docs: [
            "The pool's vault for quote tokens",
            "Will receive the input tokens from the user"
          ],
          writable: true
        },
        {
          name: "base_token_mint",
          docs: [
            "The mint of the base token",
            "Used for transfer fee calculations if applicable"
          ]
        },
        {
          name: "quote_token_mint",
          docs: [
            "The mint of the quote token"
          ]
        },
        {
          name: "base_token_program",
          docs: [
            "SPL Token program for base token transfers"
          ]
        },
        {
          name: "quote_token_program",
          docs: [
            "SPL Token program for quote token transfers"
          ],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "amount_in",
          type: "u64"
        },
        {
          name: "minimum_amount_out",
          type: "u64"
        },
        {
          name: "share_fee_rate",
          type: "u64"
        }
      ]
    },
    {
      name: "sell_exact_out",
      docs: [
        "Sell base tokens for the given amount of quote tokens.",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        "* `amount_out` - Amount of quote token to receive",
        "* `maximum_amount_in` - Maximum amount of base token to purchase (slippage protection)",
        "* `share_fee_rate` - Fee rate for the share",
        ""
      ],
      discriminator: [
        95,
        200,
        71,
        34,
        8,
        9,
        11,
        166
      ],
      accounts: [
        {
          name: "payer",
          docs: [
            "The user performing the swap operation",
            "Must sign the transaction and pay for fees"
          ],
          signer: true
        },
        {
          name: "authority",
          docs: [
            "PDA that acts as the authority for pool vault operations",
            "Generated using AUTH_SEED"
          ],
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ]
          }
        },
        {
          name: "global_config",
          docs: [
            "Global configuration account containing protocol-wide settings",
            "Used to read protocol fee rates and curve type"
          ]
        },
        {
          name: "platform_config",
          docs: [
            "Platform configuration account containing platform-wide settings",
            "Used to read platform fee rate"
          ]
        },
        {
          name: "pool_state",
          docs: [
            "The pool state account where the swap will be performed",
            "Contains current pool parameters and balances"
          ],
          writable: true
        },
        {
          name: "user_base_token",
          docs: [
            "The user's token account for base tokens (tokens being bought)",
            "Will receive the output tokens after the swap"
          ],
          writable: true
        },
        {
          name: "user_quote_token",
          docs: [
            "The user's token account for quote tokens (tokens being sold)",
            "Will be debited for the input amount"
          ],
          writable: true
        },
        {
          name: "base_vault",
          docs: [
            "The pool's vault for base tokens",
            "Will be debited to send tokens to the user"
          ],
          writable: true
        },
        {
          name: "quote_vault",
          docs: [
            "The pool's vault for quote tokens",
            "Will receive the input tokens from the user"
          ],
          writable: true
        },
        {
          name: "base_token_mint",
          docs: [
            "The mint of the base token",
            "Used for transfer fee calculations if applicable"
          ]
        },
        {
          name: "quote_token_mint",
          docs: [
            "The mint of the quote token"
          ]
        },
        {
          name: "base_token_program",
          docs: [
            "SPL Token program for base token transfers"
          ]
        },
        {
          name: "quote_token_program",
          docs: [
            "SPL Token program for quote token transfers"
          ],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "amount_out",
          type: "u64"
        },
        {
          name: "maximum_amount_in",
          type: "u64"
        },
        {
          name: "share_fee_rate",
          type: "u64"
        }
      ]
    },
    {
      name: "update_config",
      docs: [
        "Updates configuration parameters",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        "* `param` - Parameter to update:",
        "- 0: Update trade_fee_rate",
        "- 1: Update fee owner",
        "* `value` - New value for the selected parameter",
        ""
      ],
      discriminator: [
        29,
        158,
        252,
        191,
        10,
        83,
        219,
        99
      ],
      accounts: [
        {
          name: "owner",
          docs: [
            "The global config owner or admin"
          ],
          signer: true,
          address: "GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ"
        },
        {
          name: "global_config",
          docs: [
            "Global config account to be changed"
          ],
          writable: true
        }
      ],
      args: [
        {
          name: "param",
          type: "u8"
        },
        {
          name: "value",
          type: "u64"
        }
      ]
    },
    {
      name: "update_platform_config",
      docs: [
        "Update platform config",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        "* `param` - Parameter to update",
        ""
      ],
      discriminator: [
        195,
        60,
        76,
        129,
        146,
        45,
        67,
        143
      ],
      accounts: [
        {
          name: "platform_admin",
          docs: [
            "The account paying for the initialization costs"
          ],
          signer: true
        },
        {
          name: "platform_config",
          docs: [
            "Platform config account to be changed"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  108,
                  97,
                  116,
                  102,
                  111,
                  114,
                  109,
                  95,
                  99,
                  111,
                  110,
                  102,
                  105,
                  103
                ]
              },
              {
                kind: "account",
                path: "platform_admin"
              }
            ]
          }
        }
      ],
      args: [
        {
          name: "param",
          type: {
            defined: {
              name: "PlatformConfigParam"
            }
          }
        }
      ]
    },
    {
      name: "update_platform_curve_param",
      docs: [
        "Update platform launch param",
        "# Arguments",
        "",
        "* `ctx` - The context of accounts",
        "* `bonding_curve_param` - Parameter to update",
        ""
      ],
      discriminator: [
        138,
        144,
        138,
        250,
        220,
        128,
        4,
        57
      ],
      accounts: [
        {
          name: "platform_admin",
          docs: [
            "The account paying for the initialization costs"
          ],
          writable: true,
          signer: true
        },
        {
          name: "platform_config",
          docs: [
            "Platform config account to be changed"
          ],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  108,
                  97,
                  116,
                  102,
                  111,
                  114,
                  109,
                  95,
                  99,
                  111,
                  110,
                  102,
                  105,
                  103
                ]
              },
              {
                kind: "account",
                path: "platform_admin"
              }
            ]
          }
        },
        {
          name: "global_config",
          docs: [
            "Global configuration account containing protocol-wide settings",
            "Includes settings like quote token mint and fee parameters"
          ]
        },
        {
          name: "system_program",
          docs: [
            "System program for lamport transfers"
          ],
          address: "11111111111111111111111111111111"
        }
      ],
      args: [
        {
          name: "index",
          type: "u8"
        },
        {
          name: "bonding_curve_param",
          type: {
            defined: {
              name: "BondingCurveParam"
            }
          }
        }
      ]
    }
  ],
  accounts: [
    {
      name: "GlobalConfig",
      discriminator: [
        149,
        8,
        156,
        202,
        160,
        252,
        176,
        217
      ]
    },
    {
      name: "PlatformConfig",
      discriminator: [
        160,
        78,
        128,
        0,
        248,
        83,
        230,
        160
      ]
    },
    {
      name: "PoolState",
      discriminator: [
        247,
        237,
        227,
        245,
        215,
        195,
        222,
        70
      ]
    },
    {
      name: "VestingRecord",
      discriminator: [
        106,
        243,
        221,
        205,
        230,
        126,
        85,
        83
      ]
    }
  ],
  events: [
    {
      name: "ClaimVestedEvent",
      discriminator: [
        21,
        194,
        114,
        87,
        120,
        211,
        226,
        32
      ]
    },
    {
      name: "CreateVestingEvent",
      discriminator: [
        150,
        152,
        11,
        179,
        52,
        210,
        191,
        125
      ]
    },
    {
      name: "PoolCreateEvent",
      discriminator: [
        151,
        215,
        226,
        9,
        118,
        161,
        115,
        174
      ]
    },
    {
      name: "TradeEvent",
      discriminator: [
        189,
        219,
        127,
        211,
        78,
        230,
        97,
        238
      ]
    }
  ],
  errors: [
    {
      code: 6e3,
      name: "NotApproved",
      msg: "Not approved"
    },
    {
      code: 6001,
      name: "InvalidOwner",
      msg: "Input account owner is not the program address"
    },
    {
      code: 6002,
      name: "InvalidInput",
      msg: "InvalidInput"
    },
    {
      code: 6003,
      name: "InputNotMatchCurveConfig",
      msg: "The input params are not match with curve type in config"
    },
    {
      code: 6004,
      name: "ExceededSlippage",
      msg: "Exceeds desired slippage limit"
    },
    {
      code: 6005,
      name: "PoolFunding",
      msg: "Pool funding"
    },
    {
      code: 6006,
      name: "PoolMigrated",
      msg: "Pool migrated"
    },
    {
      code: 6007,
      name: "MigrateTypeNotMatch",
      msg: "Migrate type not match"
    },
    {
      code: 6008,
      name: "MathOverflow",
      msg: "Math overflow"
    },
    {
      code: 6009,
      name: "NoAssetsToCollect",
      msg: "No assets to collect"
    },
    {
      code: 6010,
      name: "VestingRatioTooHigh",
      msg: "Vesting ratio too high"
    },
    {
      code: 6011,
      name: "VestingSettingEnded",
      msg: "Vesting setting ended"
    },
    {
      code: 6012,
      name: "VestingNotStarted",
      msg: "Vesting not started"
    },
    {
      code: 6013,
      name: "NoVestingSchedule",
      msg: "No vesting schedule"
    },
    {
      code: 6014,
      name: "InvalidPlatformInfo",
      msg: "The platform info input is invalid"
    },
    {
      code: 6015,
      name: "PoolNotMigrated",
      msg: "Pool not migrated"
    },
    {
      code: 6016,
      name: "InvalidCpSwapConfig",
      msg: "The input cp swap config account is invalid"
    },
    {
      code: 6017,
      name: "NoSupportExtension",
      msg: "No support extension"
    },
    {
      code: 6018,
      name: "NotEnoughRemainingAccounts",
      msg: "Not enough remaining accounts"
    },
    {
      code: 6019,
      name: "TransferFeeCalculateNotMatch",
      msg: "TransferFee calculate not match"
    },
    {
      code: 6020,
      name: "CurveParamIsNotExist",
      msg: "Curve param is not exist"
    }
  ],
  types: [
    {
      name: "AmmCreatorFeeOn",
      docs: [
        "migrate to cpmm, creator fee on quote token or both token"
      ],
      type: {
        kind: "enum",
        variants: [
          {
            name: "QuoteToken"
          },
          {
            name: "BothToken"
          }
        ]
      }
    },
    {
      name: "BondingCurveParam",
      type: {
        kind: "struct",
        fields: [
          {
            name: "migrate_type",
            docs: [
              "Migrate to AMM or CpSwap, 0: amm\uFF0C 1: cpswap\uFF0C",
              "Neither 0 nor 1: invalid"
            ],
            type: "u8"
          },
          {
            name: "migrate_cpmm_fee_on",
            docs: [
              "The migrate fee on, 0 means fee on the quote token, 1 means fee on both token",
              "Neither 0 nor 1: invalid"
            ],
            type: "u8"
          },
          {
            name: "supply",
            docs: [
              "The supply of the token,",
              "0: invalid"
            ],
            type: "u64"
          },
          {
            name: "total_base_sell",
            docs: [
              "The total base sell of the token",
              "0: invalid"
            ],
            type: "u64"
          },
          {
            name: "total_quote_fund_raising",
            docs: [
              "The total quote fund raising of the token",
              "0: invalid"
            ],
            type: "u64"
          },
          {
            name: "total_locked_amount",
            docs: [
              "total amount of tokens to be unlocked",
              "u64::MAX: invalid"
            ],
            type: "u64"
          },
          {
            name: "cliff_period",
            docs: [
              "Waiting time in seconds before unlocking after fundraising ends",
              "u64::MAX: invalid"
            ],
            type: "u64"
          },
          {
            name: "unlock_period",
            docs: [
              "Unlocking period in seconds",
              "u64::MAX: invalid"
            ],
            type: "u64"
          }
        ]
      }
    },
    {
      name: "ClaimVestedEvent",
      docs: [
        "Emitted when vesting token claimed by beneficiary"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool_state",
            type: "pubkey"
          },
          {
            name: "beneficiary",
            type: "pubkey"
          },
          {
            name: "claim_amount",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "ConstantCurve",
      type: {
        kind: "struct",
        fields: [
          {
            name: "supply",
            type: "u64"
          },
          {
            name: "total_base_sell",
            type: "u64"
          },
          {
            name: "total_quote_fund_raising",
            type: "u64"
          },
          {
            name: "migrate_type",
            type: "u8"
          }
        ]
      }
    },
    {
      name: "CreateVestingEvent",
      docs: [
        "Emitted when vest_account created"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool_state",
            type: "pubkey"
          },
          {
            name: "beneficiary",
            type: "pubkey"
          },
          {
            name: "share_amount",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "CurveParams",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Constant",
            fields: [
              {
                name: "data",
                type: {
                  defined: {
                    name: "ConstantCurve"
                  }
                }
              }
            ]
          },
          {
            name: "Fixed",
            fields: [
              {
                name: "data",
                type: {
                  defined: {
                    name: "FixedCurve"
                  }
                }
              }
            ]
          },
          {
            name: "Linear",
            fields: [
              {
                name: "data",
                type: {
                  defined: {
                    name: "LinearCurve"
                  }
                }
              }
            ]
          }
        ]
      }
    },
    {
      name: "FixedCurve",
      type: {
        kind: "struct",
        fields: [
          {
            name: "supply",
            type: "u64"
          },
          {
            name: "total_quote_fund_raising",
            type: "u64"
          },
          {
            name: "migrate_type",
            type: "u8"
          }
        ]
      }
    },
    {
      name: "GlobalConfig",
      docs: [
        "Holds the current owner of the factory"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "epoch",
            docs: [
              "Account update epoch"
            ],
            type: "u64"
          },
          {
            name: "curve_type",
            docs: [
              "0: Constant Product Curve",
              "1: Fixed Price Curve",
              "2: Linear Price Curve"
            ],
            type: "u8"
          },
          {
            name: "index",
            docs: [
              "Config index"
            ],
            type: "u16"
          },
          {
            name: "migrate_fee",
            docs: [
              "The fee of migrate to amm"
            ],
            type: "u64"
          },
          {
            name: "trade_fee_rate",
            docs: [
              "The trade fee rate, denominated in hundredths of a bip (10^-6)"
            ],
            type: "u64"
          },
          {
            name: "max_share_fee_rate",
            docs: [
              "The maximum share fee rate, denominated in hundredths of a bip (10^-6)"
            ],
            type: "u64"
          },
          {
            name: "min_base_supply",
            docs: [
              "The minimum base supply, the value without decimals"
            ],
            type: "u64"
          },
          {
            name: "max_lock_rate",
            docs: [
              "The maximum lock rate, denominated in hundredths of a bip (10^-6)"
            ],
            type: "u64"
          },
          {
            name: "min_base_sell_rate",
            docs: [
              "The minimum base sell rate, denominated in hundredths of a bip (10^-6)"
            ],
            type: "u64"
          },
          {
            name: "min_base_migrate_rate",
            docs: [
              "The minimum base migrate rate, denominated in hundredths of a bip (10^-6)"
            ],
            type: "u64"
          },
          {
            name: "min_quote_fund_raising",
            docs: [
              "The minimum quote fund raising, the value with decimals"
            ],
            type: "u64"
          },
          {
            name: "quote_mint",
            docs: [
              "Mint information for quote token"
            ],
            type: "pubkey"
          },
          {
            name: "protocol_fee_owner",
            docs: [
              "Protocol Fee owner"
            ],
            type: "pubkey"
          },
          {
            name: "migrate_fee_owner",
            docs: [
              "Migrate Fee owner"
            ],
            type: "pubkey"
          },
          {
            name: "migrate_to_amm_wallet",
            docs: [
              "Migrate to amm control wallet"
            ],
            type: "pubkey"
          },
          {
            name: "migrate_to_cpswap_wallet",
            docs: [
              "Migrate to cpswap wallet"
            ],
            type: "pubkey"
          },
          {
            name: "padding",
            docs: [
              "padding for future updates"
            ],
            type: {
              array: [
                "u64",
                16
              ]
            }
          }
        ]
      }
    },
    {
      name: "LinearCurve",
      type: {
        kind: "struct",
        fields: [
          {
            name: "supply",
            type: "u64"
          },
          {
            name: "total_quote_fund_raising",
            type: "u64"
          },
          {
            name: "migrate_type",
            type: "u8"
          }
        ]
      }
    },
    {
      name: "MigrateNftInfo",
      docs: [
        "Represents the parameters for initializing a platform config account(Only support MigrateType::CPSWAP)",
        "# Fields",
        "* `platform_scale` - Scale of the platform liquidity quantity rights will be converted into NFT",
        "* `creator_scale` - Scale of the token creator liquidity quantity rights will be converted into NFT",
        "* `burn_scale` - Scale of liquidity directly to burn",
        "",
        "* platform_scale + creator_scale + burn_scale = RATE_DENOMINATOR_VALUE"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "platform_scale",
            type: "u64"
          },
          {
            name: "creator_scale",
            type: "u64"
          },
          {
            name: "burn_scale",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "MintParams",
      docs: [
        "Represents the parameters for initializing a new token mint",
        "# Fields",
        "* `decimals` - Number of decimal places for the token",
        "* `name` - Name of the token",
        "* `symbol` - Symbol/ticker of the token",
        "* `uri` - URI pointing to token metadata"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "decimals",
            type: "u8"
          },
          {
            name: "name",
            type: "string"
          },
          {
            name: "symbol",
            type: "string"
          },
          {
            name: "uri",
            type: "string"
          }
        ]
      }
    },
    {
      name: "PlatformConfig",
      type: {
        kind: "struct",
        fields: [
          {
            name: "epoch",
            docs: [
              "The epoch for update interval"
            ],
            type: "u64"
          },
          {
            name: "platform_fee_wallet",
            docs: [
              "The platform fee wallet"
            ],
            type: "pubkey"
          },
          {
            name: "platform_nft_wallet",
            docs: [
              "The platform nft wallet to receive the platform NFT after migration if platform_scale is not 0(Only support MigrateType::CPSWAP)"
            ],
            type: "pubkey"
          },
          {
            name: "platform_scale",
            docs: [
              "Scale of the platform liquidity quantity rights will be converted into NFT(Only support MigrateType::CPSWAP)"
            ],
            type: "u64"
          },
          {
            name: "creator_scale",
            docs: [
              "Scale of the token creator liquidity quantity rights will be converted into NFT(Only support MigrateType::CPSWAP)"
            ],
            type: "u64"
          },
          {
            name: "burn_scale",
            docs: [
              "Scale of liquidity directly to burn"
            ],
            type: "u64"
          },
          {
            name: "fee_rate",
            docs: [
              "The platform fee rate"
            ],
            type: "u64"
          },
          {
            name: "name",
            docs: [
              "The platform name"
            ],
            type: {
              array: [
                "u8",
                64
              ]
            }
          },
          {
            name: "web",
            docs: [
              "The platform website"
            ],
            type: {
              array: [
                "u8",
                256
              ]
            }
          },
          {
            name: "img",
            docs: [
              "The platform img link"
            ],
            type: {
              array: [
                "u8",
                256
              ]
            }
          },
          {
            name: "cpswap_config",
            docs: [
              "The platform specifies the trade fee rate after migration to cp swap"
            ],
            type: "pubkey"
          },
          {
            name: "creator_fee_rate",
            docs: [
              "Creator fee rate"
            ],
            type: "u64"
          },
          {
            name: "transfer_fee_extension_auth",
            docs: [
              "If the base token belongs to token2022, then you can choose to support the transferfeeConfig extension, which includes permissions such as `transfer_fee_config_authority`` and `withdraw_withheld_authority`.",
              "When initializing mint, `withdraw_withheld_authority` and `transfer_fee_config_authority` both belongs to the contract.",
              "Once the token is migrated to AMM, the authorities will be reset to this value"
            ],
            type: "pubkey"
          },
          {
            name: "padding",
            docs: [
              "padding for future updates"
            ],
            type: {
              array: [
                "u8",
                180
              ]
            }
          },
          {
            name: "curve_params",
            docs: [
              "The parameters for launching the pool"
            ],
            type: {
              vec: {
                defined: {
                  name: "PlatformCurveParam"
                }
              }
            }
          }
        ]
      }
    },
    {
      name: "PlatformConfigInfo",
      type: {
        kind: "struct",
        fields: [
          {
            name: "fee_wallet",
            type: "pubkey"
          },
          {
            name: "nft_wallet",
            type: "pubkey"
          },
          {
            name: "migrate_nft_info",
            type: {
              defined: {
                name: "MigrateNftInfo"
              }
            }
          },
          {
            name: "fee_rate",
            type: "u64"
          },
          {
            name: "name",
            type: "string"
          },
          {
            name: "web",
            type: "string"
          },
          {
            name: "img",
            type: "string"
          },
          {
            name: "transfer_fee_extension_auth",
            type: "pubkey"
          },
          {
            name: "creator_fee_rate",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "PlatformConfigParam",
      type: {
        kind: "enum",
        variants: [
          {
            name: "FeeWallet",
            fields: [
              "pubkey"
            ]
          },
          {
            name: "NFTWallet",
            fields: [
              "pubkey"
            ]
          },
          {
            name: "MigrateNftInfo",
            fields: [
              {
                defined: {
                  name: "MigrateNftInfo"
                }
              }
            ]
          },
          {
            name: "FeeRate",
            fields: [
              "u64"
            ]
          },
          {
            name: "Name",
            fields: [
              "string"
            ]
          },
          {
            name: "Web",
            fields: [
              "string"
            ]
          },
          {
            name: "Img",
            fields: [
              "string"
            ]
          },
          {
            name: "CpSwapConfig"
          },
          {
            name: "AllInfo",
            fields: [
              {
                defined: {
                  name: "PlatformConfigInfo"
                }
              }
            ]
          }
        ]
      }
    },
    {
      name: "PlatformCurveParam",
      type: {
        kind: "struct",
        fields: [
          {
            name: "epoch",
            docs: [
              "The epoch for update interval, 0 means not update"
            ],
            type: "u64"
          },
          {
            name: "index",
            docs: [
              "The curve params index"
            ],
            type: "u8"
          },
          {
            name: "global_config",
            docs: [
              "The global config address"
            ],
            type: "pubkey"
          },
          {
            name: "bonding_curve_param",
            docs: [
              "bonding curve param"
            ],
            type: {
              defined: {
                name: "BondingCurveParam"
              }
            }
          },
          {
            name: "padding",
            docs: [
              "padding for future updates"
            ],
            type: {
              array: [
                "u64",
                50
              ]
            }
          }
        ]
      }
    },
    {
      name: "PlatformParams",
      docs: [
        "Represents the parameters for initializing a platform config account",
        "# Fields",
        "* `migrate_nft_info` - The platform configures liquidity info during migration(Only support MigrateType::CPSWAP)",
        "* `fee_rate` - Fee rate of the platform",
        "* `name` - Name of the platform",
        "* `web` - Website of the platform",
        "* `img` - Image link of the platform",
        "/// * `creator_fee_rate` - The fee rate charged by the creator for each transaction."
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "migrate_nft_info",
            type: {
              defined: {
                name: "MigrateNftInfo"
              }
            }
          },
          {
            name: "fee_rate",
            type: "u64"
          },
          {
            name: "name",
            type: "string"
          },
          {
            name: "web",
            type: "string"
          },
          {
            name: "img",
            type: "string"
          },
          {
            name: "creator_fee_rate",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "PoolCreateEvent",
      docs: [
        "Emitted when pool created"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool_state",
            type: "pubkey"
          },
          {
            name: "creator",
            type: "pubkey"
          },
          {
            name: "config",
            type: "pubkey"
          },
          {
            name: "base_mint_param",
            type: {
              defined: {
                name: "MintParams"
              }
            }
          },
          {
            name: "curve_param",
            type: {
              defined: {
                name: "CurveParams"
              }
            }
          },
          {
            name: "vesting_param",
            type: {
              defined: {
                name: "VestingParams"
              }
            }
          },
          {
            name: "amm_fee_on",
            type: {
              defined: {
                name: "AmmCreatorFeeOn"
              }
            }
          }
        ]
      }
    },
    {
      name: "PoolState",
      docs: [
        "Represents the state of a trading pool in the protocol",
        "Stores all essential information about pool balances, fees, and configuration"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "epoch",
            docs: [
              "Account update epoch"
            ],
            type: "u64"
          },
          {
            name: "auth_bump",
            docs: [
              "Bump seed used for PDA address derivation"
            ],
            type: "u8"
          },
          {
            name: "status",
            docs: [
              "Current status of the pool",
              "* 0: Pool is funding",
              "* 1: Pool funding is end, waiting for migration",
              "* 2: Pool migration is done"
            ],
            type: "u8"
          },
          {
            name: "base_decimals",
            docs: [
              "Decimals of the pool base token"
            ],
            type: "u8"
          },
          {
            name: "quote_decimals",
            docs: [
              "Decimals of the pool quote token"
            ],
            type: "u8"
          },
          {
            name: "migrate_type",
            docs: [
              "Migrate to AMM or CpSwap, 0: amm\uFF0C 1: cpswap"
            ],
            type: "u8"
          },
          {
            name: "supply",
            docs: [
              "Supply of the pool base token"
            ],
            type: "u64"
          },
          {
            name: "total_base_sell",
            docs: [
              "Total sell amount of the base token"
            ],
            type: "u64"
          },
          {
            name: "virtual_base",
            docs: [
              "For different curves, virtual_base and virtual_quote have different meanings",
              "For constant product curve, virtual_base and virtual_quote are virtual liquidity, virtual_quote/virtual_base is the initial price",
              "For linear price curve, virtual_base is the price slope parameter a, virtual_quote has no effect",
              "For fixed price curve, virtual_quote/virtual_base is the initial price"
            ],
            type: "u64"
          },
          {
            name: "virtual_quote",
            type: "u64"
          },
          {
            name: "real_base",
            docs: [
              "Actual base token amount in the pool",
              "Represents the real tokens available for trading"
            ],
            type: "u64"
          },
          {
            name: "real_quote",
            docs: [
              "Actual quote token amount in the pool",
              "Represents the real tokens available for trading"
            ],
            type: "u64"
          },
          {
            name: "total_quote_fund_raising",
            docs: [
              "The total quote fund raising of the pool"
            ],
            type: "u64"
          },
          {
            name: "quote_protocol_fee",
            docs: [
              "Accumulated trading fees in quote tokens",
              "Can be collected by the protocol fee owner"
            ],
            type: "u64"
          },
          {
            name: "platform_fee",
            docs: [
              "Accumulated platform fees in quote tokens",
              "Can be collected by the platform wallet stored in platform config"
            ],
            type: "u64"
          },
          {
            name: "migrate_fee",
            docs: [
              "The fee of migrate to amm"
            ],
            type: "u64"
          },
          {
            name: "vesting_schedule",
            docs: [
              "Vesting schedule for the base token"
            ],
            type: {
              defined: {
                name: "VestingSchedule"
              }
            }
          },
          {
            name: "global_config",
            docs: [
              "Public key of the global configuration account",
              "Contains protocol-wide settings this pool adheres to"
            ],
            type: "pubkey"
          },
          {
            name: "platform_config",
            docs: [
              "Public key of the platform configuration account",
              "Contains platform-wide settings this pool adheres to"
            ],
            type: "pubkey"
          },
          {
            name: "base_mint",
            docs: [
              "Public key of the base mint address"
            ],
            type: "pubkey"
          },
          {
            name: "quote_mint",
            docs: [
              "Public key of the quote mint address"
            ],
            type: "pubkey"
          },
          {
            name: "base_vault",
            docs: [
              "Public key of the base token vault",
              "Holds the actual base tokens owned by the pool"
            ],
            type: "pubkey"
          },
          {
            name: "quote_vault",
            docs: [
              "Public key of the quote token vault",
              "Holds the actual quote tokens owned by the pool"
            ],
            type: "pubkey"
          },
          {
            name: "creator",
            docs: [
              "The creator of base token"
            ],
            type: "pubkey"
          },
          {
            name: "token_program_flag",
            docs: [
              "token program bits",
              "bit0: base token program flag",
              "0: spl_token_program",
              "1: token_program_2022",
              "",
              "bit1: quote token program flag",
              "0: spl_token_program",
              "1: token_program_2022"
            ],
            type: "u8"
          },
          {
            name: "amm_creator_fee_on",
            docs: [
              "migrate to cpmm, creator fee on quote token or both token"
            ],
            type: {
              defined: {
                name: "AmmCreatorFeeOn"
              }
            }
          },
          {
            name: "padding",
            docs: [
              "padding for future updates"
            ],
            type: {
              array: [
                "u8",
                62
              ]
            }
          }
        ]
      }
    },
    {
      name: "PoolStatus",
      docs: [
        "Represents the different states a pool can be in",
        "* Fund - Initial state where pool is accepting funds",
        "* Migrate - Pool funding has ended and waiting for migration",
        "* Trade - Pool migration is complete and amm trading is enabled"
      ],
      type: {
        kind: "enum",
        variants: [
          {
            name: "Fund"
          },
          {
            name: "Migrate"
          },
          {
            name: "Trade"
          }
        ]
      }
    },
    {
      name: "TradeDirection",
      docs: [
        "Specifies the direction of a trade in the bonding curve",
        "This is important because curves can treat tokens differently through weights or offsets"
      ],
      type: {
        kind: "enum",
        variants: [
          {
            name: "Buy"
          },
          {
            name: "Sell"
          }
        ]
      }
    },
    {
      name: "TradeEvent",
      docs: [
        "Emitted when trade process"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool_state",
            type: "pubkey"
          },
          {
            name: "total_base_sell",
            type: "u64"
          },
          {
            name: "virtual_base",
            type: "u64"
          },
          {
            name: "virtual_quote",
            type: "u64"
          },
          {
            name: "real_base_before",
            type: "u64"
          },
          {
            name: "real_quote_before",
            type: "u64"
          },
          {
            name: "real_base_after",
            type: "u64"
          },
          {
            name: "real_quote_after",
            type: "u64"
          },
          {
            name: "amount_in",
            type: "u64"
          },
          {
            name: "amount_out",
            type: "u64"
          },
          {
            name: "protocol_fee",
            type: "u64"
          },
          {
            name: "platform_fee",
            type: "u64"
          },
          {
            name: "creator_fee",
            type: "u64"
          },
          {
            name: "share_fee",
            type: "u64"
          },
          {
            name: "trade_direction",
            type: {
              defined: {
                name: "TradeDirection"
              }
            }
          },
          {
            name: "pool_status",
            type: {
              defined: {
                name: "PoolStatus"
              }
            }
          },
          {
            name: "exact_in",
            type: "bool"
          }
        ]
      }
    },
    {
      name: "TransferFeeExtensionParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "transfer_fee_basis_points",
            docs: [
              "denominator is 10000, currently, this value cannot exceed 5%, which is 500."
            ],
            type: "u16"
          },
          {
            name: "maximum_fee",
            docs: [
              "Maximum fee on each transfers, the value must exceed supply * transfer_fee_basis_points / 10000"
            ],
            type: "u64"
          }
        ]
      }
    },
    {
      name: "VestingParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "total_locked_amount",
            type: "u64"
          },
          {
            name: "cliff_period",
            type: "u64"
          },
          {
            name: "unlock_period",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "VestingRecord",
      type: {
        kind: "struct",
        fields: [
          {
            name: "epoch",
            docs: [
              "Account update epoch"
            ],
            type: "u64"
          },
          {
            name: "pool",
            docs: [
              "The pool state account"
            ],
            type: "pubkey"
          },
          {
            name: "beneficiary",
            docs: [
              "The beneficiary of the vesting account"
            ],
            type: "pubkey"
          },
          {
            name: "claimed_amount",
            docs: [
              "The amount of tokens claimed"
            ],
            type: "u64"
          },
          {
            name: "token_share_amount",
            docs: [
              "The share amount of the token to be vested"
            ],
            type: "u64"
          },
          {
            name: "padding",
            docs: [
              "padding for future updates"
            ],
            type: {
              array: [
                "u64",
                8
              ]
            }
          }
        ]
      }
    },
    {
      name: "VestingSchedule",
      type: {
        kind: "struct",
        fields: [
          {
            name: "total_locked_amount",
            type: "u64"
          },
          {
            name: "cliff_period",
            type: "u64"
          },
          {
            name: "unlock_period",
            type: "u64"
          },
          {
            name: "start_time",
            type: "u64"
          },
          {
            name: "allocated_share_amount",
            docs: [
              "Total allocated share amount of the base token, not greater than total_locked_amount"
            ],
            type: "u64"
          }
        ]
      }
    }
  ]
};

// idl/openbook-v2.json
var openbook_v2_default = {
  version: "0.1.0",
  name: "openbook_v2",
  instructions: [
    {
      name: "createMarket",
      docs: [
        "Create a [`Market`](crate::state::Market) for a given token pair."
      ],
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: true
        },
        {
          name: "marketAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false,
          docs: [
            "Accounts are initialized by client,",
            "anchor discriminator is set first when ix exits,"
          ]
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false
        },
        {
          name: "eventHeap",
          isMut: true,
          isSigner: false
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true
        },
        {
          name: "marketBaseVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "marketQuoteVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "baseMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "quoteMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "oracleA",
          isMut: false,
          isSigner: false,
          isOptional: true
        },
        {
          name: "oracleB",
          isMut: false,
          isSigner: false,
          isOptional: true
        },
        {
          name: "collectFeeAdmin",
          isMut: false,
          isSigner: false
        },
        {
          name: "openOrdersAdmin",
          isMut: false,
          isSigner: false,
          isOptional: true
        },
        {
          name: "consumeEventsAdmin",
          isMut: false,
          isSigner: false,
          isOptional: true
        },
        {
          name: "closeMarketAdmin",
          isMut: false,
          isSigner: false,
          isOptional: true
        },
        {
          name: "eventAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "program",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "name",
          type: "string"
        },
        {
          name: "oracleConfig",
          type: {
            defined: "OracleConfigParams"
          }
        },
        {
          name: "quoteLotSize",
          type: "i64"
        },
        {
          name: "baseLotSize",
          type: "i64"
        },
        {
          name: "makerFee",
          type: "i64"
        },
        {
          name: "takerFee",
          type: "i64"
        },
        {
          name: "timeExpiry",
          type: "i64"
        }
      ]
    },
    {
      name: "closeMarket",
      docs: [
        "Close a [`Market`](crate::state::Market) (only",
        "[`close_market_admin`](crate::state::Market::close_market_admin))."
      ],
      accounts: [
        {
          name: "closeMarketAdmin",
          isMut: false,
          isSigner: true
        },
        {
          name: "market",
          isMut: true,
          isSigner: false
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false
        },
        {
          name: "eventHeap",
          isMut: true,
          isSigner: false
        },
        {
          name: "solDestination",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "createOpenOrdersIndexer",
      docs: [
        "Create an [`OpenOrdersIndexer`](crate::state::OpenOrdersIndexer) account."
      ],
      accounts: [
        {
          name: "payer",
          isMut: true,
          isSigner: true
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true
        },
        {
          name: "openOrdersIndexer",
          isMut: true,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "closeOpenOrdersIndexer",
      docs: [
        "Close an [`OpenOrdersIndexer`](crate::state::OpenOrdersIndexer) account."
      ],
      accounts: [
        {
          name: "owner",
          isMut: false,
          isSigner: true
        },
        {
          name: "openOrdersIndexer",
          isMut: true,
          isSigner: false
        },
        {
          name: "solDestination",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "createOpenOrdersAccount",
      docs: [
        "Create an [`OpenOrdersAccount`](crate::state::OpenOrdersAccount)."
      ],
      accounts: [
        {
          name: "payer",
          isMut: true,
          isSigner: true
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true
        },
        {
          name: "delegateAccount",
          isMut: false,
          isSigner: false,
          isOptional: true
        },
        {
          name: "openOrdersIndexer",
          isMut: true,
          isSigner: false
        },
        {
          name: "openOrdersAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "market",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "name",
          type: "string"
        }
      ]
    },
    {
      name: "closeOpenOrdersAccount",
      docs: [
        "Close an [`OpenOrdersAccount`](crate::state::OpenOrdersAccount)."
      ],
      accounts: [
        {
          name: "owner",
          isMut: false,
          isSigner: true
        },
        {
          name: "openOrdersIndexer",
          isMut: true,
          isSigner: false
        },
        {
          name: "openOrdersAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "solDestination",
          isMut: true,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "placeOrder",
      docs: [
        "Place an order.",
        "",
        "Different types of orders have different effects on the order book,",
        "as described in [`PlaceOrderType`](crate::state::PlaceOrderType).",
        "",
        "`price_lots` refers to the price in lots: the number of quote lots",
        "per base lot. It is ignored for `PlaceOrderType::Market` orders.",
        "",
        "`expiry_timestamp` is a unix timestamp for when this order should",
        "expire. If 0 is passed in, the order will never expire. If the time",
        "is in the past, the instruction is skipped. Timestamps in the future",
        "are reduced to now + 65,535s.",
        "",
        "`limit` determines the maximum number of orders from the book to fill,",
        "and can be used to limit CU spent. When the limit is reached, processing",
        "stops and the instruction succeeds."
      ],
      accounts: [
        {
          name: "signer",
          isMut: false,
          isSigner: true
        },
        {
          name: "openOrdersAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "openOrdersAdmin",
          isMut: false,
          isSigner: true,
          isOptional: true
        },
        {
          name: "userTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "market",
          isMut: true,
          isSigner: false
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false
        },
        {
          name: "eventHeap",
          isMut: true,
          isSigner: false
        },
        {
          name: "marketVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "oracleA",
          isMut: false,
          isSigner: false,
          isOptional: true
        },
        {
          name: "oracleB",
          isMut: false,
          isSigner: false,
          isOptional: true
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "args",
          type: {
            defined: "PlaceOrderArgs"
          }
        }
      ],
      returns: {
        option: "u128"
      }
    },
    {
      name: "editOrder",
      docs: [
        "Edit an order."
      ],
      accounts: [
        {
          name: "signer",
          isMut: false,
          isSigner: true
        },
        {
          name: "openOrdersAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "openOrdersAdmin",
          isMut: false,
          isSigner: true,
          isOptional: true
        },
        {
          name: "userTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "market",
          isMut: true,
          isSigner: false
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false
        },
        {
          name: "eventHeap",
          isMut: true,
          isSigner: false
        },
        {
          name: "marketVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "oracleA",
          isMut: false,
          isSigner: false,
          isOptional: true
        },
        {
          name: "oracleB",
          isMut: false,
          isSigner: false,
          isOptional: true
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "clientOrderId",
          type: "u64"
        },
        {
          name: "expectedCancelSize",
          type: "i64"
        },
        {
          name: "placeOrder",
          type: {
            defined: "PlaceOrderArgs"
          }
        }
      ],
      returns: {
        option: "u128"
      }
    },
    {
      name: "editOrderPegged",
      docs: [
        "Edit an order pegged."
      ],
      accounts: [
        {
          name: "signer",
          isMut: false,
          isSigner: true
        },
        {
          name: "openOrdersAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "openOrdersAdmin",
          isMut: false,
          isSigner: true,
          isOptional: true
        },
        {
          name: "userTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "market",
          isMut: true,
          isSigner: false
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false
        },
        {
          name: "eventHeap",
          isMut: true,
          isSigner: false
        },
        {
          name: "marketVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "oracleA",
          isMut: false,
          isSigner: false,
          isOptional: true
        },
        {
          name: "oracleB",
          isMut: false,
          isSigner: false,
          isOptional: true
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "clientOrderId",
          type: "u64"
        },
        {
          name: "expectedCancelSize",
          type: "i64"
        },
        {
          name: "placeOrder",
          type: {
            defined: "PlaceOrderPeggedArgs"
          }
        }
      ],
      returns: {
        option: "u128"
      }
    },
    {
      name: "placeOrders",
      docs: [
        "Place multiple orders"
      ],
      accounts: [
        {
          name: "signer",
          isMut: false,
          isSigner: true
        },
        {
          name: "openOrdersAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "openOrdersAdmin",
          isMut: false,
          isSigner: true,
          isOptional: true
        },
        {
          name: "userQuoteAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userBaseAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "market",
          isMut: true,
          isSigner: false
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false
        },
        {
          name: "eventHeap",
          isMut: true,
          isSigner: false
        },
        {
          name: "marketQuoteVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "marketBaseVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "oracleA",
          isMut: false,
          isSigner: false,
          isOptional: true
        },
        {
          name: "oracleB",
          isMut: false,
          isSigner: false,
          isOptional: true
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "ordersType",
          type: {
            defined: "PlaceOrderType"
          }
        },
        {
          name: "bids",
          type: {
            vec: {
              defined: "PlaceMultipleOrdersArgs"
            }
          }
        },
        {
          name: "asks",
          type: {
            vec: {
              defined: "PlaceMultipleOrdersArgs"
            }
          }
        },
        {
          name: "limit",
          type: "u8"
        }
      ],
      returns: {
        vec: {
          option: "u128"
        }
      }
    },
    {
      name: "cancelAllAndPlaceOrders",
      docs: [
        "Cancel orders and place multiple orders."
      ],
      accounts: [
        {
          name: "signer",
          isMut: false,
          isSigner: true
        },
        {
          name: "openOrdersAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "openOrdersAdmin",
          isMut: false,
          isSigner: true,
          isOptional: true
        },
        {
          name: "userQuoteAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userBaseAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "market",
          isMut: true,
          isSigner: false
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false
        },
        {
          name: "eventHeap",
          isMut: true,
          isSigner: false
        },
        {
          name: "marketQuoteVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "marketBaseVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "oracleA",
          isMut: false,
          isSigner: false,
          isOptional: true
        },
        {
          name: "oracleB",
          isMut: false,
          isSigner: false,
          isOptional: true
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "ordersType",
          type: {
            defined: "PlaceOrderType"
          }
        },
        {
          name: "bids",
          type: {
            vec: {
              defined: "PlaceMultipleOrdersArgs"
            }
          }
        },
        {
          name: "asks",
          type: {
            vec: {
              defined: "PlaceMultipleOrdersArgs"
            }
          }
        },
        {
          name: "limit",
          type: "u8"
        }
      ],
      returns: {
        vec: {
          option: "u128"
        }
      }
    },
    {
      name: "placeOrderPegged",
      docs: [
        "Place an oracle-peg order."
      ],
      accounts: [
        {
          name: "signer",
          isMut: false,
          isSigner: true
        },
        {
          name: "openOrdersAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "openOrdersAdmin",
          isMut: false,
          isSigner: true,
          isOptional: true
        },
        {
          name: "userTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "market",
          isMut: true,
          isSigner: false
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false
        },
        {
          name: "eventHeap",
          isMut: true,
          isSigner: false
        },
        {
          name: "marketVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "oracleA",
          isMut: false,
          isSigner: false,
          isOptional: true
        },
        {
          name: "oracleB",
          isMut: false,
          isSigner: false,
          isOptional: true
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "args",
          type: {
            defined: "PlaceOrderPeggedArgs"
          }
        }
      ],
      returns: {
        option: "u128"
      }
    },
    {
      name: "placeTakeOrder",
      docs: [
        "Place an order that shall take existing liquidity off of the book, not",
        "add a new order off the book.",
        "",
        "This type of order allows for instant token settlement for the taker."
      ],
      accounts: [
        {
          name: "signer",
          isMut: true,
          isSigner: true
        },
        {
          name: "penaltyPayer",
          isMut: true,
          isSigner: true
        },
        {
          name: "market",
          isMut: true,
          isSigner: false
        },
        {
          name: "marketAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false
        },
        {
          name: "marketBaseVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "marketQuoteVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "eventHeap",
          isMut: true,
          isSigner: false
        },
        {
          name: "userBaseAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userQuoteAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "oracleA",
          isMut: false,
          isSigner: false,
          isOptional: true
        },
        {
          name: "oracleB",
          isMut: false,
          isSigner: false,
          isOptional: true
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "openOrdersAdmin",
          isMut: false,
          isSigner: true,
          isOptional: true
        }
      ],
      args: [
        {
          name: "args",
          type: {
            defined: "PlaceTakeOrderArgs"
          }
        }
      ]
    },
    {
      name: "consumeEvents",
      docs: [
        "Process up to `limit` [events](crate::state::AnyEvent).",
        "",
        "When a user places a 'take' order, they do not know beforehand which",
        "market maker will have placed the 'make' order that they get executed",
        "against. This prevents them from passing in a market maker's",
        "[`OpenOrdersAccount`](crate::state::OpenOrdersAccount), which is needed",
        "to credit/debit the relevant tokens to/from the maker. As such, Openbook",
        "uses a 'crank' system, where `place_order` only emits events, and",
        "`consume_events` handles token settlement.",
        "",
        "Currently, there are two types of events: [`FillEvent`](crate::state::FillEvent)s",
        "and [`OutEvent`](crate::state::OutEvent)s.",
        "",
        "A `FillEvent` is emitted when an order is filled, and it is handled by",
        "debiting whatever the taker is selling from the taker and crediting",
        "it to the maker, and debiting whatever the taker is buying from the",
        "maker and crediting it to the taker. Note that *no tokens are moved*,",
        "these are just debits and credits to each party's [`Position`](crate::state::Position).",
        "",
        "An `OutEvent` is emitted when a limit order needs to be removed from",
        "the book during a `place_order` invocation, and it is handled by",
        "crediting whatever the maker would have sold (quote token in a bid,",
        "base token in an ask) back to the maker."
      ],
      accounts: [
        {
          name: "consumeEventsAdmin",
          isMut: false,
          isSigner: true,
          isOptional: true
        },
        {
          name: "market",
          isMut: true,
          isSigner: false
        },
        {
          name: "eventHeap",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "limit",
          type: "u64"
        }
      ]
    },
    {
      name: "consumeGivenEvents",
      docs: [
        "Process the [events](crate::state::AnyEvent) at the given positions."
      ],
      accounts: [
        {
          name: "consumeEventsAdmin",
          isMut: false,
          isSigner: true,
          isOptional: true
        },
        {
          name: "market",
          isMut: true,
          isSigner: false
        },
        {
          name: "eventHeap",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "slots",
          type: {
            vec: "u64"
          }
        }
      ]
    },
    {
      name: "cancelOrder",
      docs: [
        "Cancel an order by its `order_id`.",
        "",
        "Note that this doesn't emit an [`OutEvent`](crate::state::OutEvent) because a",
        "maker knows that they will be passing in their own [`OpenOrdersAccount`](crate::state::OpenOrdersAccount)."
      ],
      accounts: [
        {
          name: "signer",
          isMut: false,
          isSigner: true
        },
        {
          name: "openOrdersAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "market",
          isMut: false,
          isSigner: false
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "orderId",
          type: "u128"
        }
      ]
    },
    {
      name: "cancelOrderByClientOrderId",
      docs: [
        "Cancel an order by its `client_order_id`.",
        "",
        "Note that this doesn't emit an [`OutEvent`](crate::state::OutEvent) because a",
        "maker knows that they will be passing in their own [`OpenOrdersAccount`](crate::state::OpenOrdersAccount)."
      ],
      accounts: [
        {
          name: "signer",
          isMut: false,
          isSigner: true
        },
        {
          name: "openOrdersAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "market",
          isMut: false,
          isSigner: false
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "clientOrderId",
          type: "u64"
        }
      ],
      returns: "i64"
    },
    {
      name: "cancelAllOrders",
      docs: [
        "Cancel up to `limit` orders, optionally filtering by side"
      ],
      accounts: [
        {
          name: "signer",
          isMut: false,
          isSigner: true
        },
        {
          name: "openOrdersAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "market",
          isMut: false,
          isSigner: false
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "sideOption",
          type: {
            option: {
              defined: "Side"
            }
          }
        },
        {
          name: "limit",
          type: "u8"
        }
      ]
    },
    {
      name: "deposit",
      docs: [
        "Deposit a certain amount of `base` and `quote` lamports into one's",
        "[`Position`](crate::state::Position).",
        "",
        "Makers might wish to `deposit`, rather than have actual tokens moved for",
        "each trade, in order to reduce CUs."
      ],
      accounts: [
        {
          name: "owner",
          isMut: false,
          isSigner: true
        },
        {
          name: "userBaseAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userQuoteAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "openOrdersAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "market",
          isMut: true,
          isSigner: false
        },
        {
          name: "marketBaseVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "marketQuoteVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "baseAmount",
          type: "u64"
        },
        {
          name: "quoteAmount",
          type: "u64"
        }
      ]
    },
    {
      name: "refill",
      docs: [
        "Refill a certain amount of `base` and `quote` lamports. The amount being passed is the",
        "total lamports that the [`Position`](crate::state::Position) will have.",
        "",
        "Makers might wish to `refill`, rather than have actual tokens moved for",
        "each trade, in order to reduce CUs."
      ],
      accounts: [
        {
          name: "owner",
          isMut: false,
          isSigner: true
        },
        {
          name: "userBaseAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userQuoteAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "openOrdersAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "market",
          isMut: true,
          isSigner: false
        },
        {
          name: "marketBaseVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "marketQuoteVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "baseAmount",
          type: "u64"
        },
        {
          name: "quoteAmount",
          type: "u64"
        }
      ]
    },
    {
      name: "settleFunds",
      docs: [
        "Withdraw any available tokens."
      ],
      accounts: [
        {
          name: "owner",
          isMut: true,
          isSigner: true
        },
        {
          name: "penaltyPayer",
          isMut: true,
          isSigner: true
        },
        {
          name: "openOrdersAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "market",
          isMut: true,
          isSigner: false
        },
        {
          name: "marketAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "marketBaseVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "marketQuoteVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "userBaseAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userQuoteAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "referrerAccount",
          isMut: true,
          isSigner: false,
          isOptional: true
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "settleFundsExpired",
      docs: [
        "Withdraw any available tokens when the market is expired (only",
        "[`close_market_admin`](crate::state::Market::close_market_admin))."
      ],
      accounts: [
        {
          name: "closeMarketAdmin",
          isMut: false,
          isSigner: true
        },
        {
          name: "owner",
          isMut: true,
          isSigner: true
        },
        {
          name: "penaltyPayer",
          isMut: true,
          isSigner: true
        },
        {
          name: "openOrdersAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "market",
          isMut: true,
          isSigner: false
        },
        {
          name: "marketAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "marketBaseVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "marketQuoteVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "userBaseAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userQuoteAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "referrerAccount",
          isMut: true,
          isSigner: false,
          isOptional: true
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "sweepFees",
      docs: [
        "Sweep fees, as a [`Market`](crate::state::Market)'s admin."
      ],
      accounts: [
        {
          name: "collectFeeAdmin",
          isMut: false,
          isSigner: true
        },
        {
          name: "market",
          isMut: true,
          isSigner: false
        },
        {
          name: "marketAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "marketQuoteVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenReceiverAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "setDelegate",
      docs: [
        "Update the [`delegate`](crate::state::OpenOrdersAccount::delegate) of an open orders account."
      ],
      accounts: [
        {
          name: "owner",
          isMut: true,
          isSigner: true
        },
        {
          name: "openOrdersAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "delegateAccount",
          isMut: false,
          isSigner: false,
          isOptional: true
        }
      ],
      args: []
    },
    {
      name: "setMarketExpired",
      docs: [
        "Set market to expired before pruning orders and closing the market (only",
        "[`close_market_admin`](crate::state::Market::close_market_admin))."
      ],
      accounts: [
        {
          name: "closeMarketAdmin",
          isMut: false,
          isSigner: true
        },
        {
          name: "market",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "pruneOrders",
      docs: [
        "Remove orders from the book when the market is expired (only",
        "[`close_market_admin`](crate::state::Market::close_market_admin))."
      ],
      accounts: [
        {
          name: "closeMarketAdmin",
          isMut: false,
          isSigner: true
        },
        {
          name: "openOrdersAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "market",
          isMut: false,
          isSigner: false
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "limit",
          type: "u8"
        }
      ]
    },
    {
      name: "stubOracleCreate",
      accounts: [
        {
          name: "payer",
          isMut: true,
          isSigner: true
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true
        },
        {
          name: "oracle",
          isMut: true,
          isSigner: false
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "price",
          type: "f64"
        }
      ]
    },
    {
      name: "stubOracleClose",
      accounts: [
        {
          name: "owner",
          isMut: false,
          isSigner: true
        },
        {
          name: "oracle",
          isMut: true,
          isSigner: false
        },
        {
          name: "solDestination",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "stubOracleSet",
      accounts: [
        {
          name: "owner",
          isMut: false,
          isSigner: true
        },
        {
          name: "oracle",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "price",
          type: "f64"
        }
      ]
    }
  ],
  accounts: [
    {
      name: "Market",
      type: {
        kind: "struct",
        fields: [
          {
            name: "bump",
            docs: [
              "PDA bump"
            ],
            type: "u8"
          },
          {
            name: "baseDecimals",
            docs: [
              "Number of decimals used for the base token.",
              "",
              "Used to convert the oracle's price into a native/native price."
            ],
            type: "u8"
          },
          {
            name: "quoteDecimals",
            type: "u8"
          },
          {
            name: "padding1",
            type: {
              array: [
                "u8",
                5
              ]
            }
          },
          {
            name: "marketAuthority",
            type: "publicKey"
          },
          {
            name: "timeExpiry",
            docs: [
              "No expiry = 0. Market will expire and no trading allowed after time_expiry"
            ],
            type: "i64"
          },
          {
            name: "collectFeeAdmin",
            docs: [
              "Admin who can collect fees from the market"
            ],
            type: "publicKey"
          },
          {
            name: "openOrdersAdmin",
            docs: [
              "Admin who must sign off on all order creations"
            ],
            type: {
              defined: "NonZeroPubkeyOption"
            }
          },
          {
            name: "consumeEventsAdmin",
            docs: [
              "Admin who must sign off on all event consumptions"
            ],
            type: {
              defined: "NonZeroPubkeyOption"
            }
          },
          {
            name: "closeMarketAdmin",
            docs: [
              "Admin who can set market expired, prune orders and close the market"
            ],
            type: {
              defined: "NonZeroPubkeyOption"
            }
          },
          {
            name: "name",
            docs: [
              "Name. Trailing zero bytes are ignored."
            ],
            type: {
              array: [
                "u8",
                16
              ]
            }
          },
          {
            name: "bids",
            docs: [
              "Address of the BookSide account for bids"
            ],
            type: "publicKey"
          },
          {
            name: "asks",
            docs: [
              "Address of the BookSide account for asks"
            ],
            type: "publicKey"
          },
          {
            name: "eventHeap",
            docs: [
              "Address of the EventHeap account"
            ],
            type: "publicKey"
          },
          {
            name: "oracleA",
            docs: [
              "Oracles account address"
            ],
            type: {
              defined: "NonZeroPubkeyOption"
            }
          },
          {
            name: "oracleB",
            type: {
              defined: "NonZeroPubkeyOption"
            }
          },
          {
            name: "oracleConfig",
            docs: [
              "Oracle configuration"
            ],
            type: {
              defined: "OracleConfig"
            }
          },
          {
            name: "quoteLotSize",
            docs: [
              "Number of quote native in a quote lot. Must be a power of 10.",
              "",
              "Primarily useful for increasing the tick size on the market: A lot price",
              "of 1 becomes a native price of quote_lot_size/base_lot_size becomes a",
              "ui price of quote_lot_size*base_decimals/base_lot_size/quote_decimals."
            ],
            type: "i64"
          },
          {
            name: "baseLotSize",
            docs: [
              "Number of base native in a base lot. Must be a power of 10.",
              "",
              "Example: If base decimals for the underlying asset is 6, base lot size",
              "is 100 and and base position lots is 10_000 then base position native is",
              "1_000_000 and base position ui is 1."
            ],
            type: "i64"
          },
          {
            name: "seqNum",
            docs: [
              "Total number of orders seen"
            ],
            type: "u64"
          },
          {
            name: "registrationTime",
            docs: [
              "Timestamp in seconds that the market was registered at."
            ],
            type: "i64"
          },
          {
            name: "makerFee",
            docs: [
              "Fees",
              "",
              "Fee (in 10^-6) when matching maker orders.",
              "maker_fee < 0 it means some of the taker_fees goes to the maker",
              "maker_fee > 0, it means no taker_fee to the maker, and maker fee goes to the referral"
            ],
            type: "i64"
          },
          {
            name: "takerFee",
            docs: [
              "Fee (in 10^-6) for taker orders, always >= 0."
            ],
            type: "i64"
          },
          {
            name: "feesAccrued",
            docs: [
              "Total fees accrued in native quote"
            ],
            type: "u128"
          },
          {
            name: "feesToReferrers",
            docs: [
              "Total fees settled in native quote"
            ],
            type: "u128"
          },
          {
            name: "referrerRebatesAccrued",
            docs: [
              "Referrer rebates to be distributed"
            ],
            type: "u64"
          },
          {
            name: "feesAvailable",
            docs: [
              "Fees generated and available to withdraw via sweep_fees"
            ],
            type: "u64"
          },
          {
            name: "makerVolume",
            docs: [
              "Cumulative maker volume (same as taker volume) in quote native units"
            ],
            type: "u128"
          },
          {
            name: "takerVolumeWoOo",
            docs: [
              "Cumulative taker volume in quote native units due to place take orders"
            ],
            type: "u128"
          },
          {
            name: "baseMint",
            type: "publicKey"
          },
          {
            name: "quoteMint",
            type: "publicKey"
          },
          {
            name: "marketBaseVault",
            type: "publicKey"
          },
          {
            name: "baseDepositTotal",
            type: "u64"
          },
          {
            name: "marketQuoteVault",
            type: "publicKey"
          },
          {
            name: "quoteDepositTotal",
            type: "u64"
          },
          {
            name: "reserved",
            type: {
              array: [
                "u8",
                128
              ]
            }
          }
        ]
      }
    },
    {
      name: "OpenOrdersAccount",
      type: {
        kind: "struct",
        fields: [
          {
            name: "owner",
            type: "publicKey"
          },
          {
            name: "market",
            type: "publicKey"
          },
          {
            name: "name",
            type: {
              array: [
                "u8",
                32
              ]
            }
          },
          {
            name: "delegate",
            type: {
              defined: "NonZeroPubkeyOption"
            }
          },
          {
            name: "accountNum",
            type: "u32"
          },
          {
            name: "bump",
            type: "u8"
          },
          {
            name: "version",
            type: "u8"
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                2
              ]
            }
          },
          {
            name: "position",
            type: {
              defined: "Position"
            }
          },
          {
            name: "openOrders",
            type: {
              array: [
                {
                  defined: "OpenOrder"
                },
                24
              ]
            }
          }
        ]
      }
    },
    {
      name: "OpenOrdersIndexer",
      type: {
        kind: "struct",
        fields: [
          {
            name: "bump",
            type: "u8"
          },
          {
            name: "createdCounter",
            type: "u32"
          },
          {
            name: "addresses",
            type: {
              vec: "publicKey"
            }
          }
        ]
      }
    },
    {
      name: "StubOracle",
      type: {
        kind: "struct",
        fields: [
          {
            name: "owner",
            type: "publicKey"
          },
          {
            name: "mint",
            type: "publicKey"
          },
          {
            name: "price",
            type: "f64"
          },
          {
            name: "lastUpdateTs",
            type: "i64"
          },
          {
            name: "lastUpdateSlot",
            type: "u64"
          },
          {
            name: "deviation",
            type: "f64"
          },
          {
            name: "reserved",
            type: {
              array: [
                "u8",
                104
              ]
            }
          }
        ]
      }
    },
    {
      name: "BookSide",
      type: {
        kind: "struct",
        fields: [
          {
            name: "roots",
            type: {
              array: [
                {
                  defined: "OrderTreeRoot"
                },
                2
              ]
            }
          },
          {
            name: "reservedRoots",
            type: {
              array: [
                {
                  defined: "OrderTreeRoot"
                },
                4
              ]
            }
          },
          {
            name: "reserved",
            type: {
              array: [
                "u8",
                256
              ]
            }
          },
          {
            name: "nodes",
            type: {
              defined: "OrderTreeNodes"
            }
          }
        ]
      }
    },
    {
      name: "EventHeap",
      docs: [
        "Container for the different EventTypes.",
        "",
        "Events are stored in a fixed-array of nodes. Free nodes are connected by a single-linked list",
        "starting at free_head while used nodes form a circular doubly-linked list starting at",
        "used_head."
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "header",
            type: {
              defined: "EventHeapHeader"
            }
          },
          {
            name: "nodes",
            type: {
              array: [
                {
                  defined: "EventNode"
                },
                600
              ]
            }
          },
          {
            name: "reserved",
            type: {
              array: [
                "u8",
                64
              ]
            }
          }
        ]
      }
    }
  ],
  types: [
    {
      name: "NonZeroPubkeyOption",
      docs: [
        "Like `Option`, but implemented for `Pubkey` to be used with `zero_copy`"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "key",
            type: "publicKey"
          }
        ]
      }
    },
    {
      name: "Position",
      type: {
        kind: "struct",
        fields: [
          {
            name: "bidsBaseLots",
            docs: [
              "Base lots in open bids"
            ],
            type: "i64"
          },
          {
            name: "asksBaseLots",
            docs: [
              "Base lots in open asks"
            ],
            type: "i64"
          },
          {
            name: "baseFreeNative",
            type: "u64"
          },
          {
            name: "quoteFreeNative",
            type: "u64"
          },
          {
            name: "lockedMakerFees",
            type: "u64"
          },
          {
            name: "referrerRebatesAvailable",
            type: "u64"
          },
          {
            name: "penaltyHeapCount",
            docs: [
              "Count of ixs when events are added to the heap",
              "To avoid this, send remaining accounts in order to process the events"
            ],
            type: "u64"
          },
          {
            name: "makerVolume",
            docs: [
              "Cumulative maker volume in quote native units (display only)"
            ],
            type: "u128"
          },
          {
            name: "takerVolume",
            docs: [
              "Cumulative taker volume in quote native units (display only)"
            ],
            type: "u128"
          },
          {
            name: "bidsQuoteLots",
            docs: [
              "Quote lots in open bids"
            ],
            type: "i64"
          },
          {
            name: "reserved",
            type: {
              array: [
                "u8",
                64
              ]
            }
          }
        ]
      }
    },
    {
      name: "OpenOrder",
      type: {
        kind: "struct",
        fields: [
          {
            name: "id",
            type: "u128"
          },
          {
            name: "clientId",
            type: "u64"
          },
          {
            name: "lockedPrice",
            docs: [
              "Price at which user's assets were locked"
            ],
            type: "i64"
          },
          {
            name: "isFree",
            type: "u8"
          },
          {
            name: "sideAndTree",
            type: "u8"
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                6
              ]
            }
          }
        ]
      }
    },
    {
      name: "OracleConfig",
      type: {
        kind: "struct",
        fields: [
          {
            name: "confFilter",
            type: "f64"
          },
          {
            name: "maxStalenessSlots",
            type: "i64"
          },
          {
            name: "reserved",
            type: {
              array: [
                "u8",
                72
              ]
            }
          }
        ]
      }
    },
    {
      name: "OracleConfigParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "confFilter",
            type: "f32"
          },
          {
            name: "maxStalenessSlots",
            type: {
              option: "u32"
            }
          }
        ]
      }
    },
    {
      name: "EventHeapHeader",
      type: {
        kind: "struct",
        fields: [
          {
            name: "freeHead",
            type: "u16"
          },
          {
            name: "usedHead",
            type: "u16"
          },
          {
            name: "count",
            type: "u16"
          },
          {
            name: "padd",
            type: "u16"
          },
          {
            name: "seqNum",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "EventNode",
      type: {
        kind: "struct",
        fields: [
          {
            name: "next",
            type: "u16"
          },
          {
            name: "prev",
            type: "u16"
          },
          {
            name: "pad",
            type: {
              array: [
                "u8",
                4
              ]
            }
          },
          {
            name: "event",
            type: {
              defined: "AnyEvent"
            }
          }
        ]
      }
    },
    {
      name: "AnyEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "eventType",
            type: "u8"
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                143
              ]
            }
          }
        ]
      }
    },
    {
      name: "FillEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "eventType",
            type: "u8"
          },
          {
            name: "takerSide",
            type: "u8"
          },
          {
            name: "makerOut",
            type: "u8"
          },
          {
            name: "makerSlot",
            type: "u8"
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                4
              ]
            }
          },
          {
            name: "timestamp",
            type: "u64"
          },
          {
            name: "seqNum",
            type: "u64"
          },
          {
            name: "maker",
            type: "publicKey"
          },
          {
            name: "makerTimestamp",
            type: "u64"
          },
          {
            name: "taker",
            type: "publicKey"
          },
          {
            name: "takerClientOrderId",
            type: "u64"
          },
          {
            name: "price",
            type: "i64"
          },
          {
            name: "pegLimit",
            type: "i64"
          },
          {
            name: "quantity",
            type: "i64"
          },
          {
            name: "makerClientOrderId",
            type: "u64"
          },
          {
            name: "reserved",
            type: {
              array: [
                "u8",
                8
              ]
            }
          }
        ]
      }
    },
    {
      name: "OutEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "eventType",
            type: "u8"
          },
          {
            name: "side",
            type: "u8"
          },
          {
            name: "ownerSlot",
            type: "u8"
          },
          {
            name: "padding0",
            type: {
              array: [
                "u8",
                5
              ]
            }
          },
          {
            name: "timestamp",
            type: "u64"
          },
          {
            name: "seqNum",
            type: "u64"
          },
          {
            name: "owner",
            type: "publicKey"
          },
          {
            name: "quantity",
            type: "i64"
          },
          {
            name: "padding1",
            type: {
              array: [
                "u8",
                80
              ]
            }
          }
        ]
      }
    },
    {
      name: "InnerNode",
      docs: [
        "InnerNodes and LeafNodes compose the binary tree of orders.",
        "",
        "Each InnerNode has exactly two children, which are either InnerNodes themselves,",
        "or LeafNodes. The children share the top `prefix_len` bits of `key`. The left",
        "child has a 0 in the next bit, and the right a 1."
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "tag",
            type: "u8"
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                3
              ]
            }
          },
          {
            name: "prefixLen",
            docs: [
              "number of highest `key` bits that all children share",
              "e.g. if it's 2, the two highest bits of `key` will be the same on all children"
            ],
            type: "u32"
          },
          {
            name: "key",
            docs: [
              "only the top `prefix_len` bits of `key` are relevant"
            ],
            type: "u128"
          },
          {
            name: "children",
            docs: [
              "indexes into `BookSide::nodes`"
            ],
            type: {
              array: [
                "u32",
                2
              ]
            }
          },
          {
            name: "childEarliestExpiry",
            docs: [
              "The earliest expiry timestamp for the left and right subtrees.",
              "",
              "Needed to be able to find and remove expired orders without having to",
              "iterate through the whole bookside."
            ],
            type: {
              array: [
                "u64",
                2
              ]
            }
          },
          {
            name: "reserved",
            type: {
              array: [
                "u8",
                40
              ]
            }
          }
        ]
      }
    },
    {
      name: "LeafNode",
      docs: [
        "LeafNodes represent an order in the binary tree"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "tag",
            docs: [
              "NodeTag"
            ],
            type: "u8"
          },
          {
            name: "ownerSlot",
            docs: [
              "Index into the owning OpenOrdersAccount's OpenOrders"
            ],
            type: "u8"
          },
          {
            name: "timeInForce",
            docs: [
              "Time in seconds after `timestamp` at which the order expires.",
              "A value of 0 means no expiry."
            ],
            type: "u16"
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                4
              ]
            }
          },
          {
            name: "key",
            docs: [
              "The binary tree key, see new_node_key()"
            ],
            type: "u128"
          },
          {
            name: "owner",
            docs: [
              "Address of the owning OpenOrdersAccount"
            ],
            type: "publicKey"
          },
          {
            name: "quantity",
            docs: [
              "Number of base lots to buy or sell, always >=1"
            ],
            type: "i64"
          },
          {
            name: "timestamp",
            docs: [
              "The time the order was placed"
            ],
            type: "u64"
          },
          {
            name: "pegLimit",
            docs: [
              "If the effective price of an oracle pegged order exceeds this limit,",
              "it will be considered invalid and may be removed.",
              "",
              "Only applicable in the oracle_pegged OrderTree"
            ],
            type: "i64"
          },
          {
            name: "clientOrderId",
            docs: [
              "User defined id for this order, used in FillEvents"
            ],
            type: "u64"
          }
        ]
      }
    },
    {
      name: "AnyNode",
      type: {
        kind: "struct",
        fields: [
          {
            name: "tag",
            type: "u8"
          },
          {
            name: "data",
            type: {
              array: [
                "u8",
                87
              ]
            }
          }
        ]
      }
    },
    {
      name: "OrderTreeRoot",
      type: {
        kind: "struct",
        fields: [
          {
            name: "maybeNode",
            type: "u32"
          },
          {
            name: "leafCount",
            type: "u32"
          }
        ]
      }
    },
    {
      name: "OrderTreeNodes",
      docs: [
        "A binary tree on AnyNode::key()",
        "",
        "The key encodes the price in the top 64 bits."
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "orderTreeType",
            type: "u8"
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                3
              ]
            }
          },
          {
            name: "bumpIndex",
            type: "u32"
          },
          {
            name: "freeListLen",
            type: "u32"
          },
          {
            name: "freeListHead",
            type: "u32"
          },
          {
            name: "reserved",
            type: {
              array: [
                "u8",
                512
              ]
            }
          },
          {
            name: "nodes",
            type: {
              array: [
                {
                  defined: "AnyNode"
                },
                1024
              ]
            }
          }
        ]
      }
    },
    {
      name: "I80F48",
      docs: [
        "Nothing in Rust shall use these types. They only exist so that the Anchor IDL",
        "knows about them and typescript can deserialize it."
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "val",
            type: "i128"
          }
        ]
      }
    },
    {
      name: "PlaceOrderArgs",
      type: {
        kind: "struct",
        fields: [
          {
            name: "side",
            type: {
              defined: "Side"
            }
          },
          {
            name: "priceLots",
            type: "i64"
          },
          {
            name: "maxBaseLots",
            type: "i64"
          },
          {
            name: "maxQuoteLotsIncludingFees",
            type: "i64"
          },
          {
            name: "clientOrderId",
            type: "u64"
          },
          {
            name: "orderType",
            type: {
              defined: "PlaceOrderType"
            }
          },
          {
            name: "expiryTimestamp",
            type: "u64"
          },
          {
            name: "selfTradeBehavior",
            type: {
              defined: "SelfTradeBehavior"
            }
          },
          {
            name: "limit",
            type: "u8"
          }
        ]
      }
    },
    {
      name: "PlaceMultipleOrdersArgs",
      type: {
        kind: "struct",
        fields: [
          {
            name: "priceLots",
            type: "i64"
          },
          {
            name: "maxQuoteLotsIncludingFees",
            type: "i64"
          },
          {
            name: "expiryTimestamp",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "PlaceOrderPeggedArgs",
      type: {
        kind: "struct",
        fields: [
          {
            name: "side",
            type: {
              defined: "Side"
            }
          },
          {
            name: "priceOffsetLots",
            type: "i64"
          },
          {
            name: "pegLimit",
            type: "i64"
          },
          {
            name: "maxBaseLots",
            type: "i64"
          },
          {
            name: "maxQuoteLotsIncludingFees",
            type: "i64"
          },
          {
            name: "clientOrderId",
            type: "u64"
          },
          {
            name: "orderType",
            type: {
              defined: "PlaceOrderType"
            }
          },
          {
            name: "expiryTimestamp",
            type: "u64"
          },
          {
            name: "selfTradeBehavior",
            type: {
              defined: "SelfTradeBehavior"
            }
          },
          {
            name: "limit",
            type: "u8"
          }
        ]
      }
    },
    {
      name: "PlaceTakeOrderArgs",
      type: {
        kind: "struct",
        fields: [
          {
            name: "side",
            type: {
              defined: "Side"
            }
          },
          {
            name: "priceLots",
            type: "i64"
          },
          {
            name: "maxBaseLots",
            type: "i64"
          },
          {
            name: "maxQuoteLotsIncludingFees",
            type: "i64"
          },
          {
            name: "orderType",
            type: {
              defined: "PlaceOrderType"
            }
          },
          {
            name: "limit",
            type: "u8"
          }
        ]
      }
    },
    {
      name: "OracleType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Pyth"
          },
          {
            name: "Stub"
          },
          {
            name: "SwitchboardV1"
          },
          {
            name: "SwitchboardV2"
          },
          {
            name: "RaydiumCLMM"
          }
        ]
      }
    },
    {
      name: "OrderState",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Valid"
          },
          {
            name: "Invalid"
          },
          {
            name: "Skipped"
          }
        ]
      }
    },
    {
      name: "BookSideOrderTree",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Fixed"
          },
          {
            name: "OraclePegged"
          }
        ]
      }
    },
    {
      name: "EventType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Fill"
          },
          {
            name: "Out"
          }
        ]
      }
    },
    {
      name: "NodeTag",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Uninitialized"
          },
          {
            name: "InnerNode"
          },
          {
            name: "LeafNode"
          },
          {
            name: "FreeNode"
          },
          {
            name: "LastFreeNode"
          }
        ]
      }
    },
    {
      name: "PlaceOrderType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Limit"
          },
          {
            name: "ImmediateOrCancel"
          },
          {
            name: "PostOnly"
          },
          {
            name: "Market"
          },
          {
            name: "PostOnlySlide"
          }
        ]
      }
    },
    {
      name: "PostOrderType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Limit"
          },
          {
            name: "PostOnly"
          },
          {
            name: "PostOnlySlide"
          }
        ]
      }
    },
    {
      name: "SelfTradeBehavior",
      docs: [
        "Self trade behavior controls how taker orders interact with resting limit orders of the same account.",
        "This setting has no influence on placing a resting or oracle pegged limit order that does not match",
        "immediately, instead it's the responsibility of the user to correctly configure his taker orders."
      ],
      type: {
        kind: "enum",
        variants: [
          {
            name: "DecrementTake"
          },
          {
            name: "CancelProvide"
          },
          {
            name: "AbortTransaction"
          }
        ]
      }
    },
    {
      name: "Side",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Bid"
          },
          {
            name: "Ask"
          }
        ]
      }
    },
    {
      name: "SideAndOrderTree",
      docs: [
        "SideAndOrderTree is a storage optimization, so we don't need two bytes for the data"
      ],
      type: {
        kind: "enum",
        variants: [
          {
            name: "BidFixed"
          },
          {
            name: "AskFixed"
          },
          {
            name: "BidOraclePegged"
          },
          {
            name: "AskOraclePegged"
          }
        ]
      }
    },
    {
      name: "OrderParams",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Market"
          },
          {
            name: "ImmediateOrCancel",
            fields: [
              {
                name: "price_lots",
                type: "i64"
              }
            ]
          },
          {
            name: "Fixed",
            fields: [
              {
                name: "price_lots",
                type: "i64"
              },
              {
                name: "order_type",
                type: {
                  defined: "PostOrderType"
                }
              }
            ]
          },
          {
            name: "OraclePegged",
            fields: [
              {
                name: "price_offset_lots",
                type: "i64"
              },
              {
                name: "order_type",
                type: {
                  defined: "PostOrderType"
                }
              },
              {
                name: "peg_limit",
                type: "i64"
              }
            ]
          }
        ]
      }
    },
    {
      name: "OrderTreeType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Bids"
          },
          {
            name: "Asks"
          }
        ]
      }
    }
  ],
  events: [
    {
      name: "DepositLog",
      fields: [
        {
          name: "openOrdersAccount",
          type: "publicKey",
          index: false
        },
        {
          name: "signer",
          type: "publicKey",
          index: false
        },
        {
          name: "baseAmount",
          type: "u64",
          index: false
        },
        {
          name: "quoteAmount",
          type: "u64",
          index: false
        }
      ]
    },
    {
      name: "FillLog",
      fields: [
        {
          name: "market",
          type: "publicKey",
          index: false
        },
        {
          name: "takerSide",
          type: "u8",
          index: false
        },
        {
          name: "makerSlot",
          type: "u8",
          index: false
        },
        {
          name: "makerOut",
          type: "bool",
          index: false
        },
        {
          name: "timestamp",
          type: "u64",
          index: false
        },
        {
          name: "seqNum",
          type: "u64",
          index: false
        },
        {
          name: "maker",
          type: "publicKey",
          index: false
        },
        {
          name: "makerClientOrderId",
          type: "u64",
          index: false
        },
        {
          name: "makerFee",
          type: "u64",
          index: false
        },
        {
          name: "makerTimestamp",
          type: "u64",
          index: false
        },
        {
          name: "taker",
          type: "publicKey",
          index: false
        },
        {
          name: "takerClientOrderId",
          type: "u64",
          index: false
        },
        {
          name: "takerFeeCeil",
          type: "u64",
          index: false
        },
        {
          name: "price",
          type: "i64",
          index: false
        },
        {
          name: "quantity",
          type: "i64",
          index: false
        }
      ]
    },
    {
      name: "MarketMetaDataLog",
      fields: [
        {
          name: "market",
          type: "publicKey",
          index: false
        },
        {
          name: "name",
          type: "string",
          index: false
        },
        {
          name: "baseMint",
          type: "publicKey",
          index: false
        },
        {
          name: "quoteMint",
          type: "publicKey",
          index: false
        },
        {
          name: "baseDecimals",
          type: "u8",
          index: false
        },
        {
          name: "quoteDecimals",
          type: "u8",
          index: false
        },
        {
          name: "baseLotSize",
          type: "i64",
          index: false
        },
        {
          name: "quoteLotSize",
          type: "i64",
          index: false
        }
      ]
    },
    {
      name: "TotalOrderFillEvent",
      fields: [
        {
          name: "side",
          type: "u8",
          index: false
        },
        {
          name: "taker",
          type: "publicKey",
          index: false
        },
        {
          name: "totalQuantityPaid",
          type: "u64",
          index: false
        },
        {
          name: "totalQuantityReceived",
          type: "u64",
          index: false
        },
        {
          name: "fees",
          type: "u64",
          index: false
        }
      ]
    },
    {
      name: "SetDelegateLog",
      fields: [
        {
          name: "openOrdersAccount",
          type: "publicKey",
          index: false
        },
        {
          name: "delegate",
          type: {
            option: "publicKey"
          },
          index: false
        }
      ]
    },
    {
      name: "SettleFundsLog",
      fields: [
        {
          name: "openOrdersAccount",
          type: "publicKey",
          index: false
        },
        {
          name: "baseNative",
          type: "u64",
          index: false
        },
        {
          name: "quoteNative",
          type: "u64",
          index: false
        },
        {
          name: "referrerRebate",
          type: "u64",
          index: false
        },
        {
          name: "referrer",
          type: {
            option: "publicKey"
          },
          index: false
        }
      ]
    },
    {
      name: "SweepFeesLog",
      fields: [
        {
          name: "market",
          type: "publicKey",
          index: false
        },
        {
          name: "amount",
          type: "u64",
          index: false
        },
        {
          name: "receiver",
          type: "publicKey",
          index: false
        }
      ]
    },
    {
      name: "OpenOrdersPositionLog",
      fields: [
        {
          name: "owner",
          type: "publicKey",
          index: false
        },
        {
          name: "openOrdersAccountNum",
          type: "u32",
          index: false
        },
        {
          name: "market",
          type: "publicKey",
          index: false
        },
        {
          name: "bidsBaseLots",
          type: "i64",
          index: false
        },
        {
          name: "bidsQuoteLots",
          type: "i64",
          index: false
        },
        {
          name: "asksBaseLots",
          type: "i64",
          index: false
        },
        {
          name: "baseFreeNative",
          type: "u64",
          index: false
        },
        {
          name: "quoteFreeNative",
          type: "u64",
          index: false
        },
        {
          name: "lockedMakerFees",
          type: "u64",
          index: false
        },
        {
          name: "referrerRebatesAvailable",
          type: "u64",
          index: false
        },
        {
          name: "makerVolume",
          type: "u128",
          index: false
        },
        {
          name: "takerVolume",
          type: "u128",
          index: false
        }
      ]
    }
  ],
  errors: [
    {
      code: 6e3,
      name: "SomeError",
      msg: ""
    },
    {
      code: 6001,
      name: "InvalidInputNameLength",
      msg: "Name lenght above limit"
    },
    {
      code: 6002,
      name: "InvalidInputMarketExpired",
      msg: "Market cannot be created as expired"
    },
    {
      code: 6003,
      name: "InvalidInputMarketFees",
      msg: "Taker fees should be positive and if maker fees are negative, greater or equal to their abs value"
    },
    {
      code: 6004,
      name: "InvalidInputLots",
      msg: "Lots cannot be negative"
    },
    {
      code: 6005,
      name: "InvalidInputLotsSize",
      msg: "Lots size above market limits"
    },
    {
      code: 6006,
      name: "InvalidInputOrdersAmounts",
      msg: "Input amounts above limits"
    },
    {
      code: 6007,
      name: "InvalidInputCancelSize",
      msg: "Price lots should be greater than zero"
    },
    {
      code: 6008,
      name: "InvalidInputPriceLots",
      msg: "Expected cancel size should be greater than zero"
    },
    {
      code: 6009,
      name: "InvalidInputPegLimit",
      msg: "Peg limit should be greater than zero"
    },
    {
      code: 6010,
      name: "InvalidInputOrderType",
      msg: "The order type is invalid. A taker order must be Market or ImmediateOrCancel"
    },
    {
      code: 6011,
      name: "InvalidInputOrderId",
      msg: "Order id cannot be zero"
    },
    {
      code: 6012,
      name: "InvalidInputHeapSlots",
      msg: "Slot above heap limit"
    },
    {
      code: 6013,
      name: "InvalidOracleTypes",
      msg: "Cannot combine two oracles of different providers"
    },
    {
      code: 6014,
      name: "InvalidSecondOracle",
      msg: "Cannot configure secondary oracle without primary"
    },
    {
      code: 6015,
      name: "NoCloseMarketAdmin",
      msg: "This market does not have a `close_market_admin` and thus cannot be closed."
    },
    {
      code: 6016,
      name: "InvalidCloseMarketAdmin",
      msg: "The signer of this transaction is not this market's `close_market_admin`."
    },
    {
      code: 6017,
      name: "InvalidOpenOrdersAdmin",
      msg: "The `open_orders_admin` required by this market to sign all instructions that creates orders is missing or is not valid"
    },
    {
      code: 6018,
      name: "InvalidConsumeEventsAdmin",
      msg: "The `consume_events_admin` required by this market to sign all instructions that consume events is missing or is not valid"
    },
    {
      code: 6019,
      name: "InvalidMarketVault",
      msg: "Provided `market_vault` is invalid"
    },
    {
      code: 6020,
      name: "IndexerActiveOO",
      msg: "Cannot be closed due to the existence of open orders accounts"
    },
    {
      code: 6021,
      name: "OraclePegInvalidOracleState",
      msg: "Cannot place a peg order due to invalid oracle state"
    },
    {
      code: 6022,
      name: "UnknownOracleType",
      msg: "oracle type cannot be determined"
    },
    {
      code: 6023,
      name: "OracleConfidence",
      msg: "an oracle does not reach the confidence threshold"
    },
    {
      code: 6024,
      name: "OracleStale",
      msg: "an oracle is stale"
    },
    {
      code: 6025,
      name: "OrderIdNotFound",
      msg: "Order id not found on the orderbook"
    },
    {
      code: 6026,
      name: "EventHeapContainsElements",
      msg: "Event heap contains elements and market can't be closed"
    },
    {
      code: 6027,
      name: "InvalidOrderPostIOC",
      msg: "ImmediateOrCancel is not a PostOrderType"
    },
    {
      code: 6028,
      name: "InvalidOrderPostMarket",
      msg: "Market is not a PostOrderType"
    },
    {
      code: 6029,
      name: "WouldSelfTrade",
      msg: "would self trade"
    },
    {
      code: 6030,
      name: "MarketHasExpired",
      msg: "The Market has already expired."
    },
    {
      code: 6031,
      name: "InvalidPriceLots",
      msg: "Price lots should be greater than zero"
    },
    {
      code: 6032,
      name: "InvalidOraclePrice",
      msg: "Oracle price above market limits"
    },
    {
      code: 6033,
      name: "MarketHasNotExpired",
      msg: "The Market has not expired yet."
    },
    {
      code: 6034,
      name: "NoOwnerOrDelegate",
      msg: "No correct owner or delegate."
    },
    {
      code: 6035,
      name: "NoOwner",
      msg: "No correct owner"
    },
    {
      code: 6036,
      name: "OpenOrdersFull",
      msg: "No free order index in open orders account"
    },
    {
      code: 6037,
      name: "BookContainsElements",
      msg: "Book contains elements"
    },
    {
      code: 6038,
      name: "OpenOrdersOrderNotFound",
      msg: "Could not find order in user account"
    },
    {
      code: 6039,
      name: "InvalidPostAmount",
      msg: "Amount to post above book limits"
    },
    {
      code: 6040,
      name: "DisabledOraclePeg",
      msg: "Oracle peg orders are not enabled for this market"
    },
    {
      code: 6041,
      name: "NonEmptyMarket",
      msg: "Cannot close a non-empty market"
    },
    {
      code: 6042,
      name: "NonEmptyOpenOrdersPosition",
      msg: "Cannot close a non-empty open orders account"
    }
  ]
};

// idl/serum-dex.json
var serum_dex_default = {
  version: "0.0.0",
  name: "Serum Dex",
  instructions: [
    {
      name: "InitializeMarket",
      accounts: [
        {
          name: "marketToInitialize",
          isMut: true,
          isSigner: false,
          docs: [
            "the market to initialize"
          ]
        },
        {
          name: "requestQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "zeroed out request queue"
          ]
        },
        {
          name: "eventQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "zeroed out event queue"
          ]
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false,
          docs: [
            "zeroed out bids"
          ]
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false,
          docs: [
            "zeroed out asks"
          ]
        },
        {
          name: "splTokenAccountCoin",
          isMut: true,
          isSigner: false,
          docs: [
            "spl-token account for the coin currency"
          ]
        },
        {
          name: "splTokenAccountPrice",
          isMut: true,
          isSigner: false,
          docs: [
            "spl-token account for the price currency"
          ]
        },
        {
          name: "coinCurrencyMint",
          isMut: false,
          isSigner: false,
          docs: [
            "coin currency Mint"
          ]
        },
        {
          name: "priceCurrencyMint",
          isMut: false,
          isSigner: false,
          docs: [
            "price currency Mint"
          ]
        },
        {
          name: "rentSysvar",
          isMut: false,
          isSigner: false,
          docs: [
            "the rent sysvar"
          ]
        },
        {
          name: "openOrdersMarketAuthority",
          isMut: false,
          isSigner: false,
          optional: true,
          docs: [
            "open orders market authority (optional)"
          ]
        },
        {
          name: "pruneAuthority",
          isMut: false,
          isSigner: false,
          optional: true,
          docs: [
            "prune authority (optional, requires open orders market authority)"
          ]
        },
        {
          name: "crankAuthority",
          isMut: false,
          isSigner: false,
          optional: true,
          docs: [
            "crank authority (optional, requires prune authority)"
          ]
        }
      ],
      args: [
        {
          name: "args",
          type: {
            defined: "InitializeMarketInstruction"
          }
        }
      ]
    },
    {
      name: "NewOrder",
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: false,
          docs: [
            "the market"
          ]
        },
        {
          name: "openOrders",
          isMut: true,
          isSigner: false,
          docs: [
            "the OpenOrders account to use"
          ]
        },
        {
          name: "requestQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "the request queue"
          ]
        },
        {
          name: "orderPayer",
          isMut: true,
          isSigner: false,
          docs: [
            "the (coin or price currency) account paying for the order"
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true,
          docs: [
            "owner of the OpenOrders account"
          ]
        },
        {
          name: "coinVault",
          isMut: true,
          isSigner: false,
          docs: [
            "coin vault"
          ]
        },
        {
          name: "pcVault",
          isMut: true,
          isSigner: false,
          docs: [
            "pc vault"
          ]
        },
        {
          name: "splTokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "spl token program"
          ]
        },
        {
          name: "rentSysvar",
          isMut: false,
          isSigner: false,
          docs: [
            "the rent sysvar"
          ]
        },
        {
          name: "feeDiscounts",
          isMut: false,
          isSigner: false,
          optional: true,
          docs: [
            "(optional) the (M)SRM account used for fee discounts"
          ]
        }
      ],
      args: [
        {
          name: "args",
          type: {
            defined: "NewOrderInstructionV1"
          },
          docs: []
        }
      ]
    },
    {
      name: "MatchOrders",
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: false,
          docs: [
            "market"
          ]
        },
        {
          name: "requestQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "req_q"
          ]
        },
        {
          name: "eventQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "event_q"
          ]
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false,
          docs: [
            "bids"
          ]
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false,
          docs: [
            "asks"
          ]
        }
      ],
      args: [
        {
          name: "limit",
          type: "u16"
        }
      ]
    },
    {
      name: "ConsumeEvents",
      accounts: [
        {
          name: "openOrders",
          isMut: true,
          isSigner: false,
          docs: [
            "OpenOrders; TODO: this is an array of accounts"
          ]
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          docs: [
            "market"
          ]
        },
        {
          name: "eventQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "event queue"
          ]
        },
        {
          name: "coinFeeReceivable",
          isMut: true,
          isSigner: false,
          docs: []
        },
        {
          name: "pcFeeReceivable",
          isMut: true,
          isSigner: false,
          docs: []
        }
      ],
      args: [
        {
          name: "limit",
          type: "u16",
          docs: []
        }
      ]
    },
    {
      name: "CancelOrder",
      accounts: [
        {
          name: "market",
          isMut: false,
          isSigner: false,
          docs: [
            "market"
          ]
        },
        {
          name: "openOrders",
          isMut: true,
          isSigner: false,
          docs: [
            "OpenOrders"
          ]
        },
        {
          name: "requestQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "the request queue"
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true,
          docs: [
            "the OpenOrders owner"
          ]
        }
      ],
      args: [
        {
          name: "args",
          type: {
            defined: "CancelOrderInstructionV2"
          }
        }
      ]
    },
    {
      name: "SettleFunds",
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: false,
          docs: [
            "market"
          ]
        },
        {
          name: "openOrders",
          isMut: true,
          isSigner: false,
          docs: [
            "OpenOrders"
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true,
          docs: [
            "the OpenOrders owner"
          ]
        },
        {
          name: "coinVault",
          isMut: true,
          isSigner: false,
          docs: [
            "coin vault"
          ]
        },
        {
          name: "pcVault",
          isMut: true,
          isSigner: false,
          docs: [
            "pc vault"
          ]
        },
        {
          name: "coinWallet",
          isMut: true,
          isSigner: false,
          docs: [
            "coin wallet"
          ]
        },
        {
          name: "pcWallet",
          isMut: true,
          isSigner: false,
          docs: [
            "pc wallet"
          ]
        },
        {
          name: "vaultSigner",
          isMut: false,
          isSigner: false,
          docs: [
            "vault signer"
          ]
        },
        {
          name: "splTokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "spl token program"
          ]
        },
        {
          name: "referrerPcWallet",
          isMut: true,
          isSigner: false,
          optional: true,
          docs: [
            "(optional) referrer pc wallet"
          ]
        }
      ],
      args: []
    },
    {
      name: "CancelOrderByClientId",
      accounts: [
        {
          name: "market",
          isMut: false,
          isSigner: false,
          docs: [
            "market"
          ]
        },
        {
          name: "openOrders",
          isMut: true,
          isSigner: false,
          docs: [
            "OpenOrders"
          ]
        },
        {
          name: "requestQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "the request queue"
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true,
          docs: [
            "the OpenOrders owner"
          ]
        }
      ],
      args: [
        {
          name: "clientOrderID",
          type: "u64",
          docs: []
        }
      ]
    },
    {
      name: "DisableMarket",
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: false,
          docs: [
            "market"
          ]
        },
        {
          name: "disableAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "disable authority"
          ]
        }
      ],
      args: []
    },
    {
      name: "SweepFees",
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: false,
          docs: [
            "market"
          ]
        },
        {
          name: "pcVault",
          isMut: true,
          isSigner: false,
          docs: [
            "pc vault"
          ]
        },
        {
          name: "feeSweepingAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "fee sweeping authority"
          ]
        },
        {
          name: "feeReceivable",
          isMut: true,
          isSigner: false,
          docs: [
            "fee receivable account"
          ]
        },
        {
          name: "vaultSigner",
          isMut: false,
          isSigner: false,
          docs: [
            "vault signer"
          ]
        },
        {
          name: "splTokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "spl token program"
          ]
        }
      ],
      args: []
    },
    {
      name: "NewOrderV2",
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: false,
          docs: [
            "the market"
          ]
        },
        {
          name: "openOrders",
          isMut: true,
          isSigner: false,
          docs: [
            "the OpenOrders account to use"
          ]
        },
        {
          name: "requestQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "the request queue"
          ]
        },
        {
          name: "orderPayer",
          isMut: true,
          isSigner: false,
          docs: [
            "the (coin or price currency) account paying for the order"
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true,
          docs: [
            "owner of the OpenOrders account"
          ]
        },
        {
          name: "coinVault",
          isMut: true,
          isSigner: false,
          docs: [
            "coin vault"
          ]
        },
        {
          name: "pcVault",
          isMut: true,
          isSigner: false,
          docs: [
            "pc vault"
          ]
        },
        {
          name: "splTokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "spl token program"
          ]
        },
        {
          name: "rentSysvar",
          isMut: false,
          isSigner: false,
          docs: [
            "the rent sysvar"
          ]
        },
        {
          name: "feeDiscounts",
          isMut: false,
          isSigner: false,
          optional: true,
          docs: [
            "(optional) the (M)SRM account used for fee discounts"
          ]
        }
      ],
      args: [
        {
          name: "args",
          type: {
            defined: "NewOrderInstructionV2"
          }
        }
      ]
    },
    {
      name: "NewOrderV3",
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: false,
          docs: [
            "the market"
          ]
        },
        {
          name: "openOrders",
          isMut: true,
          isSigner: false,
          docs: [
            "the OpenOrders account to use"
          ]
        },
        {
          name: "requestQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "the request queue"
          ]
        },
        {
          name: "eventQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "the event queue"
          ]
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false,
          docs: [
            "bids"
          ]
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false,
          docs: [
            "asks"
          ]
        },
        {
          name: "orderPayer",
          isMut: true,
          isSigner: false,
          docs: [
            "the (coin or price currency) account paying for the order"
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true,
          docs: [
            "owner of the OpenOrders account"
          ]
        },
        {
          name: "coinVault",
          isMut: true,
          isSigner: false,
          docs: [
            "coin vault"
          ]
        },
        {
          name: "pcVault",
          isMut: true,
          isSigner: false,
          docs: [
            "pc vault"
          ]
        },
        {
          name: "splTokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "spl token program"
          ]
        },
        {
          name: "rentSysvar",
          isMut: false,
          isSigner: false,
          docs: [
            "the rent sysvar"
          ]
        },
        {
          name: "feeDiscounts",
          isMut: false,
          isSigner: false,
          optional: true,
          docs: [
            "(optional) the (M)SRM account used for fee discounts"
          ]
        }
      ],
      args: [
        {
          name: "args",
          type: {
            defined: "NewOrderInstructionV3"
          },
          docs: []
        }
      ]
    },
    {
      name: "CancelOrderV2",
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: false,
          docs: [
            "market"
          ]
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false,
          docs: [
            "bids"
          ]
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false,
          docs: [
            "asks"
          ]
        },
        {
          name: "openOrders",
          isMut: true,
          isSigner: false,
          docs: [
            "OpenOrders"
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true,
          docs: [
            "the OpenOrders owner"
          ]
        },
        {
          name: "eventQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "event_q"
          ]
        }
      ],
      args: [
        {
          name: "args",
          type: {
            defined: "CancelOrderInstructionV2"
          },
          docs: []
        }
      ]
    },
    {
      name: "CancelOrderByClientIdV2",
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: false,
          docs: [
            "market"
          ]
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false,
          docs: [
            "bids"
          ]
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false,
          docs: [
            "asks"
          ]
        },
        {
          name: "openOrders",
          isMut: true,
          isSigner: false,
          docs: [
            "OpenOrders"
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true,
          docs: [
            "the OpenOrders owner"
          ]
        },
        {
          name: "eventQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "event_q"
          ]
        }
      ],
      args: [
        {
          name: "client_order_id",
          type: "u64",
          docs: []
        }
      ]
    },
    {
      name: "SendTake",
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: false,
          docs: [
            "market"
          ]
        },
        {
          name: "requestQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "the request queue"
          ]
        },
        {
          name: "eventQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "the event queue"
          ]
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false,
          docs: [
            "bids"
          ]
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false,
          docs: [
            "asks"
          ]
        },
        {
          name: "coinCurrencyWallet",
          isMut: true,
          isSigner: false,
          docs: [
            "the coin currency wallet account"
          ]
        },
        {
          name: "priceCurrencyWallet",
          isMut: true,
          isSigner: false,
          docs: [
            "the price currency wallet account"
          ]
        },
        {
          name: "signer",
          isMut: false,
          isSigner: false,
          docs: [
            "signer"
          ]
        },
        {
          name: "coinVault",
          isMut: true,
          isSigner: false,
          docs: [
            "coin vault"
          ]
        },
        {
          name: "pcVault",
          isMut: true,
          isSigner: false,
          docs: [
            "pc vault"
          ]
        },
        {
          name: "splTokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "spl token program"
          ]
        },
        {
          name: "vaultSigner",
          isMut: false,
          isSigner: false,
          docs: [
            "vault signer"
          ]
        },
        {
          name: "feeDiscounts",
          isMut: false,
          isSigner: false,
          docs: [
            "(optional) the (M)SRM account used for fee discounts"
          ]
        }
      ],
      args: [
        {
          name: "args",
          type: {
            defined: "SendTakeInstruction"
          }
        }
      ]
    },
    {
      name: "CloseOpenOrders",
      accounts: [
        {
          name: "openOrders",
          isMut: true,
          isSigner: false,
          docs: [
            "OpenOrders"
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true,
          docs: [
            "the OpenOrders owner"
          ]
        },
        {
          name: "destination",
          isMut: true,
          isSigner: false,
          docs: [
            "the destination account to send rent exemption SOL to"
          ]
        },
        {
          name: "market",
          isMut: false,
          isSigner: false,
          docs: [
            "market"
          ]
        }
      ],
      args: []
    },
    {
      name: "InitOpenOrders",
      accounts: [
        {
          name: "openOrders",
          isMut: true,
          isSigner: false,
          docs: [
            "OpenOrders"
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true,
          docs: [
            "the OpenOrders owner"
          ]
        },
        {
          name: "market",
          isMut: false,
          isSigner: false,
          docs: [
            "market"
          ]
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false,
          docs: [
            "TODO: rent?"
          ]
        },
        {
          name: "marketAuthority",
          isMut: false,
          isSigner: false,
          optional: true,
          docs: [
            "open orders market authority (optional)."
          ]
        }
      ],
      args: []
    },
    {
      name: "Prune",
      docs: [
        "Removes all orders for a given open orders account from the orderbook."
      ],
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: false,
          docs: [
            "market"
          ]
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false,
          docs: [
            "bids"
          ]
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false,
          docs: [
            "asks"
          ]
        },
        {
          name: "pruneAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "prune authority"
          ]
        },
        {
          name: "openOrders",
          isMut: true,
          isSigner: false,
          docs: [
            "open orders."
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: false,
          docs: [
            "open orders owner."
          ]
        },
        {
          name: "eventQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "event queue."
          ]
        }
      ],
      args: [
        {
          name: "limit",
          type: "u16",
          docs: []
        }
      ]
    },
    {
      name: "ConsumeEventsPermissioned",
      accounts: [
        {
          name: "openOrders",
          isMut: true,
          isSigner: false,
          docs: [
            "OpenOrders; TODO: this is an array"
          ]
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          docs: [
            "market"
          ]
        },
        {
          name: "eventQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "event queue"
          ]
        },
        {
          name: "crankAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "crank authority"
          ]
        }
      ],
      args: [
        {
          name: "limit",
          type: "u16",
          docs: []
        }
      ]
    }
  ],
  accounts: [
    {
      name: "MarketStateV2",
      type: {
        kind: "struct",
        fields: [
          {
            name: "inner",
            type: {
              defined: "MarketState"
            },
            docs: []
          },
          {
            name: "open_orders_authority",
            type: "publicKey",
            docs: []
          },
          {
            name: "prune_authority",
            type: "publicKey",
            docs: []
          },
          {
            name: "consume_events_authority",
            type: "publicKey",
            docs: []
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                992
              ]
            },
            docs: [
              "Unused bytes for future upgrades."
            ]
          }
        ]
      },
      docs: []
    },
    {
      name: "MarketState",
      type: {
        kind: "struct",
        fields: [
          {
            name: "account_flags",
            type: "u64",
            docs: [
              "0",
              "Initialized, Market"
            ]
          },
          {
            name: "own_address",
            type: {
              array: [
                "u64",
                4
              ]
            },
            docs: [
              "1"
            ]
          },
          {
            name: "vault_signer_nonce",
            type: "u64",
            docs: [
              "5"
            ]
          },
          {
            name: "coin_mint",
            type: {
              array: [
                "u64",
                4
              ]
            },
            docs: [
              "6"
            ]
          },
          {
            name: "pc_mint",
            type: {
              array: [
                "u64",
                4
              ]
            },
            docs: [
              "10"
            ]
          },
          {
            name: "coin_vault",
            type: {
              array: [
                "u64",
                4
              ]
            },
            docs: [
              "14"
            ]
          },
          {
            name: "coin_deposits_total",
            type: "u64",
            docs: [
              "18"
            ]
          },
          {
            name: "coin_fees_accrued",
            type: "u64",
            docs: [
              "19"
            ]
          },
          {
            name: "pc_vault",
            type: {
              array: [
                "u64",
                4
              ]
            },
            docs: [
              "20"
            ]
          },
          {
            name: "pc_deposits_total",
            type: "u64",
            docs: [
              "24"
            ]
          },
          {
            name: "pc_fees_accrued",
            type: "u64",
            docs: [
              "25"
            ]
          },
          {
            name: "pc_dust_threshold",
            type: "u64",
            docs: [
              "26"
            ]
          },
          {
            name: "req_q",
            type: {
              array: [
                "u64",
                4
              ]
            },
            docs: [
              "27"
            ]
          },
          {
            name: "event_q",
            type: {
              array: [
                "u64",
                4
              ]
            },
            docs: [
              "31"
            ]
          },
          {
            name: "bids",
            type: {
              array: [
                "u64",
                4
              ]
            },
            docs: [
              "35"
            ]
          },
          {
            name: "asks",
            type: {
              array: [
                "u64",
                4
              ]
            },
            docs: [
              "39"
            ]
          },
          {
            name: "coin_lot_size",
            type: "u64",
            docs: [
              "43"
            ]
          },
          {
            name: "pc_lot_size",
            type: "u64",
            docs: [
              "44"
            ]
          },
          {
            name: "fee_rate_bps",
            type: "u64",
            docs: [
              "45"
            ]
          },
          {
            name: "referrer_rebates_accrued",
            type: "u64",
            docs: [
              "46"
            ]
          }
        ]
      },
      docs: []
    },
    {
      name: "OpenOrders",
      type: {
        kind: "struct",
        fields: [
          {
            name: "account_flags",
            type: "u64",
            docs: [
              "Initialized, OpenOrders"
            ]
          },
          {
            name: "market",
            type: {
              array: [
                "u64",
                4
              ]
            },
            docs: []
          },
          {
            name: "owner",
            type: {
              array: [
                "u64",
                4
              ]
            },
            docs: []
          },
          {
            name: "native_coin_free",
            type: "u64",
            docs: []
          },
          {
            name: "native_coin_total",
            type: "u64",
            docs: []
          },
          {
            name: "native_pc_free",
            type: "u64",
            docs: []
          },
          {
            name: "native_pc_total",
            type: "u64",
            docs: []
          },
          {
            name: "free_slot_bits",
            type: "u128",
            docs: []
          },
          {
            name: "is_bid_bits",
            type: "u128",
            docs: []
          },
          {
            name: "orders",
            type: {
              array: [
                "u128",
                128
              ]
            },
            docs: []
          },
          {
            name: "client_order_ids",
            type: {
              array: [
                "u64",
                128
              ]
            },
            docs: [
              "Using Option<NonZeroU64> in a pod type requires nightly"
            ]
          },
          {
            name: "referrer_rebates_accrued",
            type: "u64",
            docs: []
          }
        ]
      },
      docs: []
    },
    {
      name: "RequestQueueHeader",
      type: {
        kind: "struct",
        fields: [
          {
            name: "account_flags",
            type: "u64",
            docs: [
              "Initialized, RequestQueue"
            ]
          },
          {
            name: "head",
            type: "u64",
            docs: []
          },
          {
            name: "count",
            type: "u64",
            docs: []
          },
          {
            name: "next_seq_num",
            type: "u64",
            docs: []
          }
        ]
      },
      docs: []
    },
    {
      name: "Request",
      type: {
        kind: "struct",
        fields: [
          {
            name: "request_flags",
            type: "u8",
            docs: []
          },
          {
            name: "owner_slot",
            type: "u8",
            docs: []
          },
          {
            name: "fee_tier",
            type: "u8",
            docs: []
          },
          {
            name: "self_trade_behavior",
            type: "u8",
            docs: []
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                4
              ]
            },
            docs: []
          },
          {
            name: "max_coin_qty_or_cancel_id",
            type: "u64",
            docs: []
          },
          {
            name: "native_pc_qty_locked",
            type: "u64",
            docs: []
          },
          {
            name: "order_id",
            type: "u128",
            docs: []
          },
          {
            name: "owner",
            type: {
              array: [
                "u64",
                4
              ]
            },
            docs: []
          },
          {
            name: "client_order_id",
            type: "u64",
            docs: []
          }
        ]
      },
      docs: []
    },
    {
      name: "RequestView",
      type: {
        kind: "enum",
        variants: [
          {
            name: "NewOrder",
            fields: [
              {
                name: "side",
                type: {
                  defined: "Side"
                },
                docs: []
              },
              {
                name: "order_type",
                type: {
                  defined: "OrderType"
                },
                docs: []
              },
              {
                name: "owner_slot",
                type: "u8",
                docs: []
              },
              {
                name: "fee_tier",
                type: {
                  defined: "FeeTier"
                },
                docs: []
              },
              {
                name: "order_id",
                type: "u128",
                docs: []
              },
              {
                name: "max_coin_qty",
                type: "u64",
                docs: []
              },
              {
                name: "native_pc_qty_locked",
                type: {
                  option: "u64"
                },
                docs: []
              },
              {
                name: "owner",
                type: {
                  array: [
                    "u64",
                    4
                  ]
                },
                docs: []
              },
              {
                name: "client_order_id",
                type: {
                  option: "u64"
                },
                docs: []
              },
              {
                name: "self_trade_behavior",
                type: {
                  defined: "SelfTradeBehavior"
                },
                docs: []
              }
            ]
          },
          {
            name: "CancelOrder",
            fields: [
              {
                name: "side",
                type: {
                  defined: "Side"
                },
                docs: []
              },
              {
                name: "order_id",
                type: "u128",
                docs: []
              },
              {
                name: "cancel_id",
                type: "u64",
                docs: []
              },
              {
                name: "expected_owner_slot",
                type: "u8",
                docs: []
              },
              {
                name: "expected_owner",
                type: {
                  array: [
                    "u64",
                    4
                  ]
                },
                docs: []
              },
              {
                name: "client_order_id",
                type: {
                  option: "u64"
                },
                docs: []
              }
            ]
          }
        ]
      },
      docs: []
    },
    {
      name: "EventQueueHeader",
      type: {
        kind: "struct",
        fields: [
          {
            name: "account_flags",
            type: "u64",
            docs: [
              "Initialized, EventQueue"
            ]
          },
          {
            name: "head",
            type: "u64",
            docs: []
          },
          {
            name: "count",
            type: "u64",
            docs: []
          },
          {
            name: "seq_num",
            type: "u64",
            docs: []
          }
        ]
      },
      docs: []
    },
    {
      name: "Event",
      type: {
        kind: "struct",
        fields: [
          {
            name: "event_flags",
            type: "u8",
            docs: []
          },
          {
            name: "owner_slot",
            type: "u8",
            docs: []
          },
          {
            name: "fee_tier",
            type: "u8",
            docs: []
          },
          {
            name: "_padding",
            type: {
              array: [
                "u8",
                5
              ]
            },
            docs: []
          },
          {
            name: "native_qty_released",
            type: "u64",
            docs: []
          },
          {
            name: "native_qty_paid",
            type: "u64",
            docs: []
          },
          {
            name: "native_fee_or_rebate",
            type: "u64",
            docs: []
          },
          {
            name: "order_id",
            type: "u128",
            docs: []
          },
          {
            name: "owner",
            type: {
              array: [
                "u64",
                4
              ]
            },
            docs: []
          },
          {
            name: "client_order_id",
            type: "u64",
            docs: []
          }
        ]
      },
      docs: []
    },
    {
      name: "EventView",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Fill",
            fields: [
              {
                name: "side",
                type: {
                  defined: "Side"
                },
                docs: []
              },
              {
                name: "maker",
                type: "bool",
                docs: []
              },
              {
                name: "native_qty_paid",
                type: "u64",
                docs: []
              },
              {
                name: "native_qty_received",
                type: "u64",
                docs: []
              },
              {
                name: "native_fee_or_rebate",
                type: "u64",
                docs: []
              },
              {
                name: "order_id",
                type: "u128",
                docs: []
              },
              {
                name: "owner",
                type: {
                  array: [
                    "u64",
                    4
                  ]
                },
                docs: []
              },
              {
                name: "owner_slot",
                type: "u8",
                docs: []
              },
              {
                name: "fee_tier",
                type: {
                  defined: "FeeTier"
                },
                docs: []
              },
              {
                name: "client_order_id",
                type: {
                  option: "u64"
                },
                docs: []
              }
            ]
          },
          {
            name: "Out",
            fields: [
              {
                name: "side",
                type: {
                  defined: "Side"
                },
                docs: []
              },
              {
                name: "release_funds",
                type: "bool",
                docs: []
              },
              {
                name: "native_qty_unlocked",
                type: "u64",
                docs: []
              },
              {
                name: "native_qty_still_locked",
                type: "u64",
                docs: []
              },
              {
                name: "order_id",
                type: "u128",
                docs: []
              },
              {
                name: "owner",
                type: {
                  array: [
                    "u64",
                    4
                  ]
                },
                docs: []
              },
              {
                name: "owner_slot",
                type: "u8",
                docs: []
              },
              {
                name: "client_order_id",
                type: {
                  option: "u64"
                },
                docs: []
              }
            ]
          }
        ]
      },
      docs: []
    }
  ],
  types: [
    {
      name: "InitializeMarketInstruction",
      type: {
        kind: "struct",
        fields: [
          {
            name: "coin_lot_size",
            type: "u64",
            docs: [
              "In the matching engine, all prices and balances are integers.",
              "This only works if the smallest representable quantity of the coin",
              "is at least a few orders of magnitude larger than the smallest representable",
              "quantity of the price currency. The internal representation also relies on",
              "on the assumption that every order will have a (quantity x price) value that",
              "fits into a u64.",
              "",
              "If these assumptions are problematic, rejigger the lot sizes."
            ]
          },
          {
            name: "pc_lot_size",
            type: "u64",
            docs: []
          },
          {
            name: "fee_rate_bps",
            type: "u16",
            docs: []
          },
          {
            name: "vault_signer_nonce",
            type: "u64",
            docs: []
          },
          {
            name: "pc_dust_threshold",
            type: "u64",
            docs: []
          }
        ]
      },
      docs: []
    },
    {
      name: "NewOrderInstructionV1",
      type: {
        kind: "struct",
        fields: [
          {
            name: "side",
            type: {
              defined: "Side"
            },
            docs: []
          },
          {
            name: "limit_price",
            type: "u64",
            docs: []
          },
          {
            name: "max_qty",
            type: "u64",
            docs: []
          },
          {
            name: "order_type",
            type: {
              defined: "OrderType"
            },
            docs: []
          },
          {
            name: "client_id",
            type: "u64",
            docs: []
          }
        ]
      },
      docs: []
    },
    {
      name: "CancelOrderInstructionV2",
      type: {
        kind: "struct",
        fields: [
          {
            name: "side",
            type: {
              defined: "Side"
            },
            docs: []
          },
          {
            name: "order_id",
            type: "u128",
            docs: []
          }
        ]
      },
      docs: []
    },
    {
      name: "NewOrderInstructionV2",
      type: {
        kind: "struct",
        fields: [
          {
            name: "side",
            type: {
              defined: "Side"
            },
            docs: []
          },
          {
            name: "limit_price",
            type: "u64",
            docs: []
          },
          {
            name: "max_qty",
            type: "u64",
            docs: []
          },
          {
            name: "order_type",
            type: {
              defined: "OrderType"
            },
            docs: []
          },
          {
            name: "client_id",
            type: "u64",
            docs: []
          },
          {
            name: "self_trade_behavior",
            type: {
              defined: "SelfTradeBehavior"
            },
            docs: []
          }
        ]
      },
      docs: []
    },
    {
      name: "NewOrderInstructionV3",
      type: {
        kind: "struct",
        fields: [
          {
            name: "side",
            type: {
              defined: "Side"
            },
            docs: []
          },
          {
            name: "limit_price",
            type: "u64",
            docs: []
          },
          {
            name: "max_coin_qty",
            type: "u64",
            docs: []
          },
          {
            name: "max_native_pc_qty_including_fees",
            type: "u64",
            docs: []
          },
          {
            name: "self_trade_behavior",
            type: {
              defined: "SelfTradeBehavior"
            },
            docs: []
          },
          {
            name: "order_type",
            type: {
              defined: "OrderType"
            },
            docs: []
          },
          {
            name: "client_order_id",
            type: "u64",
            docs: []
          },
          {
            name: "limit",
            type: "u16",
            docs: []
          }
        ]
      },
      docs: []
    },
    {
      name: "SendTakeInstruction",
      type: {
        kind: "struct",
        fields: [
          {
            name: "side",
            type: {
              defined: "Side"
            },
            docs: []
          },
          {
            name: "limit_price",
            type: "u64",
            docs: []
          },
          {
            name: "max_coin_qty",
            type: "u64",
            docs: []
          },
          {
            name: "max_native_pc_qty_including_fees",
            type: "u64",
            docs: []
          },
          {
            name: "min_coin_qty",
            type: "u64",
            docs: []
          },
          {
            name: "min_native_pc_qty",
            type: "u64",
            docs: []
          },
          {
            name: "limit",
            type: "u16",
            docs: []
          }
        ]
      },
      docs: []
    },
    {
      name: "Side",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Bid"
          },
          {
            name: "Ask"
          }
        ]
      },
      docs: []
    },
    {
      name: "OrderType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Limit"
          },
          {
            name: "ImmediateOrCancel"
          },
          {
            name: "PostOnly"
          }
        ]
      },
      docs: []
    },
    {
      name: "SelfTradeBehavior",
      type: {
        kind: "enum",
        variants: [
          {
            name: "DecrementTake"
          },
          {
            name: "CancelProvide"
          },
          {
            name: "AbortTransaction"
          }
        ]
      },
      docs: []
    },
    {
      name: "FeeTier",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Base"
          },
          {
            name: "SRM2"
          },
          {
            name: "SRM3"
          },
          {
            name: "SRM4"
          },
          {
            name: "SRM5"
          },
          {
            name: "SRM6"
          },
          {
            name: "MSRM"
          },
          {
            name: "Stable"
          }
        ]
      },
      docs: []
    }
  ],
  events: [],
  errors: [],
  metadata: {
    instruction_selector_type: "serum-fork"
  }
};

// idl/phoenix.json
var phoenix_default = {
  version: "0.2.4",
  name: "phoenix_v1",
  instructions: [
    {
      name: "Swap",
      accounts: [
        {
          name: "phoenixProgram",
          isMut: false,
          isSigner: false,
          desc: "Phoenix program"
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false,
          desc: "Phoenix log authority"
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          desc: "This account holds the market state"
        },
        {
          name: "trader",
          isMut: false,
          isSigner: true
        },
        {
          name: "baseAccount",
          isMut: true,
          isSigner: false,
          desc: "Trader base token account"
        },
        {
          name: "quoteAccount",
          isMut: true,
          isSigner: false,
          desc: "Trader quote token account"
        },
        {
          name: "baseVault",
          isMut: true,
          isSigner: false,
          desc: "Base vault PDA, seeds are [b'vault', market_address, base_mint_address]"
        },
        {
          name: "quoteVault",
          isMut: true,
          isSigner: false,
          desc: "Quote vault PDA, seeds are [b'vault', market_address, quote_mint_address]"
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          desc: "Token program"
        }
      ],
      args: [
        {
          name: "orderPacket",
          type: {
            defined: "OrderPacket"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 0
      }
    },
    {
      name: "SwapWithFreeFunds",
      accounts: [
        {
          name: "phoenixProgram",
          isMut: false,
          isSigner: false,
          desc: "Phoenix program"
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false,
          desc: "Phoenix log authority"
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          desc: "This account holds the market state"
        },
        {
          name: "trader",
          isMut: false,
          isSigner: true
        },
        {
          name: "seat",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "orderPacket",
          type: {
            defined: "OrderPacket"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 1
      }
    },
    {
      name: "PlaceLimitOrder",
      accounts: [
        {
          name: "phoenixProgram",
          isMut: false,
          isSigner: false,
          desc: "Phoenix program"
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false,
          desc: "Phoenix log authority"
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          desc: "This account holds the market state"
        },
        {
          name: "trader",
          isMut: false,
          isSigner: true
        },
        {
          name: "seat",
          isMut: false,
          isSigner: false
        },
        {
          name: "baseAccount",
          isMut: true,
          isSigner: false,
          desc: "Trader base token account"
        },
        {
          name: "quoteAccount",
          isMut: true,
          isSigner: false,
          desc: "Trader quote token account"
        },
        {
          name: "baseVault",
          isMut: true,
          isSigner: false,
          desc: "Base vault PDA, seeds are [b'vault', market_address, base_mint_address]"
        },
        {
          name: "quoteVault",
          isMut: true,
          isSigner: false,
          desc: "Quote vault PDA, seeds are [b'vault', market_address, quote_mint_address]"
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          desc: "Token program"
        }
      ],
      args: [
        {
          name: "orderPacket",
          type: {
            defined: "OrderPacket"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 2
      }
    },
    {
      name: "PlaceLimitOrderWithFreeFunds",
      accounts: [
        {
          name: "phoenixProgram",
          isMut: false,
          isSigner: false,
          desc: "Phoenix program"
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false,
          desc: "Phoenix log authority"
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          desc: "This account holds the market state"
        },
        {
          name: "trader",
          isMut: false,
          isSigner: true
        },
        {
          name: "seat",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "orderPacket",
          type: {
            defined: "OrderPacket"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 3
      }
    },
    {
      name: "ReduceOrder",
      accounts: [
        {
          name: "phoenixProgram",
          isMut: false,
          isSigner: false,
          desc: "Phoenix program"
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false,
          desc: "Phoenix log authority"
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          desc: "This account holds the market state"
        },
        {
          name: "trader",
          isMut: false,
          isSigner: true
        },
        {
          name: "baseAccount",
          isMut: true,
          isSigner: false,
          desc: "Trader base token account"
        },
        {
          name: "quoteAccount",
          isMut: true,
          isSigner: false,
          desc: "Trader quote token account"
        },
        {
          name: "baseVault",
          isMut: true,
          isSigner: false,
          desc: "Base vault PDA, seeds are [b'vault', market_address, base_mint_address]"
        },
        {
          name: "quoteVault",
          isMut: true,
          isSigner: false,
          desc: "Quote vault PDA, seeds are [b'vault', market_address, quote_mint_address]"
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          desc: "Token program"
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: "ReduceOrderParams"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 4
      }
    },
    {
      name: "ReduceOrderWithFreeFunds",
      accounts: [
        {
          name: "phoenixProgram",
          isMut: false,
          isSigner: false,
          desc: "Phoenix program"
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false,
          desc: "Phoenix log authority"
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          desc: "This account holds the market state"
        },
        {
          name: "trader",
          isMut: true,
          isSigner: true
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: "ReduceOrderParams"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 5
      }
    },
    {
      name: "CancelAllOrders",
      accounts: [
        {
          name: "phoenixProgram",
          isMut: false,
          isSigner: false,
          desc: "Phoenix program"
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false,
          desc: "Phoenix log authority"
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          desc: "This account holds the market state"
        },
        {
          name: "trader",
          isMut: false,
          isSigner: true
        },
        {
          name: "baseAccount",
          isMut: true,
          isSigner: false,
          desc: "Trader base token account"
        },
        {
          name: "quoteAccount",
          isMut: true,
          isSigner: false,
          desc: "Trader quote token account"
        },
        {
          name: "baseVault",
          isMut: true,
          isSigner: false,
          desc: "Base vault PDA, seeds are [b'vault', market_address, base_mint_address]"
        },
        {
          name: "quoteVault",
          isMut: true,
          isSigner: false,
          desc: "Quote vault PDA, seeds are [b'vault', market_address, quote_mint_address]"
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          desc: "Token program"
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 6
      }
    },
    {
      name: "CancelAllOrdersWithFreeFunds",
      accounts: [
        {
          name: "phoenixProgram",
          isMut: false,
          isSigner: false,
          desc: "Phoenix program"
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false,
          desc: "Phoenix log authority"
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          desc: "This account holds the market state"
        },
        {
          name: "trader",
          isMut: false,
          isSigner: true
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 7
      }
    },
    {
      name: "CancelUpTo",
      accounts: [
        {
          name: "phoenixProgram",
          isMut: false,
          isSigner: false,
          desc: "Phoenix program"
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false,
          desc: "Phoenix log authority"
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          desc: "This account holds the market state"
        },
        {
          name: "trader",
          isMut: false,
          isSigner: true
        },
        {
          name: "baseAccount",
          isMut: true,
          isSigner: false,
          desc: "Trader base token account"
        },
        {
          name: "quoteAccount",
          isMut: true,
          isSigner: false,
          desc: "Trader quote token account"
        },
        {
          name: "baseVault",
          isMut: true,
          isSigner: false,
          desc: "Base vault PDA, seeds are [b'vault', market_address, base_mint_address]"
        },
        {
          name: "quoteVault",
          isMut: true,
          isSigner: false,
          desc: "Quote vault PDA, seeds are [b'vault', market_address, quote_mint_address]"
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          desc: "Token program"
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: "CancelUpToParams"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 8
      }
    },
    {
      name: "CancelUpToWithFreeFunds",
      accounts: [
        {
          name: "phoenixProgram",
          isMut: false,
          isSigner: false,
          desc: "Phoenix program"
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false,
          desc: "Phoenix log authority"
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          desc: "This account holds the market state"
        },
        {
          name: "trader",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: "CancelUpToParams"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 9
      }
    },
    {
      name: "CancelMultipleOrdersById",
      accounts: [
        {
          name: "phoenixProgram",
          isMut: false,
          isSigner: false,
          desc: "Phoenix program"
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false,
          desc: "Phoenix log authority"
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          desc: "This account holds the market state"
        },
        {
          name: "trader",
          isMut: false,
          isSigner: true
        },
        {
          name: "baseAccount",
          isMut: true,
          isSigner: false,
          desc: "Trader base token account"
        },
        {
          name: "quoteAccount",
          isMut: true,
          isSigner: false,
          desc: "Trader quote token account"
        },
        {
          name: "baseVault",
          isMut: true,
          isSigner: false,
          desc: "Base vault PDA, seeds are [b'vault', market_address, base_mint_address]"
        },
        {
          name: "quoteVault",
          isMut: true,
          isSigner: false,
          desc: "Quote vault PDA, seeds are [b'vault', market_address, quote_mint_address]"
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          desc: "Token program"
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: "CancelMultipleOrdersByIdParams"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 10
      }
    },
    {
      name: "CancelMultipleOrdersByIdWithFreeFunds",
      accounts: [
        {
          name: "phoenixProgram",
          isMut: false,
          isSigner: false,
          desc: "Phoenix program"
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false,
          desc: "Phoenix log authority"
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          desc: "This account holds the market state"
        },
        {
          name: "trader",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: "CancelMultipleOrdersByIdParams"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 11
      }
    },
    {
      name: "WithdrawFunds",
      accounts: [
        {
          name: "phoenixProgram",
          isMut: false,
          isSigner: false,
          desc: "Phoenix program"
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false,
          desc: "Phoenix log authority"
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          desc: "This account holds the market state"
        },
        {
          name: "trader",
          isMut: false,
          isSigner: true
        },
        {
          name: "baseAccount",
          isMut: true,
          isSigner: false,
          desc: "Trader base token account"
        },
        {
          name: "quoteAccount",
          isMut: true,
          isSigner: false,
          desc: "Trader quote token account"
        },
        {
          name: "baseVault",
          isMut: true,
          isSigner: false,
          desc: "Base vault PDA, seeds are [b'vault', market_address, base_mint_address]"
        },
        {
          name: "quoteVault",
          isMut: true,
          isSigner: false,
          desc: "Quote vault PDA, seeds are [b'vault', market_address, quote_mint_address]"
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          desc: "Token program"
        }
      ],
      args: [
        {
          name: "withdrawFundsParams",
          type: {
            defined: "WithdrawParams"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 12
      }
    },
    {
      name: "DepositFunds",
      accounts: [
        {
          name: "phoenixProgram",
          isMut: false,
          isSigner: false,
          desc: "Phoenix program"
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false,
          desc: "Phoenix log authority"
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          desc: "This account holds the market state"
        },
        {
          name: "trader",
          isMut: false,
          isSigner: true
        },
        {
          name: "seat",
          isMut: false,
          isSigner: false
        },
        {
          name: "baseAccount",
          isMut: true,
          isSigner: false,
          desc: "Trader base token account"
        },
        {
          name: "quoteAccount",
          isMut: true,
          isSigner: false,
          desc: "Trader quote token account"
        },
        {
          name: "baseVault",
          isMut: true,
          isSigner: false,
          desc: "Base vault PDA, seeds are [b'vault', market_address, base_mint_address]"
        },
        {
          name: "quoteVault",
          isMut: true,
          isSigner: false,
          desc: "Quote vault PDA, seeds are [b'vault', market_address, quote_mint_address]"
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          desc: "Token program"
        }
      ],
      args: [
        {
          name: "depositFundsParams",
          type: {
            defined: "DepositParams"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 13
      }
    },
    {
      name: "RequestSeat",
      accounts: [
        {
          name: "phoenixProgram",
          isMut: false,
          isSigner: false,
          desc: "Phoenix program"
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false,
          desc: "Phoenix log authority"
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          desc: "This account holds the market state"
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true
        },
        {
          name: "seat",
          isMut: true,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          desc: "System program"
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 14
      }
    },
    {
      name: "Log",
      accounts: [
        {
          name: "logAuthority",
          isMut: false,
          isSigner: true,
          desc: "Log authority"
        }
      ],
      args: [
        {
          name: "header",
          type: {
            defined: "PhoenixMarketEvent"
          }
        },
        {
          name: "phoenix_events",
          type: {
            with_bin: true,
            defined: "PhoenixEvents"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 15
      }
    },
    {
      name: "PlaceMultiplePostOnlyOrders",
      accounts: [
        {
          name: "phoenixProgram",
          isMut: false,
          isSigner: false,
          desc: "Phoenix program"
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false,
          desc: "Phoenix log authority"
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          desc: "This account holds the market state"
        },
        {
          name: "trader",
          isMut: false,
          isSigner: true
        },
        {
          name: "seat",
          isMut: false,
          isSigner: false
        },
        {
          name: "baseAccount",
          isMut: true,
          isSigner: false,
          desc: "Trader base token account"
        },
        {
          name: "quoteAccount",
          isMut: true,
          isSigner: false,
          desc: "Trader quote token account"
        },
        {
          name: "baseVault",
          isMut: true,
          isSigner: false,
          desc: "Base vault PDA, seeds are [b'vault', market_address, base_mint_address]"
        },
        {
          name: "quoteVault",
          isMut: true,
          isSigner: false,
          desc: "Quote vault PDA, seeds are [b'vault', market_address, quote_mint_address]"
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          desc: "Token program"
        }
      ],
      args: [
        {
          name: "multipleOrderPacket",
          type: {
            defined: "MultipleOrderPacket"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 16
      }
    },
    {
      name: "PlaceMultiplePostOnlyOrdersWithFreeFunds",
      accounts: [
        {
          name: "phoenixProgram",
          isMut: false,
          isSigner: false,
          desc: "Phoenix program"
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false,
          desc: "Phoenix log authority"
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          desc: "This account holds the market state"
        },
        {
          name: "trader",
          isMut: false,
          isSigner: true
        },
        {
          name: "seat",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "multipleOrderPacket",
          type: {
            defined: "MultipleOrderPacket"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 17
      }
    },
    {
      name: "InitializeMarket",
      accounts: [
        {
          name: "phoenixProgram",
          isMut: false,
          isSigner: false,
          desc: "Phoenix program"
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false,
          desc: "Phoenix log authority"
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          desc: "This account holds the market state"
        },
        {
          name: "marketCreator",
          isMut: true,
          isSigner: true,
          desc: "The market_creator account must sign for the creation of new vaults"
        },
        {
          name: "baseMint",
          isMut: false,
          isSigner: false,
          desc: "Base mint account"
        },
        {
          name: "quoteMint",
          isMut: false,
          isSigner: false,
          desc: "Quote mint account"
        },
        {
          name: "baseVault",
          isMut: true,
          isSigner: false,
          desc: "Base vault PDA, seeds are [b'vault', market_address, base_mint_address]"
        },
        {
          name: "quoteVault",
          isMut: true,
          isSigner: false,
          desc: "Quote vault PDA, seeds are [b'vault', market_address, quote_mint_address]"
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          desc: "System program"
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          desc: "Token program"
        }
      ],
      args: [
        {
          name: "initializeParams",
          type: {
            defined: "InitializeParams"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 100
      }
    },
    {
      name: "ClaimAuthority",
      accounts: [
        {
          name: "phoenixProgram",
          isMut: false,
          isSigner: false,
          desc: "Phoenix program"
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false,
          desc: "Phoenix log authority"
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          desc: "This account holds the market state"
        },
        {
          name: "successor",
          isMut: false,
          isSigner: true,
          desc: "The successor account must sign to claim authority"
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 101
      }
    },
    {
      name: "NameSuccessor",
      accounts: [
        {
          name: "phoenixProgram",
          isMut: false,
          isSigner: false,
          desc: "Phoenix program"
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false,
          desc: "Phoenix log authority"
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          desc: "This account holds the market state"
        },
        {
          name: "marketAuthority",
          isMut: false,
          isSigner: true,
          desc: "The market_authority account must sign to name successor"
        }
      ],
      args: [
        {
          name: "successor",
          type: "publicKey"
        }
      ],
      discriminant: {
        type: "u8",
        value: 102
      }
    },
    {
      name: "ChangeMarketStatus",
      accounts: [
        {
          name: "phoenixProgram",
          isMut: false,
          isSigner: false,
          desc: "Phoenix program"
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false,
          desc: "Phoenix log authority"
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          desc: "This account holds the market state"
        },
        {
          name: "marketAuthority",
          isMut: false,
          isSigner: true,
          desc: "The market_authority account must sign to change market status"
        }
      ],
      args: [
        {
          name: "marketStatus",
          type: {
            defined: "MarketStatus"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 103
      }
    },
    {
      name: "ChangeSeatStatus",
      accounts: [
        {
          name: "phoenixProgram",
          isMut: false,
          isSigner: false,
          desc: "Phoenix program"
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false,
          desc: "Phoenix log authority"
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          desc: "This account holds the market state"
        },
        {
          name: "marketAuthority",
          isMut: false,
          isSigner: true,
          desc: "The market_authority account must sign to change seat status"
        },
        {
          name: "seat",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "approvalStatus",
          type: {
            defined: "SeatApprovalStatus"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 104
      }
    },
    {
      name: "RequestSeatAuthorized",
      accounts: [
        {
          name: "phoenixProgram",
          isMut: false,
          isSigner: false,
          desc: "Phoenix program"
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false,
          desc: "Phoenix log authority"
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          desc: "This account holds the market state"
        },
        {
          name: "marketAuthority",
          isMut: false,
          isSigner: true,
          desc: "The market_authority account must sign to request a seat on behalf of a trader"
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true
        },
        {
          name: "trader",
          isMut: false,
          isSigner: false
        },
        {
          name: "seat",
          isMut: true,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          desc: "System program"
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 105
      }
    },
    {
      name: "EvictSeat",
      accounts: [
        {
          name: "phoenixProgram",
          isMut: false,
          isSigner: false,
          desc: "Phoenix program"
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false,
          desc: "Phoenix log authority"
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          desc: "This account holds the market state"
        },
        {
          name: "marketAuthority",
          isMut: false,
          isSigner: true,
          desc: "The market_authority account must sign to evict a seat"
        },
        {
          name: "trader",
          isMut: false,
          isSigner: false
        },
        {
          name: "seat",
          isMut: false,
          isSigner: false,
          desc: "The trader's PDA seat account, seeds are [b'seat', market_address, trader_address]"
        },
        {
          name: "baseAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "quoteAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "baseVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "quoteVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          desc: "Token program"
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 106
      }
    },
    {
      name: "ForceCancelOrders",
      accounts: [
        {
          name: "phoenixProgram",
          isMut: false,
          isSigner: false,
          desc: "Phoenix program"
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false,
          desc: "Phoenix log authority"
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          desc: "This account holds the market state"
        },
        {
          name: "marketAuthority",
          isMut: false,
          isSigner: true,
          desc: "The market_authority account must sign to claim authority"
        },
        {
          name: "trader",
          isMut: false,
          isSigner: false
        },
        {
          name: "seat",
          isMut: false,
          isSigner: false,
          desc: "The trader's PDA seat account, seeds are [b'seat', market_address, trader_address]"
        },
        {
          name: "baseAccount",
          isMut: true,
          isSigner: false,
          desc: "Trader base token account"
        },
        {
          name: "quoteAccount",
          isMut: true,
          isSigner: false,
          desc: "Trader quote token account"
        },
        {
          name: "baseVault",
          isMut: true,
          isSigner: false,
          desc: "Base vault PDA, seeds are [b'vault', market_address, base_mint_address]"
        },
        {
          name: "quoteVault",
          isMut: true,
          isSigner: false,
          desc: "Quote vault PDA, seeds are [b'vault', market_address, quote_mint_address]"
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          desc: "Token program"
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: "CancelUpToParams"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 107
      }
    },
    {
      name: "CollectFees",
      accounts: [
        {
          name: "phoenixProgram",
          isMut: false,
          isSigner: false,
          desc: "Phoenix program"
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false,
          desc: "Phoenix log authority"
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          desc: "This account holds the market state"
        },
        {
          name: "sweeper",
          isMut: false,
          isSigner: true,
          desc: "Signer of collect fees instruction"
        },
        {
          name: "feeRecipient",
          isMut: true,
          isSigner: false,
          desc: "Fee collector quote token account"
        },
        {
          name: "quoteVault",
          isMut: true,
          isSigner: false,
          desc: "Quote vault PDA, seeds are [b'vault', market_address, quote_mint_address]"
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          desc: "Token program"
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 108
      }
    },
    {
      name: "ChangeFeeRecipient",
      accounts: [
        {
          name: "phoenixProgram",
          isMut: false,
          isSigner: false,
          desc: "Phoenix program"
        },
        {
          name: "logAuthority",
          isMut: false,
          isSigner: false,
          desc: "Phoenix log authority"
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          desc: "This account holds the market state"
        },
        {
          name: "marketAuthority",
          isMut: false,
          isSigner: true,
          desc: "The market_authority account must sign to change the free recipient"
        },
        {
          name: "newFeeRecipient",
          isMut: false,
          isSigner: false,
          desc: "New fee recipient"
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 109
      }
    }
  ],
  types: [
    {
      name: "MarketSizeParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "bidsSize",
            type: "u64"
          },
          {
            name: "asksSize",
            type: "u64"
          },
          {
            name: "numSeats",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "TokenParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "decimals",
            type: "u32"
          },
          {
            name: "vaultBump",
            type: "u32"
          },
          {
            name: "mintKey",
            type: "publicKey"
          },
          {
            name: "vaultKey",
            type: "publicKey"
          }
        ]
      }
    },
    {
      name: "Seat",
      type: {
        kind: "struct",
        fields: [
          {
            name: "discriminant",
            type: "u64"
          },
          {
            name: "market",
            type: "publicKey"
          },
          {
            name: "trader",
            type: "publicKey"
          },
          {
            name: "approvalStatus",
            type: "u64"
          },
          {
            name: "padding",
            type: {
              array: [
                "u64",
                6
              ]
            }
          }
        ]
      }
    },
    {
      name: "AuditLogHeader",
      type: {
        kind: "struct",
        fields: [
          {
            name: "instruction",
            type: "u8"
          },
          {
            name: "sequenceNumber",
            type: "u64"
          },
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "slot",
            type: "u64"
          },
          {
            name: "market",
            type: "publicKey"
          },
          {
            name: "signer",
            type: "publicKey"
          },
          {
            name: "totalEvents",
            type: "u16"
          }
        ]
      }
    },
    {
      name: "FillEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "index",
            type: "u16"
          },
          {
            name: "makerId",
            type: "publicKey"
          },
          {
            name: "orderSequenceNumber",
            type: "u64"
          },
          {
            name: "priceInTicks",
            type: "u64"
          },
          {
            name: "baseLotsFilled",
            type: "u64"
          },
          {
            name: "baseLotsRemaining",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "ReduceEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "index",
            type: "u16"
          },
          {
            name: "orderSequenceNumber",
            type: "u64"
          },
          {
            name: "priceInTicks",
            type: "u64"
          },
          {
            name: "baseLotsRemoved",
            type: "u64"
          },
          {
            name: "baseLotsRemaining",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "PlaceEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "index",
            type: "u16"
          },
          {
            name: "orderSequenceNumber",
            type: "u64"
          },
          {
            name: "clientOrderId",
            type: "u128"
          },
          {
            name: "priceInTicks",
            type: "u64"
          },
          {
            name: "baseLotsPlaced",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "EvictEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "index",
            type: "u16"
          },
          {
            name: "makerId",
            type: "publicKey"
          },
          {
            name: "orderSequenceNumber",
            type: "u64"
          },
          {
            name: "priceInTicks",
            type: "u64"
          },
          {
            name: "baseLotsEvicted",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "FillSummaryEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "index",
            type: "u16"
          },
          {
            name: "clientOrderId",
            type: "u128"
          },
          {
            name: "totalBaseLotsFilled",
            type: "u64"
          },
          {
            name: "totalQuoteLotsFilled",
            type: "u64"
          },
          {
            name: "totalFeeInQuoteLots",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "FeeEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "index",
            type: "u16"
          },
          {
            name: "feesCollectedInQuoteLots",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "TimeInForceEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "index",
            type: "u16"
          },
          {
            name: "orderSequenceNumber",
            type: "u64"
          },
          {
            name: "lastValidSlot",
            type: "u64"
          },
          {
            name: "lastValidUnixTimestampInSeconds",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "ExpiredOrderEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "index",
            type: "u16"
          },
          {
            name: "makerId",
            type: "publicKey"
          },
          {
            name: "orderSequenceNumber",
            type: "u64"
          },
          {
            name: "priceInTicks",
            type: "u64"
          },
          {
            name: "baseLotsRemoved",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "CancelUpToParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "side",
            type: {
              defined: "Side"
            }
          },
          {
            name: "tickLimit",
            type: {
              option: "u64"
            }
          },
          {
            name: "numOrdersToSearch",
            type: {
              option: "u32"
            }
          },
          {
            name: "numOrdersToCancel",
            type: {
              option: "u32"
            }
          }
        ]
      }
    },
    {
      name: "CancelMultipleOrdersByIdParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "orders",
            type: {
              vec: {
                defined: "CancelOrderParams"
              }
            }
          }
        ]
      }
    },
    {
      name: "DepositParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "quoteLotsToDeposit",
            type: "u64"
          },
          {
            name: "baseLotsToDeposit",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "InitializeParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "marketSizeParams",
            type: {
              defined: "MarketSizeParams"
            }
          },
          {
            name: "numQuoteLotsPerQuoteUnit",
            type: "u64"
          },
          {
            name: "tickSizeInQuoteLotsPerBaseUnit",
            type: "u64"
          },
          {
            name: "numBaseLotsPerBaseUnit",
            type: "u64"
          },
          {
            name: "takerFeeBps",
            type: "u16"
          },
          {
            name: "feeCollector",
            type: "publicKey"
          },
          {
            name: "rawBaseUnitsPerBaseUnit",
            type: {
              option: "u32"
            }
          }
        ]
      }
    },
    {
      name: "MultipleOrderPacket",
      type: {
        kind: "struct",
        fields: [
          {
            name: "bids",
            type: {
              vec: {
                defined: "CondensedOrder"
              }
            }
          },
          {
            name: "asks",
            type: {
              vec: {
                defined: "CondensedOrder"
              }
            }
          },
          {
            name: "clientOrderId",
            type: {
              option: "u128"
            }
          },
          {
            name: "failedMultipleLimitOrderBehavior",
            type: {
              defined: "FailedMultipleLimitOrderBehavior"
            }
          }
        ]
      }
    },
    {
      name: "CondensedOrder",
      type: {
        kind: "struct",
        fields: [
          {
            name: "priceInTicks",
            type: "u64"
          },
          {
            name: "sizeInBaseLots",
            type: "u64"
          },
          {
            name: "lastValidSlot",
            type: {
              option: "u64"
            }
          },
          {
            name: "lastValidUnixTimestampInSeconds",
            type: {
              option: "u64"
            }
          }
        ]
      }
    },
    {
      name: "CancelOrderParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "side",
            type: {
              defined: "Side"
            }
          },
          {
            name: "priceInTicks",
            type: "u64"
          },
          {
            name: "orderSequenceNumber",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "ReduceOrderParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "baseParams",
            type: {
              defined: "CancelOrderParams"
            }
          },
          {
            name: "size",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "WithdrawParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "quoteLotsToWithdraw",
            type: {
              option: "u64"
            }
          },
          {
            name: "baseLotsToWithdraw",
            type: {
              option: "u64"
            }
          }
        ]
      }
    },
    {
      name: "MarketHeader",
      type: {
        kind: "struct",
        fields: [
          {
            name: "discriminant",
            type: "u64"
          },
          {
            name: "status",
            type: "u64"
          },
          {
            name: "marketSizeParams",
            type: {
              defined: "MarketSizeParams"
            }
          },
          {
            name: "baseParams",
            type: {
              defined: "TokenParams"
            }
          },
          {
            name: "baseLotSize",
            type: "u64"
          },
          {
            name: "quoteParams",
            type: {
              defined: "TokenParams"
            }
          },
          {
            name: "quoteLotSize",
            type: "u64"
          },
          {
            name: "tickSizeInQuoteAtomsPerBaseUnit",
            type: "u64"
          },
          {
            name: "authority",
            type: "publicKey"
          },
          {
            name: "feeRecipient",
            type: "publicKey"
          },
          {
            name: "marketSequenceNumber",
            type: "u64"
          },
          {
            name: "successor",
            type: "publicKey"
          },
          {
            name: "rawBaseUnitsPerBaseUnit",
            type: "u32"
          },
          {
            name: "padding1",
            type: "u32"
          },
          {
            name: "padding2",
            type: {
              array: [
                "u64",
                32
              ]
            }
          }
        ]
      }
    },
    {
      name: "FIFOOrderId",
      type: {
        kind: "struct",
        fields: [
          {
            name: "priceInTicks",
            type: "u64"
          },
          {
            name: "orderSequenceNumber",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "PhoenixEvents",
      type: {
        kind: "struct",
        fields: [
          {
            name: "phoenix_events",
            with_bin: true,
            type: {
              vec: {
                defined: "PhoenixMarketEvent"
              }
            }
          }
        ]
      }
    },
    {
      name: "PhoenixMarketEvent",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Uninitialized"
          },
          {
            name: "Header",
            fields: [
              {
                defined: "AuditLogHeader"
              }
            ]
          },
          {
            name: "Fill",
            fields: [
              {
                defined: "FillEvent"
              }
            ]
          },
          {
            name: "Place",
            fields: [
              {
                defined: "PlaceEvent"
              }
            ]
          },
          {
            name: "Reduce",
            fields: [
              {
                defined: "ReduceEvent"
              }
            ]
          },
          {
            name: "Evict",
            fields: [
              {
                defined: "EvictEvent"
              }
            ]
          },
          {
            name: "FillSummary",
            fields: [
              {
                defined: "FillSummaryEvent"
              }
            ]
          },
          {
            name: "Fee",
            fields: [
              {
                defined: "FeeEvent"
              }
            ]
          },
          {
            name: "TimeInForce",
            fields: [
              {
                defined: "TimeInForceEvent"
              }
            ]
          },
          {
            name: "ExpiredOrder",
            fields: [
              {
                defined: "ExpiredOrderEvent"
              }
            ]
          }
        ]
      }
    },
    {
      name: "FailedMultipleLimitOrderBehavior",
      type: {
        kind: "enum",
        variants: [
          {
            name: "FailOnInsufficientFundsAndAmendOnCross"
          },
          {
            name: "FailOnInsufficientFundsAndFailOnCross"
          },
          {
            name: "SkipOnInsufficientFundsAndAmendOnCross"
          },
          {
            name: "SkipOnInsufficientFundsAndFailOnCross"
          }
        ]
      }
    },
    {
      name: "MarketStatus",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Uninitialized"
          },
          {
            name: "Active"
          },
          {
            name: "PostOnly"
          },
          {
            name: "Paused"
          },
          {
            name: "Closed"
          },
          {
            name: "Tombstoned"
          }
        ]
      }
    },
    {
      name: "SeatApprovalStatus",
      type: {
        kind: "enum",
        variants: [
          {
            name: "NotApproved"
          },
          {
            name: "Approved"
          },
          {
            name: "Retired"
          }
        ]
      }
    },
    {
      name: "OrderPacket",
      type: {
        kind: "enum",
        variants: [
          {
            name: "PostOnly",
            fields: [
              {
                name: "side",
                type: {
                  defined: "Side"
                }
              },
              {
                name: "price_in_ticks",
                type: "u64"
              },
              {
                name: "num_base_lots",
                type: "u64"
              },
              {
                name: "client_order_id",
                type: "u128"
              },
              {
                name: "reject_post_only",
                type: "bool"
              },
              {
                name: "use_only_deposited_funds",
                type: "bool"
              },
              {
                name: "last_valid_slot",
                type: {
                  option: "u64"
                }
              },
              {
                name: "last_valid_unix_timestamp_in_seconds",
                type: {
                  option: "u64"
                }
              },
              {
                name: "fail_silently_on_insufficient_funds",
                type: "bool"
              }
            ]
          },
          {
            name: "Limit",
            fields: [
              {
                name: "side",
                type: {
                  defined: "Side"
                }
              },
              {
                name: "price_in_ticks",
                type: "u64"
              },
              {
                name: "num_base_lots",
                type: "u64"
              },
              {
                name: "self_trade_behavior",
                type: {
                  defined: "SelfTradeBehavior"
                }
              },
              {
                name: "match_limit",
                type: {
                  option: "u64"
                }
              },
              {
                name: "client_order_id",
                type: "u128"
              },
              {
                name: "use_only_deposited_funds",
                type: "bool"
              },
              {
                name: "last_valid_slot",
                type: {
                  option: "u64"
                }
              },
              {
                name: "last_valid_unix_timestamp_in_seconds",
                type: {
                  option: "u64"
                }
              },
              {
                name: "fail_silently_on_insufficient_funds",
                type: "bool"
              }
            ]
          },
          {
            name: "ImmediateOrCancel",
            fields: [
              {
                name: "side",
                type: {
                  defined: "Side"
                }
              },
              {
                name: "price_in_ticks",
                type: {
                  option: "u64"
                }
              },
              {
                name: "num_base_lots",
                type: "u64"
              },
              {
                name: "num_quote_lots",
                type: "u64"
              },
              {
                name: "min_base_lots_to_fill",
                type: "u64"
              },
              {
                name: "min_quote_lots_to_fill",
                type: "u64"
              },
              {
                name: "self_trade_behavior",
                type: {
                  defined: "SelfTradeBehavior"
                }
              },
              {
                name: "match_limit",
                type: {
                  option: "u64"
                }
              },
              {
                name: "client_order_id",
                type: "u128"
              },
              {
                name: "use_only_deposited_funds",
                type: "bool"
              },
              {
                name: "last_valid_slot",
                type: {
                  option: "u64"
                }
              },
              {
                name: "last_valid_unix_timestamp_in_seconds",
                type: {
                  option: "u64"
                }
              }
            ]
          }
        ]
      }
    },
    {
      name: "Side",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Bid"
          },
          {
            name: "Ask"
          }
        ]
      }
    },
    {
      name: "SelfTradeBehavior",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Abort"
          },
          {
            name: "CancelProvide"
          },
          {
            name: "DecrementTake"
          }
        ]
      }
    }
  ],
  errors: [
    {
      code: 0,
      name: "InvalidMarketParameters",
      msg: "Invalid market parameters error"
    },
    {
      code: 1,
      name: "InvalidMarketAuthority",
      msg: "Invalid market authority error"
    },
    {
      code: 2,
      name: "FailedToLoadMarketFromAccount",
      msg: "Market deserialization error"
    },
    {
      code: 3,
      name: "MarketAlreadyInitialized",
      msg: "Market already initialized error"
    },
    {
      code: 4,
      name: "MarketUninitialized",
      msg: "Market is not initialized error"
    },
    {
      code: 5,
      name: "InvalidStateTransition",
      msg: "Invalid state transition error"
    },
    {
      code: 6,
      name: "InvalidMarketSigner",
      msg: "Invalid market signer error"
    },
    {
      code: 7,
      name: "InvalidLotSize",
      msg: "Invalid lot size error"
    },
    {
      code: 8,
      name: "InvalidTickSize",
      msg: "Invalid tick size error"
    },
    {
      code: 9,
      name: "InvalidMint",
      msg: "Invalid mint error"
    },
    {
      code: 10,
      name: "InvalidBaseVault",
      msg: "Invalid base vault error"
    },
    {
      code: 11,
      name: "InvalidQuoteVault",
      msg: "Invalid quote vault error"
    },
    {
      code: 12,
      name: "InvalidBaseAccount",
      msg: "Invalid base account error"
    },
    {
      code: 13,
      name: "InvalidQuoteAccount",
      msg: "Invalid quote account error"
    },
    {
      code: 14,
      name: "TooManyEvents",
      msg: "Too many events error"
    },
    {
      code: 15,
      name: "NewOrderError",
      msg: "New order error"
    },
    {
      code: 16,
      name: "ReduceOrderError",
      msg: "Reduce order error"
    },
    {
      code: 17,
      name: "CancelMultipleOrdersError",
      msg: "Cancel multiple orders error"
    },
    {
      code: 18,
      name: "WithdrawFundsError",
      msg: "Withdraw funds error"
    },
    {
      code: 19,
      name: "RemoveEmptyOrdersError",
      msg: "Remove empty orders error"
    },
    {
      code: 20,
      name: "TraderNotFound",
      msg: "Trader not found error"
    },
    {
      code: 21,
      name: "InvalidSeatStatus",
      msg: "Invalid seat status"
    },
    {
      code: 22,
      name: "EvictionError",
      msg: "Failed to evict trader"
    },
    {
      code: 23,
      name: "NonEmptyScratchBuffer",
      msg: "Non empty scratch buffer"
    },
    {
      code: 24,
      name: "FailedToSerializeEvent",
      msg: "Failed to serialize event"
    },
    {
      code: 25,
      name: "FailedToFlushBuffer",
      msg: "Failed to flush buffer"
    }
  ],
  metadata: {
    origin: "shank",
    address: "PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY"
  }
};

// idl/pumpfun-bonding.json
var pumpfun_bonding_default = {
  address: "6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P",
  metadata: {
    name: "pump",
    version: "0.1.0",
    spec: "0.1.0",
    description: "Created with Anchor"
  },
  instructions: [
    {
      name: "admin_set_creator",
      docs: ["Allows Global::admin_set_creator_authority to override the bonding curve creator"],
      discriminator: [69, 25, 171, 142, 57, 239, 13, 4],
      accounts: [
        {
          name: "admin_set_creator_authority",
          signer: true,
          relations: ["global"]
        },
        {
          name: "global",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [103, 108, 111, 98, 97, 108]
              }
            ]
          }
        },
        {
          name: "mint"
        },
        {
          name: "bonding_curve",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [98, 111, 110, 100, 105, 110, 103, 45, 99, 117, 114, 118, 101]
              },
              {
                kind: "account",
                path: "mint"
              }
            ]
          }
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "creator",
          type: "pubkey"
        }
      ]
    },
    {
      name: "admin_set_idl_authority",
      discriminator: [8, 217, 96, 231, 144, 104, 192, 5],
      accounts: [
        {
          name: "authority",
          signer: true,
          relations: ["global"]
        },
        {
          name: "global",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [103, 108, 111, 98, 97, 108]
              }
            ]
          }
        },
        {
          name: "idl_account",
          writable: true
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "program_signer",
          pda: {
            seeds: []
          }
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "idl_authority",
          type: "pubkey"
        }
      ]
    },
    {
      name: "admin_update_token_incentives",
      discriminator: [209, 11, 115, 87, 213, 23, 124, 204],
      accounts: [
        {
          name: "authority",
          writable: true,
          signer: true,
          relations: ["global"]
        },
        {
          name: "global",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [103, 108, 111, 98, 97, 108]
              }
            ]
          }
        },
        {
          name: "global_volume_accumulator",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  103,
                  108,
                  111,
                  98,
                  97,
                  108,
                  95,
                  118,
                  111,
                  108,
                  117,
                  109,
                  101,
                  95,
                  97,
                  99,
                  99,
                  117,
                  109,
                  117,
                  108,
                  97,
                  116,
                  111,
                  114
                ]
              }
            ]
          }
        },
        {
          name: "mint"
        },
        {
          name: "global_incentive_token_account",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "global_volume_accumulator"
              },
              {
                kind: "account",
                path: "token_program"
              },
              {
                kind: "account",
                path: "mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "token_program"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "start_time",
          type: "i64"
        },
        {
          name: "end_time",
          type: "i64"
        },
        {
          name: "seconds_in_a_day",
          type: "i64"
        },
        {
          name: "day_number",
          type: "u64"
        },
        {
          name: "pump_token_supply_per_day",
          type: "u64"
        }
      ]
    },
    {
      name: "buy",
      docs: ["Buys tokens from a bonding curve."],
      discriminator: [102, 6, 61, 18, 1, 218, 235, 234],
      accounts: [
        {
          name: "global",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [103, 108, 111, 98, 97, 108]
              }
            ]
          }
        },
        {
          name: "fee_recipient",
          writable: true
        },
        {
          name: "mint"
        },
        {
          name: "bonding_curve",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [98, 111, 110, 100, 105, 110, 103, 45, 99, 117, 114, 118, 101]
              },
              {
                kind: "account",
                path: "mint"
              }
            ]
          }
        },
        {
          name: "associated_bonding_curve",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "bonding_curve"
              },
              {
                kind: "const",
                value: [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              {
                kind: "account",
                path: "mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "associated_user",
          writable: true
        },
        {
          name: "user",
          writable: true,
          signer: true
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "token_program",
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "creator_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [99, 114, 101, 97, 116, 111, 114, 45, 118, 97, 117, 108, 116]
              },
              {
                kind: "account",
                path: "bonding_curve.creator",
                account: "BondingCurve"
              }
            ]
          }
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program",
          address: "6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P"
        },
        {
          name: "global_volume_accumulator",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  103,
                  108,
                  111,
                  98,
                  97,
                  108,
                  95,
                  118,
                  111,
                  108,
                  117,
                  109,
                  101,
                  95,
                  97,
                  99,
                  99,
                  117,
                  109,
                  117,
                  108,
                  97,
                  116,
                  111,
                  114
                ]
              }
            ]
          }
        },
        {
          name: "user_volume_accumulator",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  117,
                  115,
                  101,
                  114,
                  95,
                  118,
                  111,
                  108,
                  117,
                  109,
                  101,
                  95,
                  97,
                  99,
                  99,
                  117,
                  109,
                  117,
                  108,
                  97,
                  116,
                  111,
                  114
                ]
              },
              {
                kind: "account",
                path: "user"
              }
            ]
          }
        },
        {
          name: "fee_config",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [102, 101, 101, 95, 99, 111, 110, 102, 105, 103]
              },
              {
                kind: "const",
                value: [
                  1,
                  86,
                  224,
                  246,
                  147,
                  102,
                  90,
                  207,
                  68,
                  219,
                  21,
                  104,
                  191,
                  23,
                  91,
                  170,
                  81,
                  137,
                  203,
                  151,
                  245,
                  210,
                  255,
                  59,
                  101,
                  93,
                  43,
                  182,
                  253,
                  109,
                  24,
                  176
                ]
              }
            ],
            program: {
              kind: "account",
              path: "fee_program"
            }
          }
        },
        {
          name: "fee_program",
          address: "pfeeUxB6jkeY1Hxd7CsFCAjcbHA9rWtchMGdZ6VojVZ"
        }
      ],
      args: [
        {
          name: "amount",
          type: "u64"
        },
        {
          name: "max_sol_cost",
          type: "u64"
        }
      ]
    },
    {
      name: "buy_exact_sol_in",
      docs: [
        "Given a budget of spendable SOL, buy at least min_tokens_out",
        "Account creation and fees will be deducted from the spendable SOL",
        "",
        "f(sol) = tokens, where tokens >= min_tokens_out and sol > rent + fees",
        "",
        "max_slippage = min_tokens_out = 1",
        "",
        "Make sure the sol budget is enough to cover creation of the following accounts (unless already created):",
        "- creator_vault: rent.minimum_balance(SystemAccount::LEN)",
        "- user_volume_accumulator: rent.minimum_balance(UserVolumeAccumulator::LEN)"
      ],
      discriminator: [56, 252, 116, 8, 158, 223, 205, 95],
      accounts: [
        {
          name: "global",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [103, 108, 111, 98, 97, 108]
              }
            ]
          }
        },
        {
          name: "fee_recipient",
          writable: true
        },
        {
          name: "mint"
        },
        {
          name: "bonding_curve",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [98, 111, 110, 100, 105, 110, 103, 45, 99, 117, 114, 118, 101]
              },
              {
                kind: "account",
                path: "mint"
              }
            ]
          }
        },
        {
          name: "associated_bonding_curve",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "bonding_curve"
              },
              {
                kind: "const",
                value: [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              {
                kind: "account",
                path: "mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "associated_user",
          writable: true
        },
        {
          name: "user",
          writable: true,
          signer: true
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "token_program",
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "creator_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [99, 114, 101, 97, 116, 111, 114, 45, 118, 97, 117, 108, 116]
              },
              {
                kind: "account",
                path: "bonding_curve.creator",
                account: "BondingCurve"
              }
            ]
          }
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program",
          address: "6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P"
        },
        {
          name: "global_volume_accumulator",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  103,
                  108,
                  111,
                  98,
                  97,
                  108,
                  95,
                  118,
                  111,
                  108,
                  117,
                  109,
                  101,
                  95,
                  97,
                  99,
                  99,
                  117,
                  109,
                  117,
                  108,
                  97,
                  116,
                  111,
                  114
                ]
              }
            ]
          }
        },
        {
          name: "user_volume_accumulator",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  117,
                  115,
                  101,
                  114,
                  95,
                  118,
                  111,
                  108,
                  117,
                  109,
                  101,
                  95,
                  97,
                  99,
                  99,
                  117,
                  109,
                  117,
                  108,
                  97,
                  116,
                  111,
                  114
                ]
              },
              {
                kind: "account",
                path: "user"
              }
            ]
          }
        },
        {
          name: "fee_config",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [102, 101, 101, 95, 99, 111, 110, 102, 105, 103]
              },
              {
                kind: "const",
                value: [
                  1,
                  86,
                  224,
                  246,
                  147,
                  102,
                  90,
                  207,
                  68,
                  219,
                  21,
                  104,
                  191,
                  23,
                  91,
                  170,
                  81,
                  137,
                  203,
                  151,
                  245,
                  210,
                  255,
                  59,
                  101,
                  93,
                  43,
                  182,
                  253,
                  109,
                  24,
                  176
                ]
              }
            ],
            program: {
              kind: "account",
              path: "fee_program"
            }
          }
        },
        {
          name: "fee_program",
          address: "pfeeUxB6jkeY1Hxd7CsFCAjcbHA9rWtchMGdZ6VojVZ"
        }
      ],
      args: [
        {
          name: "spendable_sol_in",
          type: "u64"
        },
        {
          name: "min_tokens_out",
          type: "u64"
        }
      ]
    },
    {
      name: "claim_token_incentives",
      discriminator: [16, 4, 71, 28, 204, 1, 40, 27],
      accounts: [
        {
          name: "user"
        },
        {
          name: "user_ata",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "user"
              },
              {
                kind: "account",
                path: "token_program"
              },
              {
                kind: "account",
                path: "mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "global_volume_accumulator",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  103,
                  108,
                  111,
                  98,
                  97,
                  108,
                  95,
                  118,
                  111,
                  108,
                  117,
                  109,
                  101,
                  95,
                  97,
                  99,
                  99,
                  117,
                  109,
                  117,
                  108,
                  97,
                  116,
                  111,
                  114
                ]
              }
            ]
          }
        },
        {
          name: "global_incentive_token_account",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "global_volume_accumulator"
              },
              {
                kind: "account",
                path: "token_program"
              },
              {
                kind: "account",
                path: "mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "user_volume_accumulator",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  117,
                  115,
                  101,
                  114,
                  95,
                  118,
                  111,
                  108,
                  117,
                  109,
                  101,
                  95,
                  97,
                  99,
                  99,
                  117,
                  109,
                  117,
                  108,
                  97,
                  116,
                  111,
                  114
                ]
              },
              {
                kind: "account",
                path: "user"
              }
            ]
          }
        },
        {
          name: "mint",
          relations: ["global_volume_accumulator"]
        },
        {
          name: "token_program"
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program",
          address: "6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P"
        },
        {
          name: "payer",
          writable: true,
          signer: true
        }
      ],
      args: []
    },
    {
      name: "close_user_volume_accumulator",
      discriminator: [249, 69, 164, 218, 150, 103, 84, 138],
      accounts: [
        {
          name: "user",
          writable: true,
          signer: true
        },
        {
          name: "user_volume_accumulator",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  117,
                  115,
                  101,
                  114,
                  95,
                  118,
                  111,
                  108,
                  117,
                  109,
                  101,
                  95,
                  97,
                  99,
                  99,
                  117,
                  109,
                  117,
                  108,
                  97,
                  116,
                  111,
                  114
                ]
              },
              {
                kind: "account",
                path: "user"
              }
            ]
          }
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "collect_creator_fee",
      docs: ["Collects creator_fee from creator_vault to the coin creator account"],
      discriminator: [20, 22, 86, 123, 198, 28, 219, 132],
      accounts: [
        {
          name: "creator",
          writable: true
        },
        {
          name: "creator_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [99, 114, 101, 97, 116, 111, 114, 45, 118, 97, 117, 108, 116]
              },
              {
                kind: "account",
                path: "creator"
              }
            ]
          }
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "create",
      docs: ["Creates a new coin and bonding curve."],
      discriminator: [24, 30, 200, 40, 5, 28, 7, 119],
      accounts: [
        {
          name: "mint",
          writable: true,
          signer: true
        },
        {
          name: "mint_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [109, 105, 110, 116, 45, 97, 117, 116, 104, 111, 114, 105, 116, 121]
              }
            ]
          }
        },
        {
          name: "bonding_curve",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [98, 111, 110, 100, 105, 110, 103, 45, 99, 117, 114, 118, 101]
              },
              {
                kind: "account",
                path: "mint"
              }
            ]
          }
        },
        {
          name: "associated_bonding_curve",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "bonding_curve"
              },
              {
                kind: "const",
                value: [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              {
                kind: "account",
                path: "mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "global",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [103, 108, 111, 98, 97, 108]
              }
            ]
          }
        },
        {
          name: "mpl_token_metadata",
          address: "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"
        },
        {
          name: "metadata",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [109, 101, 116, 97, 100, 97, 116, 97]
              },
              {
                kind: "const",
                value: [
                  11,
                  112,
                  101,
                  177,
                  227,
                  209,
                  124,
                  69,
                  56,
                  157,
                  82,
                  127,
                  107,
                  4,
                  195,
                  205,
                  88,
                  184,
                  108,
                  115,
                  26,
                  160,
                  253,
                  181,
                  73,
                  182,
                  209,
                  188,
                  3,
                  248,
                  41,
                  70
                ]
              },
              {
                kind: "account",
                path: "mint"
              }
            ],
            program: {
              kind: "account",
              path: "mpl_token_metadata"
            }
          }
        },
        {
          name: "user",
          writable: true,
          signer: true
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "token_program",
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "rent",
          address: "SysvarRent111111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "name",
          type: "string"
        },
        {
          name: "symbol",
          type: "string"
        },
        {
          name: "uri",
          type: "string"
        },
        {
          name: "creator",
          type: "pubkey"
        }
      ]
    },
    {
      name: "extend_account",
      docs: ["Extends the size of program-owned accounts"],
      discriminator: [234, 102, 194, 203, 150, 72, 62, 229],
      accounts: [
        {
          name: "account",
          writable: true
        },
        {
          name: "user",
          signer: true
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "init_user_volume_accumulator",
      discriminator: [94, 6, 202, 115, 255, 96, 232, 183],
      accounts: [
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "user"
        },
        {
          name: "user_volume_accumulator",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  117,
                  115,
                  101,
                  114,
                  95,
                  118,
                  111,
                  108,
                  117,
                  109,
                  101,
                  95,
                  97,
                  99,
                  99,
                  117,
                  109,
                  117,
                  108,
                  97,
                  116,
                  111,
                  114
                ]
              },
              {
                kind: "account",
                path: "user"
              }
            ]
          }
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "initialize",
      docs: ["Creates the global state."],
      discriminator: [175, 175, 109, 31, 13, 152, 155, 237],
      accounts: [
        {
          name: "global",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [103, 108, 111, 98, 97, 108]
              }
            ]
          }
        },
        {
          name: "user",
          writable: true,
          signer: true
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        }
      ],
      args: []
    },
    {
      name: "migrate",
      docs: ["Migrates liquidity to pump_amm if the bonding curve is complete"],
      discriminator: [155, 234, 231, 146, 236, 158, 162, 30],
      accounts: [
        {
          name: "global",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [103, 108, 111, 98, 97, 108]
              }
            ]
          }
        },
        {
          name: "withdraw_authority",
          writable: true,
          relations: ["global"]
        },
        {
          name: "mint"
        },
        {
          name: "bonding_curve",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [98, 111, 110, 100, 105, 110, 103, 45, 99, 117, 114, 118, 101]
              },
              {
                kind: "account",
                path: "mint"
              }
            ]
          }
        },
        {
          name: "associated_bonding_curve",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "bonding_curve"
              },
              {
                kind: "const",
                value: [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              {
                kind: "account",
                path: "mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "user",
          signer: true
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "token_program",
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "pump_amm",
          address: "pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA"
        },
        {
          name: "pool",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [112, 111, 111, 108]
              },
              {
                kind: "const",
                value: [0, 0]
              },
              {
                kind: "account",
                path: "pool_authority"
              },
              {
                kind: "account",
                path: "mint"
              },
              {
                kind: "account",
                path: "wsol_mint"
              }
            ],
            program: {
              kind: "account",
              path: "pump_amm"
            }
          }
        },
        {
          name: "pool_authority",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [112, 111, 111, 108, 45, 97, 117, 116, 104, 111, 114, 105, 116, 121]
              },
              {
                kind: "account",
                path: "mint"
              }
            ]
          }
        },
        {
          name: "pool_authority_mint_account",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "pool_authority"
              },
              {
                kind: "account",
                path: "token_program"
              },
              {
                kind: "account",
                path: "mint"
              }
            ],
            program: {
              kind: "account",
              path: "associated_token_program"
            }
          }
        },
        {
          name: "pool_authority_wsol_account",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "pool_authority"
              },
              {
                kind: "account",
                path: "token_program"
              },
              {
                kind: "account",
                path: "wsol_mint"
              }
            ],
            program: {
              kind: "account",
              path: "associated_token_program"
            }
          }
        },
        {
          name: "amm_global_config",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [103, 108, 111, 98, 97, 108, 95, 99, 111, 110, 102, 105, 103]
              }
            ],
            program: {
              kind: "account",
              path: "pump_amm"
            }
          }
        },
        {
          name: "wsol_mint",
          address: "So11111111111111111111111111111111111111112"
        },
        {
          name: "lp_mint",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [112, 111, 111, 108, 95, 108, 112, 95, 109, 105, 110, 116]
              },
              {
                kind: "account",
                path: "pool"
              }
            ],
            program: {
              kind: "account",
              path: "pump_amm"
            }
          }
        },
        {
          name: "user_pool_token_account",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "pool_authority"
              },
              {
                kind: "account",
                path: "token_2022_program"
              },
              {
                kind: "account",
                path: "lp_mint"
              }
            ],
            program: {
              kind: "account",
              path: "associated_token_program"
            }
          }
        },
        {
          name: "pool_base_token_account",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "pool"
              },
              {
                kind: "account",
                path: "token_program"
              },
              {
                kind: "account",
                path: "mint"
              }
            ],
            program: {
              kind: "account",
              path: "associated_token_program"
            }
          }
        },
        {
          name: "pool_quote_token_account",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "pool"
              },
              {
                kind: "account",
                path: "token_program"
              },
              {
                kind: "account",
                path: "wsol_mint"
              }
            ],
            program: {
              kind: "account",
              path: "associated_token_program"
            }
          }
        },
        {
          name: "token_2022_program",
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "pump_amm_event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ],
            program: {
              kind: "account",
              path: "pump_amm"
            }
          }
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "sell",
      docs: ["Sells tokens into a bonding curve."],
      discriminator: [51, 230, 133, 164, 1, 127, 131, 173],
      accounts: [
        {
          name: "global",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [103, 108, 111, 98, 97, 108]
              }
            ]
          }
        },
        {
          name: "fee_recipient",
          writable: true
        },
        {
          name: "mint"
        },
        {
          name: "bonding_curve",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [98, 111, 110, 100, 105, 110, 103, 45, 99, 117, 114, 118, 101]
              },
              {
                kind: "account",
                path: "mint"
              }
            ]
          }
        },
        {
          name: "associated_bonding_curve",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "bonding_curve"
              },
              {
                kind: "const",
                value: [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              {
                kind: "account",
                path: "mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "associated_user",
          writable: true
        },
        {
          name: "user",
          writable: true,
          signer: true
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "creator_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [99, 114, 101, 97, 116, 111, 114, 45, 118, 97, 117, 108, 116]
              },
              {
                kind: "account",
                path: "bonding_curve.creator",
                account: "BondingCurve"
              }
            ]
          }
        },
        {
          name: "token_program",
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program",
          address: "6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P"
        },
        {
          name: "fee_config",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [102, 101, 101, 95, 99, 111, 110, 102, 105, 103]
              },
              {
                kind: "const",
                value: [
                  1,
                  86,
                  224,
                  246,
                  147,
                  102,
                  90,
                  207,
                  68,
                  219,
                  21,
                  104,
                  191,
                  23,
                  91,
                  170,
                  81,
                  137,
                  203,
                  151,
                  245,
                  210,
                  255,
                  59,
                  101,
                  93,
                  43,
                  182,
                  253,
                  109,
                  24,
                  176
                ]
              }
            ],
            program: {
              kind: "account",
              path: "fee_program"
            }
          }
        },
        {
          name: "fee_program",
          address: "pfeeUxB6jkeY1Hxd7CsFCAjcbHA9rWtchMGdZ6VojVZ"
        }
      ],
      args: [
        {
          name: "amount",
          type: "u64"
        },
        {
          name: "min_sol_output",
          type: "u64"
        }
      ]
    },
    {
      name: "set_creator",
      docs: [
        "Allows Global::set_creator_authority to set the bonding curve creator from Metaplex metadata or input argument"
      ],
      discriminator: [254, 148, 255, 112, 207, 142, 170, 165],
      accounts: [
        {
          name: "set_creator_authority",
          signer: true,
          relations: ["global"]
        },
        {
          name: "global",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [103, 108, 111, 98, 97, 108]
              }
            ]
          }
        },
        {
          name: "mint"
        },
        {
          name: "metadata",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [109, 101, 116, 97, 100, 97, 116, 97]
              },
              {
                kind: "const",
                value: [
                  11,
                  112,
                  101,
                  177,
                  227,
                  209,
                  124,
                  69,
                  56,
                  157,
                  82,
                  127,
                  107,
                  4,
                  195,
                  205,
                  88,
                  184,
                  108,
                  115,
                  26,
                  160,
                  253,
                  181,
                  73,
                  182,
                  209,
                  188,
                  3,
                  248,
                  41,
                  70
                ]
              },
              {
                kind: "account",
                path: "mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                11,
                112,
                101,
                177,
                227,
                209,
                124,
                69,
                56,
                157,
                82,
                127,
                107,
                4,
                195,
                205,
                88,
                184,
                108,
                115,
                26,
                160,
                253,
                181,
                73,
                182,
                209,
                188,
                3,
                248,
                41,
                70
              ]
            }
          }
        },
        {
          name: "bonding_curve",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [98, 111, 110, 100, 105, 110, 103, 45, 99, 117, 114, 118, 101]
              },
              {
                kind: "account",
                path: "mint"
              }
            ]
          }
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "creator",
          type: "pubkey"
        }
      ]
    },
    {
      name: "set_metaplex_creator",
      docs: ["Syncs the bonding curve creator with the Metaplex metadata creator if it exists"],
      discriminator: [138, 96, 174, 217, 48, 85, 197, 246],
      accounts: [
        {
          name: "mint"
        },
        {
          name: "metadata",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [109, 101, 116, 97, 100, 97, 116, 97]
              },
              {
                kind: "const",
                value: [
                  11,
                  112,
                  101,
                  177,
                  227,
                  209,
                  124,
                  69,
                  56,
                  157,
                  82,
                  127,
                  107,
                  4,
                  195,
                  205,
                  88,
                  184,
                  108,
                  115,
                  26,
                  160,
                  253,
                  181,
                  73,
                  182,
                  209,
                  188,
                  3,
                  248,
                  41,
                  70
                ]
              },
              {
                kind: "account",
                path: "mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                11,
                112,
                101,
                177,
                227,
                209,
                124,
                69,
                56,
                157,
                82,
                127,
                107,
                4,
                195,
                205,
                88,
                184,
                108,
                115,
                26,
                160,
                253,
                181,
                73,
                182,
                209,
                188,
                3,
                248,
                41,
                70
              ]
            }
          }
        },
        {
          name: "bonding_curve",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [98, 111, 110, 100, 105, 110, 103, 45, 99, 117, 114, 118, 101]
              },
              {
                kind: "account",
                path: "mint"
              }
            ]
          }
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "set_params",
      docs: ["Sets the global state parameters."],
      discriminator: [27, 234, 178, 52, 147, 2, 187, 141],
      accounts: [
        {
          name: "global",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [103, 108, 111, 98, 97, 108]
              }
            ]
          }
        },
        {
          name: "authority",
          writable: true,
          signer: true,
          relations: ["global"]
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "initial_virtual_token_reserves",
          type: "u64"
        },
        {
          name: "initial_virtual_sol_reserves",
          type: "u64"
        },
        {
          name: "initial_real_token_reserves",
          type: "u64"
        },
        {
          name: "token_total_supply",
          type: "u64"
        },
        {
          name: "fee_basis_points",
          type: "u64"
        },
        {
          name: "withdraw_authority",
          type: "pubkey"
        },
        {
          name: "enable_migrate",
          type: "bool"
        },
        {
          name: "pool_migration_fee",
          type: "u64"
        },
        {
          name: "creator_fee_basis_points",
          type: "u64"
        },
        {
          name: "set_creator_authority",
          type: "pubkey"
        },
        {
          name: "admin_set_creator_authority",
          type: "pubkey"
        }
      ]
    },
    {
      name: "sync_user_volume_accumulator",
      discriminator: [86, 31, 192, 87, 163, 87, 79, 238],
      accounts: [
        {
          name: "user"
        },
        {
          name: "global_volume_accumulator",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  103,
                  108,
                  111,
                  98,
                  97,
                  108,
                  95,
                  118,
                  111,
                  108,
                  117,
                  109,
                  101,
                  95,
                  97,
                  99,
                  99,
                  117,
                  109,
                  117,
                  108,
                  97,
                  116,
                  111,
                  114
                ]
              }
            ]
          }
        },
        {
          name: "user_volume_accumulator",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  117,
                  115,
                  101,
                  114,
                  95,
                  118,
                  111,
                  108,
                  117,
                  109,
                  101,
                  95,
                  97,
                  99,
                  99,
                  117,
                  109,
                  117,
                  108,
                  97,
                  116,
                  111,
                  114
                ]
              },
              {
                kind: "account",
                path: "user"
              }
            ]
          }
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "update_global_authority",
      discriminator: [227, 181, 74, 196, 208, 21, 97, 213],
      accounts: [
        {
          name: "global",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [103, 108, 111, 98, 97, 108]
              }
            ]
          }
        },
        {
          name: "authority",
          signer: true,
          relations: ["global"]
        },
        {
          name: "new_authority"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    }
  ],
  accounts: [
    {
      name: "BondingCurve",
      discriminator: [23, 183, 248, 55, 96, 216, 172, 96]
    },
    {
      name: "FeeConfig",
      discriminator: [143, 52, 146, 187, 219, 123, 76, 155]
    },
    {
      name: "Global",
      discriminator: [167, 232, 232, 177, 200, 108, 114, 127]
    },
    {
      name: "GlobalVolumeAccumulator",
      discriminator: [202, 42, 246, 43, 142, 190, 30, 255]
    },
    {
      name: "UserVolumeAccumulator",
      discriminator: [86, 255, 112, 14, 102, 53, 154, 250]
    }
  ],
  events: [
    {
      name: "AdminSetCreatorEvent",
      discriminator: [64, 69, 192, 104, 29, 30, 25, 107]
    },
    {
      name: "AdminSetIdlAuthorityEvent",
      discriminator: [245, 59, 70, 34, 75, 185, 109, 92]
    },
    {
      name: "AdminUpdateTokenIncentivesEvent",
      discriminator: [147, 250, 108, 120, 247, 29, 67, 222]
    },
    {
      name: "ClaimTokenIncentivesEvent",
      discriminator: [79, 172, 246, 49, 205, 91, 206, 232]
    },
    {
      name: "CloseUserVolumeAccumulatorEvent",
      discriminator: [146, 159, 189, 172, 146, 88, 56, 244]
    },
    {
      name: "CollectCreatorFeeEvent",
      discriminator: [122, 2, 127, 1, 14, 191, 12, 175]
    },
    {
      name: "CompleteEvent",
      discriminator: [95, 114, 97, 156, 212, 46, 152, 8]
    },
    {
      name: "CompletePumpAmmMigrationEvent",
      discriminator: [189, 233, 93, 185, 92, 148, 234, 148]
    },
    {
      name: "CreateEvent",
      discriminator: [27, 114, 169, 77, 222, 235, 99, 118]
    },
    {
      name: "ExtendAccountEvent",
      discriminator: [97, 97, 215, 144, 93, 146, 22, 124]
    },
    {
      name: "InitUserVolumeAccumulatorEvent",
      discriminator: [134, 36, 13, 72, 232, 101, 130, 216]
    },
    {
      name: "SetCreatorEvent",
      discriminator: [237, 52, 123, 37, 245, 251, 72, 210]
    },
    {
      name: "SetMetaplexCreatorEvent",
      discriminator: [142, 203, 6, 32, 127, 105, 191, 162]
    },
    {
      name: "SetParamsEvent",
      discriminator: [223, 195, 159, 246, 62, 48, 143, 131]
    },
    {
      name: "SyncUserVolumeAccumulatorEvent",
      discriminator: [197, 122, 167, 124, 116, 81, 91, 255]
    },
    {
      name: "TradeEvent",
      discriminator: [189, 219, 127, 211, 78, 230, 97, 238]
    },
    {
      name: "UpdateGlobalAuthorityEvent",
      discriminator: [182, 195, 137, 42, 35, 206, 207, 247]
    }
  ],
  errors: [
    {
      code: 6e3,
      name: "NotAuthorized",
      msg: "The given account is not authorized to execute this instruction."
    },
    {
      code: 6001,
      name: "AlreadyInitialized",
      msg: "The program is already initialized."
    },
    {
      code: 6002,
      name: "TooMuchSolRequired",
      msg: "slippage: Too much SOL required to buy the given amount of tokens."
    },
    {
      code: 6003,
      name: "TooLittleSolReceived",
      msg: "slippage: Too little SOL received to sell the given amount of tokens."
    },
    {
      code: 6004,
      name: "MintDoesNotMatchBondingCurve",
      msg: "The mint does not match the bonding curve."
    },
    {
      code: 6005,
      name: "BondingCurveComplete",
      msg: "The bonding curve has completed and liquidity migrated to raydium."
    },
    {
      code: 6006,
      name: "BondingCurveNotComplete",
      msg: "The bonding curve has not completed."
    },
    {
      code: 6007,
      name: "NotInitialized",
      msg: "The program is not initialized."
    },
    {
      code: 6008,
      name: "WithdrawTooFrequent",
      msg: "Withdraw too frequent"
    },
    {
      code: 6009,
      name: "NewSizeShouldBeGreaterThanCurrentSize",
      msg: "new_size should be > current_size"
    },
    {
      code: 6010,
      name: "AccountTypeNotSupported",
      msg: "Account type not supported"
    },
    {
      code: 6011,
      name: "InitialRealTokenReservesShouldBeLessThanTokenTotalSupply",
      msg: "initial_real_token_reserves should be less than token_total_supply"
    },
    {
      code: 6012,
      name: "InitialVirtualTokenReservesShouldBeGreaterThanInitialRealTokenReserves",
      msg: "initial_virtual_token_reserves should be greater than initial_real_token_reserves"
    },
    {
      code: 6013,
      name: "FeeBasisPointsGreaterThanMaximum",
      msg: "fee_basis_points greater than maximum"
    },
    {
      code: 6014,
      name: "AllZerosWithdrawAuthority",
      msg: "Withdraw authority cannot be set to System Program ID"
    },
    {
      code: 6015,
      name: "PoolMigrationFeeShouldBeLessThanFinalRealSolReserves",
      msg: "pool_migration_fee should be less than final_real_sol_reserves"
    },
    {
      code: 6016,
      name: "PoolMigrationFeeShouldBeGreaterThanCreatorFeePlusMaxMigrateFees",
      msg: "pool_migration_fee should be greater than creator_fee + MAX_MIGRATE_FEES"
    },
    {
      code: 6017,
      name: "DisabledWithdraw",
      msg: "Migrate instruction is disabled"
    },
    {
      code: 6018,
      name: "DisabledMigrate",
      msg: "Migrate instruction is disabled"
    },
    {
      code: 6019,
      name: "InvalidCreator",
      msg: "Invalid creator pubkey"
    },
    {
      code: 6020,
      name: "BuyZeroAmount",
      msg: "Buy zero amount"
    },
    {
      code: 6021,
      name: "NotEnoughTokensToBuy",
      msg: "Not enough tokens to buy"
    },
    {
      code: 6022,
      name: "SellZeroAmount",
      msg: "Sell zero amount"
    },
    {
      code: 6023,
      name: "NotEnoughTokensToSell",
      msg: "Not enough tokens to sell"
    },
    {
      code: 6024,
      name: "Overflow",
      msg: "Overflow"
    },
    {
      code: 6025,
      name: "Truncation",
      msg: "Truncation"
    },
    {
      code: 6026,
      name: "DivisionByZero",
      msg: "Division by zero"
    },
    {
      code: 6027,
      name: "NotEnoughRemainingAccounts",
      msg: "Not enough remaining accounts"
    },
    {
      code: 6028,
      name: "AllFeeRecipientsShouldBeNonZero",
      msg: "All fee recipients should be non-zero"
    },
    {
      code: 6029,
      name: "UnsortedNotUniqueFeeRecipients",
      msg: "Unsorted or not unique fee recipients"
    },
    {
      code: 6030,
      name: "CreatorShouldNotBeZero",
      msg: "Creator should not be zero"
    },
    {
      code: 6031,
      name: "StartTimeInThePast"
    },
    {
      code: 6032,
      name: "EndTimeInThePast"
    },
    {
      code: 6033,
      name: "EndTimeBeforeStartTime"
    },
    {
      code: 6034,
      name: "TimeRangeTooLarge"
    },
    {
      code: 6035,
      name: "EndTimeBeforeCurrentDay"
    },
    {
      code: 6036,
      name: "SupplyUpdateForFinishedRange"
    },
    {
      code: 6037,
      name: "DayIndexAfterEndIndex"
    },
    {
      code: 6038,
      name: "DayInActiveRange"
    },
    {
      code: 6039,
      name: "InvalidIncentiveMint"
    },
    {
      code: 6040,
      name: "BuyNotEnoughSolToCoverRent",
      msg: "Buy: Not enough SOL to cover for rent exemption."
    },
    {
      code: 6041,
      name: "BuyNotEnoughSolToCoverFees",
      msg: "Buy: Not enough SOL to cover for fees."
    },
    {
      code: 6042,
      name: "BuySlippageBelowMinTokensOut",
      msg: "Slippage: Would buy less tokens than expected min_tokens_out"
    }
  ],
  types: [
    {
      name: "AdminSetCreatorEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "admin_set_creator_authority",
            type: "pubkey"
          },
          {
            name: "mint",
            type: "pubkey"
          },
          {
            name: "bonding_curve",
            type: "pubkey"
          },
          {
            name: "old_creator",
            type: "pubkey"
          },
          {
            name: "new_creator",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "AdminSetIdlAuthorityEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "idl_authority",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "AdminUpdateTokenIncentivesEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "start_time",
            type: "i64"
          },
          {
            name: "end_time",
            type: "i64"
          },
          {
            name: "day_number",
            type: "u64"
          },
          {
            name: "token_supply_per_day",
            type: "u64"
          },
          {
            name: "mint",
            type: "pubkey"
          },
          {
            name: "seconds_in_a_day",
            type: "i64"
          },
          {
            name: "timestamp",
            type: "i64"
          }
        ]
      }
    },
    {
      name: "BondingCurve",
      type: {
        kind: "struct",
        fields: [
          {
            name: "virtual_token_reserves",
            type: "u64"
          },
          {
            name: "virtual_sol_reserves",
            type: "u64"
          },
          {
            name: "real_token_reserves",
            type: "u64"
          },
          {
            name: "real_sol_reserves",
            type: "u64"
          },
          {
            name: "token_total_supply",
            type: "u64"
          },
          {
            name: "complete",
            type: "bool"
          },
          {
            name: "creator",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "ClaimTokenIncentivesEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "mint",
            type: "pubkey"
          },
          {
            name: "amount",
            type: "u64"
          },
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "total_claimed_tokens",
            type: "u64"
          },
          {
            name: "current_sol_volume",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "CloseUserVolumeAccumulatorEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "total_unclaimed_tokens",
            type: "u64"
          },
          {
            name: "total_claimed_tokens",
            type: "u64"
          },
          {
            name: "current_sol_volume",
            type: "u64"
          },
          {
            name: "last_update_timestamp",
            type: "i64"
          }
        ]
      }
    },
    {
      name: "CollectCreatorFeeEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "creator",
            type: "pubkey"
          },
          {
            name: "creator_fee",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "CompleteEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "mint",
            type: "pubkey"
          },
          {
            name: "bonding_curve",
            type: "pubkey"
          },
          {
            name: "timestamp",
            type: "i64"
          }
        ]
      }
    },
    {
      name: "CompletePumpAmmMigrationEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "mint",
            type: "pubkey"
          },
          {
            name: "mint_amount",
            type: "u64"
          },
          {
            name: "sol_amount",
            type: "u64"
          },
          {
            name: "pool_migration_fee",
            type: "u64"
          },
          {
            name: "bonding_curve",
            type: "pubkey"
          },
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "pool",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "CreateEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "name",
            type: "string"
          },
          {
            name: "symbol",
            type: "string"
          },
          {
            name: "uri",
            type: "string"
          },
          {
            name: "mint",
            type: "pubkey"
          },
          {
            name: "bonding_curve",
            type: "pubkey"
          },
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "creator",
            type: "pubkey"
          },
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "virtual_token_reserves",
            type: "u64"
          },
          {
            name: "virtual_sol_reserves",
            type: "u64"
          },
          {
            name: "real_token_reserves",
            type: "u64"
          },
          {
            name: "token_total_supply",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "ExtendAccountEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "account",
            type: "pubkey"
          },
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "current_size",
            type: "u64"
          },
          {
            name: "new_size",
            type: "u64"
          },
          {
            name: "timestamp",
            type: "i64"
          }
        ]
      }
    },
    {
      name: "FeeConfig",
      type: {
        kind: "struct",
        fields: [
          {
            name: "bump",
            type: "u8"
          },
          {
            name: "admin",
            type: "pubkey"
          },
          {
            name: "flat_fees",
            type: {
              defined: {
                name: "Fees"
              }
            }
          },
          {
            name: "fee_tiers",
            type: {
              vec: {
                defined: {
                  name: "FeeTier"
                }
              }
            }
          }
        ]
      }
    },
    {
      name: "FeeTier",
      type: {
        kind: "struct",
        fields: [
          {
            name: "market_cap_lamports_threshold",
            type: "u128"
          },
          {
            name: "fees",
            type: {
              defined: {
                name: "Fees"
              }
            }
          }
        ]
      }
    },
    {
      name: "Fees",
      type: {
        kind: "struct",
        fields: [
          {
            name: "lp_fee_bps",
            type: "u64"
          },
          {
            name: "protocol_fee_bps",
            type: "u64"
          },
          {
            name: "creator_fee_bps",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "Global",
      type: {
        kind: "struct",
        fields: [
          {
            name: "initialized",
            docs: ["Unused"],
            type: "bool"
          },
          {
            name: "authority",
            type: "pubkey"
          },
          {
            name: "fee_recipient",
            type: "pubkey"
          },
          {
            name: "initial_virtual_token_reserves",
            type: "u64"
          },
          {
            name: "initial_virtual_sol_reserves",
            type: "u64"
          },
          {
            name: "initial_real_token_reserves",
            type: "u64"
          },
          {
            name: "token_total_supply",
            type: "u64"
          },
          {
            name: "fee_basis_points",
            type: "u64"
          },
          {
            name: "withdraw_authority",
            type: "pubkey"
          },
          {
            name: "enable_migrate",
            docs: ["Unused"],
            type: "bool"
          },
          {
            name: "pool_migration_fee",
            type: "u64"
          },
          {
            name: "creator_fee_basis_points",
            type: "u64"
          },
          {
            name: "fee_recipients",
            type: {
              array: ["pubkey", 7]
            }
          },
          {
            name: "set_creator_authority",
            type: "pubkey"
          },
          {
            name: "admin_set_creator_authority",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "GlobalVolumeAccumulator",
      type: {
        kind: "struct",
        fields: [
          {
            name: "start_time",
            type: "i64"
          },
          {
            name: "end_time",
            type: "i64"
          },
          {
            name: "seconds_in_a_day",
            type: "i64"
          },
          {
            name: "mint",
            type: "pubkey"
          },
          {
            name: "total_token_supply",
            type: {
              array: ["u64", 30]
            }
          },
          {
            name: "sol_volumes",
            type: {
              array: ["u64", 30]
            }
          }
        ]
      }
    },
    {
      name: "InitUserVolumeAccumulatorEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "payer",
            type: "pubkey"
          },
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "timestamp",
            type: "i64"
          }
        ]
      }
    },
    {
      name: "SetCreatorEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "mint",
            type: "pubkey"
          },
          {
            name: "bonding_curve",
            type: "pubkey"
          },
          {
            name: "creator",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "SetMetaplexCreatorEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "mint",
            type: "pubkey"
          },
          {
            name: "bonding_curve",
            type: "pubkey"
          },
          {
            name: "metadata",
            type: "pubkey"
          },
          {
            name: "creator",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "SetParamsEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "initial_virtual_token_reserves",
            type: "u64"
          },
          {
            name: "initial_virtual_sol_reserves",
            type: "u64"
          },
          {
            name: "initial_real_token_reserves",
            type: "u64"
          },
          {
            name: "final_real_sol_reserves",
            type: "u64"
          },
          {
            name: "token_total_supply",
            type: "u64"
          },
          {
            name: "fee_basis_points",
            type: "u64"
          },
          {
            name: "withdraw_authority",
            type: "pubkey"
          },
          {
            name: "enable_migrate",
            type: "bool"
          },
          {
            name: "pool_migration_fee",
            type: "u64"
          },
          {
            name: "creator_fee_basis_points",
            type: "u64"
          },
          {
            name: "fee_recipients",
            type: {
              array: ["pubkey", 8]
            }
          },
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "set_creator_authority",
            type: "pubkey"
          },
          {
            name: "admin_set_creator_authority",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "SyncUserVolumeAccumulatorEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "total_claimed_tokens_before",
            type: "u64"
          },
          {
            name: "total_claimed_tokens_after",
            type: "u64"
          },
          {
            name: "timestamp",
            type: "i64"
          }
        ]
      }
    },
    {
      name: "TradeEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "mint",
            type: "pubkey"
          },
          {
            name: "sol_amount",
            type: "u64"
          },
          {
            name: "token_amount",
            type: "u64"
          },
          {
            name: "is_buy",
            type: "bool"
          },
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "virtual_sol_reserves",
            type: "u64"
          },
          {
            name: "virtual_token_reserves",
            type: "u64"
          },
          {
            name: "real_sol_reserves",
            type: "u64"
          },
          {
            name: "real_token_reserves",
            type: "u64"
          },
          {
            name: "fee_recipient",
            type: "pubkey"
          },
          {
            name: "fee_basis_points",
            type: "u64"
          },
          {
            name: "fee",
            type: "u64"
          },
          {
            name: "creator",
            type: "pubkey"
          },
          {
            name: "creator_fee_basis_points",
            type: "u64"
          },
          {
            name: "creator_fee",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "UpdateGlobalAuthorityEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "global",
            type: "pubkey"
          },
          {
            name: "authority",
            type: "pubkey"
          },
          {
            name: "new_authority",
            type: "pubkey"
          },
          {
            name: "timestamp",
            type: "i64"
          }
        ]
      }
    },
    {
      name: "UserVolumeAccumulator",
      type: {
        kind: "struct",
        fields: [
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "needs_claim",
            type: "bool"
          },
          {
            name: "total_unclaimed_tokens",
            type: "u64"
          },
          {
            name: "total_claimed_tokens",
            type: "u64"
          },
          {
            name: "current_sol_volume",
            type: "u64"
          },
          {
            name: "last_update_timestamp",
            type: "i64"
          },
          {
            name: "has_total_claimed_tokens",
            type: "bool"
          }
        ]
      }
    }
  ]
};

// idl/pumpswap-amm.json
var pumpswap_amm_default = {
  address: "pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA",
  metadata: {
    name: "pump_amm",
    version: "0.1.0",
    spec: "0.1.0",
    description: "Created with Anchor"
  },
  instructions: [
    {
      name: "admin_set_coin_creator",
      docs: ["Overrides the coin creator for a canonical pump pool"],
      discriminator: [242, 40, 117, 145, 73, 96, 105, 104],
      accounts: [
        {
          name: "admin_set_coin_creator_authority",
          signer: true,
          relations: ["global_config"]
        },
        {
          name: "global_config"
        },
        {
          name: "pool",
          writable: true
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "coin_creator",
          type: "pubkey"
        }
      ]
    },
    {
      name: "admin_update_token_incentives",
      discriminator: [209, 11, 115, 87, 213, 23, 124, 204],
      accounts: [
        {
          name: "admin",
          writable: true,
          signer: true,
          relations: ["global_config"]
        },
        {
          name: "global_config",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [103, 108, 111, 98, 97, 108, 95, 99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          name: "global_volume_accumulator",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  103,
                  108,
                  111,
                  98,
                  97,
                  108,
                  95,
                  118,
                  111,
                  108,
                  117,
                  109,
                  101,
                  95,
                  97,
                  99,
                  99,
                  117,
                  109,
                  117,
                  108,
                  97,
                  116,
                  111,
                  114
                ]
              }
            ]
          }
        },
        {
          name: "mint"
        },
        {
          name: "global_incentive_token_account",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "global_volume_accumulator"
              },
              {
                kind: "account",
                path: "token_program"
              },
              {
                kind: "account",
                path: "mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "token_program"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "start_time",
          type: "i64"
        },
        {
          name: "end_time",
          type: "i64"
        },
        {
          name: "seconds_in_a_day",
          type: "i64"
        },
        {
          name: "day_number",
          type: "u64"
        },
        {
          name: "token_supply_per_day",
          type: "u64"
        }
      ]
    },
    {
      name: "buy",
      discriminator: [102, 6, 61, 18, 1, 218, 235, 234],
      accounts: [
        {
          name: "pool"
        },
        {
          name: "user",
          writable: true,
          signer: true
        },
        {
          name: "global_config"
        },
        {
          name: "base_mint",
          relations: ["pool"]
        },
        {
          name: "quote_mint",
          relations: ["pool"]
        },
        {
          name: "user_base_token_account",
          writable: true
        },
        {
          name: "user_quote_token_account",
          writable: true
        },
        {
          name: "pool_base_token_account",
          writable: true,
          relations: ["pool"]
        },
        {
          name: "pool_quote_token_account",
          writable: true,
          relations: ["pool"]
        },
        {
          name: "protocol_fee_recipient"
        },
        {
          name: "protocol_fee_recipient_token_account",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "protocol_fee_recipient"
              },
              {
                kind: "account",
                path: "quote_token_program"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "base_token_program"
        },
        {
          name: "quote_token_program"
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program",
          address: "pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA"
        },
        {
          name: "coin_creator_vault_ata",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "coin_creator_vault_authority"
              },
              {
                kind: "account",
                path: "quote_token_program"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "coin_creator_vault_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [99, 114, 101, 97, 116, 111, 114, 95, 118, 97, 117, 108, 116]
              },
              {
                kind: "account",
                path: "pool.coin_creator",
                account: "Pool"
              }
            ]
          }
        },
        {
          name: "global_volume_accumulator",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  103,
                  108,
                  111,
                  98,
                  97,
                  108,
                  95,
                  118,
                  111,
                  108,
                  117,
                  109,
                  101,
                  95,
                  97,
                  99,
                  99,
                  117,
                  109,
                  117,
                  108,
                  97,
                  116,
                  111,
                  114
                ]
              }
            ]
          }
        },
        {
          name: "user_volume_accumulator",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  117,
                  115,
                  101,
                  114,
                  95,
                  118,
                  111,
                  108,
                  117,
                  109,
                  101,
                  95,
                  97,
                  99,
                  99,
                  117,
                  109,
                  117,
                  108,
                  97,
                  116,
                  111,
                  114
                ]
              },
              {
                kind: "account",
                path: "user"
              }
            ]
          }
        },
        {
          name: "fee_config",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [102, 101, 101, 95, 99, 111, 110, 102, 105, 103]
              },
              {
                kind: "const",
                value: [
                  12,
                  20,
                  222,
                  252,
                  130,
                  94,
                  198,
                  118,
                  148,
                  37,
                  8,
                  24,
                  187,
                  101,
                  64,
                  101,
                  244,
                  41,
                  141,
                  49,
                  86,
                  213,
                  113,
                  180,
                  212,
                  248,
                  9,
                  12,
                  24,
                  233,
                  168,
                  99
                ]
              }
            ],
            program: {
              kind: "account",
              path: "fee_program"
            }
          }
        },
        {
          name: "fee_program",
          address: "pfeeUxB6jkeY1Hxd7CsFCAjcbHA9rWtchMGdZ6VojVZ"
        }
      ],
      args: [
        {
          name: "base_amount_out",
          type: "u64"
        },
        {
          name: "max_quote_amount_in",
          type: "u64"
        }
      ]
    },
    {
      name: "buy_exact_quote_in",
      docs: [
        "Given a budget of spendable_quote_in, buy at least min_base_amount_out",
        "Fees will be deducted from spendable_quote_in",
        "",
        "f(quote) = tokens, where tokens >= min_base_amount_out",
        "",
        "Make sure the payer has enough SOL to cover creation of the following accounts (unless already created):",
        "- protocol_fee_recipient_token_account: rent.minimum_balance(TokenAccount::LEN)",
        "- coin_creator_vault_ata: rent.minimum_balance(TokenAccount::LEN)",
        "- user_volume_accumulator: rent.minimum_balance(UserVolumeAccumulator::LEN)"
      ],
      discriminator: [198, 46, 21, 82, 180, 217, 232, 112],
      accounts: [
        {
          name: "pool"
        },
        {
          name: "user",
          writable: true,
          signer: true
        },
        {
          name: "global_config"
        },
        {
          name: "base_mint",
          relations: ["pool"]
        },
        {
          name: "quote_mint",
          relations: ["pool"]
        },
        {
          name: "user_base_token_account",
          writable: true
        },
        {
          name: "user_quote_token_account",
          writable: true
        },
        {
          name: "pool_base_token_account",
          writable: true,
          relations: ["pool"]
        },
        {
          name: "pool_quote_token_account",
          writable: true,
          relations: ["pool"]
        },
        {
          name: "protocol_fee_recipient"
        },
        {
          name: "protocol_fee_recipient_token_account",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "protocol_fee_recipient"
              },
              {
                kind: "account",
                path: "quote_token_program"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "base_token_program"
        },
        {
          name: "quote_token_program"
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program",
          address: "pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA"
        },
        {
          name: "coin_creator_vault_ata",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "coin_creator_vault_authority"
              },
              {
                kind: "account",
                path: "quote_token_program"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "coin_creator_vault_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [99, 114, 101, 97, 116, 111, 114, 95, 118, 97, 117, 108, 116]
              },
              {
                kind: "account",
                path: "pool.coin_creator",
                account: "Pool"
              }
            ]
          }
        },
        {
          name: "global_volume_accumulator",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  103,
                  108,
                  111,
                  98,
                  97,
                  108,
                  95,
                  118,
                  111,
                  108,
                  117,
                  109,
                  101,
                  95,
                  97,
                  99,
                  99,
                  117,
                  109,
                  117,
                  108,
                  97,
                  116,
                  111,
                  114
                ]
              }
            ]
          }
        },
        {
          name: "user_volume_accumulator",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  117,
                  115,
                  101,
                  114,
                  95,
                  118,
                  111,
                  108,
                  117,
                  109,
                  101,
                  95,
                  97,
                  99,
                  99,
                  117,
                  109,
                  117,
                  108,
                  97,
                  116,
                  111,
                  114
                ]
              },
              {
                kind: "account",
                path: "user"
              }
            ]
          }
        },
        {
          name: "fee_config",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [102, 101, 101, 95, 99, 111, 110, 102, 105, 103]
              },
              {
                kind: "const",
                value: [
                  12,
                  20,
                  222,
                  252,
                  130,
                  94,
                  198,
                  118,
                  148,
                  37,
                  8,
                  24,
                  187,
                  101,
                  64,
                  101,
                  244,
                  41,
                  141,
                  49,
                  86,
                  213,
                  113,
                  180,
                  212,
                  248,
                  9,
                  12,
                  24,
                  233,
                  168,
                  99
                ]
              }
            ],
            program: {
              kind: "account",
              path: "fee_program"
            }
          }
        },
        {
          name: "fee_program",
          address: "pfeeUxB6jkeY1Hxd7CsFCAjcbHA9rWtchMGdZ6VojVZ"
        }
      ],
      args: [
        {
          name: "spendable_quote_in",
          type: "u64"
        },
        {
          name: "min_base_amount_out",
          type: "u64"
        }
      ]
    },
    {
      name: "claim_token_incentives",
      discriminator: [16, 4, 71, 28, 204, 1, 40, 27],
      accounts: [
        {
          name: "user"
        },
        {
          name: "user_ata",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "user"
              },
              {
                kind: "account",
                path: "token_program"
              },
              {
                kind: "account",
                path: "mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "global_volume_accumulator",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  103,
                  108,
                  111,
                  98,
                  97,
                  108,
                  95,
                  118,
                  111,
                  108,
                  117,
                  109,
                  101,
                  95,
                  97,
                  99,
                  99,
                  117,
                  109,
                  117,
                  108,
                  97,
                  116,
                  111,
                  114
                ]
              }
            ]
          }
        },
        {
          name: "global_incentive_token_account",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "global_volume_accumulator"
              },
              {
                kind: "account",
                path: "token_program"
              },
              {
                kind: "account",
                path: "mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "user_volume_accumulator",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  117,
                  115,
                  101,
                  114,
                  95,
                  118,
                  111,
                  108,
                  117,
                  109,
                  101,
                  95,
                  97,
                  99,
                  99,
                  117,
                  109,
                  117,
                  108,
                  97,
                  116,
                  111,
                  114
                ]
              },
              {
                kind: "account",
                path: "user"
              }
            ]
          }
        },
        {
          name: "mint",
          relations: ["global_volume_accumulator"]
        },
        {
          name: "token_program"
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program",
          address: "pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA"
        },
        {
          name: "payer",
          writable: true,
          signer: true
        }
      ],
      args: []
    },
    {
      name: "close_user_volume_accumulator",
      discriminator: [249, 69, 164, 218, 150, 103, 84, 138],
      accounts: [
        {
          name: "user",
          writable: true,
          signer: true
        },
        {
          name: "user_volume_accumulator",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  117,
                  115,
                  101,
                  114,
                  95,
                  118,
                  111,
                  108,
                  117,
                  109,
                  101,
                  95,
                  97,
                  99,
                  99,
                  117,
                  109,
                  117,
                  108,
                  97,
                  116,
                  111,
                  114
                ]
              },
              {
                kind: "account",
                path: "user"
              }
            ]
          }
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "collect_coin_creator_fee",
      discriminator: [160, 57, 89, 42, 181, 139, 43, 66],
      accounts: [
        {
          name: "quote_mint"
        },
        {
          name: "quote_token_program"
        },
        {
          name: "coin_creator"
        },
        {
          name: "coin_creator_vault_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [99, 114, 101, 97, 116, 111, 114, 95, 118, 97, 117, 108, 116]
              },
              {
                kind: "account",
                path: "coin_creator"
              }
            ]
          }
        },
        {
          name: "coin_creator_vault_ata",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "coin_creator_vault_authority"
              },
              {
                kind: "account",
                path: "quote_token_program"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "coin_creator_token_account",
          writable: true
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "create_config",
      discriminator: [201, 207, 243, 114, 75, 111, 47, 189],
      accounts: [
        {
          name: "admin",
          writable: true,
          signer: true,
          address: "8LWu7QM2dGR1G8nKDHthckea57bkCzXyBTAKPJUBDHo8"
        },
        {
          name: "global_config",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [103, 108, 111, 98, 97, 108, 95, 99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "lp_fee_basis_points",
          type: "u64"
        },
        {
          name: "protocol_fee_basis_points",
          type: "u64"
        },
        {
          name: "protocol_fee_recipients",
          type: {
            array: ["pubkey", 8]
          }
        },
        {
          name: "coin_creator_fee_basis_points",
          type: "u64"
        },
        {
          name: "admin_set_coin_creator_authority",
          type: "pubkey"
        }
      ]
    },
    {
      name: "create_pool",
      discriminator: [233, 146, 209, 142, 207, 104, 64, 188],
      accounts: [
        {
          name: "pool",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [112, 111, 111, 108]
              },
              {
                kind: "arg",
                path: "index"
              },
              {
                kind: "account",
                path: "creator"
              },
              {
                kind: "account",
                path: "base_mint"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ]
          }
        },
        {
          name: "global_config"
        },
        {
          name: "creator",
          writable: true,
          signer: true
        },
        {
          name: "base_mint"
        },
        {
          name: "quote_mint"
        },
        {
          name: "lp_mint",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [112, 111, 111, 108, 95, 108, 112, 95, 109, 105, 110, 116]
              },
              {
                kind: "account",
                path: "pool"
              }
            ]
          }
        },
        {
          name: "user_base_token_account",
          writable: true
        },
        {
          name: "user_quote_token_account",
          writable: true
        },
        {
          name: "user_pool_token_account",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "creator"
              },
              {
                kind: "account",
                path: "token_2022_program"
              },
              {
                kind: "account",
                path: "lp_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "pool_base_token_account",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "pool"
              },
              {
                kind: "account",
                path: "base_token_program"
              },
              {
                kind: "account",
                path: "base_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "pool_quote_token_account",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "pool"
              },
              {
                kind: "account",
                path: "quote_token_program"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "token_2022_program",
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          name: "base_token_program"
        },
        {
          name: "quote_token_program"
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "index",
          type: "u16"
        },
        {
          name: "base_amount_in",
          type: "u64"
        },
        {
          name: "quote_amount_in",
          type: "u64"
        },
        {
          name: "coin_creator",
          type: "pubkey"
        }
      ]
    },
    {
      name: "deposit",
      discriminator: [242, 35, 198, 137, 82, 225, 242, 182],
      accounts: [
        {
          name: "pool",
          writable: true
        },
        {
          name: "global_config"
        },
        {
          name: "user",
          signer: true
        },
        {
          name: "base_mint",
          relations: ["pool"]
        },
        {
          name: "quote_mint",
          relations: ["pool"]
        },
        {
          name: "lp_mint",
          writable: true,
          relations: ["pool"]
        },
        {
          name: "user_base_token_account",
          writable: true
        },
        {
          name: "user_quote_token_account",
          writable: true
        },
        {
          name: "user_pool_token_account",
          writable: true
        },
        {
          name: "pool_base_token_account",
          writable: true,
          relations: ["pool"]
        },
        {
          name: "pool_quote_token_account",
          writable: true,
          relations: ["pool"]
        },
        {
          name: "token_program",
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "token_2022_program",
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "lp_token_amount_out",
          type: "u64"
        },
        {
          name: "max_base_amount_in",
          type: "u64"
        },
        {
          name: "max_quote_amount_in",
          type: "u64"
        }
      ]
    },
    {
      name: "disable",
      discriminator: [185, 173, 187, 90, 216, 15, 238, 233],
      accounts: [
        {
          name: "admin",
          signer: true,
          relations: ["global_config"]
        },
        {
          name: "global_config",
          writable: true
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "disable_create_pool",
          type: "bool"
        },
        {
          name: "disable_deposit",
          type: "bool"
        },
        {
          name: "disable_withdraw",
          type: "bool"
        },
        {
          name: "disable_buy",
          type: "bool"
        },
        {
          name: "disable_sell",
          type: "bool"
        }
      ]
    },
    {
      name: "extend_account",
      discriminator: [234, 102, 194, 203, 150, 72, 62, 229],
      accounts: [
        {
          name: "account",
          writable: true
        },
        {
          name: "user",
          signer: true
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "init_user_volume_accumulator",
      discriminator: [94, 6, 202, 115, 255, 96, 232, 183],
      accounts: [
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "user"
        },
        {
          name: "user_volume_accumulator",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  117,
                  115,
                  101,
                  114,
                  95,
                  118,
                  111,
                  108,
                  117,
                  109,
                  101,
                  95,
                  97,
                  99,
                  99,
                  117,
                  109,
                  117,
                  108,
                  97,
                  116,
                  111,
                  114
                ]
              },
              {
                kind: "account",
                path: "user"
              }
            ]
          }
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "sell",
      discriminator: [51, 230, 133, 164, 1, 127, 131, 173],
      accounts: [
        {
          name: "pool"
        },
        {
          name: "user",
          writable: true,
          signer: true
        },
        {
          name: "global_config"
        },
        {
          name: "base_mint",
          relations: ["pool"]
        },
        {
          name: "quote_mint",
          relations: ["pool"]
        },
        {
          name: "user_base_token_account",
          writable: true
        },
        {
          name: "user_quote_token_account",
          writable: true
        },
        {
          name: "pool_base_token_account",
          writable: true,
          relations: ["pool"]
        },
        {
          name: "pool_quote_token_account",
          writable: true,
          relations: ["pool"]
        },
        {
          name: "protocol_fee_recipient"
        },
        {
          name: "protocol_fee_recipient_token_account",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "protocol_fee_recipient"
              },
              {
                kind: "account",
                path: "quote_token_program"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "base_token_program"
        },
        {
          name: "quote_token_program"
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program",
          address: "pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA"
        },
        {
          name: "coin_creator_vault_ata",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "coin_creator_vault_authority"
              },
              {
                kind: "account",
                path: "quote_token_program"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "coin_creator_vault_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [99, 114, 101, 97, 116, 111, 114, 95, 118, 97, 117, 108, 116]
              },
              {
                kind: "account",
                path: "pool.coin_creator",
                account: "Pool"
              }
            ]
          }
        },
        {
          name: "fee_config",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [102, 101, 101, 95, 99, 111, 110, 102, 105, 103]
              },
              {
                kind: "const",
                value: [
                  12,
                  20,
                  222,
                  252,
                  130,
                  94,
                  198,
                  118,
                  148,
                  37,
                  8,
                  24,
                  187,
                  101,
                  64,
                  101,
                  244,
                  41,
                  141,
                  49,
                  86,
                  213,
                  113,
                  180,
                  212,
                  248,
                  9,
                  12,
                  24,
                  233,
                  168,
                  99
                ]
              }
            ],
            program: {
              kind: "account",
              path: "fee_program"
            }
          }
        },
        {
          name: "fee_program",
          address: "pfeeUxB6jkeY1Hxd7CsFCAjcbHA9rWtchMGdZ6VojVZ"
        }
      ],
      args: [
        {
          name: "base_amount_in",
          type: "u64"
        },
        {
          name: "min_quote_amount_out",
          type: "u64"
        }
      ]
    },
    {
      name: "set_coin_creator",
      docs: ["Sets Pool::coin_creator from Metaplex metadata creator or BondingCurve::creator"],
      discriminator: [210, 149, 128, 45, 188, 58, 78, 175],
      accounts: [
        {
          name: "pool",
          writable: true
        },
        {
          name: "metadata",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [109, 101, 116, 97, 100, 97, 116, 97]
              },
              {
                kind: "const",
                value: [
                  11,
                  112,
                  101,
                  177,
                  227,
                  209,
                  124,
                  69,
                  56,
                  157,
                  82,
                  127,
                  107,
                  4,
                  195,
                  205,
                  88,
                  184,
                  108,
                  115,
                  26,
                  160,
                  253,
                  181,
                  73,
                  182,
                  209,
                  188,
                  3,
                  248,
                  41,
                  70
                ]
              },
              {
                kind: "account",
                path: "pool.base_mint",
                account: "Pool"
              }
            ],
            program: {
              kind: "const",
              value: [
                11,
                112,
                101,
                177,
                227,
                209,
                124,
                69,
                56,
                157,
                82,
                127,
                107,
                4,
                195,
                205,
                88,
                184,
                108,
                115,
                26,
                160,
                253,
                181,
                73,
                182,
                209,
                188,
                3,
                248,
                41,
                70
              ]
            }
          }
        },
        {
          name: "bonding_curve",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [98, 111, 110, 100, 105, 110, 103, 45, 99, 117, 114, 118, 101]
              },
              {
                kind: "account",
                path: "pool.base_mint",
                account: "Pool"
              }
            ],
            program: {
              kind: "const",
              value: [
                1,
                86,
                224,
                246,
                147,
                102,
                90,
                207,
                68,
                219,
                21,
                104,
                191,
                23,
                91,
                170,
                81,
                137,
                203,
                151,
                245,
                210,
                255,
                59,
                101,
                93,
                43,
                182,
                253,
                109,
                24,
                176
              ]
            }
          }
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "sync_user_volume_accumulator",
      discriminator: [86, 31, 192, 87, 163, 87, 79, 238],
      accounts: [
        {
          name: "user"
        },
        {
          name: "global_volume_accumulator",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  103,
                  108,
                  111,
                  98,
                  97,
                  108,
                  95,
                  118,
                  111,
                  108,
                  117,
                  109,
                  101,
                  95,
                  97,
                  99,
                  99,
                  117,
                  109,
                  117,
                  108,
                  97,
                  116,
                  111,
                  114
                ]
              }
            ]
          }
        },
        {
          name: "user_volume_accumulator",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  117,
                  115,
                  101,
                  114,
                  95,
                  118,
                  111,
                  108,
                  117,
                  109,
                  101,
                  95,
                  97,
                  99,
                  99,
                  117,
                  109,
                  117,
                  108,
                  97,
                  116,
                  111,
                  114
                ]
              },
              {
                kind: "account",
                path: "user"
              }
            ]
          }
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "update_admin",
      discriminator: [161, 176, 40, 213, 60, 184, 179, 228],
      accounts: [
        {
          name: "admin",
          signer: true,
          relations: ["global_config"]
        },
        {
          name: "global_config",
          writable: true
        },
        {
          name: "new_admin"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "update_fee_config",
      discriminator: [104, 184, 103, 242, 88, 151, 107, 20],
      accounts: [
        {
          name: "admin",
          signer: true,
          relations: ["global_config"]
        },
        {
          name: "global_config",
          writable: true
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "lp_fee_basis_points",
          type: "u64"
        },
        {
          name: "protocol_fee_basis_points",
          type: "u64"
        },
        {
          name: "protocol_fee_recipients",
          type: {
            array: ["pubkey", 8]
          }
        },
        {
          name: "coin_creator_fee_basis_points",
          type: "u64"
        },
        {
          name: "admin_set_coin_creator_authority",
          type: "pubkey"
        }
      ]
    },
    {
      name: "withdraw",
      discriminator: [183, 18, 70, 156, 148, 109, 161, 34],
      accounts: [
        {
          name: "pool",
          writable: true
        },
        {
          name: "global_config"
        },
        {
          name: "user",
          signer: true
        },
        {
          name: "base_mint",
          relations: ["pool"]
        },
        {
          name: "quote_mint",
          relations: ["pool"]
        },
        {
          name: "lp_mint",
          writable: true,
          relations: ["pool"]
        },
        {
          name: "user_base_token_account",
          writable: true
        },
        {
          name: "user_quote_token_account",
          writable: true
        },
        {
          name: "user_pool_token_account",
          writable: true
        },
        {
          name: "pool_base_token_account",
          writable: true,
          relations: ["pool"]
        },
        {
          name: "pool_quote_token_account",
          writable: true,
          relations: ["pool"]
        },
        {
          name: "token_program",
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "token_2022_program",
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "lp_token_amount_in",
          type: "u64"
        },
        {
          name: "min_base_amount_out",
          type: "u64"
        },
        {
          name: "min_quote_amount_out",
          type: "u64"
        }
      ]
    }
  ],
  accounts: [
    {
      name: "BondingCurve",
      discriminator: [23, 183, 248, 55, 96, 216, 172, 96]
    },
    {
      name: "FeeConfig",
      discriminator: [143, 52, 146, 187, 219, 123, 76, 155]
    },
    {
      name: "GlobalConfig",
      discriminator: [149, 8, 156, 202, 160, 252, 176, 217]
    },
    {
      name: "GlobalVolumeAccumulator",
      discriminator: [202, 42, 246, 43, 142, 190, 30, 255]
    },
    {
      name: "Pool",
      discriminator: [241, 154, 109, 4, 17, 177, 109, 188]
    },
    {
      name: "UserVolumeAccumulator",
      discriminator: [86, 255, 112, 14, 102, 53, 154, 250]
    }
  ],
  events: [
    {
      name: "AdminSetCoinCreatorEvent",
      discriminator: [45, 220, 93, 24, 25, 97, 172, 104]
    },
    {
      name: "AdminUpdateTokenIncentivesEvent",
      discriminator: [147, 250, 108, 120, 247, 29, 67, 222]
    },
    {
      name: "BuyEvent",
      discriminator: [103, 244, 82, 31, 44, 245, 119, 119]
    },
    {
      name: "ClaimTokenIncentivesEvent",
      discriminator: [79, 172, 246, 49, 205, 91, 206, 232]
    },
    {
      name: "CloseUserVolumeAccumulatorEvent",
      discriminator: [146, 159, 189, 172, 146, 88, 56, 244]
    },
    {
      name: "CollectCoinCreatorFeeEvent",
      discriminator: [232, 245, 194, 238, 234, 218, 58, 89]
    },
    {
      name: "CreateConfigEvent",
      discriminator: [107, 52, 89, 129, 55, 226, 81, 22]
    },
    {
      name: "CreatePoolEvent",
      discriminator: [177, 49, 12, 210, 160, 118, 167, 116]
    },
    {
      name: "DepositEvent",
      discriminator: [120, 248, 61, 83, 31, 142, 107, 144]
    },
    {
      name: "DisableEvent",
      discriminator: [107, 253, 193, 76, 228, 202, 27, 104]
    },
    {
      name: "ExtendAccountEvent",
      discriminator: [97, 97, 215, 144, 93, 146, 22, 124]
    },
    {
      name: "InitUserVolumeAccumulatorEvent",
      discriminator: [134, 36, 13, 72, 232, 101, 130, 216]
    },
    {
      name: "SellEvent",
      discriminator: [62, 47, 55, 10, 165, 3, 220, 42]
    },
    {
      name: "SetBondingCurveCoinCreatorEvent",
      discriminator: [242, 231, 235, 102, 65, 99, 189, 211]
    },
    {
      name: "SetMetaplexCoinCreatorEvent",
      discriminator: [150, 107, 199, 123, 124, 207, 102, 228]
    },
    {
      name: "SyncUserVolumeAccumulatorEvent",
      discriminator: [197, 122, 167, 124, 116, 81, 91, 255]
    },
    {
      name: "UpdateAdminEvent",
      discriminator: [225, 152, 171, 87, 246, 63, 66, 234]
    },
    {
      name: "UpdateFeeConfigEvent",
      discriminator: [90, 23, 65, 35, 62, 244, 188, 208]
    },
    {
      name: "WithdrawEvent",
      discriminator: [22, 9, 133, 26, 160, 44, 71, 192]
    }
  ],
  errors: [
    {
      code: 6e3,
      name: "FeeBasisPointsExceedsMaximum"
    },
    {
      code: 6001,
      name: "ZeroBaseAmount"
    },
    {
      code: 6002,
      name: "ZeroQuoteAmount"
    },
    {
      code: 6003,
      name: "TooLittlePoolTokenLiquidity"
    },
    {
      code: 6004,
      name: "ExceededSlippage"
    },
    {
      code: 6005,
      name: "InvalidAdmin"
    },
    {
      code: 6006,
      name: "UnsupportedBaseMint"
    },
    {
      code: 6007,
      name: "UnsupportedQuoteMint"
    },
    {
      code: 6008,
      name: "InvalidBaseMint"
    },
    {
      code: 6009,
      name: "InvalidQuoteMint"
    },
    {
      code: 6010,
      name: "InvalidLpMint"
    },
    {
      code: 6011,
      name: "AllProtocolFeeRecipientsShouldBeNonZero"
    },
    {
      code: 6012,
      name: "UnsortedNotUniqueProtocolFeeRecipients"
    },
    {
      code: 6013,
      name: "InvalidProtocolFeeRecipient"
    },
    {
      code: 6014,
      name: "InvalidPoolBaseTokenAccount"
    },
    {
      code: 6015,
      name: "InvalidPoolQuoteTokenAccount"
    },
    {
      code: 6016,
      name: "BuyMoreBaseAmountThanPoolReserves"
    },
    {
      code: 6017,
      name: "DisabledCreatePool"
    },
    {
      code: 6018,
      name: "DisabledDeposit"
    },
    {
      code: 6019,
      name: "DisabledWithdraw"
    },
    {
      code: 6020,
      name: "DisabledBuy"
    },
    {
      code: 6021,
      name: "DisabledSell"
    },
    {
      code: 6022,
      name: "SameMint"
    },
    {
      code: 6023,
      name: "Overflow"
    },
    {
      code: 6024,
      name: "Truncation"
    },
    {
      code: 6025,
      name: "DivisionByZero"
    },
    {
      code: 6026,
      name: "NewSizeLessThanCurrentSize"
    },
    {
      code: 6027,
      name: "AccountTypeNotSupported"
    },
    {
      code: 6028,
      name: "OnlyCanonicalPumpPoolsCanHaveCoinCreator"
    },
    {
      code: 6029,
      name: "InvalidAdminSetCoinCreatorAuthority"
    },
    {
      code: 6030,
      name: "StartTimeInThePast"
    },
    {
      code: 6031,
      name: "EndTimeInThePast"
    },
    {
      code: 6032,
      name: "EndTimeBeforeStartTime"
    },
    {
      code: 6033,
      name: "TimeRangeTooLarge"
    },
    {
      code: 6034,
      name: "EndTimeBeforeCurrentDay"
    },
    {
      code: 6035,
      name: "SupplyUpdateForFinishedRange"
    },
    {
      code: 6036,
      name: "DayIndexAfterEndIndex"
    },
    {
      code: 6037,
      name: "DayInActiveRange"
    },
    {
      code: 6038,
      name: "InvalidIncentiveMint"
    },
    {
      code: 6039,
      name: "BuyNotEnoughQuoteTokensToCoverFees",
      msg: "buy: Not enough quote tokens to cover for fees."
    },
    {
      code: 6040,
      name: "BuySlippageBelowMinBaseAmountOut",
      msg: "buy: slippage - would buy less tokens than expected min_base_amount_out"
    }
  ],
  types: [
    {
      name: "AdminSetCoinCreatorEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "admin_set_coin_creator_authority",
            type: "pubkey"
          },
          {
            name: "base_mint",
            type: "pubkey"
          },
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "old_coin_creator",
            type: "pubkey"
          },
          {
            name: "new_coin_creator",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "AdminUpdateTokenIncentivesEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "start_time",
            type: "i64"
          },
          {
            name: "end_time",
            type: "i64"
          },
          {
            name: "day_number",
            type: "u64"
          },
          {
            name: "token_supply_per_day",
            type: "u64"
          },
          {
            name: "mint",
            type: "pubkey"
          },
          {
            name: "seconds_in_a_day",
            type: "i64"
          },
          {
            name: "timestamp",
            type: "i64"
          }
        ]
      }
    },
    {
      name: "BondingCurve",
      type: {
        kind: "struct",
        fields: [
          {
            name: "virtual_token_reserves",
            type: "u64"
          },
          {
            name: "virtual_sol_reserves",
            type: "u64"
          },
          {
            name: "real_token_reserves",
            type: "u64"
          },
          {
            name: "real_sol_reserves",
            type: "u64"
          },
          {
            name: "token_total_supply",
            type: "u64"
          },
          {
            name: "complete",
            type: "bool"
          },
          {
            name: "creator",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "BuyEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "base_amount_out",
            type: "u64"
          },
          {
            name: "max_quote_amount_in",
            type: "u64"
          },
          {
            name: "user_base_token_reserves",
            type: "u64"
          },
          {
            name: "user_quote_token_reserves",
            type: "u64"
          },
          {
            name: "pool_base_token_reserves",
            type: "u64"
          },
          {
            name: "pool_quote_token_reserves",
            type: "u64"
          },
          {
            name: "quote_amount_in",
            type: "u64"
          },
          {
            name: "lp_fee_basis_points",
            type: "u64"
          },
          {
            name: "lp_fee",
            type: "u64"
          },
          {
            name: "protocol_fee_basis_points",
            type: "u64"
          },
          {
            name: "protocol_fee",
            type: "u64"
          },
          {
            name: "quote_amount_in_with_lp_fee",
            type: "u64"
          },
          {
            name: "user_quote_amount_in",
            type: "u64"
          },
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "user_base_token_account",
            type: "pubkey"
          },
          {
            name: "user_quote_token_account",
            type: "pubkey"
          },
          {
            name: "protocol_fee_recipient",
            type: "pubkey"
          },
          {
            name: "protocol_fee_recipient_token_account",
            type: "pubkey"
          },
          {
            name: "coin_creator",
            type: "pubkey"
          },
          {
            name: "coin_creator_fee_basis_points",
            type: "u64"
          },
          {
            name: "coin_creator_fee",
            type: "u64"
          },
          {
            name: "track_volume",
            type: {
              option: "bool"
            }
          },
          {
            name: "total_unclaimed_tokens",
            type: {
              option: "u64"
            }
          },
          {
            name: "total_claimed_tokens",
            type: {
              option: "u64"
            }
          },
          {
            name: "current_sol_volume",
            type: {
              option: "u64"
            }
          },
          {
            name: "last_update_timestamp",
            type: {
              option: "i64"
            }
          },
          {
            name: "min_base_amount_out",
            type: {
              option: "u64"
            }
          },
          {
            name: "ix_name",
            type: {
              option: "string"
            }
          }
        ]
      }
    },
    {
      name: "ClaimTokenIncentivesEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "mint",
            type: "pubkey"
          },
          {
            name: "amount",
            type: "u64"
          },
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "total_claimed_tokens",
            type: "u64"
          },
          {
            name: "current_sol_volume",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "CloseUserVolumeAccumulatorEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "total_unclaimed_tokens",
            type: "u64"
          },
          {
            name: "total_claimed_tokens",
            type: "u64"
          },
          {
            name: "current_sol_volume",
            type: "u64"
          },
          {
            name: "last_update_timestamp",
            type: "i64"
          }
        ]
      }
    },
    {
      name: "CollectCoinCreatorFeeEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "coin_creator",
            type: "pubkey"
          },
          {
            name: "coin_creator_fee",
            type: "u64"
          },
          {
            name: "coin_creator_vault_ata",
            type: "pubkey"
          },
          {
            name: "coin_creator_token_account",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "CreateConfigEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "admin",
            type: "pubkey"
          },
          {
            name: "lp_fee_basis_points",
            type: "u64"
          },
          {
            name: "protocol_fee_basis_points",
            type: "u64"
          },
          {
            name: "protocol_fee_recipients",
            type: {
              array: ["pubkey", 8]
            }
          },
          {
            name: "coin_creator_fee_basis_points",
            type: "u64"
          },
          {
            name: "admin_set_coin_creator_authority",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "CreatePoolEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "index",
            type: "u16"
          },
          {
            name: "creator",
            type: "pubkey"
          },
          {
            name: "base_mint",
            type: "pubkey"
          },
          {
            name: "quote_mint",
            type: "pubkey"
          },
          {
            name: "base_mint_decimals",
            type: "u8"
          },
          {
            name: "quote_mint_decimals",
            type: "u8"
          },
          {
            name: "base_amount_in",
            type: "u64"
          },
          {
            name: "quote_amount_in",
            type: "u64"
          },
          {
            name: "pool_base_amount",
            type: "u64"
          },
          {
            name: "pool_quote_amount",
            type: "u64"
          },
          {
            name: "minimum_liquidity",
            type: "u64"
          },
          {
            name: "initial_liquidity",
            type: "u64"
          },
          {
            name: "lp_token_amount_out",
            type: "u64"
          },
          {
            name: "pool_bump",
            type: "u8"
          },
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "lp_mint",
            type: "pubkey"
          },
          {
            name: "user_base_token_account",
            type: "pubkey"
          },
          {
            name: "user_quote_token_account",
            type: "pubkey"
          },
          {
            name: "coin_creator",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "DepositEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "lp_token_amount_out",
            type: "u64"
          },
          {
            name: "max_base_amount_in",
            type: "u64"
          },
          {
            name: "max_quote_amount_in",
            type: "u64"
          },
          {
            name: "user_base_token_reserves",
            type: "u64"
          },
          {
            name: "user_quote_token_reserves",
            type: "u64"
          },
          {
            name: "pool_base_token_reserves",
            type: "u64"
          },
          {
            name: "pool_quote_token_reserves",
            type: "u64"
          },
          {
            name: "base_amount_in",
            type: "u64"
          },
          {
            name: "quote_amount_in",
            type: "u64"
          },
          {
            name: "lp_mint_supply",
            type: "u64"
          },
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "user_base_token_account",
            type: "pubkey"
          },
          {
            name: "user_quote_token_account",
            type: "pubkey"
          },
          {
            name: "user_pool_token_account",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "DisableEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "admin",
            type: "pubkey"
          },
          {
            name: "disable_create_pool",
            type: "bool"
          },
          {
            name: "disable_deposit",
            type: "bool"
          },
          {
            name: "disable_withdraw",
            type: "bool"
          },
          {
            name: "disable_buy",
            type: "bool"
          },
          {
            name: "disable_sell",
            type: "bool"
          }
        ]
      }
    },
    {
      name: "ExtendAccountEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "account",
            type: "pubkey"
          },
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "current_size",
            type: "u64"
          },
          {
            name: "new_size",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "FeeConfig",
      type: {
        kind: "struct",
        fields: [
          {
            name: "bump",
            type: "u8"
          },
          {
            name: "admin",
            type: "pubkey"
          },
          {
            name: "flat_fees",
            type: {
              defined: {
                name: "Fees"
              }
            }
          },
          {
            name: "fee_tiers",
            type: {
              vec: {
                defined: {
                  name: "FeeTier"
                }
              }
            }
          }
        ]
      }
    },
    {
      name: "FeeTier",
      type: {
        kind: "struct",
        fields: [
          {
            name: "market_cap_lamports_threshold",
            type: "u128"
          },
          {
            name: "fees",
            type: {
              defined: {
                name: "Fees"
              }
            }
          }
        ]
      }
    },
    {
      name: "Fees",
      type: {
        kind: "struct",
        fields: [
          {
            name: "lp_fee_bps",
            type: "u64"
          },
          {
            name: "protocol_fee_bps",
            type: "u64"
          },
          {
            name: "creator_fee_bps",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "GlobalConfig",
      type: {
        kind: "struct",
        fields: [
          {
            name: "admin",
            docs: ["The admin pubkey"],
            type: "pubkey"
          },
          {
            name: "lp_fee_basis_points",
            type: "u64"
          },
          {
            name: "protocol_fee_basis_points",
            type: "u64"
          },
          {
            name: "disable_flags",
            docs: [
              "Flags to disable certain functionality",
              "bit 0 - Disable create pool",
              "bit 1 - Disable deposit",
              "bit 2 - Disable withdraw",
              "bit 3 - Disable buy",
              "bit 4 - Disable sell"
            ],
            type: "u8"
          },
          {
            name: "protocol_fee_recipients",
            docs: ["Addresses of the protocol fee recipients"],
            type: {
              array: ["pubkey", 8]
            }
          },
          {
            name: "coin_creator_fee_basis_points",
            type: "u64"
          },
          {
            name: "admin_set_coin_creator_authority",
            docs: ["The admin authority for setting coin creators"],
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "GlobalVolumeAccumulator",
      type: {
        kind: "struct",
        fields: [
          {
            name: "start_time",
            type: "i64"
          },
          {
            name: "end_time",
            type: "i64"
          },
          {
            name: "seconds_in_a_day",
            type: "i64"
          },
          {
            name: "mint",
            type: "pubkey"
          },
          {
            name: "total_token_supply",
            type: {
              array: ["u64", 30]
            }
          },
          {
            name: "sol_volumes",
            type: {
              array: ["u64", 30]
            }
          }
        ]
      }
    },
    {
      name: "InitUserVolumeAccumulatorEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "payer",
            type: "pubkey"
          },
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "timestamp",
            type: "i64"
          }
        ]
      }
    },
    {
      name: "Pool",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool_bump",
            type: "u8"
          },
          {
            name: "index",
            type: "u16"
          },
          {
            name: "creator",
            type: "pubkey"
          },
          {
            name: "base_mint",
            type: "pubkey"
          },
          {
            name: "quote_mint",
            type: "pubkey"
          },
          {
            name: "lp_mint",
            type: "pubkey"
          },
          {
            name: "pool_base_token_account",
            type: "pubkey"
          },
          {
            name: "pool_quote_token_account",
            type: "pubkey"
          },
          {
            name: "lp_supply",
            docs: ["True circulating supply without burns and lock-ups"],
            type: "u64"
          },
          {
            name: "coin_creator",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "SellEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "base_amount_in",
            type: "u64"
          },
          {
            name: "min_quote_amount_out",
            type: "u64"
          },
          {
            name: "user_base_token_reserves",
            type: "u64"
          },
          {
            name: "user_quote_token_reserves",
            type: "u64"
          },
          {
            name: "pool_base_token_reserves",
            type: "u64"
          },
          {
            name: "pool_quote_token_reserves",
            type: "u64"
          },
          {
            name: "quote_amount_out",
            type: "u64"
          },
          {
            name: "lp_fee_basis_points",
            type: "u64"
          },
          {
            name: "lp_fee",
            type: "u64"
          },
          {
            name: "protocol_fee_basis_points",
            type: "u64"
          },
          {
            name: "protocol_fee",
            type: "u64"
          },
          {
            name: "quote_amount_out_without_lp_fee",
            type: "u64"
          },
          {
            name: "user_quote_amount_out",
            type: "u64"
          },
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "user_base_token_account",
            type: "pubkey"
          },
          {
            name: "user_quote_token_account",
            type: "pubkey"
          },
          {
            name: "protocol_fee_recipient",
            type: "pubkey"
          },
          {
            name: "protocol_fee_recipient_token_account",
            type: "pubkey"
          },
          {
            name: "coin_creator",
            type: "pubkey"
          },
          {
            name: "coin_creator_fee_basis_points",
            type: "u64"
          },
          {
            name: "coin_creator_fee",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "SetBondingCurveCoinCreatorEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "base_mint",
            type: "pubkey"
          },
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "bonding_curve",
            type: "pubkey"
          },
          {
            name: "coin_creator",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "SetMetaplexCoinCreatorEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "base_mint",
            type: "pubkey"
          },
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "metadata",
            type: "pubkey"
          },
          {
            name: "coin_creator",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "SyncUserVolumeAccumulatorEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "total_claimed_tokens_before",
            type: "u64"
          },
          {
            name: "total_claimed_tokens_after",
            type: "u64"
          },
          {
            name: "timestamp",
            type: "i64"
          }
        ]
      }
    },
    {
      name: "UpdateAdminEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "admin",
            type: "pubkey"
          },
          {
            name: "new_admin",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "UpdateFeeConfigEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "admin",
            type: "pubkey"
          },
          {
            name: "lp_fee_basis_points",
            type: "u64"
          },
          {
            name: "protocol_fee_basis_points",
            type: "u64"
          },
          {
            name: "protocol_fee_recipients",
            type: {
              array: ["pubkey", 8]
            }
          },
          {
            name: "coin_creator_fee_basis_points",
            type: "u64"
          },
          {
            name: "admin_set_coin_creator_authority",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "UserVolumeAccumulator",
      type: {
        kind: "struct",
        fields: [
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "needs_claim",
            type: "bool"
          },
          {
            name: "total_unclaimed_tokens",
            type: "u64"
          },
          {
            name: "total_claimed_tokens",
            type: "u64"
          },
          {
            name: "current_sol_volume",
            type: "u64"
          },
          {
            name: "last_update_timestamp",
            type: "i64"
          },
          {
            name: "has_total_claimed_tokens",
            type: "bool"
          }
        ]
      }
    },
    {
      name: "WithdrawEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "lp_token_amount_in",
            type: "u64"
          },
          {
            name: "min_base_amount_out",
            type: "u64"
          },
          {
            name: "min_quote_amount_out",
            type: "u64"
          },
          {
            name: "user_base_token_reserves",
            type: "u64"
          },
          {
            name: "user_quote_token_reserves",
            type: "u64"
          },
          {
            name: "pool_base_token_reserves",
            type: "u64"
          },
          {
            name: "pool_quote_token_reserves",
            type: "u64"
          },
          {
            name: "base_amount_out",
            type: "u64"
          },
          {
            name: "quote_amount_out",
            type: "u64"
          },
          {
            name: "lp_mint_supply",
            type: "u64"
          },
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "user_base_token_account",
            type: "pubkey"
          },
          {
            name: "user_quote_token_account",
            type: "pubkey"
          },
          {
            name: "user_pool_token_account",
            type: "pubkey"
          }
        ]
      }
    }
  ]
};

// idl/moonshot.json
var moonshot_default = {
  version: "0.1.0",
  name: "token_launchpad",
  instructions: [
    {
      name: "tokenMint",
      accounts: [
        { name: "sender", isMut: true, isSigner: true },
        { name: "backendAuthority", isMut: false, isSigner: true },
        { name: "curveAccount", isMut: true, isSigner: false },
        { name: "mint", isMut: true, isSigner: true },
        {
          name: "mintMetadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Type validating that the account is owned by the System Program = uninitialized",
            "seeds should ensure that the address is correct"
          ]
        },
        { name: "curveTokenAccount", isMut: true, isSigner: false },
        { name: "configAccount", isMut: false, isSigner: false },
        { name: "tokenProgram", isMut: false, isSigner: false },
        { name: "associatedTokenProgram", isMut: false, isSigner: false },
        { name: "mplTokenMetadata", isMut: false, isSigner: false },
        { name: "systemProgram", isMut: false, isSigner: false }
      ],
      args: [
        { name: "name", type: "string" },
        { name: "symbol", type: "string" },
        { name: "uri", type: "string" },
        { name: "decimals", type: "u8" },
        { name: "collateralCurrency", type: "u8" },
        { name: "amount", type: "u64" },
        { name: "curveType", type: "u8" }
      ]
    },
    {
      name: "buy",
      accounts: [
        { name: "sender", isMut: true, isSigner: true },
        { name: "senderTokenAccount", isMut: true, isSigner: false },
        { name: "curveAccount", isMut: true, isSigner: false },
        { name: "curveTokenAccount", isMut: true, isSigner: false },
        { name: "dexFee", isMut: true, isSigner: false },
        { name: "helioFee", isMut: true, isSigner: false },
        { name: "mint", isMut: false, isSigner: false },
        { name: "configAccount", isMut: false, isSigner: false },
        { name: "tokenProgram", isMut: false, isSigner: false },
        { name: "associatedTokenProgram", isMut: false, isSigner: false },
        { name: "systemProgram", isMut: false, isSigner: false }
      ],
      args: [
        { name: "amount", type: "u64" },
        { name: "collateralAmount", type: "u64" },
        { name: "slippageBps", type: "u64" }
      ]
    },
    {
      name: "sell",
      accounts: [
        { name: "sender", isMut: true, isSigner: true },
        { name: "senderTokenAccount", isMut: true, isSigner: false },
        { name: "curveAccount", isMut: true, isSigner: false },
        { name: "curveTokenAccount", isMut: true, isSigner: false },
        { name: "dexFee", isMut: true, isSigner: false },
        { name: "helioFee", isMut: true, isSigner: false },
        { name: "mint", isMut: false, isSigner: false },
        { name: "configAccount", isMut: false, isSigner: false },
        { name: "tokenProgram", isMut: false, isSigner: false },
        { name: "associatedTokenProgram", isMut: false, isSigner: false },
        { name: "systemProgram", isMut: false, isSigner: false }
      ],
      args: [
        { name: "amount", type: "u64" },
        { name: "collateralAmount", type: "u64" },
        { name: "slippageBps", type: "u64" }
      ]
    },
    {
      name: "migrateFunds",
      accounts: [
        {
          name: "backendAuthority",
          isMut: false,
          isSigner: true,
          docs: ["BE Authority"]
        },
        {
          name: "migrationAuthority",
          isMut: true,
          isSigner: true,
          docs: [
            "Migration Authority",
            "Owner and Payer over Token Accounts, needs to be mutable"
          ]
        },
        {
          name: "curveAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "Curve Account",
            "The account is closed after this instruction"
          ]
        },
        {
          name: "curveTokenAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "Curve Token Account",
            "The account is closed after this instruction"
          ]
        },
        {
          name: "migrationAuthorityTokenAccount",
          isMut: true,
          isSigner: false,
          docs: ["Authority token Account", "Init on demand"]
        },
        {
          name: "mint",
          isMut: true,
          isSigner: false,
          docs: [
            "InterfaceAccount: checks program ownership + deserialize into Mint"
          ]
        },
        { name: "configAccount", isMut: false, isSigner: false },
        { name: "systemProgram", isMut: false, isSigner: false },
        { name: "tokenProgram", isMut: false, isSigner: false },
        { name: "associatedTokenProgram", isMut: false, isSigner: false }
      ],
      args: []
    },
    {
      name: "configInit",
      accounts: [
        { name: "configAuthority", isMut: true, isSigner: true },
        { name: "configAccount", isMut: true, isSigner: false },
        { name: "systemProgram", isMut: false, isSigner: false }
      ],
      args: [
        { name: "migrationAuthority", type: { option: "publicKey" } },
        { name: "backendAuthority", type: { option: "publicKey" } },
        { name: "configAuthority", type: { option: "publicKey" } },
        { name: "helioFee", type: { option: "publicKey" } },
        { name: "dexFee", type: { option: "publicKey" } },
        { name: "feeBps", type: { option: "u16" } },
        { name: "dexFeeShare", type: { option: "u8" } },
        { name: "migrationFee", type: { option: "u64" } },
        { name: "marketcapThreshold", type: { option: "u64" } },
        { name: "marketcapCurrency", type: { option: "u8" } },
        { name: "minSupportedDecimalPlaces", type: { option: "u8" } },
        { name: "maxSupportedDecimalPlaces", type: { option: "u8" } },
        { name: "minSupportedTokenSupply", type: { option: "u64" } },
        { name: "maxSupportedTokenSupply", type: { option: "u64" } },
        { name: "coefB", type: { option: "u32" } }
      ]
    },
    {
      name: "configUpdate",
      accounts: [
        { name: "configAuthority", isMut: false, isSigner: true },
        { name: "configAccount", isMut: true, isSigner: false }
      ],
      args: [
        { name: "migrationAuthority", type: { option: "publicKey" } },
        { name: "backendAuthority", type: { option: "publicKey" } },
        { name: "configAuthority", type: { option: "publicKey" } },
        { name: "helioFee", type: { option: "publicKey" } },
        { name: "dexFee", type: { option: "publicKey" } },
        { name: "feeBps", type: { option: "u16" } },
        { name: "dexFeeShare", type: { option: "u8" } },
        { name: "migrationFee", type: { option: "u64" } },
        { name: "marketcapThreshold", type: { option: "u64" } },
        { name: "marketcapCurrency", type: { option: "u8" } },
        { name: "minSupportedDecimalPlaces", type: { option: "u8" } },
        { name: "maxSupportedDecimalPlaces", type: { option: "u8" } },
        { name: "minSupportedTokenSupply", type: { option: "u64" } },
        { name: "maxSupportedTokenSupply", type: { option: "u64" } },
        { name: "coefB", type: { option: "u32" } }
      ]
    }
  ],
  accounts: [
    {
      name: "ConfigAccount",
      type: {
        kind: "struct",
        fields: [
          { name: "migrationAuthority", type: "publicKey" },
          { name: "backendAuthority", type: "publicKey" },
          { name: "configAuthority", type: "publicKey" },
          { name: "helioFee", type: "publicKey" },
          { name: "dexFee", type: "publicKey" },
          { name: "feeBps", type: "u16" },
          { name: "dexFeeShare", type: "u8" },
          { name: "migrationFee", type: "u64" },
          { name: "marketcapThreshold", type: "u64" },
          { name: "marketcapCurrency", type: { defined: "Currency" } },
          { name: "minSupportedDecimalPlaces", type: "u8" },
          { name: "maxSupportedDecimalPlaces", type: "u8" },
          { name: "minSupportedTokenSupply", type: "u64" },
          { name: "maxSupportedTokenSupply", type: "u64" },
          { name: "bump", type: "u8" },
          { name: "coefB", type: "u32" }
        ]
      }
    },
    {
      name: "CurveAccount",
      type: {
        kind: "struct",
        fields: [
          { name: "totalSupply", type: "u64" },
          { name: "curveAmount", type: "u64" },
          { name: "mint", type: "publicKey" },
          { name: "decimals", type: "u8" },
          { name: "collateralCurrency", type: { defined: "Currency" } },
          { name: "curveType", type: { defined: "CurveType" } },
          { name: "marketcapThreshold", type: "u64" },
          { name: "marketcapCurrency", type: { defined: "Currency" } },
          { name: "migrationFee", type: "u64" },
          { name: "coefB", type: "u32" },
          { name: "bump", type: "u8" }
        ]
      }
    }
  ],
  types: [
    {
      name: "Currency",
      type: { kind: "enum", variants: [{ name: "Sol" }] }
    },
    {
      name: "CurveType",
      type: { kind: "enum", variants: [{ name: "LinearV1" }] }
    },
    {
      name: "TradeType",
      type: {
        kind: "enum",
        variants: [{ name: "Buy" }, { name: "Sell" }]
      }
    }
  ],
  events: [
    {
      name: "TradeEvent",
      fields: [
        { name: "amount", type: "u64", index: false },
        { name: "collateralAmount", type: "u64", index: false },
        { name: "dexFee", type: "u64", index: false },
        { name: "helioFee", type: "u64", index: false },
        { name: "allocation", type: "u64", index: false },
        { name: "curve", type: "publicKey", index: false },
        { name: "costToken", type: "publicKey", index: false },
        { name: "sender", type: "publicKey", index: false },
        { name: "type", type: { defined: "TradeType" }, index: false },
        { name: "label", type: "string", index: true }
      ]
    },
    {
      name: "MigrationEvent",
      fields: [
        { name: "tokensMigrated", type: "u64", index: false },
        { name: "tokensBurned", type: "u64", index: false },
        { name: "collateralMigrated", type: "u64", index: false },
        { name: "fee", type: "u64", index: false },
        { name: "label", type: "string", index: true }
      ]
    }
  ],
  errors: [
    {
      code: 6e3,
      name: "InsufficientBalance",
      msg: "Insufficient SOL to pay for the transaction."
    },
    {
      code: 6001,
      name: "InvalidAmount",
      msg: "The amount must be available in the curve ."
    },
    {
      code: 6002,
      name: "InvalidSlippage",
      msg: "The slippage must be under 100 percent."
    },
    {
      code: 6003,
      name: "SlippageOverflow",
      msg: "The cost amount is not in the allowed slippage interval."
    },
    {
      code: 6004,
      name: "ThresholdReached",
      msg: "Threshold limit exceeded."
    },
    {
      code: 6005,
      name: "InvalidTokenAccount",
      msg: "Trade disabled, market cap threshold reached."
    },
    {
      code: 6006,
      name: "InvalidCurveAccount",
      msg: "Invalid curve account."
    },
    {
      code: 6007,
      name: "InvalidFeeAccount",
      msg: "Invalid fee account address."
    },
    { code: 6008, name: "CurveLimit", msg: "Curve limit exceeded." },
    { code: 6009, name: "InvalidCurveType", msg: "Invalid curve type." },
    { code: 6010, name: "InvalidCurrency", msg: "Invalid currency." },
    { code: 6011, name: "Arithmetics", msg: "Artithmetics error" },
    {
      code: 6012,
      name: "ThresholdNotHit",
      msg: "Market Cap threshold not hit, cannot migrate funds yet"
    },
    {
      code: 6013,
      name: "InvalidAuthority",
      msg: "Invalid Authority provided."
    },
    {
      code: 6014,
      name: "TradeAmountTooLow",
      msg: "Trade amount too low , resulting in 0 costs"
    },
    {
      code: 6015,
      name: "ConfigFieldMissing",
      msg: "Config field needs to be present during initialization"
    },
    {
      code: 6016,
      name: "DifferentCurrencies",
      msg: "Unsupported different currency types"
    },
    {
      code: 6017,
      name: "BasisPointTooHigh",
      msg: "Basis points too high"
    },
    { code: 6018, name: "FeeShareTooHigh", msg: "Fee share too High" },
    {
      code: 6019,
      name: "TokenDecimalsOutOfRange",
      msg: "Token decimals are not within the supported range"
    },
    {
      code: 6020,
      name: "TokenNameTooLong",
      msg: "Token Name too long, max supported length is 32 bytes"
    },
    {
      code: 6021,
      name: "TokenSymbolTooLong",
      msg: "Token Symbol too long, max supported length is 10 bytes"
    },
    {
      code: 6022,
      name: "TokenURITooLong",
      msg: "Token URI too long, max supported length is 200 bytes"
    },
    {
      code: 6023,
      name: "IncorrectDecimalPlacesBounds",
      msg: "Minimum Decimal Places cannot be lower than Maximum Decimal Places"
    },
    {
      code: 6024,
      name: "IncorrectTokenSupplyBounds",
      msg: "Minimum Token Supply cannot be lower than Maximum Token Supply"
    },
    {
      code: 6025,
      name: "TotalSupplyOutOfBounds",
      msg: "Token Total Supply out of bounds"
    },
    {
      code: 6026,
      name: "FinalCollateralTooLow",
      msg: "This setup will produce final collateral amount less than the migration fee"
    },
    {
      code: 6027,
      name: "CoefficientZero",
      msg: "One of the Coefficients is equal to ZERO"
    },
    {
      code: 6028,
      name: "MarketCapThresholdTooLow",
      msg: "Market cap Threshold under the Hard lower bound limits"
    },
    {
      code: 6029,
      name: "CoefBOutofBounds",
      msg: "Default coef_b set out of hard limit bounds"
    },
    { code: 6030, name: "General", msg: "General error" }
  ],
  metadata: {
    address: "MoonCVVNZFSYkqNXP6bxHLPL6QQJiMagDL3qcqUQTrG"
  }
};

// idl/boop.json
var boop_default = {
  address: "boop8hVGQGqehUK2iVEMEnMrL5RbjywRzHKBmBE7ry4",
  metadata: {
    name: "boop",
    version: "0.3.0",
    spec: "0.1.0",
    description: "Boop is a token launcher with fee sharing"
  },
  instructions: [
    {
      name: "add_operators",
      discriminator: [165, 199, 62, 214, 81, 54, 4, 150],
      accounts: [
        {
          name: "config",
          writable: true,
          pda: { seeds: [{ kind: "const", value: [99, 111, 110, 102, 105, 103] }] }
        },
        { name: "authority", writable: true, signer: true, relations: ["config"] },
        { name: "system_program", address: "11111111111111111111111111111111" }
      ],
      args: [{ name: "operators", type: { vec: "pubkey" } }]
    },
    {
      name: "buy_token",
      discriminator: [138, 127, 14, 91, 38, 87, 115, 105],
      accounts: [
        { name: "mint" },
        {
          name: "bonding_curve",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [98, 111, 110, 100, 105, 110, 103, 95, 99, 117, 114, 118, 101]
              },
              { kind: "account", path: "mint" }
            ]
          }
        },
        {
          name: "trading_fees_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  116,
                  114,
                  97,
                  100,
                  105,
                  110,
                  103,
                  95,
                  102,
                  101,
                  101,
                  115,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "mint" }
            ]
          }
        },
        {
          name: "bonding_curve_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  98,
                  111,
                  110,
                  100,
                  105,
                  110,
                  103,
                  95,
                  99,
                  117,
                  114,
                  118,
                  101,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "mint" }
            ]
          }
        },
        {
          name: "bonding_curve_sol_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  98,
                  111,
                  110,
                  100,
                  105,
                  110,
                  103,
                  95,
                  99,
                  117,
                  114,
                  118,
                  101,
                  95,
                  115,
                  111,
                  108,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "mint" }
            ]
          }
        },
        { name: "recipient_token_account" },
        { name: "buyer", writable: true, signer: true },
        { name: "config", pda: { seeds: [{ kind: "const", value: [99, 111, 110, 102, 105, 103] }] } },
        {
          name: "vault_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [118, 97, 117, 108, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121]
              }
            ]
          }
        },
        { name: "wsol", address: "So11111111111111111111111111111111111111112" },
        { name: "system_program", address: "11111111111111111111111111111111" },
        { name: "token_program", address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" },
        { name: "associated_token_program", address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL" }
      ],
      args: [
        { name: "buy_amount", type: "u64" },
        { name: "amount_out_min", type: "u64" }
      ]
    },
    {
      name: "cancel_authority_transfer",
      discriminator: [94, 131, 125, 184, 183, 24, 125, 229],
      accounts: [
        { name: "authority", signer: true, relations: ["config"] },
        {
          name: "config",
          writable: true,
          pda: { seeds: [{ kind: "const", value: [99, 111, 110, 102, 105, 103] }] }
        },
        { name: "system_program", address: "11111111111111111111111111111111" }
      ],
      args: []
    },
    {
      name: "close_bonding_curve_vault",
      discriminator: [189, 71, 189, 239, 113, 66, 59, 189],
      accounts: [
        { name: "config", pda: { seeds: [{ kind: "const", value: [99, 111, 110, 102, 105, 103] }] } },
        { name: "operator", writable: true, signer: true },
        {
          name: "vault_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [118, 97, 117, 108, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121]
              }
            ]
          }
        },
        {
          name: "bonding_curve",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [98, 111, 110, 100, 105, 110, 103, 95, 99, 117, 114, 118, 101]
              },
              { kind: "account", path: "mint" }
            ]
          }
        },
        {
          name: "bonding_curve_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  98,
                  111,
                  110,
                  100,
                  105,
                  110,
                  103,
                  95,
                  99,
                  117,
                  114,
                  118,
                  101,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "mint" }
            ]
          }
        },
        { name: "mint" },
        {
          name: "recipient_token_account",
          writable: true,
          pda: {
            seeds: [
              { kind: "account", path: "recipient" },
              {
                kind: "const",
                value: [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              { kind: "account", path: "mint" }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        { name: "recipient", writable: true },
        { name: "token_program", address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" },
        {
          name: "system_program",
          docs: ["System program for creating associated token if needed"],
          address: "11111111111111111111111111111111"
        },
        { name: "associated_token_program", address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL" },
        { name: "rent", address: "SysvarRent111111111111111111111111111111111" }
      ],
      args: []
    },
    {
      name: "collect_meteora_trading_fees",
      discriminator: [249, 95, 126, 91, 81, 162, 83, 250],
      accounts: [
        { name: "operator", writable: true, signer: true },
        { name: "protocol_fee_recipient", relations: ["config"] },
        { name: "config", pda: { seeds: [{ kind: "const", value: [99, 111, 110, 102, 105, 103] }] } },
        { name: "pool_authority" },
        { name: "pool" },
        { name: "position", writable: true },
        {
          name: "token_a_account",
          docs: ["The token account to receive token a"],
          writable: true,
          pda: {
            seeds: [
              { kind: "account", path: "protocol_fee_recipient" },
              {
                kind: "const",
                value: [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              { kind: "account", path: "token_a_mint" }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "token_b_account",
          docs: ["The token account to receive token b"],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  116,
                  114,
                  97,
                  100,
                  105,
                  110,
                  103,
                  95,
                  102,
                  101,
                  101,
                  115,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "token_a_mint" }
            ]
          }
        },
        { name: "token_a_vault", writable: true },
        { name: "token_b_vault", writable: true },
        { name: "token_a_mint" },
        { name: "token_b_mint" },
        { name: "position_nft_account", writable: true },
        {
          name: "vault_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [118, 97, 117, 108, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121]
              }
            ]
          }
        },
        { name: "token_program", address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" },
        { name: "associated_token_program", address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL" },
        { name: "event_authority" },
        { name: "cp_amm_program", address: "cpamdpZCGKUy5JxQXB4dcpGPiikHawvSWAd6mEn1sGG" }
      ],
      args: []
    },
    {
      name: "collect_meteora_trading_fees_v2",
      discriminator: [96, 39, 109, 46, 5, 161, 15, 57],
      accounts: [
        { name: "operator", writable: true, signer: true },
        { name: "protocol_fee_recipient", relations: ["config"] },
        { name: "config", pda: { seeds: [{ kind: "const", value: [99, 111, 110, 102, 105, 103] }] } },
        { name: "pool_authority" },
        { name: "pool" },
        { name: "position", writable: true },
        {
          name: "token_a_account",
          docs: ["The token account to receive token a"],
          writable: true,
          pda: {
            seeds: [
              { kind: "account", path: "protocol_fee_recipient" },
              {
                kind: "const",
                value: [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              { kind: "account", path: "token_a_mint" }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "token_b_account",
          docs: ["The token account to receive token b"],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  115,
                  116,
                  95,
                  103,
                  114,
                  97,
                  100,
                  95,
                  116,
                  114,
                  97,
                  100,
                  105,
                  110,
                  103,
                  95,
                  102,
                  101,
                  101,
                  115,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "token_a_mint" }
            ]
          }
        },
        { name: "token_a_vault", writable: true },
        { name: "token_b_vault", writable: true },
        { name: "token_a_mint" },
        { name: "token_b_mint" },
        { name: "position_nft_account", writable: true },
        {
          name: "vault_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [118, 97, 117, 108, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121]
              }
            ]
          }
        },
        { name: "token_program", address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" },
        { name: "associated_token_program", address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL" },
        { name: "event_authority" },
        { name: "cp_amm_program", address: "cpamdpZCGKUy5JxQXB4dcpGPiikHawvSWAd6mEn1sGG" },
        { name: "system_program", address: "11111111111111111111111111111111" }
      ],
      args: []
    },
    {
      name: "collect_trading_fees",
      discriminator: [189, 38, 205, 234, 81, 77, 25, 1],
      accounts: [
        { name: "operator", writable: true, signer: true },
        { name: "protocol_fee_recipient", relations: ["config"] },
        { name: "config", pda: { seeds: [{ kind: "const", value: [99, 111, 110, 102, 105, 103] }] } },
        { name: "lock_program", address: "LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE" },
        {
          name: "vault_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [118, 97, 117, 108, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121]
              }
            ]
          }
        },
        {
          name: "authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  108,
                  111,
                  99,
                  107,
                  95,
                  99,
                  112,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ],
            program: { kind: "account", path: "lock_program" }
          }
        },
        { name: "fee_nft_account", docs: ["Fee token account"] },
        {
          name: "locked_liquidity",
          docs: ["Store the locked the information of liquidity"],
          writable: true
        },
        { name: "cpmm_program", address: "CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C" },
        {
          name: "cp_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  110,
                  100,
                  95,
                  108,
                  112,
                  95,
                  109,
                  105,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ],
            program: {
              kind: "const",
              value: [
                169,
                42,
                90,
                139,
                79,
                41,
                89,
                82,
                132,
                37,
                80,
                170,
                147,
                253,
                91,
                149,
                181,
                172,
                230,
                168,
                235,
                146,
                12,
                147,
                148,
                46,
                67,
                105,
                12,
                32,
                236,
                115
              ]
            }
          }
        },
        { name: "pool_state", writable: true },
        { name: "lp_mint", docs: ["lp mint", "address = pool_state.lp_mint"], writable: true },
        {
          name: "recipient_token_0_account",
          docs: ["The token account for receive token_0"],
          writable: true,
          pda: {
            seeds: [
              { kind: "account", path: "protocol_fee_recipient" },
              {
                kind: "const",
                value: [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              { kind: "account", path: "vault_0_mint" }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "recipient_token_1_account",
          docs: ["The token account for receive token_1"],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  116,
                  114,
                  97,
                  100,
                  105,
                  110,
                  103,
                  95,
                  102,
                  101,
                  101,
                  115,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "token_0_vault.mint" }
            ]
          }
        },
        {
          name: "token_0_vault",
          docs: ["The address that holds pool tokens for token_0"],
          writable: true
        },
        {
          name: "token_1_vault",
          docs: ["The address that holds pool tokens for token_1"],
          writable: true
        },
        { name: "vault_0_mint", docs: ["The mint of token_0 vault"] },
        { name: "vault_1_mint", docs: ["The mint of token_1 vault"] },
        {
          name: "locked_lp_vault",
          docs: ["locked lp token account"],
          writable: true,
          pda: {
            seeds: [
              { kind: "account", path: "authority" },
              {
                kind: "const",
                value: [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              { kind: "account", path: "lp_mint" }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        { name: "system_program", docs: ["System program"], address: "11111111111111111111111111111111" },
        {
          name: "associated_token_program",
          docs: ["Associated token program"],
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "token_program",
          docs: ["token Program"],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "token_program_2022",
          docs: ["Token program 2022"],
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          name: "memo_program",
          docs: ["memo program"],
          address: "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr"
        }
      ],
      args: []
    },
    {
      name: "collect_trading_fees_v2",
      discriminator: [180, 138, 160, 155, 243, 88, 168, 7],
      accounts: [
        { name: "operator", writable: true, signer: true },
        { name: "protocol_fee_recipient", relations: ["config"] },
        { name: "config", pda: { seeds: [{ kind: "const", value: [99, 111, 110, 102, 105, 103] }] } },
        { name: "lock_program", address: "LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE" },
        {
          name: "vault_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [118, 97, 117, 108, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121]
              }
            ]
          }
        },
        {
          name: "authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  108,
                  111,
                  99,
                  107,
                  95,
                  99,
                  112,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ],
            program: { kind: "account", path: "lock_program" }
          }
        },
        { name: "fee_nft_account", docs: ["Fee token account"] },
        {
          name: "locked_liquidity",
          docs: ["Store the locked the information of liquidity"],
          writable: true
        },
        { name: "cpmm_program", address: "CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C" },
        {
          name: "cp_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  110,
                  100,
                  95,
                  108,
                  112,
                  95,
                  109,
                  105,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ],
            program: {
              kind: "const",
              value: [
                169,
                42,
                90,
                139,
                79,
                41,
                89,
                82,
                132,
                37,
                80,
                170,
                147,
                253,
                91,
                149,
                181,
                172,
                230,
                168,
                235,
                146,
                12,
                147,
                148,
                46,
                67,
                105,
                12,
                32,
                236,
                115
              ]
            }
          }
        },
        { name: "pool_state", writable: true },
        { name: "lp_mint", docs: ["lp mint", "address = pool_state.lp_mint"], writable: true },
        {
          name: "recipient_token_0_account",
          docs: ["The token account for receive token_0"],
          writable: true,
          pda: {
            seeds: [
              { kind: "account", path: "protocol_fee_recipient" },
              {
                kind: "const",
                value: [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              { kind: "account", path: "vault_0_mint" }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "recipient_token_1_account",
          docs: ["The token account for receive token_1"],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  115,
                  116,
                  95,
                  103,
                  114,
                  97,
                  100,
                  95,
                  116,
                  114,
                  97,
                  100,
                  105,
                  110,
                  103,
                  95,
                  102,
                  101,
                  101,
                  115,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "token_0_vault.mint" }
            ]
          }
        },
        {
          name: "token_0_vault",
          docs: ["The address that holds pool tokens for token_0"],
          writable: true
        },
        {
          name: "token_1_vault",
          docs: ["The address that holds pool tokens for token_1"],
          writable: true
        },
        { name: "vault_0_mint", docs: ["The mint of token_0 vault"] },
        { name: "vault_1_mint", docs: ["The mint of token_1 vault"] },
        {
          name: "locked_lp_vault",
          docs: ["locked lp token account"],
          writable: true,
          pda: {
            seeds: [
              { kind: "account", path: "authority" },
              {
                kind: "const",
                value: [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              { kind: "account", path: "lp_mint" }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        { name: "system_program", docs: ["System program"], address: "11111111111111111111111111111111" },
        {
          name: "associated_token_program",
          docs: ["Associated token program"],
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "token_program",
          docs: ["token Program"],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "token_program_2022",
          docs: ["Token program 2022"],
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          name: "memo_program",
          docs: ["memo program"],
          address: "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr"
        }
      ],
      args: []
    },
    {
      name: "complete_authority_transfer",
      discriminator: [81, 233, 91, 132, 175, 31, 151, 141],
      accounts: [
        { name: "pending_authority", signer: true, relations: ["config"] },
        {
          name: "config",
          writable: true,
          pda: { seeds: [{ kind: "const", value: [99, 111, 110, 102, 105, 103] }] }
        },
        { name: "system_program", address: "11111111111111111111111111111111" }
      ],
      args: []
    },
    {
      name: "create_meteora_pool",
      discriminator: [246, 254, 33, 37, 225, 176, 41, 232],
      accounts: [
        { name: "operator", writable: true, signer: true },
        { name: "config", pda: { seeds: [{ kind: "const", value: [99, 111, 110, 102, 105, 103] }] } },
        {
          name: "vault_authority",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [118, 97, 117, 108, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121]
              }
            ]
          }
        },
        { name: "cp_amm_config" },
        { name: "pool_authority" },
        { name: "pool", writable: true },
        { name: "position", writable: true },
        { name: "position_nft_mint", writable: true, signer: true },
        { name: "position_nft_account", writable: true },
        { name: "token_a_mint" },
        { name: "token_b_mint", address: "So11111111111111111111111111111111111111112" },
        { name: "token_a_vault", writable: true },
        { name: "token_b_vault", writable: true },
        {
          name: "bonding_curve",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [98, 111, 110, 100, 105, 110, 103, 95, 99, 117, 114, 118, 101]
              },
              { kind: "account", path: "token_a_mint" }
            ]
          }
        },
        {
          name: "bonding_curve_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  98,
                  111,
                  110,
                  100,
                  105,
                  110,
                  103,
                  95,
                  99,
                  117,
                  114,
                  118,
                  101,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "token_a_mint" }
            ]
          }
        },
        {
          name: "bonding_curve_wsol_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  98,
                  111,
                  110,
                  100,
                  105,
                  110,
                  103,
                  95,
                  99,
                  117,
                  114,
                  118,
                  101,
                  95,
                  119,
                  115,
                  111,
                  108,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "token_a_mint" }
            ]
          }
        },
        { name: "token_program", address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" },
        { name: "token_2022_program", address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb" },
        { name: "system_program", address: "11111111111111111111111111111111" },
        { name: "event_authority" },
        { name: "cp_amm_program", address: "cpamdpZCGKUy5JxQXB4dcpGPiikHawvSWAd6mEn1sGG" }
      ],
      args: []
    },
    {
      name: "create_raydium_pool",
      discriminator: [65, 45, 119, 77, 204, 178, 84, 2],
      accounts: [
        { name: "cpmm_program", address: "CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C" },
        { name: "amm_config", docs: ["Which config the pool belongs to."] },
        {
          name: "authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  110,
                  100,
                  95,
                  108,
                  112,
                  95,
                  109,
                  105,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ],
            program: {
              kind: "const",
              value: [
                169,
                42,
                90,
                139,
                79,
                41,
                89,
                82,
                132,
                37,
                80,
                170,
                147,
                253,
                91,
                149,
                181,
                172,
                230,
                168,
                235,
                146,
                12,
                147,
                148,
                46,
                67,
                105,
                12,
                32,
                236,
                115
              ]
            }
          }
        },
        {
          name: "pool_state",
          writable: true,
          pda: {
            seeds: [
              { kind: "const", value: [112, 111, 111, 108] },
              { kind: "account", path: "amm_config" },
              { kind: "account", path: "token_0_mint" },
              { kind: "account", path: "token_1_mint" }
            ],
            program: {
              kind: "const",
              value: [
                169,
                42,
                90,
                139,
                79,
                41,
                89,
                82,
                132,
                37,
                80,
                170,
                147,
                253,
                91,
                149,
                181,
                172,
                230,
                168,
                235,
                146,
                12,
                147,
                148,
                46,
                67,
                105,
                12,
                32,
                236,
                115
              ]
            }
          }
        },
        { name: "token_0_mint", writable: true },
        {
          name: "token_1_mint",
          docs: ["Token_1 mint, the key must be greater than token_0 mint."],
          address: "So11111111111111111111111111111111111111112"
        },
        {
          name: "lp_mint",
          writable: true,
          pda: {
            seeds: [
              { kind: "const", value: [112, 111, 111, 108, 95, 108, 112, 95, 109, 105, 110, 116] },
              { kind: "account", path: "pool_state" }
            ],
            program: {
              kind: "const",
              value: [
                169,
                42,
                90,
                139,
                79,
                41,
                89,
                82,
                132,
                37,
                80,
                170,
                147,
                253,
                91,
                149,
                181,
                172,
                230,
                168,
                235,
                146,
                12,
                147,
                148,
                46,
                67,
                105,
                12,
                32,
                236,
                115
              ]
            }
          }
        },
        {
          name: "vault_authority",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [118, 97, 117, 108, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121]
              }
            ]
          }
        },
        {
          name: "bonding_curve",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [98, 111, 110, 100, 105, 110, 103, 95, 99, 117, 114, 118, 101]
              },
              { kind: "account", path: "token_0_mint" }
            ]
          }
        },
        {
          name: "bonding_curve_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  98,
                  111,
                  110,
                  100,
                  105,
                  110,
                  103,
                  95,
                  99,
                  117,
                  114,
                  118,
                  101,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "token_0_mint" }
            ]
          }
        },
        {
          name: "bonding_curve_wsol_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  98,
                  111,
                  110,
                  100,
                  105,
                  110,
                  103,
                  95,
                  99,
                  117,
                  114,
                  118,
                  101,
                  95,
                  119,
                  115,
                  111,
                  108,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "token_0_mint" }
            ]
          }
        },
        { name: "creator_lp_token", writable: true },
        {
          name: "token_0_vault",
          writable: true,
          pda: {
            seeds: [
              { kind: "const", value: [112, 111, 111, 108, 95, 118, 97, 117, 108, 116] },
              { kind: "account", path: "pool_state" },
              { kind: "account", path: "token_0_mint" }
            ],
            program: {
              kind: "const",
              value: [
                169,
                42,
                90,
                139,
                79,
                41,
                89,
                82,
                132,
                37,
                80,
                170,
                147,
                253,
                91,
                149,
                181,
                172,
                230,
                168,
                235,
                146,
                12,
                147,
                148,
                46,
                67,
                105,
                12,
                32,
                236,
                115
              ]
            }
          }
        },
        {
          name: "token_1_vault",
          writable: true,
          pda: {
            seeds: [
              { kind: "const", value: [112, 111, 111, 108, 95, 118, 97, 117, 108, 116] },
              { kind: "account", path: "pool_state" },
              { kind: "account", path: "token_1_mint" }
            ],
            program: {
              kind: "const",
              value: [
                169,
                42,
                90,
                139,
                79,
                41,
                89,
                82,
                132,
                37,
                80,
                170,
                147,
                253,
                91,
                149,
                181,
                172,
                230,
                168,
                235,
                146,
                12,
                147,
                148,
                46,
                67,
                105,
                12,
                32,
                236,
                115
              ]
            }
          }
        },
        {
          name: "create_pool_fee",
          docs: ["create pool fee account"],
          writable: true,
          address: "DNXgeM9EiiaAbaWvwjHj9fQQLAX5ZsfHyvmYUNRAdNC8"
        },
        {
          name: "observation_state",
          writable: true,
          pda: {
            seeds: [
              { kind: "const", value: [111, 98, 115, 101, 114, 118, 97, 116, 105, 111, 110] },
              { kind: "account", path: "pool_state" }
            ],
            program: {
              kind: "const",
              value: [
                169,
                42,
                90,
                139,
                79,
                41,
                89,
                82,
                132,
                37,
                80,
                170,
                147,
                253,
                91,
                149,
                181,
                172,
                230,
                168,
                235,
                146,
                12,
                147,
                148,
                46,
                67,
                105,
                12,
                32,
                236,
                115
              ]
            }
          }
        },
        { name: "operator", writable: true, signer: true },
        { name: "config", pda: { seeds: [{ kind: "const", value: [99, 111, 110, 102, 105, 103] }] } },
        {
          name: "token_program",
          docs: ["Program to create mint account and mint tokens"],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "associated_token_program",
          docs: ["Program to create an ATA for receiving position NFT"],
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "system_program",
          docs: ["To create a new program account"],
          address: "11111111111111111111111111111111"
        },
        {
          name: "rent",
          docs: ["Sysvar for program account"],
          address: "SysvarRent111111111111111111111111111111111"
        }
      ],
      args: []
    },
    {
      name: "create_raydium_random_pool",
      discriminator: [78, 44, 173, 29, 132, 180, 4, 172],
      accounts: [
        { name: "cpmm_program", address: "CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C" },
        { name: "amm_config", docs: ["Which config the pool belongs to."] },
        {
          name: "authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  110,
                  100,
                  95,
                  108,
                  112,
                  95,
                  109,
                  105,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ],
            program: {
              kind: "const",
              value: [
                169,
                42,
                90,
                139,
                79,
                41,
                89,
                82,
                132,
                37,
                80,
                170,
                147,
                253,
                91,
                149,
                181,
                172,
                230,
                168,
                235,
                146,
                12,
                147,
                148,
                46,
                67,
                105,
                12,
                32,
                236,
                115
              ]
            }
          }
        },
        { name: "pool_state", writable: true, signer: true },
        { name: "token_0_mint", writable: true },
        {
          name: "token_1_mint",
          docs: ["Token_1 mint, the key must be greater than token_0 mint."],
          address: "So11111111111111111111111111111111111111112"
        },
        {
          name: "lp_mint",
          writable: true,
          pda: {
            seeds: [
              { kind: "const", value: [112, 111, 111, 108, 95, 108, 112, 95, 109, 105, 110, 116] },
              { kind: "account", path: "pool_state" }
            ],
            program: {
              kind: "const",
              value: [
                169,
                42,
                90,
                139,
                79,
                41,
                89,
                82,
                132,
                37,
                80,
                170,
                147,
                253,
                91,
                149,
                181,
                172,
                230,
                168,
                235,
                146,
                12,
                147,
                148,
                46,
                67,
                105,
                12,
                32,
                236,
                115
              ]
            }
          }
        },
        {
          name: "vault_authority",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [118, 97, 117, 108, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121]
              }
            ]
          }
        },
        {
          name: "bonding_curve",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [98, 111, 110, 100, 105, 110, 103, 95, 99, 117, 114, 118, 101]
              },
              { kind: "account", path: "token_0_mint" }
            ]
          }
        },
        {
          name: "bonding_curve_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  98,
                  111,
                  110,
                  100,
                  105,
                  110,
                  103,
                  95,
                  99,
                  117,
                  114,
                  118,
                  101,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "token_0_mint" }
            ]
          }
        },
        {
          name: "bonding_curve_wsol_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  98,
                  111,
                  110,
                  100,
                  105,
                  110,
                  103,
                  95,
                  99,
                  117,
                  114,
                  118,
                  101,
                  95,
                  119,
                  115,
                  111,
                  108,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "token_0_mint" }
            ]
          }
        },
        { name: "creator_lp_token", writable: true },
        {
          name: "token_0_vault",
          writable: true,
          pda: {
            seeds: [
              { kind: "const", value: [112, 111, 111, 108, 95, 118, 97, 117, 108, 116] },
              { kind: "account", path: "pool_state" },
              { kind: "account", path: "token_0_mint" }
            ],
            program: {
              kind: "const",
              value: [
                169,
                42,
                90,
                139,
                79,
                41,
                89,
                82,
                132,
                37,
                80,
                170,
                147,
                253,
                91,
                149,
                181,
                172,
                230,
                168,
                235,
                146,
                12,
                147,
                148,
                46,
                67,
                105,
                12,
                32,
                236,
                115
              ]
            }
          }
        },
        {
          name: "token_1_vault",
          writable: true,
          pda: {
            seeds: [
              { kind: "const", value: [112, 111, 111, 108, 95, 118, 97, 117, 108, 116] },
              { kind: "account", path: "pool_state" },
              { kind: "account", path: "token_1_mint" }
            ],
            program: {
              kind: "const",
              value: [
                169,
                42,
                90,
                139,
                79,
                41,
                89,
                82,
                132,
                37,
                80,
                170,
                147,
                253,
                91,
                149,
                181,
                172,
                230,
                168,
                235,
                146,
                12,
                147,
                148,
                46,
                67,
                105,
                12,
                32,
                236,
                115
              ]
            }
          }
        },
        {
          name: "create_pool_fee",
          docs: ["create pool fee account"],
          writable: true,
          address: "DNXgeM9EiiaAbaWvwjHj9fQQLAX5ZsfHyvmYUNRAdNC8"
        },
        {
          name: "observation_state",
          writable: true,
          pda: {
            seeds: [
              { kind: "const", value: [111, 98, 115, 101, 114, 118, 97, 116, 105, 111, 110] },
              { kind: "account", path: "pool_state" }
            ],
            program: {
              kind: "const",
              value: [
                169,
                42,
                90,
                139,
                79,
                41,
                89,
                82,
                132,
                37,
                80,
                170,
                147,
                253,
                91,
                149,
                181,
                172,
                230,
                168,
                235,
                146,
                12,
                147,
                148,
                46,
                67,
                105,
                12,
                32,
                236,
                115
              ]
            }
          }
        },
        { name: "operator", writable: true, signer: true },
        { name: "config", pda: { seeds: [{ kind: "const", value: [99, 111, 110, 102, 105, 103] }] } },
        {
          name: "token_program",
          docs: ["Program to create mint account and mint tokens"],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "associated_token_program",
          docs: ["Program to create an ATA for receiving position NFT"],
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "system_program",
          docs: ["To create a new program account"],
          address: "11111111111111111111111111111111"
        },
        {
          name: "rent",
          docs: ["Sysvar for program account"],
          address: "SysvarRent111111111111111111111111111111111"
        }
      ],
      args: []
    },
    {
      name: "create_token",
      discriminator: [84, 52, 204, 228, 24, 140, 234, 75],
      accounts: [
        { name: "config", pda: { seeds: [{ kind: "const", value: [99, 111, 110, 102, 105, 103] }] } },
        {
          name: "metadata",
          writable: true,
          pda: {
            seeds: [
              { kind: "const", value: [109, 101, 116, 97, 100, 97, 116, 97] },
              {
                kind: "const",
                value: [
                  11,
                  112,
                  101,
                  177,
                  227,
                  209,
                  124,
                  69,
                  56,
                  157,
                  82,
                  127,
                  107,
                  4,
                  195,
                  205,
                  88,
                  184,
                  108,
                  115,
                  26,
                  160,
                  253,
                  181,
                  73,
                  182,
                  209,
                  188,
                  3,
                  248,
                  41,
                  70
                ]
              },
              { kind: "account", path: "mint" }
            ],
            program: {
              kind: "const",
              value: [
                11,
                112,
                101,
                177,
                227,
                209,
                124,
                69,
                56,
                157,
                82,
                127,
                107,
                4,
                195,
                205,
                88,
                184,
                108,
                115,
                26,
                160,
                253,
                181,
                73,
                182,
                209,
                188,
                3,
                248,
                41,
                70
              ]
            }
          }
        },
        {
          name: "mint",
          writable: true,
          pda: {
            seeds: [
              { kind: "const", value: [109, 105, 110, 116] },
              { kind: "account", path: "payer" },
              { kind: "arg", path: "salt" }
            ]
          }
        },
        { name: "payer", writable: true, signer: true },
        { name: "rent", address: "SysvarRent111111111111111111111111111111111" },
        { name: "system_program", address: "11111111111111111111111111111111" },
        { name: "token_program", address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" },
        { name: "token_metadata_program", address: "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s" }
      ],
      args: [
        { name: "salt", type: "u64" },
        { name: "name", type: "string" },
        { name: "symbol", type: "string" },
        { name: "uri", type: "string" }
      ]
    },
    {
      name: "create_token_fallback",
      discriminator: [253, 184, 126, 199, 235, 232, 172, 162],
      accounts: [
        { name: "config", pda: { seeds: [{ kind: "const", value: [99, 111, 110, 102, 105, 103] }] } },
        {
          name: "metadata",
          writable: true,
          pda: {
            seeds: [
              { kind: "const", value: [109, 101, 116, 97, 100, 97, 116, 97] },
              {
                kind: "const",
                value: [
                  11,
                  112,
                  101,
                  177,
                  227,
                  209,
                  124,
                  69,
                  56,
                  157,
                  82,
                  127,
                  107,
                  4,
                  195,
                  205,
                  88,
                  184,
                  108,
                  115,
                  26,
                  160,
                  253,
                  181,
                  73,
                  182,
                  209,
                  188,
                  3,
                  248,
                  41,
                  70
                ]
              },
              { kind: "account", path: "mint" }
            ],
            program: {
              kind: "const",
              value: [
                11,
                112,
                101,
                177,
                227,
                209,
                124,
                69,
                56,
                157,
                82,
                127,
                107,
                4,
                195,
                205,
                88,
                184,
                108,
                115,
                26,
                160,
                253,
                181,
                73,
                182,
                209,
                188,
                3,
                248,
                41,
                70
              ]
            }
          }
        },
        {
          name: "mint",
          writable: true,
          pda: {
            seeds: [
              { kind: "const", value: [109, 105, 110, 116] },
              { kind: "arg", path: "salt" }
            ]
          }
        },
        { name: "payer", writable: true, signer: true },
        { name: "rent", address: "SysvarRent111111111111111111111111111111111" },
        { name: "system_program", address: "11111111111111111111111111111111" },
        { name: "token_program", address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" },
        { name: "token_metadata_program", address: "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s" }
      ],
      args: [
        { name: "salt", type: "u64" },
        { name: "name", type: "string" },
        { name: "symbol", type: "string" },
        { name: "uri", type: "string" }
      ]
    },
    {
      name: "deploy_bonding_curve",
      discriminator: [180, 89, 199, 76, 168, 236, 217, 138],
      accounts: [
        {
          name: "mint",
          writable: true,
          pda: {
            seeds: [
              { kind: "const", value: [109, 105, 110, 116] },
              { kind: "account", path: "payer" },
              { kind: "arg", path: "salt" }
            ]
          }
        },
        {
          name: "vault_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [118, 97, 117, 108, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121]
              }
            ]
          }
        },
        {
          name: "bonding_curve",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [98, 111, 110, 100, 105, 110, 103, 95, 99, 117, 114, 118, 101]
              },
              { kind: "account", path: "mint" }
            ]
          }
        },
        {
          name: "bonding_curve_sol_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  98,
                  111,
                  110,
                  100,
                  105,
                  110,
                  103,
                  95,
                  99,
                  117,
                  114,
                  118,
                  101,
                  95,
                  115,
                  111,
                  108,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "mint" }
            ]
          }
        },
        {
          name: "bonding_curve_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  98,
                  111,
                  110,
                  100,
                  105,
                  110,
                  103,
                  95,
                  99,
                  117,
                  114,
                  118,
                  101,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "mint" }
            ]
          }
        },
        { name: "config", pda: { seeds: [{ kind: "const", value: [99, 111, 110, 102, 105, 103] }] } },
        { name: "payer", writable: true, signer: true },
        { name: "system_program", address: "11111111111111111111111111111111" },
        { name: "token_program", address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" },
        { name: "associated_token_program", address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL" }
      ],
      args: [
        { name: "creator", type: "pubkey" },
        { name: "salt", type: "u64" }
      ]
    },
    {
      name: "deploy_bonding_curve_fallback",
      discriminator: [53, 230, 172, 84, 77, 174, 22, 61],
      accounts: [
        {
          name: "mint",
          writable: true,
          pda: {
            seeds: [
              { kind: "const", value: [109, 105, 110, 116] },
              { kind: "arg", path: "salt" }
            ]
          }
        },
        {
          name: "vault_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [118, 97, 117, 108, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121]
              }
            ]
          }
        },
        {
          name: "bonding_curve",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [98, 111, 110, 100, 105, 110, 103, 95, 99, 117, 114, 118, 101]
              },
              { kind: "account", path: "mint" }
            ]
          }
        },
        {
          name: "bonding_curve_sol_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  98,
                  111,
                  110,
                  100,
                  105,
                  110,
                  103,
                  95,
                  99,
                  117,
                  114,
                  118,
                  101,
                  95,
                  115,
                  111,
                  108,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "mint" }
            ]
          }
        },
        {
          name: "bonding_curve_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  98,
                  111,
                  110,
                  100,
                  105,
                  110,
                  103,
                  95,
                  99,
                  117,
                  114,
                  118,
                  101,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "mint" }
            ]
          }
        },
        { name: "config", pda: { seeds: [{ kind: "const", value: [99, 111, 110, 102, 105, 103] }] } },
        { name: "payer", writable: true, signer: true },
        { name: "system_program", address: "11111111111111111111111111111111" },
        { name: "token_program", address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" },
        { name: "associated_token_program", address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL" }
      ],
      args: [
        { name: "creator", type: "pubkey" },
        { name: "salt", type: "u64" }
      ]
    },
    {
      name: "deposit_into_raydium",
      discriminator: [168, 89, 99, 30, 117, 49, 88, 224],
      accounts: [
        { name: "config", pda: { seeds: [{ kind: "const", value: [99, 111, 110, 102, 105, 103] }] } },
        { name: "amm_config", docs: ["Which config the pool belongs to."] },
        { name: "operator", writable: true, signer: true },
        {
          name: "operator_wsol_account",
          writable: true,
          pda: {
            seeds: [
              { kind: "account", path: "operator" },
              {
                kind: "const",
                value: [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              { kind: "account", path: "token_1_mint" }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "vault_authority",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [118, 97, 117, 108, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121]
              }
            ]
          }
        },
        {
          name: "authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  110,
                  100,
                  95,
                  108,
                  112,
                  95,
                  109,
                  105,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ],
            program: {
              kind: "const",
              value: [
                169,
                42,
                90,
                139,
                79,
                41,
                89,
                82,
                132,
                37,
                80,
                170,
                147,
                253,
                91,
                149,
                181,
                172,
                230,
                168,
                235,
                146,
                12,
                147,
                148,
                46,
                67,
                105,
                12,
                32,
                236,
                115
              ]
            }
          }
        },
        {
          name: "pool_state",
          writable: true,
          pda: {
            seeds: [
              { kind: "const", value: [112, 111, 111, 108] },
              { kind: "account", path: "amm_config" },
              { kind: "account", path: "token_0_mint" },
              { kind: "account", path: "token_1_mint" }
            ],
            program: {
              kind: "const",
              value: [
                169,
                42,
                90,
                139,
                79,
                41,
                89,
                82,
                132,
                37,
                80,
                170,
                147,
                253,
                91,
                149,
                181,
                172,
                230,
                168,
                235,
                146,
                12,
                147,
                148,
                46,
                67,
                105,
                12,
                32,
                236,
                115
              ]
            }
          }
        },
        {
          name: "token_0_vault",
          writable: true,
          pda: {
            seeds: [
              { kind: "const", value: [112, 111, 111, 108, 95, 118, 97, 117, 108, 116] },
              { kind: "account", path: "pool_state" },
              { kind: "account", path: "token_0_mint" }
            ],
            program: {
              kind: "const",
              value: [
                169,
                42,
                90,
                139,
                79,
                41,
                89,
                82,
                132,
                37,
                80,
                170,
                147,
                253,
                91,
                149,
                181,
                172,
                230,
                168,
                235,
                146,
                12,
                147,
                148,
                46,
                67,
                105,
                12,
                32,
                236,
                115
              ]
            }
          }
        },
        {
          name: "token_1_vault",
          writable: true,
          pda: {
            seeds: [
              { kind: "const", value: [112, 111, 111, 108, 95, 118, 97, 117, 108, 116] },
              { kind: "account", path: "pool_state" },
              { kind: "account", path: "token_1_mint" }
            ],
            program: {
              kind: "const",
              value: [
                169,
                42,
                90,
                139,
                79,
                41,
                89,
                82,
                132,
                37,
                80,
                170,
                147,
                253,
                91,
                149,
                181,
                172,
                230,
                168,
                235,
                146,
                12,
                147,
                148,
                46,
                67,
                105,
                12,
                32,
                236,
                115
              ]
            }
          }
        },
        {
          name: "bonding_curve_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  98,
                  111,
                  110,
                  100,
                  105,
                  110,
                  103,
                  95,
                  99,
                  117,
                  114,
                  118,
                  101,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "token_0_mint" }
            ]
          }
        },
        {
          name: "bonding_curve_wsol_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  98,
                  111,
                  110,
                  100,
                  105,
                  110,
                  103,
                  95,
                  99,
                  117,
                  114,
                  118,
                  101,
                  95,
                  119,
                  115,
                  111,
                  108,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "token_0_mint" }
            ]
          }
        },
        {
          name: "token_program",
          docs: ["token Program"],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "token_program_2022",
          docs: ["Token program 2022"],
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        { name: "system_program", docs: ["System program"], address: "11111111111111111111111111111111" },
        {
          name: "associated_token_program",
          docs: ["Program to create an ATA for the operator to recoup any potential remaining WSOL"],
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "lp_mint",
          writable: true,
          pda: {
            seeds: [
              { kind: "const", value: [112, 111, 111, 108, 95, 108, 112, 95, 109, 105, 110, 116] },
              { kind: "account", path: "pool_state" }
            ],
            program: {
              kind: "const",
              value: [
                169,
                42,
                90,
                139,
                79,
                41,
                89,
                82,
                132,
                37,
                80,
                170,
                147,
                253,
                91,
                149,
                181,
                172,
                230,
                168,
                235,
                146,
                12,
                147,
                148,
                46,
                67,
                105,
                12,
                32,
                236,
                115
              ]
            }
          }
        },
        { name: "cpmm_program", address: "CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C" },
        { name: "owner_lp_token", writable: true },
        {
          name: "bonding_curve",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [98, 111, 110, 100, 105, 110, 103, 95, 99, 117, 114, 118, 101]
              },
              { kind: "account", path: "token_0_mint" }
            ]
          }
        },
        { name: "token_0_mint", writable: true },
        {
          name: "token_1_mint",
          docs: ["token_1 mint, the key must greater than token_0 mint"],
          address: "So11111111111111111111111111111111111111112"
        }
      ],
      args: [
        { name: "lp_token_amount", type: "u64" },
        { name: "maximum_token_0_amount", type: "u64" },
        { name: "maximum_token_1_amount", type: "u64" }
      ]
    },
    {
      name: "graduate",
      discriminator: [45, 235, 225, 181, 17, 218, 64, 130],
      accounts: [
        { name: "mint" },
        { name: "wsol", address: "So11111111111111111111111111111111111111112" },
        { name: "protocol_fee_recipient", writable: true },
        { name: "token_distributor" },
        {
          name: "token_distributor_token_account",
          writable: true,
          pda: {
            seeds: [
              { kind: "account", path: "token_distributor" },
              {
                kind: "const",
                value: [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              { kind: "account", path: "mint" }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "vault_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [118, 97, 117, 108, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121]
              }
            ]
          }
        },
        {
          name: "bonding_curve_sol_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  98,
                  111,
                  110,
                  100,
                  105,
                  110,
                  103,
                  95,
                  99,
                  117,
                  114,
                  118,
                  101,
                  95,
                  115,
                  111,
                  108,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "mint" }
            ]
          }
        },
        {
          name: "bonding_curve",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [98, 111, 110, 100, 105, 110, 103, 95, 99, 117, 114, 118, 101]
              },
              { kind: "account", path: "mint" }
            ]
          }
        },
        {
          name: "bonding_curve_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  98,
                  111,
                  110,
                  100,
                  105,
                  110,
                  103,
                  95,
                  99,
                  117,
                  114,
                  118,
                  101,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "mint" }
            ]
          }
        },
        {
          name: "bonding_curve_wsol_account",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  98,
                  111,
                  110,
                  100,
                  105,
                  110,
                  103,
                  95,
                  99,
                  117,
                  114,
                  118,
                  101,
                  95,
                  119,
                  115,
                  111,
                  108,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "mint" }
            ]
          }
        },
        { name: "operator", writable: true, signer: true },
        { name: "config", pda: { seeds: [{ kind: "const", value: [99, 111, 110, 102, 105, 103] }] } },
        { name: "system_program", address: "11111111111111111111111111111111" },
        { name: "token_program", address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" },
        { name: "associated_token_program", address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL" }
      ],
      args: []
    },
    {
      name: "initialize",
      discriminator: [175, 175, 109, 31, 13, 152, 155, 237],
      accounts: [
        {
          name: "config",
          writable: true,
          pda: { seeds: [{ kind: "const", value: [99, 111, 110, 102, 105, 103] }] }
        },
        { name: "authority", writable: true, signer: true },
        { name: "system_program", address: "11111111111111111111111111111111" }
      ],
      args: [
        { name: "protocol_fee_recipient", type: "pubkey" },
        { name: "token_distributor", type: "pubkey" }
      ]
    },
    {
      name: "initiate_authority_transfer",
      discriminator: [210, 43, 101, 215, 119, 140, 106, 218],
      accounts: [
        { name: "authority", signer: true, relations: ["config"] },
        {
          name: "config",
          writable: true,
          pda: { seeds: [{ kind: "const", value: [99, 111, 110, 102, 105, 103] }] }
        },
        { name: "system_program", address: "11111111111111111111111111111111" }
      ],
      args: [{ name: "new_authority", type: "pubkey" }]
    },
    {
      name: "lock_raydium_liquidity",
      discriminator: [173, 255, 148, 6, 122, 99, 140, 22],
      accounts: [
        { name: "lock_program", address: "LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE" },
        {
          name: "vault_authority",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [118, 97, 117, 108, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121]
              }
            ]
          }
        },
        {
          name: "authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  108,
                  111,
                  99,
                  107,
                  95,
                  99,
                  112,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ],
            program: { kind: "account", path: "lock_program" }
          }
        },
        { name: "fee_nft_owner" },
        { name: "fee_nft_mint", writable: true, signer: true },
        { name: "fee_nft_account", writable: true },
        { name: "pool_state", writable: true },
        {
          name: "locked_liquidity",
          docs: ["Store the locked information of liquidity"],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [108, 111, 99, 107, 101, 100, 95, 108, 105, 113, 117, 105, 100, 105, 116, 121]
              },
              { kind: "account", path: "fee_nft_mint" }
            ],
            program: { kind: "account", path: "lock_program" }
          }
        },
        { name: "lp_mint", docs: ["The mint of liquidity token"], writable: true },
        { name: "liquidity_owner_lp", docs: ["liquidity owner lp token account"], writable: true },
        { name: "locked_lp_vault", writable: true },
        {
          name: "token_0_vault",
          docs: ["The address that holds pool tokens for token_0"],
          writable: true
        },
        {
          name: "token_1_vault",
          docs: ["The address that holds pool tokens for token_1"],
          writable: true
        },
        { name: "operator", writable: true, signer: true },
        { name: "config", pda: { seeds: [{ kind: "const", value: [99, 111, 110, 102, 105, 103] }] } },
        {
          name: "bonding_curve",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [98, 111, 110, 100, 105, 110, 103, 95, 99, 117, 114, 118, 101]
              },
              { kind: "account", path: "token_0_vault.mint" }
            ]
          }
        },
        {
          name: "metadata_account",
          docs: ["To store metaplex metadata"],
          writable: true,
          pda: {
            seeds: [
              { kind: "const", value: [109, 101, 116, 97, 100, 97, 116, 97] },
              {
                kind: "const",
                value: [
                  11,
                  112,
                  101,
                  177,
                  227,
                  209,
                  124,
                  69,
                  56,
                  157,
                  82,
                  127,
                  107,
                  4,
                  195,
                  205,
                  88,
                  184,
                  108,
                  115,
                  26,
                  160,
                  253,
                  181,
                  73,
                  182,
                  209,
                  188,
                  3,
                  248,
                  41,
                  70
                ]
              },
              { kind: "account", path: "fee_nft_mint" }
            ],
            program: {
              kind: "const",
              value: [
                11,
                112,
                101,
                177,
                227,
                209,
                124,
                69,
                56,
                157,
                82,
                127,
                107,
                4,
                195,
                205,
                88,
                184,
                108,
                115,
                26,
                160,
                253,
                181,
                73,
                182,
                209,
                188,
                3,
                248,
                41,
                70
              ]
            }
          }
        },
        {
          name: "rent",
          docs: ["Sysvar for token mint and ATA creation"],
          address: "SysvarRent111111111111111111111111111111111"
        },
        {
          name: "system_program",
          docs: ["Program to create the new account"],
          address: "11111111111111111111111111111111"
        },
        {
          name: "token_program",
          docs: ["Program to create/transfer mint/token account"],
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "associated_token_program",
          docs: ["Program to create an ATA for receiving fee NFT"],
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "metadata_program",
          docs: ["Program to create NFT metadata accunt"],
          address: "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"
        }
      ],
      args: []
    },
    {
      name: "remove_operators",
      discriminator: [42, 20, 89, 83, 222, 37, 4, 109],
      accounts: [
        {
          name: "config",
          writable: true,
          pda: { seeds: [{ kind: "const", value: [99, 111, 110, 102, 105, 103] }] }
        },
        { name: "authority", writable: true, signer: true, relations: ["config"] },
        { name: "system_program", address: "11111111111111111111111111111111" }
      ],
      args: [{ name: "operators", type: { vec: "pubkey" } }]
    },
    {
      name: "sell_token",
      discriminator: [109, 61, 40, 187, 230, 176, 135, 174],
      accounts: [
        { name: "mint" },
        {
          name: "bonding_curve",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [98, 111, 110, 100, 105, 110, 103, 95, 99, 117, 114, 118, 101]
              },
              { kind: "account", path: "mint" }
            ]
          }
        },
        {
          name: "trading_fees_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  116,
                  114,
                  97,
                  100,
                  105,
                  110,
                  103,
                  95,
                  102,
                  101,
                  101,
                  115,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "mint" }
            ]
          }
        },
        {
          name: "bonding_curve_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  98,
                  111,
                  110,
                  100,
                  105,
                  110,
                  103,
                  95,
                  99,
                  117,
                  114,
                  118,
                  101,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "mint" }
            ]
          }
        },
        {
          name: "bonding_curve_sol_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  98,
                  111,
                  110,
                  100,
                  105,
                  110,
                  103,
                  95,
                  99,
                  117,
                  114,
                  118,
                  101,
                  95,
                  115,
                  111,
                  108,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "mint" }
            ]
          }
        },
        {
          name: "seller_token_account",
          writable: true,
          pda: {
            seeds: [
              { kind: "account", path: "seller" },
              {
                kind: "const",
                value: [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              { kind: "account", path: "mint" }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        { name: "seller", writable: true, signer: true },
        { name: "recipient", writable: true },
        { name: "config", pda: { seeds: [{ kind: "const", value: [99, 111, 110, 102, 105, 103] }] } },
        { name: "system_program", address: "11111111111111111111111111111111" },
        { name: "token_program", address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" },
        { name: "associated_token_program", address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL" }
      ],
      args: [
        { name: "sell_amount", type: "u64" },
        { name: "amount_out_min", type: "u64" }
      ]
    },
    {
      name: "split_post_graduation_trading_fees",
      discriminator: [241, 178, 177, 69, 38, 187, 58, 176],
      accounts: [
        { name: "operator", writable: true, signer: true },
        { name: "mint" },
        { name: "wsol", address: "So11111111111111111111111111111111111111112" },
        { name: "config", pda: { seeds: [{ kind: "const", value: [99, 111, 110, 102, 105, 103] }] } },
        {
          name: "vault_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [118, 97, 117, 108, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121]
              }
            ]
          }
        },
        {
          name: "bonding_curve",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [98, 111, 110, 100, 105, 110, 103, 95, 99, 117, 114, 118, 101]
              },
              { kind: "account", path: "mint" }
            ]
          }
        },
        {
          name: "trading_fees_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  115,
                  116,
                  95,
                  103,
                  114,
                  97,
                  100,
                  95,
                  116,
                  114,
                  97,
                  100,
                  105,
                  110,
                  103,
                  95,
                  102,
                  101,
                  101,
                  115,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "mint" }
            ]
          }
        },
        { name: "fee_splitter_program" },
        { name: "system_program", address: "11111111111111111111111111111111" },
        { name: "token_program", address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" },
        { name: "associated_token_program", address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL" },
        { name: "fee_splitter_config" },
        { name: "fee_splitter_creator_vault", writable: true },
        { name: "fee_splitter_vault_authority", writable: true },
        { name: "fee_splitter_creator_vault_authority", writable: true },
        { name: "fee_splitter_staking_mint" },
        {
          name: "fee_splitter_wsol_vault",
          writable: true,
          pda: {
            seeds: [
              { kind: "account", path: "fee_splitter_vault_authority" },
              {
                kind: "const",
                value: [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              { kind: "account", path: "wsol" }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        { name: "fee_splitter_creator_vault_authority_wsol_vault", writable: true },
        { name: "fee_splitter_treasury_wsol_vault", writable: true },
        { name: "fee_splitter_team_wsol_vault", writable: true },
        { name: "fee_splitter_reward_pool", writable: true },
        { name: "fee_splitter_reward_pool_staking_vault", writable: true },
        { name: "fee_splitter_reward_pool_reward_vault", writable: true },
        { name: "fee_splitter_reward_pool_program" }
      ],
      args: []
    },
    {
      name: "split_trading_fees",
      discriminator: [96, 126, 225, 47, 185, 213, 50, 58],
      accounts: [
        { name: "operator", writable: true, signer: true },
        { name: "mint" },
        { name: "wsol", address: "So11111111111111111111111111111111111111112" },
        { name: "config", pda: { seeds: [{ kind: "const", value: [99, 111, 110, 102, 105, 103] }] } },
        {
          name: "vault_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [118, 97, 117, 108, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121]
              }
            ]
          }
        },
        {
          name: "bonding_curve",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [98, 111, 110, 100, 105, 110, 103, 95, 99, 117, 114, 118, 101]
              },
              { kind: "account", path: "mint" }
            ]
          }
        },
        {
          name: "trading_fees_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  116,
                  114,
                  97,
                  100,
                  105,
                  110,
                  103,
                  95,
                  102,
                  101,
                  101,
                  115,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "mint" }
            ]
          }
        },
        { name: "fee_splitter_program", address: "boopEYztaEYSnajfMtjcRysyzyRcchgKsPboRZEbnJi" },
        { name: "system_program", address: "11111111111111111111111111111111" },
        { name: "token_program", address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" },
        { name: "associated_token_program", address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL" },
        { name: "fee_splitter_config" },
        { name: "fee_splitter_creator_vault", writable: true },
        { name: "fee_splitter_vault_authority", writable: true },
        { name: "fee_splitter_creator_vault_authority", writable: true },
        { name: "fee_splitter_staking_mint" },
        {
          name: "fee_splitter_wsol_vault",
          writable: true,
          pda: {
            seeds: [
              { kind: "account", path: "fee_splitter_vault_authority" },
              {
                kind: "const",
                value: [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              { kind: "account", path: "wsol" }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        { name: "fee_splitter_creator_vault_authority_wsol_vault", writable: true },
        { name: "fee_splitter_treasury_wsol_vault", writable: true },
        { name: "fee_splitter_team_wsol_vault", writable: true },
        { name: "fee_splitter_reward_pool", writable: true },
        { name: "fee_splitter_reward_pool_staking_vault", writable: true },
        { name: "fee_splitter_reward_pool_reward_vault", writable: true },
        { name: "fee_splitter_reward_pool_program" }
      ],
      args: []
    },
    {
      name: "swap_sol_for_tokens_on_raydium",
      discriminator: [107, 248, 131, 239, 152, 234, 54, 35],
      accounts: [
        { name: "config", pda: { seeds: [{ kind: "const", value: [99, 111, 110, 102, 105, 103] }] } },
        {
          name: "bonding_curve",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [98, 111, 110, 100, 105, 110, 103, 95, 99, 117, 114, 118, 101]
              },
              { kind: "account", path: "output_token_mint" }
            ]
          }
        },
        { name: "amm_config", docs: ["Which config the pool belongs to."] },
        { name: "operator", writable: true, signer: true },
        {
          name: "vault_authority",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [118, 97, 117, 108, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121]
              }
            ]
          }
        },
        {
          name: "authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  110,
                  100,
                  95,
                  108,
                  112,
                  95,
                  109,
                  105,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ],
            program: {
              kind: "const",
              value: [
                169,
                42,
                90,
                139,
                79,
                41,
                89,
                82,
                132,
                37,
                80,
                170,
                147,
                253,
                91,
                149,
                181,
                172,
                230,
                168,
                235,
                146,
                12,
                147,
                148,
                46,
                67,
                105,
                12,
                32,
                236,
                115
              ]
            }
          }
        },
        {
          name: "pool_state",
          writable: true,
          pda: {
            seeds: [
              { kind: "const", value: [112, 111, 111, 108] },
              { kind: "account", path: "amm_config" },
              { kind: "account", path: "output_token_mint" },
              { kind: "account", path: "input_token_mint" }
            ],
            program: {
              kind: "const",
              value: [
                169,
                42,
                90,
                139,
                79,
                41,
                89,
                82,
                132,
                37,
                80,
                170,
                147,
                253,
                91,
                149,
                181,
                172,
                230,
                168,
                235,
                146,
                12,
                147,
                148,
                46,
                67,
                105,
                12,
                32,
                236,
                115
              ]
            }
          }
        },
        {
          name: "input_vault",
          writable: true,
          pda: {
            seeds: [
              { kind: "const", value: [112, 111, 111, 108, 95, 118, 97, 117, 108, 116] },
              { kind: "account", path: "pool_state" },
              { kind: "account", path: "input_token_mint" }
            ],
            program: {
              kind: "const",
              value: [
                169,
                42,
                90,
                139,
                79,
                41,
                89,
                82,
                132,
                37,
                80,
                170,
                147,
                253,
                91,
                149,
                181,
                172,
                230,
                168,
                235,
                146,
                12,
                147,
                148,
                46,
                67,
                105,
                12,
                32,
                236,
                115
              ]
            }
          }
        },
        {
          name: "output_vault",
          writable: true,
          pda: {
            seeds: [
              { kind: "const", value: [112, 111, 111, 108, 95, 118, 97, 117, 108, 116] },
              { kind: "account", path: "pool_state" },
              { kind: "account", path: "output_token_mint" }
            ],
            program: {
              kind: "const",
              value: [
                169,
                42,
                90,
                139,
                79,
                41,
                89,
                82,
                132,
                37,
                80,
                170,
                147,
                253,
                91,
                149,
                181,
                172,
                230,
                168,
                235,
                146,
                12,
                147,
                148,
                46,
                67,
                105,
                12,
                32,
                236,
                115
              ]
            }
          }
        },
        {
          name: "bonding_curve_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  98,
                  111,
                  110,
                  100,
                  105,
                  110,
                  103,
                  95,
                  99,
                  117,
                  114,
                  118,
                  101,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "output_token_mint" }
            ]
          }
        },
        {
          name: "bonding_curve_wsol_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  98,
                  111,
                  110,
                  100,
                  105,
                  110,
                  103,
                  95,
                  99,
                  117,
                  114,
                  118,
                  101,
                  95,
                  119,
                  115,
                  111,
                  108,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "output_token_mint" }
            ]
          }
        },
        { name: "output_token_mint", docs: ["token_0 mint, the key must smaller than token_1 mint"] },
        {
          name: "input_token_mint",
          docs: ["token_1 mint, the key must greater than token_0 mint"],
          address: "So11111111111111111111111111111111111111112"
        },
        {
          name: "token_program",
          docs: ["input_token_mint and output_token_mint have the same token program"]
        },
        { name: "cp_swap_program", address: "CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C" },
        {
          name: "observation_state",
          writable: true,
          pda: {
            seeds: [
              { kind: "const", value: [111, 98, 115, 101, 114, 118, 97, 116, 105, 111, 110] },
              { kind: "account", path: "pool_state" }
            ],
            program: { kind: "account", path: "cp_swap_program" }
          }
        }
      ],
      args: [
        { name: "amount_in", type: "u64" },
        { name: "minimum_amount_out", type: "u64" }
      ]
    },
    {
      name: "swap_tokens_for_sol_on_raydium",
      discriminator: [216, 172, 130, 148, 34, 98, 215, 163],
      accounts: [
        { name: "config", pda: { seeds: [{ kind: "const", value: [99, 111, 110, 102, 105, 103] }] } },
        {
          name: "bonding_curve",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [98, 111, 110, 100, 105, 110, 103, 95, 99, 117, 114, 118, 101]
              },
              { kind: "account", path: "input_token_mint" }
            ]
          }
        },
        { name: "amm_config", docs: ["Which config the pool belongs to."] },
        { name: "operator", writable: true, signer: true },
        {
          name: "vault_authority",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [118, 97, 117, 108, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121]
              }
            ]
          }
        },
        {
          name: "authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  110,
                  100,
                  95,
                  108,
                  112,
                  95,
                  109,
                  105,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ],
            program: {
              kind: "const",
              value: [
                169,
                42,
                90,
                139,
                79,
                41,
                89,
                82,
                132,
                37,
                80,
                170,
                147,
                253,
                91,
                149,
                181,
                172,
                230,
                168,
                235,
                146,
                12,
                147,
                148,
                46,
                67,
                105,
                12,
                32,
                236,
                115
              ]
            }
          }
        },
        {
          name: "pool_state",
          writable: true,
          pda: {
            seeds: [
              { kind: "const", value: [112, 111, 111, 108] },
              { kind: "account", path: "amm_config" },
              { kind: "account", path: "input_token_mint" },
              { kind: "account", path: "output_token_mint" }
            ],
            program: {
              kind: "const",
              value: [
                169,
                42,
                90,
                139,
                79,
                41,
                89,
                82,
                132,
                37,
                80,
                170,
                147,
                253,
                91,
                149,
                181,
                172,
                230,
                168,
                235,
                146,
                12,
                147,
                148,
                46,
                67,
                105,
                12,
                32,
                236,
                115
              ]
            }
          }
        },
        {
          name: "input_vault",
          writable: true,
          pda: {
            seeds: [
              { kind: "const", value: [112, 111, 111, 108, 95, 118, 97, 117, 108, 116] },
              { kind: "account", path: "pool_state" },
              { kind: "account", path: "input_token_mint" }
            ],
            program: {
              kind: "const",
              value: [
                169,
                42,
                90,
                139,
                79,
                41,
                89,
                82,
                132,
                37,
                80,
                170,
                147,
                253,
                91,
                149,
                181,
                172,
                230,
                168,
                235,
                146,
                12,
                147,
                148,
                46,
                67,
                105,
                12,
                32,
                236,
                115
              ]
            }
          }
        },
        {
          name: "output_vault",
          writable: true,
          pda: {
            seeds: [
              { kind: "const", value: [112, 111, 111, 108, 95, 118, 97, 117, 108, 116] },
              { kind: "account", path: "pool_state" },
              { kind: "account", path: "output_token_mint" }
            ],
            program: {
              kind: "const",
              value: [
                169,
                42,
                90,
                139,
                79,
                41,
                89,
                82,
                132,
                37,
                80,
                170,
                147,
                253,
                91,
                149,
                181,
                172,
                230,
                168,
                235,
                146,
                12,
                147,
                148,
                46,
                67,
                105,
                12,
                32,
                236,
                115
              ]
            }
          }
        },
        {
          name: "bonding_curve_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  98,
                  111,
                  110,
                  100,
                  105,
                  110,
                  103,
                  95,
                  99,
                  117,
                  114,
                  118,
                  101,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "input_token_mint" }
            ]
          }
        },
        {
          name: "bonding_curve_wsol_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  98,
                  111,
                  110,
                  100,
                  105,
                  110,
                  103,
                  95,
                  99,
                  117,
                  114,
                  118,
                  101,
                  95,
                  119,
                  115,
                  111,
                  108,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              { kind: "account", path: "input_token_mint" }
            ]
          }
        },
        { name: "input_token_mint", docs: ["token_0 mint, the key must smaller than token_1 mint"] },
        {
          name: "output_token_mint",
          docs: ["token_1 mint, the key must greater than token_0 mint"],
          address: "So11111111111111111111111111111111111111112"
        },
        {
          name: "token_program",
          docs: ["input_token_mint and output_token_mint have the same token program"]
        },
        { name: "cp_swap_program", address: "CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C" },
        {
          name: "observation_state",
          writable: true,
          pda: {
            seeds: [
              { kind: "const", value: [111, 98, 115, 101, 114, 118, 97, 116, 105, 111, 110] },
              { kind: "account", path: "pool_state" }
            ],
            program: { kind: "account", path: "cp_swap_program" }
          }
        }
      ],
      args: [
        { name: "amount_in", type: "u64" },
        { name: "minimum_amount_out", type: "u64" }
      ]
    },
    {
      name: "toggle_paused",
      discriminator: [54, 83, 147, 198, 123, 97, 218, 72],
      accounts: [
        { name: "authority", writable: true, signer: true, relations: ["config"] },
        {
          name: "config",
          writable: true,
          pda: { seeds: [{ kind: "const", value: [99, 111, 110, 102, 105, 103] }] }
        }
      ],
      args: []
    },
    {
      name: "update_config",
      discriminator: [29, 158, 252, 191, 10, 83, 219, 99],
      accounts: [
        {
          name: "config",
          writable: true,
          pda: { seeds: [{ kind: "const", value: [99, 111, 110, 102, 105, 103] }] }
        },
        { name: "authority", signer: true, relations: ["config"] },
        { name: "system_program", address: "11111111111111111111111111111111" }
      ],
      args: [
        { name: "new_protocol_fee_recipient", type: "pubkey" },
        { name: "new_virtual_sol_reserves", type: "u64" },
        { name: "new_virtual_token_reserves", type: "u64" },
        { name: "new_graduation_target", type: "u64" },
        { name: "new_graduation_fee", type: "u64" },
        { name: "new_damping_term", type: "u8" },
        { name: "new_swap_fee_basis_points", type: "u8" },
        { name: "new_token_for_stakers_basis_points", type: "u16" },
        { name: "new_token_amount_for_raydium_liquidity", type: "u64" },
        { name: "new_max_graduation_price_deviation_basis_points", type: "u16" },
        { name: "new_max_swap_amount_for_pool_price_correction_basis_points", type: "u16" }
      ]
    }
  ],
  accounts: [
    { name: "AmmConfig", discriminator: [218, 244, 33, 104, 203, 203, 43, 111] },
    { name: "BondingCurve", discriminator: [23, 183, 248, 55, 96, 216, 172, 96] },
    { name: "Config", discriminator: [155, 12, 170, 224, 30, 250, 204, 130] },
    { name: "LockedCpLiquidityState", discriminator: [25, 10, 238, 197, 207, 234, 73, 22] }
  ],
  events: [
    { name: "AuthorityTransferCancelledEvent", discriminator: [192, 121, 140, 224, 229, 96, 13, 143] },
    { name: "AuthorityTransferCompletedEvent", discriminator: [163, 132, 217, 128, 243, 92, 90, 249] },
    { name: "AuthorityTransferInitiatedEvent", discriminator: [121, 246, 95, 155, 229, 109, 148, 205] },
    { name: "BondingCurveDeployedEvent", discriminator: [225, 80, 178, 34, 217, 39, 184, 148] },
    { name: "BondingCurveDeployedFallbackEvent", discriminator: [106, 252, 243, 115, 199, 159, 247, 31] },
    { name: "BondingCurveVaultClosedEvent", discriminator: [185, 36, 156, 82, 189, 164, 207, 79] },
    { name: "ConfigUpdatedEvent", discriminator: [245, 158, 129, 99, 60, 100, 214, 220] },
    { name: "LiquidityDepositedIntoRaydiumEvent", discriminator: [236, 50, 97, 27, 198, 101, 248, 20] },
    { name: "OperatorsAddedEvent", discriminator: [247, 58, 112, 56, 203, 186, 112, 152] },
    { name: "OperatorsRemovedEvent", discriminator: [44, 72, 75, 70, 151, 42, 53, 89] },
    { name: "PausedToggledEvent", discriminator: [143, 222, 228, 224, 6, 230, 64, 176] },
    { name: "PostGraduationTradingFeesSplitEvent", discriminator: [34, 231, 16, 81, 36, 203, 158, 196] },
    { name: "RaydiumLiquidityLockedEvent", discriminator: [172, 189, 8, 241, 137, 175, 59, 100] },
    { name: "RaydiumPoolCreatedEvent", discriminator: [170, 178, 21, 215, 84, 222, 34, 101] },
    { name: "RaydiumRandomPoolCreatedEvent", discriminator: [152, 251, 128, 152, 158, 235, 83, 53] },
    { name: "SwapSolForTokensOnRaydiumEvent", discriminator: [247, 1, 8, 166, 221, 116, 113, 98] },
    { name: "SwapTokensForSolOnRaydiumEvent", discriminator: [76, 249, 221, 162, 65, 70, 118, 32] },
    { name: "TokenBoughtEvent", discriminator: [71, 89, 222, 124, 215, 192, 230, 138] },
    { name: "TokenCreatedEvent", discriminator: [96, 122, 113, 138, 50, 227, 149, 57] },
    { name: "TokenCreatedFallbackEvent", discriminator: [157, 202, 35, 92, 165, 163, 39, 56] },
    { name: "TokenGraduatedEvent", discriminator: [73, 116, 111, 26, 92, 217, 146, 141] },
    { name: "TokenSoldEvent", discriminator: [204, 239, 182, 77, 241, 51, 77, 66] },
    { name: "TradingFeesCollectedEvent", discriminator: [225, 63, 26, 55, 134, 243, 210, 203] },
    { name: "TradingFeesCollectedV2Event", discriminator: [23, 246, 130, 250, 11, 49, 240, 179] },
    { name: "TradingFeesSplitEvent", discriminator: [113, 60, 159, 17, 253, 174, 135, 122] }
  ],
  errors: [
    { code: 6e3, name: "AmountInTooLow", msg: "Amount in too low" },
    { code: 6001, name: "AmountOutTooLow", msg: "Amount out too low" },
    { code: 6002, name: "AmountZero", msg: "Amount zero" },
    { code: 6003, name: "ConfigNotInitialized", msg: "Config not initialized" },
    { code: 6004, name: "CreatorIsNotProvided", msg: "Creator is not provided" },
    { code: 6005, name: "DampingTermTooLow", msg: "Damping term too low" },
    {
      code: 6006,
      name: "FirstBuyMustBeAtMost50PercentOfTotalSupply",
      msg: "First buy must be at most 50% of the total supply"
    },
    {
      code: 6007,
      name: "GraduationFeeRelativeToTargetIsTooHigh",
      msg: "Graduation fee relative to graduation target is too high"
    },
    {
      code: 6008,
      name: "InsufficientTokensOut",
      msg: "Insufficient tokens to transfer out of the bonding curve"
    },
    { code: 6009, name: "InvalidBondingCurveStatus", msg: "Invalid bonding curve status" },
    { code: 6010, name: "InvalidDampingTerm", msg: "Invalid damping term" },
    { code: 6011, name: "InvalidMint", msg: "Invalid mint" },
    { code: 6012, name: "InvalidProtocolFeeRecipient", msg: "Invalid protocol fee recipient" },
    { code: 6013, name: "InvalidSqrtPrice", msg: "Invalid sqrt price" },
    { code: 6014, name: "MathOverflow", msg: "Math overflow" },
    {
      code: 6015,
      name: "MaxBasisPointsOffGraduationPriceTooHigh",
      msg: "Max basis points off graduation price too high"
    },
    {
      code: 6016,
      name: "MaxGraduationPriceDeviationBasisPointsTooHigh",
      msg: "Max graduation price deviation basis points too high"
    },
    {
      code: 6017,
      name: "MaxSwapAmountForPoolPriceCorrectionBasisPointsTooHigh",
      msg: "Max swap amount for pool price correction basis points too high"
    },
    {
      code: 6018,
      name: "MintIsLargerThanOrEqualToNativeMint",
      msg: "Mint is larger than or equal to native mint"
    },
    { code: 6019, name: "NoAuthorityTransferInProgress", msg: "No authority transfer in progress" },
    { code: 6020, name: "NothingToDeposit", msg: "LP Token amount is too low" },
    { code: 6021, name: "NothingToSplit", msg: "Nothing to split" },
    { code: 6022, name: "NothingToLock", msg: "Nothing to lock" },
    { code: 6023, name: "OperatorAlreadyAdded", msg: "Operator already added" },
    { code: 6024, name: "OperatorDoesNotExist", msg: "Operator does not exist" },
    { code: 6025, name: "Paused", msg: "Paused" },
    {
      code: 6026,
      name: "PoolPriceOutOfRange",
      msg: "Pool is already created and has a price out of range when attempting to deposit liquidity"
    },
    { code: 6027, name: "SwapFeeBasisPointsTooHigh", msg: "Swap fee basis points too high" },
    {
      code: 6028,
      name: "SwapAmountTooHigh",
      msg: "Swap amount exceeds the reasonable limit to leave as liquidity"
    },
    {
      code: 6029,
      name: "TokenAmountForRaydiumLiquidityTooHigh",
      msg: "Token amount for Raydium liquidity too high"
    },
    { code: 6030, name: "TokenForStakersBasisPointsTooHigh", msg: "Token for stakers basis points too high" },
    { code: 6031, name: "TokenGraduated", msg: "Token graduated" },
    { code: 6032, name: "TokenNameTooLong", msg: "Token name too long" },
    { code: 6033, name: "TokenNameTooShort", msg: "Token name too short" },
    { code: 6034, name: "TokenSymbolTooLong", msg: "Token symbol too long" },
    { code: 6035, name: "TokenSymbolTooShort", msg: "Token symbol too short" },
    { code: 6036, name: "Unauthorized", msg: "Unauthorized" }
  ],
  types: [
    {
      name: "AmmConfig",
      docs: ["Holds the current owner of the factory"],
      type: {
        kind: "struct",
        fields: [
          { name: "bump", docs: ["Bump to identify PDA"], type: "u8" },
          {
            name: "disable_create_pool",
            docs: ["Status to control if new pool can be create"],
            type: "bool"
          },
          { name: "index", docs: ["Config index"], type: "u16" },
          {
            name: "trade_fee_rate",
            docs: ["The trade fee, denominated in hundredths of a bip (10^-6)"],
            type: "u64"
          },
          { name: "protocol_fee_rate", docs: ["The protocol fee"], type: "u64" },
          {
            name: "fund_fee_rate",
            docs: ["The fund fee, denominated in hundredths of a bip (10^-6)"],
            type: "u64"
          },
          { name: "create_pool_fee", docs: ["Fee for create a new pool"], type: "u64" },
          { name: "protocol_owner", docs: ["Address of the protocol fee owner"], type: "pubkey" },
          { name: "fund_owner", docs: ["Address of the fund fee owner"], type: "pubkey" },
          { name: "padding", docs: ["padding"], type: { array: ["u64", 16] } }
        ]
      }
    },
    { name: "AuthorityTransferCancelledEvent", type: { kind: "struct", fields: [] } },
    {
      name: "AuthorityTransferCompletedEvent",
      type: {
        kind: "struct",
        fields: [
          { name: "old_authority", type: "pubkey" },
          { name: "new_authority", type: "pubkey" }
        ]
      }
    },
    {
      name: "AuthorityTransferInitiatedEvent",
      type: {
        kind: "struct",
        fields: [
          { name: "old_authority", type: "pubkey" },
          { name: "new_authority", type: "pubkey" }
        ]
      }
    },
    {
      name: "BondingCurve",
      type: {
        kind: "struct",
        fields: [
          { name: "creator", type: "pubkey" },
          { name: "mint", type: "pubkey" },
          { name: "virtual_sol_reserves", type: "u64" },
          {
            name: "virtual_token_reserves",
            docs: [
              "virtual token reserves is deprecated, we now use the xyk formula instead",
              "and it only requires virtual sol reserves",
              "to maintain backwards compatibility, if damping term is 30, we use the old formula",
              "and we still need virtual_token_reserves to be set correctly"
            ],
            type: "u64"
          },
          { name: "graduation_target", type: "u64" },
          { name: "graduation_fee", type: "u64" },
          { name: "sol_reserves", type: "u64" },
          { name: "token_reserves", type: "u64" },
          {
            name: "damping_term",
            docs: ["In reality, this is now more like a bonding_curve_selector"],
            type: "u8"
          },
          { name: "swap_fee_basis_points", type: "u8" },
          { name: "token_for_stakers_basis_points", type: "u16" },
          { name: "status", type: { defined: { name: "BondingCurveStatus" } } }
        ]
      }
    },
    {
      name: "BondingCurveDeployedEvent",
      type: {
        kind: "struct",
        fields: [
          { name: "mint", type: "pubkey" },
          { name: "creator", type: "pubkey" }
        ]
      }
    },
    {
      name: "BondingCurveDeployedFallbackEvent",
      type: {
        kind: "struct",
        fields: [
          { name: "mint", type: "pubkey" },
          { name: "creator", type: "pubkey" }
        ]
      }
    },
    {
      name: "BondingCurveStatus",
      type: {
        kind: "enum",
        variants: [
          { name: "Trading" },
          { name: "Graduated" },
          { name: "PoolPriceCorrected" },
          { name: "LiquidityProvisioned" },
          { name: "LiquidityLocked" }
        ]
      }
    },
    {
      name: "BondingCurveVaultClosedEvent",
      type: {
        kind: "struct",
        fields: [
          { name: "mint", type: "pubkey" },
          { name: "recipient", type: "pubkey" },
          { name: "amount", type: "u64" }
        ]
      }
    },
    {
      name: "Config",
      type: {
        kind: "struct",
        fields: [
          { name: "is_paused", type: "bool" },
          { name: "authority", type: "pubkey" },
          { name: "pending_authority", type: "pubkey" },
          { name: "operators", type: { vec: "pubkey" } },
          { name: "protocol_fee_recipient", type: "pubkey" },
          { name: "token_distributor", type: "pubkey" },
          { name: "virtual_sol_reserves", type: "u64" },
          { name: "virtual_token_reserves", type: "u64" },
          { name: "graduation_target", type: "u64" },
          { name: "graduation_fee", type: "u64" },
          { name: "damping_term", type: "u8" },
          { name: "token_for_stakers_basis_points", type: "u16" },
          { name: "swap_fee_basis_points", type: "u8" },
          { name: "token_amount_for_raydium_liquidity", type: "u64" },
          { name: "max_graduation_price_deviation_basis_points", type: "u16" },
          { name: "max_swap_amount_for_pool_price_correction_basis_points", type: "u16" }
        ]
      }
    },
    {
      name: "ConfigUpdatedEvent",
      type: {
        kind: "struct",
        fields: [
          { name: "protocol_fee_recipient", type: "pubkey" },
          { name: "virtual_sol_reserves", type: "u64" },
          { name: "virtual_token_reserves", type: "u64" },
          { name: "graduation_target", type: "u64" },
          { name: "graduation_fee", type: "u64" },
          { name: "damping_term", type: "u8" },
          { name: "swap_fee_basis_points", type: "u8" },
          { name: "token_for_stakers_basis_points", type: "u16" },
          { name: "token_amount_for_raydium_liquidity", type: "u64" },
          { name: "max_graduation_price_deviation_basis_points", type: "u16" },
          { name: "max_swap_amount_for_pool_price_correction_basis_points", type: "u16" }
        ]
      }
    },
    {
      name: "LiquidityDepositedIntoRaydiumEvent",
      type: {
        kind: "struct",
        fields: [
          { name: "pool_state", type: "pubkey" },
          { name: "mint", type: "pubkey" },
          { name: "lp_token_amount", type: "u64" },
          { name: "tokens_deposited", type: "u64" },
          { name: "wsol_deposited", type: "u64" }
        ]
      }
    },
    {
      name: "LockedCpLiquidityState",
      type: {
        kind: "struct",
        fields: [
          {
            name: "locked_lp_amount",
            docs: ["The Locked liquidity amount without claimed lp fee"],
            type: "u64"
          },
          { name: "claimed_lp_amount", docs: ["Claimed lp fee amount"], type: "u64" },
          { name: "unclaimed_lp_amount", docs: ["Unclaimed lp fee amount"], type: "u64" },
          { name: "last_lp", docs: ["Last updated cp pool lp total supply"], type: "u64" },
          { name: "last_k", docs: ["Last updated cp pool k"], type: "u128" },
          { name: "recent_epoch", docs: ["Account update recent epoch"], type: "u64" },
          {
            name: "pool_id",
            docs: ["The ID of the pool with which this record is connected"],
            type: "pubkey"
          },
          {
            name: "fee_nft_mint",
            docs: ["nft mint to check who has authority to collect fee"],
            type: "pubkey"
          },
          { name: "locked_owner", docs: ["The owner who has locked liquidity"], type: "pubkey" },
          { name: "locked_lp_mint", docs: ["The mint of locked lp token"], type: "pubkey" },
          {
            name: "padding",
            docs: ["Unused bytes for future upgrades."],
            type: { array: ["u64", 8] }
          }
        ]
      }
    },
    {
      name: "OperatorsAddedEvent",
      type: { kind: "struct", fields: [{ name: "operators", type: { vec: "pubkey" } }] }
    },
    {
      name: "OperatorsRemovedEvent",
      type: { kind: "struct", fields: [{ name: "operators", type: { vec: "pubkey" } }] }
    },
    {
      name: "PausedToggledEvent",
      type: { kind: "struct", fields: [{ name: "is_paused", type: "bool" }] }
    },
    {
      name: "PostGraduationTradingFeesSplitEvent",
      type: {
        kind: "struct",
        fields: [
          { name: "amount", type: "u64" },
          { name: "creator", type: "pubkey" }
        ]
      }
    },
    {
      name: "RaydiumLiquidityLockedEvent",
      type: {
        kind: "struct",
        fields: [
          { name: "pool_state", type: "pubkey" },
          { name: "mint", type: "pubkey" },
          { name: "lp_amount", type: "u64" }
        ]
      }
    },
    {
      name: "RaydiumPoolCreatedEvent",
      type: {
        kind: "struct",
        fields: [
          { name: "pool_state", type: "pubkey" },
          { name: "mint", type: "pubkey" }
        ]
      }
    },
    {
      name: "RaydiumRandomPoolCreatedEvent",
      type: {
        kind: "struct",
        fields: [
          { name: "pool_state", type: "pubkey" },
          { name: "mint", type: "pubkey" }
        ]
      }
    },
    {
      name: "SwapSolForTokensOnRaydiumEvent",
      type: {
        kind: "struct",
        fields: [
          { name: "mint", type: "pubkey" },
          { name: "amount_in", type: "u64" },
          { name: "amount_out", type: "u64" }
        ]
      }
    },
    {
      name: "SwapTokensForSolOnRaydiumEvent",
      type: {
        kind: "struct",
        fields: [
          { name: "mint", type: "pubkey" },
          { name: "amount_in", type: "u64" },
          { name: "amount_out", type: "u64" }
        ]
      }
    },
    {
      name: "TokenBoughtEvent",
      type: {
        kind: "struct",
        fields: [
          { name: "mint", type: "pubkey" },
          { name: "amount_in", type: "u64" },
          { name: "amount_out", type: "u64" },
          { name: "swap_fee", type: "u64" },
          { name: "buyer", type: "pubkey" },
          { name: "recipient", type: "pubkey" }
        ]
      }
    },
    {
      name: "TokenCreatedEvent",
      type: {
        kind: "struct",
        fields: [
          { name: "name", type: "string" },
          { name: "symbol", type: "string" },
          { name: "uri", type: "string" }
        ]
      }
    },
    {
      name: "TokenCreatedFallbackEvent",
      type: {
        kind: "struct",
        fields: [
          { name: "name", type: "string" },
          { name: "symbol", type: "string" },
          { name: "uri", type: "string" }
        ]
      }
    },
    {
      name: "TokenGraduatedEvent",
      type: {
        kind: "struct",
        fields: [
          { name: "mint", type: "pubkey" },
          { name: "sol_for_liquidity", type: "u64" },
          { name: "graduation_fee", type: "u64" },
          { name: "token_for_distributor", type: "u64" }
        ]
      }
    },
    {
      name: "TokenSoldEvent",
      type: {
        kind: "struct",
        fields: [
          { name: "mint", type: "pubkey" },
          { name: "amount_in", type: "u64" },
          { name: "amount_out", type: "u64" },
          { name: "swap_fee", type: "u64" },
          { name: "seller", type: "pubkey" },
          { name: "recipient", type: "pubkey" }
        ]
      }
    },
    {
      name: "TradingFeesCollectedEvent",
      type: {
        kind: "struct",
        fields: [
          { name: "pool_state", type: "pubkey" },
          { name: "mint", type: "pubkey" }
        ]
      }
    },
    {
      name: "TradingFeesCollectedV2Event",
      type: {
        kind: "struct",
        fields: [
          { name: "pool_state", type: "pubkey" },
          { name: "mint", type: "pubkey" }
        ]
      }
    },
    {
      name: "TradingFeesSplitEvent",
      type: {
        kind: "struct",
        fields: [
          { name: "amount", type: "u64" },
          { name: "creator", type: "pubkey" }
        ]
      }
    }
  ]
};

// idl/heaven.json
var heaven_default = {
  address: "GgE4QoiM8VYoQNZkiNLHNbzXEkKyynzsApC8BvBY4b1V",
  metadata: {
    name: "Heaven",
    version: "0.2.0",
    spec: "0.1.0",
    description: "Created with Anchor"
  },
  instructions: [
    {
      name: "admin_borrow_sol",
      discriminator: [204, 72, 95, 215, 172, 192, 137, 252],
      accounts: [
        {
          name: "token_program",
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "admin",
          signer: true
        },
        {
          name: "protocol_config_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  99,
                  111,
                  110,
                  102,
                  105,
                  103,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              },
              {
                kind: "arg",
                path: "version"
              }
            ]
          }
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "protocol_staking_admin_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  115,
                  116,
                  97,
                  107,
                  105,
                  110,
                  103,
                  95,
                  97,
                  100,
                  109,
                  105,
                  110,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              }
            ]
          }
        },
        {
          name: "address_lookup_program",
          docs: ["CHECK"],
          address: "AddressLookupTab1e1111111111111111111111111"
        },
        {
          name: "instruction_sysvar_account_info"
        },
        {
          name: "temp_sol_holder",
          docs: ["CHECK"],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  116,
                  101,
                  109,
                  112,
                  95,
                  115,
                  111,
                  108,
                  95,
                  104,
                  111,
                  108,
                  100,
                  101,
                  114
                ]
              },
              {
                kind: "arg",
                path: "version"
              }
            ]
          }
        }
      ],
      args: [
        {
          name: "version",
          type: "u16"
        },
        {
          name: "amount",
          type: "u64"
        }
      ]
    },
    {
      name: "admin_claim_msol",
      discriminator: [124, 48, 60, 199, 203, 49, 36, 41],
      accounts: [
        {
          name: "token_program",
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "admin",
          signer: true
        },
        {
          name: "protocol_config_state",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  99,
                  111,
                  110,
                  102,
                  105,
                  103,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              },
              {
                kind: "arg",
                path: "version"
              }
            ]
          }
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "protocol_staking_admin_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  115,
                  116,
                  97,
                  107,
                  105,
                  110,
                  103,
                  95,
                  97,
                  100,
                  109,
                  105,
                  110,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              }
            ]
          }
        },
        {
          name: "msol_ticket",
          docs: ["CHECK"],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  109,
                  115,
                  111,
                  108,
                  95,
                  116,
                  105,
                  99,
                  107,
                  101,
                  116,
                  95,
                  97,
                  99,
                  99
                ]
              },
              {
                kind: "account",
                path: "protocol_config_state"
              },
              {
                kind: "arg",
                path: "ticket_number"
              }
            ]
          }
        },
        {
          name: "msol_mint",
          address: "mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So"
        },
        {
          name: "msol_ticket_sol_spent",
          docs: ["CHECK"],
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  109,
                  115,
                  111,
                  108,
                  95,
                  116,
                  105,
                  99,
                  107,
                  101,
                  116,
                  95,
                  97,
                  99,
                  99,
                  95,
                  115,
                  111,
                  108,
                  95,
                  115,
                  112,
                  101,
                  110,
                  116
                ]
              },
              {
                kind: "account",
                path: "protocol_config_state"
              },
              {
                kind: "arg",
                path: "ticket_number"
              }
            ]
          }
        }
      ],
      args: [
        {
          name: "version",
          type: "u16"
        },
        {
          name: "ticket_number",
          type: "u32"
        }
      ]
    },
    {
      name: "admin_claim_staking_rewards",
      discriminator: [24, 163, 220, 171, 225, 222, 166, 248],
      accounts: [
        {
          name: "token_program",
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "admin",
          signer: true
        },
        {
          name: "protocol_config_state",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  99,
                  111,
                  110,
                  102,
                  105,
                  103,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              },
              {
                kind: "arg",
                path: "version"
              }
            ]
          }
        },
        {
          name: "protocol_config_wsol_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "protocol_config_state"
              },
              {
                kind: "const",
                value: [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              {
                kind: "account",
                path: "wsol_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "protocol_staking_admin_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  115,
                  116,
                  97,
                  107,
                  105,
                  110,
                  103,
                  95,
                  97,
                  100,
                  109,
                  105,
                  110,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              }
            ]
          }
        },
        {
          name: "wsol_token_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "payer"
              },
              {
                kind: "account",
                path: "token_program"
              },
              {
                kind: "account",
                path: "wsol_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "wsol_mint"
        }
      ],
      args: [
        {
          name: "version",
          type: "u16"
        },
        {
          name: "amount",
          type: "u64"
        }
      ]
    },
    {
      name: "admin_claim_standard_creator_trading_fees",
      discriminator: [182, 39, 168, 25, 96, 63, 76, 17],
      accounts: [
        {
          name: "swap",
          accounts: [
            {
              name: "token_a_program"
            },
            {
              name: "token_b_program"
            },
            {
              name: "associated_token_program",
              address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
            },
            {
              name: "system_program",
              address: "11111111111111111111111111111111"
            },
            {
              name: "liquidity_pool_state",
              writable: true
            },
            {
              name: "user",
              docs: ["CHECK"],
              writable: true,
              signer: true
            },
            {
              name: "token_a_mint",
              docs: ["CHECK"]
            },
            {
              name: "token_b_mint",
              docs: ["CHECK"]
            },
            {
              name: "user_token_a_vault",
              writable: true
            },
            {
              name: "user_token_b_vault",
              writable: true
            },
            {
              name: "token_a_vault",
              writable: true
            },
            {
              name: "token_b_vault",
              writable: true
            },
            {
              name: "protocol_config",
              writable: true
            },
            {
              name: "instruction_sysvar_account_info",
              docs: ["CHECK"],
              address: "Sysvar1nstructions1111111111111111111111111"
            }
          ]
        },
        {
          name: "protocol_admin",
          signer: true
        },
        {
          name: "protocol_admin_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  102,
                  101,
                  101,
                  95,
                  97,
                  100,
                  109,
                  105,
                  110,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              }
            ]
          }
        }
      ],
      args: [
        {
          name: "amount",
          type: "u64"
        }
      ]
    },
    {
      name: "admin_deposit_msol",
      discriminator: [206, 189, 208, 166, 19, 81, 202, 48],
      accounts: [
        {
          name: "token_program",
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "admin",
          signer: true
        },
        {
          name: "protocol_config_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  99,
                  111,
                  110,
                  102,
                  105,
                  103,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              },
              {
                kind: "arg",
                path: "version"
              }
            ]
          }
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "protocol_staking_admin_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  115,
                  116,
                  97,
                  107,
                  105,
                  110,
                  103,
                  95,
                  97,
                  100,
                  109,
                  105,
                  110,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              }
            ]
          }
        },
        {
          name: "address_lookup_program",
          docs: ["CHECK"],
          address: "AddressLookupTab1e1111111111111111111111111"
        },
        {
          name: "instruction_sysvar_account_info"
        },
        {
          name: "temp_sol_holder",
          docs: ["CHECK"],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  116,
                  101,
                  109,
                  112,
                  95,
                  115,
                  111,
                  108,
                  95,
                  104,
                  111,
                  108,
                  100,
                  101,
                  114
                ]
              },
              {
                kind: "arg",
                path: "version"
              }
            ]
          }
        }
      ],
      args: [
        {
          name: "version",
          type: "u16"
        },
        {
          name: "amount",
          type: "u64"
        }
      ]
    },
    {
      name: "admin_mint_msol",
      discriminator: [140, 202, 57, 195, 97, 213, 168, 19],
      accounts: [
        {
          name: "token_program",
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "admin",
          signer: true
        },
        {
          name: "protocol_config_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  99,
                  111,
                  110,
                  102,
                  105,
                  103,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              },
              {
                kind: "arg",
                path: "version"
              }
            ]
          }
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "protocol_staking_admin_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  115,
                  116,
                  97,
                  107,
                  105,
                  110,
                  103,
                  95,
                  97,
                  100,
                  109,
                  105,
                  110,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              }
            ]
          }
        },
        {
          name: "address_lookup_program",
          docs: ["CHECK"],
          address: "AddressLookupTab1e1111111111111111111111111"
        },
        {
          name: "instruction_sysvar_account_info"
        },
        {
          name: "temp_sol_holder",
          docs: ["CHECK"],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  116,
                  101,
                  109,
                  112,
                  95,
                  115,
                  111,
                  108,
                  95,
                  104,
                  111,
                  108,
                  100,
                  101,
                  114
                ]
              },
              {
                kind: "arg",
                path: "version"
              }
            ]
          }
        }
      ],
      args: [
        {
          name: "version",
          type: "u16"
        },
        {
          name: "amount",
          type: "u64"
        }
      ]
    },
    {
      name: "admin_repay_sol",
      discriminator: [136, 61, 48, 232, 166, 26, 207, 46],
      accounts: [
        {
          name: "token_program",
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "admin",
          signer: true
        },
        {
          name: "protocol_config_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  99,
                  111,
                  110,
                  102,
                  105,
                  103,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              },
              {
                kind: "arg",
                path: "version"
              }
            ]
          }
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "protocol_staking_admin_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  115,
                  116,
                  97,
                  107,
                  105,
                  110,
                  103,
                  95,
                  97,
                  100,
                  109,
                  105,
                  110,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              }
            ]
          }
        },
        {
          name: "address_lookup_program",
          docs: ["CHECK"],
          address: "AddressLookupTab1e1111111111111111111111111"
        },
        {
          name: "instruction_sysvar_account_info"
        },
        {
          name: "temp_sol_holder",
          docs: ["CHECK"],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  116,
                  101,
                  109,
                  112,
                  95,
                  115,
                  111,
                  108,
                  95,
                  104,
                  111,
                  108,
                  100,
                  101,
                  114
                ]
              },
              {
                kind: "arg",
                path: "version"
              }
            ]
          }
        }
      ],
      args: [
        {
          name: "version",
          type: "u16"
        },
        {
          name: "amount",
          type: "u64"
        }
      ]
    },
    {
      name: "admin_unstake_msol",
      discriminator: [253, 218, 141, 252, 40, 9, 7, 154],
      accounts: [
        {
          name: "token_program",
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "admin",
          signer: true
        },
        {
          name: "protocol_config_state",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  99,
                  111,
                  110,
                  102,
                  105,
                  103,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              },
              {
                kind: "arg",
                path: "version"
              }
            ]
          }
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "protocol_staking_admin_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  115,
                  116,
                  97,
                  107,
                  105,
                  110,
                  103,
                  95,
                  97,
                  100,
                  109,
                  105,
                  110,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              }
            ]
          }
        },
        {
          name: "msol_ticket",
          docs: ["CHECK"],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  109,
                  115,
                  111,
                  108,
                  95,
                  116,
                  105,
                  99,
                  107,
                  101,
                  116,
                  95,
                  97,
                  99,
                  99
                ]
              },
              {
                kind: "account",
                path: "protocol_config_state"
              },
              {
                kind: "arg",
                path: "ticket_number"
              }
            ]
          }
        },
        {
          name: "msol_mint",
          address: "mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So"
        },
        {
          name: "msol_ticket_sol_spent",
          docs: ["CHECK"],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  109,
                  115,
                  111,
                  108,
                  95,
                  116,
                  105,
                  99,
                  107,
                  101,
                  116,
                  95,
                  97,
                  99,
                  99,
                  95,
                  115,
                  111,
                  108,
                  95,
                  115,
                  112,
                  101,
                  110,
                  116
                ]
              },
              {
                kind: "account",
                path: "protocol_config_state"
              },
              {
                kind: "arg",
                path: "ticket_number"
              }
            ]
          }
        }
      ],
      args: [
        {
          name: "version",
          type: "u16"
        },
        {
          name: "ticket_number",
          type: "u32"
        },
        {
          name: "amount",
          type: "u64"
        }
      ]
    },
    {
      name: "admin_update_standard_liquidity_pool_state",
      discriminator: [99, 228, 41, 63, 221, 244, 200, 199],
      accounts: [
        {
          name: "liquidity_pool_state",
          writable: true
        },
        {
          name: "protocol_config",
          writable: true
        },
        {
          name: "protocol_admin",
          signer: true
        },
        {
          name: "protocol_admin_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  102,
                  101,
                  101,
                  95,
                  97,
                  100,
                  109,
                  105,
                  110,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              }
            ]
          }
        }
      ],
      args: [
        {
          name: "update",
          type: {
            defined: {
              name: "AdminUpdateLiquidityPoolState"
            }
          }
        }
      ]
    },
    {
      name: "admin_withdraw_msol",
      discriminator: [249, 219, 141, 72, 210, 110, 216, 99],
      accounts: [
        {
          name: "token_program",
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "admin",
          signer: true
        },
        {
          name: "protocol_config_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  99,
                  111,
                  110,
                  102,
                  105,
                  103,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              },
              {
                kind: "arg",
                path: "version"
              }
            ]
          }
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "protocol_staking_admin_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  115,
                  116,
                  97,
                  107,
                  105,
                  110,
                  103,
                  95,
                  97,
                  100,
                  109,
                  105,
                  110,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              }
            ]
          }
        },
        {
          name: "address_lookup_program",
          docs: ["CHECK"],
          address: "AddressLookupTab1e1111111111111111111111111"
        },
        {
          name: "instruction_sysvar_account_info"
        },
        {
          name: "temp_sol_holder",
          docs: ["CHECK"],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  116,
                  101,
                  109,
                  112,
                  95,
                  115,
                  111,
                  108,
                  95,
                  104,
                  111,
                  108,
                  100,
                  101,
                  114
                ]
              },
              {
                kind: "arg",
                path: "version"
              }
            ]
          }
        }
      ],
      args: [
        {
          name: "version",
          type: "u16"
        },
        {
          name: "amount",
          type: "u64"
        }
      ]
    },
    {
      name: "admin_withdraw_transfer_fee",
      discriminator: [117, 79, 164, 203, 126, 72, 22, 246],
      accounts: [
        {
          name: "token_program"
        },
        {
          name: "mint"
        },
        {
          name: "receiver",
          writable: true
        },
        {
          name: "protocol_fee_admin_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  102,
                  101,
                  101,
                  95,
                  97,
                  100,
                  109,
                  105,
                  110,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              }
            ]
          }
        },
        {
          name: "admin",
          signer: true
        },
        {
          name: "protocol_config",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  99,
                  111,
                  110,
                  102,
                  105,
                  103,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              },
              {
                kind: "arg",
                path: "protocol_config_version"
              }
            ]
          }
        }
      ],
      args: [
        {
          name: "protocol_config_version",
          type: "u16"
        }
      ]
    },
    {
      name: "buy",
      discriminator: [102, 6, 61, 18, 1, 218, 235, 234],
      accounts: [
        {
          name: "token_a_program"
        },
        {
          name: "token_b_program"
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "liquidity_pool_state",
          writable: true
        },
        {
          name: "user",
          docs: ["CHECK"],
          writable: true,
          signer: true
        },
        {
          name: "token_a_mint",
          docs: ["CHECK"]
        },
        {
          name: "token_b_mint",
          docs: ["CHECK"]
        },
        {
          name: "user_token_a_vault",
          writable: true
        },
        {
          name: "user_token_b_vault",
          writable: true
        },
        {
          name: "token_a_vault",
          writable: true
        },
        {
          name: "token_b_vault",
          writable: true
        },
        {
          name: "protocol_config",
          writable: true
        },
        {
          name: "instruction_sysvar_account_info",
          docs: ["CHECK"],
          address: "Sysvar1nstructions1111111111111111111111111"
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: {
              name: "BuyParams"
            }
          }
        }
      ]
    },
    {
      name: "claim_standard_creator_trading_fee_protocol_fees",
      discriminator: [0, 201, 226, 228, 127, 45, 69, 110],
      accounts: [
        {
          name: "swap",
          accounts: [
            {
              name: "token_a_program"
            },
            {
              name: "token_b_program"
            },
            {
              name: "associated_token_program",
              address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
            },
            {
              name: "system_program",
              address: "11111111111111111111111111111111"
            },
            {
              name: "liquidity_pool_state",
              writable: true
            },
            {
              name: "user",
              docs: ["CHECK"],
              writable: true,
              signer: true
            },
            {
              name: "token_a_mint",
              docs: ["CHECK"]
            },
            {
              name: "token_b_mint",
              docs: ["CHECK"]
            },
            {
              name: "user_token_a_vault",
              writable: true
            },
            {
              name: "user_token_b_vault",
              writable: true
            },
            {
              name: "token_a_vault",
              writable: true
            },
            {
              name: "token_b_vault",
              writable: true
            },
            {
              name: "protocol_config",
              writable: true
            },
            {
              name: "instruction_sysvar_account_info",
              docs: ["CHECK"],
              address: "Sysvar1nstructions1111111111111111111111111"
            }
          ]
        },
        {
          name: "protocol_admin",
          signer: true
        },
        {
          name: "protocol_admin_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  102,
                  101,
                  101,
                  95,
                  97,
                  100,
                  109,
                  105,
                  110,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              }
            ]
          }
        }
      ],
      args: [
        {
          name: "amount",
          type: "u64"
        }
      ]
    },
    {
      name: "claim_standard_creator_trading_fees",
      discriminator: [165, 89, 221, 52, 170, 249, 34, 111],
      accounts: [
        {
          name: "token_a_program"
        },
        {
          name: "token_b_program"
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "liquidity_pool_state",
          writable: true
        },
        {
          name: "user",
          docs: ["CHECK"],
          writable: true,
          signer: true
        },
        {
          name: "token_a_mint",
          docs: ["CHECK"]
        },
        {
          name: "token_b_mint",
          docs: ["CHECK"]
        },
        {
          name: "user_token_a_vault",
          writable: true
        },
        {
          name: "user_token_b_vault",
          writable: true
        },
        {
          name: "token_a_vault",
          writable: true
        },
        {
          name: "token_b_vault",
          writable: true
        },
        {
          name: "protocol_config",
          writable: true
        },
        {
          name: "instruction_sysvar_account_info",
          docs: ["CHECK"],
          address: "Sysvar1nstructions1111111111111111111111111"
        }
      ],
      args: [
        {
          name: "amount",
          type: "u64"
        }
      ]
    },
    {
      name: "claim_standard_protocol_trading_fees",
      discriminator: [84, 206, 140, 245, 63, 212, 64, 237],
      accounts: [
        {
          name: "swap",
          accounts: [
            {
              name: "token_a_program"
            },
            {
              name: "token_b_program"
            },
            {
              name: "associated_token_program",
              address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
            },
            {
              name: "system_program",
              address: "11111111111111111111111111111111"
            },
            {
              name: "liquidity_pool_state",
              writable: true
            },
            {
              name: "user",
              docs: ["CHECK"],
              writable: true,
              signer: true
            },
            {
              name: "token_a_mint",
              docs: ["CHECK"]
            },
            {
              name: "token_b_mint",
              docs: ["CHECK"]
            },
            {
              name: "user_token_a_vault",
              writable: true
            },
            {
              name: "user_token_b_vault",
              writable: true
            },
            {
              name: "token_a_vault",
              writable: true
            },
            {
              name: "token_b_vault",
              writable: true
            },
            {
              name: "protocol_config",
              writable: true
            },
            {
              name: "instruction_sysvar_account_info",
              docs: ["CHECK"],
              address: "Sysvar1nstructions1111111111111111111111111"
            }
          ]
        },
        {
          name: "protocol_admin",
          signer: true
        },
        {
          name: "protocol_admin_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  102,
                  101,
                  101,
                  95,
                  97,
                  100,
                  109,
                  105,
                  110,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              }
            ]
          }
        }
      ],
      args: [
        {
          name: "amount",
          type: "u64"
        }
      ]
    },
    {
      name: "claim_standard_reflection_trading_fees",
      discriminator: [70, 148, 37, 147, 102, 20, 30, 23],
      accounts: [
        {
          name: "swap",
          accounts: [
            {
              name: "token_a_program"
            },
            {
              name: "token_b_program"
            },
            {
              name: "associated_token_program",
              address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
            },
            {
              name: "system_program",
              address: "11111111111111111111111111111111"
            },
            {
              name: "liquidity_pool_state",
              writable: true
            },
            {
              name: "user",
              docs: ["CHECK"],
              writable: true,
              signer: true
            },
            {
              name: "token_a_mint",
              docs: ["CHECK"]
            },
            {
              name: "token_b_mint",
              docs: ["CHECK"]
            },
            {
              name: "user_token_a_vault",
              writable: true
            },
            {
              name: "user_token_b_vault",
              writable: true
            },
            {
              name: "token_a_vault",
              writable: true
            },
            {
              name: "token_b_vault",
              writable: true
            },
            {
              name: "protocol_config",
              writable: true
            },
            {
              name: "instruction_sysvar_account_info",
              docs: ["CHECK"],
              address: "Sysvar1nstructions1111111111111111111111111"
            }
          ]
        },
        {
          name: "protocol_admin",
          signer: true
        },
        {
          name: "protocol_admin_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  102,
                  101,
                  101,
                  95,
                  97,
                  100,
                  109,
                  105,
                  110,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              }
            ]
          }
        }
      ],
      args: [
        {
          name: "amount",
          type: "u64"
        }
      ]
    },
    {
      name: "close_protocol_lookup_table",
      discriminator: [79, 72, 48, 39, 119, 3, 42, 116],
      accounts: [
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "address_lookup_program",
          docs: ["CHECK"],
          address: "AddressLookupTab1e1111111111111111111111111"
        },
        {
          name: "authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [97, 117, 116, 104, 111, 114, 105, 116, 121]
              }
            ]
          }
        },
        {
          name: "lookup_table",
          writable: true
        },
        {
          name: "protocol_owner_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  111,
                  119,
                  110,
                  101,
                  114,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              }
            ]
          }
        },
        {
          name: "current_owner",
          signer: true
        }
      ],
      args: [
        {
          name: "version",
          type: "u64"
        }
      ]
    },
    {
      name: "create_or_update_protocol_fee_admin",
      discriminator: [21, 126, 176, 20, 85, 111, 53, 31],
      accounts: [
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "current_owner",
          signer: true
        },
        {
          name: "protocol_owner_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  111,
                  119,
                  110,
                  101,
                  114,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              }
            ]
          }
        },
        {
          name: "new_admin",
          signer: true
        },
        {
          name: "protocol_fee_admin_state",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  102,
                  101,
                  101,
                  95,
                  97,
                  100,
                  109,
                  105,
                  110,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              }
            ]
          }
        }
      ],
      args: []
    },
    {
      name: "create_or_update_protocol_owner",
      discriminator: [170, 124, 128, 40, 48, 105, 139, 148],
      accounts: [
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "current_owner",
          signer: true
        },
        {
          name: "new_owner",
          signer: true
        },
        {
          name: "protocol_owner_state",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  111,
                  119,
                  110,
                  101,
                  114,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              }
            ]
          }
        }
      ],
      args: []
    },
    {
      name: "create_or_update_protocol_staking_admin",
      discriminator: [4, 172, 196, 213, 120, 50, 30, 137],
      accounts: [
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "current_owner",
          signer: true
        },
        {
          name: "protocol_owner_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  111,
                  119,
                  110,
                  101,
                  114,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              }
            ]
          }
        },
        {
          name: "new_admin",
          signer: true
        },
        {
          name: "protocol_staking_admin_state",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  115,
                  116,
                  97,
                  107,
                  105,
                  110,
                  103,
                  95,
                  97,
                  100,
                  109,
                  105,
                  110,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              }
            ]
          }
        }
      ],
      args: []
    },
    {
      name: "create_protocol_config",
      discriminator: [115, 114, 24, 111, 14, 53, 113, 254],
      accounts: [
        {
          name: "token_program",
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "owner",
          signer: true
        },
        {
          name: "protocol_config_state",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  99,
                  111,
                  110,
                  102,
                  105,
                  103,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              },
              {
                kind: "arg",
                path: "version"
              }
            ]
          }
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "protocol_owner_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  111,
                  119,
                  110,
                  101,
                  114,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              }
            ]
          }
        },
        {
          name: "msol_token_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "protocol_config_state"
              },
              {
                kind: "account",
                path: "token_program"
              },
              {
                kind: "account",
                path: "msol_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "msol_mint",
          docs: ["CHECK"],
          address: "mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So"
        }
      ],
      args: [
        {
          name: "version",
          type: "u16"
        },
        {
          name: "params",
          type: {
            defined: {
              name: "ProtocolConfigParams"
            }
          }
        }
      ]
    },
    {
      name: "create_protocol_lookup_table",
      discriminator: [249, 3, 99, 153, 168, 241, 243, 228],
      accounts: [
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "address_lookup_program",
          docs: ["CHECK"],
          address: "AddressLookupTab1e1111111111111111111111111"
        },
        {
          name: "authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [97, 117, 116, 104, 111, 114, 105, 116, 121]
              }
            ]
          }
        },
        {
          name: "lookup_table",
          writable: true
        },
        {
          name: "protocol_owner_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  111,
                  119,
                  110,
                  101,
                  114,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              }
            ]
          }
        },
        {
          name: "current_owner",
          signer: true
        }
      ],
      args: [
        {
          name: "version",
          type: "u64"
        }
      ]
    },
    {
      name: "create_standard_liquidity_pool",
      discriminator: [42, 43, 126, 56, 231, 10, 208, 53],
      accounts: [
        {
          name: "token_program",
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "user",
          signer: true
        },
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "token_a_mint"
        },
        {
          name: "token_b_mint",
          address: "So11111111111111111111111111111111111111112"
        },
        {
          name: "user_token_a_vault",
          writable: true
        },
        {
          name: "token_a_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "protocol_config"
              },
              {
                kind: "account",
                path: "token_a_program"
              },
              {
                kind: "account",
                path: "token_a_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "token_b_vault",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "protocol_config"
              },
              {
                kind: "account",
                path: "token_program"
              },
              {
                kind: "account",
                path: "token_b_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "liquidity_pool_state",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  108,
                  105,
                  113,
                  117,
                  105,
                  100,
                  105,
                  116,
                  121,
                  95,
                  112,
                  111,
                  111,
                  108,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              },
              {
                kind: "account",
                path: "token_a_mint"
              },
              {
                kind: "account",
                path: "token_b_mint"
              }
            ]
          }
        },
        {
          name: "protocol_config",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  99,
                  111,
                  110,
                  102,
                  105,
                  103,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              },
              {
                kind: "arg",
                path: "protocol_config_version"
              }
            ]
          }
        },
        {
          name: "token_a_program"
        }
      ],
      args: [
        {
          name: "protocol_config_version",
          type: "u16"
        },
        {
          name: "params",
          type: {
            defined: {
              name: "CreateStandardLiquidityPoolParams"
            }
          }
        }
      ]
    },
    {
      name: "deactivate_protocol_lookup_table",
      discriminator: [218, 12, 88, 58, 150, 44, 152, 72],
      accounts: [
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "address_lookup_program",
          docs: ["CHECK"],
          address: "AddressLookupTab1e1111111111111111111111111"
        },
        {
          name: "authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [97, 117, 116, 104, 111, 114, 105, 116, 121]
              }
            ]
          }
        },
        {
          name: "lookup_table",
          writable: true
        },
        {
          name: "protocol_owner_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  111,
                  119,
                  110,
                  101,
                  114,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              }
            ]
          }
        },
        {
          name: "current_owner",
          signer: true
        }
      ],
      args: [
        {
          name: "version",
          type: "u64"
        }
      ]
    },
    {
      name: "extend_protocol_lookup_table",
      discriminator: [7, 227, 198, 1, 107, 113, 31, 88],
      accounts: [
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "address_lookup_program",
          docs: ["CHECK"],
          address: "AddressLookupTab1e1111111111111111111111111"
        },
        {
          name: "authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [97, 117, 116, 104, 111, 114, 105, 116, 121]
              }
            ]
          }
        },
        {
          name: "lookup_table",
          writable: true
        },
        {
          name: "protocol_owner_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  111,
                  119,
                  110,
                  101,
                  114,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              }
            ]
          }
        },
        {
          name: "current_owner",
          signer: true
        }
      ],
      args: [
        {
          name: "version",
          type: "u64"
        },
        {
          name: "addresses",
          type: {
            vec: "pubkey"
          }
        }
      ]
    },
    {
      name: "initialize_protocol_lending",
      discriminator: [0, 205, 237, 240, 27, 79, 27, 59],
      accounts: [
        {
          name: "token_program",
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "payer",
          writable: true,
          signer: true
        },
        {
          name: "admin",
          signer: true
        },
        {
          name: "protocol_config_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  99,
                  111,
                  110,
                  102,
                  105,
                  103,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              },
              {
                kind: "arg",
                path: "version"
              }
            ]
          }
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "protocol_staking_admin_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  115,
                  116,
                  97,
                  107,
                  105,
                  110,
                  103,
                  95,
                  97,
                  100,
                  109,
                  105,
                  110,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              }
            ]
          }
        },
        {
          name: "address_lookup_program",
          docs: ["CHECK"],
          address: "AddressLookupTab1e1111111111111111111111111"
        },
        {
          name: "instruction_sysvar_account_info"
        },
        {
          name: "temp_sol_holder",
          docs: ["CHECK"],
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  116,
                  101,
                  109,
                  112,
                  95,
                  115,
                  111,
                  108,
                  95,
                  104,
                  111,
                  108,
                  100,
                  101,
                  114
                ]
              },
              {
                kind: "arg",
                path: "version"
              }
            ]
          }
        }
      ],
      args: [
        {
          name: "version",
          type: "u16"
        },
        {
          name: "recent_slot",
          type: "u64"
        }
      ]
    },
    {
      name: "remaining_accounts_stub",
      discriminator: [32, 143, 83, 94, 23, 34, 59, 239],
      accounts: [
        {
          name: "create_protocol_config_remaining_accounts",
          accounts: [
            {
              name: "protocol_lending_lookup_table",
              docs: ["CHECK"],
              writable: true
            },
            {
              name: "kamino_lending_user_metadata",
              docs: ["CHECK"],
              writable: true
            },
            {
              name: "kamino_lending_referrer_user_metadata",
              docs: ["CHECK"]
            },
            {
              name: "rent",
              address: "SysvarRent111111111111111111111111111111111"
            },
            {
              name: "kamino_lending_program",
              docs: ["CHECK"]
            },
            {
              name: "kamino_lending_obligation",
              docs: ["CHECK"],
              writable: true
            },
            {
              name: "kamino_lending_main_market",
              docs: ["CHECK"]
            },
            {
              name: "kamino_reserve_msol_state",
              docs: ["CHECK"],
              writable: true
            },
            {
              name: "kamino_reserve_sol_state",
              docs: ["CHECK"],
              writable: true
            },
            {
              name: "kamino_scope_prices",
              docs: ["CHECK"]
            },
            {
              name: "msol_liquid_staking",
              accounts: [
                {
                  name: "marinade_liquid_staking_state",
                  docs: ["#1 - Marinade Liquid Staking State", "CHECK"],
                  writable: true
                },
                {
                  name: "msol_mint",
                  docs: ["#2 - mSOL Mint", "CHECK"],
                  writable: true
                },
                {
                  name: "marinade_sol_leg_account",
                  docs: ["#3 - Marinade SOL Leg Account", "CHECK"],
                  writable: true
                },
                {
                  name: "marinade_msol_leg_account",
                  docs: ["#4 - Marinade mSOL Leg Account", "CHECK"],
                  writable: true
                },
                {
                  name: "marinade_msol_leg_authority",
                  docs: ["#5 - Marinade mSOL Leg Authority", "CHECK"]
                },
                {
                  name: "marinade_reserve_sol_pda",
                  docs: ["#6 - Marinade Reserve SOL PDA", "CHECK"],
                  writable: true
                },
                {
                  name: "transfer_from",
                  docs: ["#7 - Transfer From", "CHECK"],
                  writable: true
                },
                {
                  name: "mint_to",
                  docs: ["#8 - Mint To", "CHECK"],
                  writable: true
                },
                {
                  name: "marinade_msol_mint_authority",
                  docs: ["#9 - Marinade mSOL Mint Authority", "CHECK"]
                },
                {
                  name: "system_program",
                  docs: ["#10 - System Program"],
                  address: "11111111111111111111111111111111"
                },
                {
                  name: "token_program",
                  docs: ["#11 - Token Program"],
                  address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
                },
                {
                  name: "marinade_finance_program",
                  docs: ["#12 - Marinade Finance Program", "CHECK"]
                },
                {
                  name: "referral_state",
                  docs: ["#13 - Referral State", "CHECK"],
                  writable: true
                },
                {
                  name: "msol_token_partner_account",
                  docs: ["#14 - mSOL Token Partner Account", "CHECK"],
                  writable: true
                }
              ]
            },
            {
              name: "msol_staking_program",
              docs: ["CHECK"]
            },
            {
              name: "kamino_deposit_with_farm",
              accounts: [
                {
                  name: "deposit_accounts_owner",
                  docs: ["#1 - Deposit Accounts Owner"],
                  writable: true
                },
                {
                  name: "accounts",
                  accounts: [
                    {
                      name: "deposit_accounts_obligation",
                      docs: ["#2 - Deposit Accounts Obligation"],
                      writable: true
                    },
                    {
                      name: "deposit_accounts_lending_market",
                      docs: ["#3 - Deposit Accounts Lending Market"]
                    },
                    {
                      name: "deposit_accounts_lending_market_authority",
                      docs: ["#4 - Deposit Accounts Lending Market Authority"]
                    },
                    {
                      name: "deposit_accounts_reserve",
                      docs: ["#5 - Deposit Accounts Reserve"],
                      writable: true
                    },
                    {
                      name: "deposit_accounts_reserve_liquidity_mint",
                      docs: ["#6 - Deposit Accounts Reserve Liquidity Mint"]
                    },
                    {
                      name: "deposit_accounts_reserve_liquidity_supply",
                      docs: ["#7 - Deposit Accounts Reserve Liquidity Supply"],
                      writable: true
                    },
                    {
                      name: "deposit_accounts_reserve_collateral_mint",
                      docs: ["#8 - Deposit Accounts Reserve Collateral Mint"],
                      writable: true
                    },
                    {
                      name: "deposit_accounts_reserve_destination_deposit_collateral",
                      docs: [
                        "#9 - Deposit Accounts Reserve Destination Deposit Collateral"
                      ],
                      writable: true
                    },
                    {
                      name: "deposit_accounts_user_source_liquidity",
                      docs: ["#10 - Deposit Accounts User Source Liquidity"],
                      writable: true
                    },
                    {
                      name: "deposit_accounts_placeholder_user_destination_collateral",
                      docs: [
                        "#11 - Deposit Accounts Placeholder User Destination Collateral"
                      ]
                    },
                    {
                      name: "deposit_accounts_collateral_token_program",
                      docs: ["#12 - Deposit Accounts Collateral Token Program"]
                    },
                    {
                      name: "deposit_accounts_liquidity_token_program",
                      docs: ["#13 - Deposit Accounts Liquidity Token Program"]
                    },
                    {
                      name: "deposit_accounts_instruction_sysvar_account",
                      docs: ["#14 - Deposit Accounts Instruction Sysvar Account"]
                    },
                    {
                      name: "farms_accounts_obligation_farm_user_state",
                      docs: ["#15 - Farms Accounts Obligation Farm User State"]
                    },
                    {
                      name: "farms_accounts_reserve_farm_state",
                      docs: ["#16 - Farms Accounts Reserve Farm State"]
                    },
                    {
                      name: "farms_program",
                      docs: ["#17 - Farms Program"]
                    }
                  ]
                }
              ]
            },
            {
              name: "kamino_borrow_with_farm",
              accounts: [
                {
                  name: "borrow_accounts_owner",
                  docs: ["#1 - Borrow Accounts Owner"],
                  writable: true
                },
                {
                  name: "accounts",
                  accounts: [
                    {
                      name: "borrow_accounts_obligation",
                      docs: ["#2 - Borrow Accounts Obligation"],
                      writable: true
                    },
                    {
                      name: "borrow_accounts_lending_market",
                      docs: ["#3 - Borrow Accounts Lending Market"]
                    },
                    {
                      name: "borrow_accounts_lending_market_authority",
                      docs: ["#4 - Borrow Accounts Lending Market Authority"]
                    },
                    {
                      name: "borrow_accounts_borrow_reserve",
                      docs: ["#5 - Borrow Accounts Borrow Reserve"],
                      writable: true
                    },
                    {
                      name: "borrow_accounts_borrow_reserve_liquidity_mint",
                      docs: ["#6 - Borrow Accounts Borrow Reserve Liquidity Mint"]
                    },
                    {
                      name: "borrow_accounts_reserve_source_liquidity",
                      docs: ["#7 - Borrow Accounts Reserve Source Liquidity"],
                      writable: true
                    },
                    {
                      name: "borrow_accounts_borrow_reserve_liquidity_fee_receiver",
                      docs: [
                        "#8 - Borrow Accounts Borrow Reserve Liquidity Fee Receiver"
                      ],
                      writable: true
                    },
                    {
                      name: "borrow_accounts_user_destination_liquidity",
                      docs: ["#9 - Borrow Accounts User Destination Liquidity"],
                      writable: true
                    },
                    {
                      name: "borrow_accounts_referrer_token_state",
                      docs: ["#10 - Borrow Accounts Referrer Token State"]
                    },
                    {
                      name: "borrow_accounts_token_program",
                      docs: ["#11 - Borrow Accounts Token Program"]
                    },
                    {
                      name: "borrow_accounts_instruction_sysvar_account",
                      docs: ["#12 - Borrow Accounts Instruction Sysvar Account"]
                    },
                    {
                      name: "farms_accounts_obligation_farm_user_state",
                      docs: ["#13 - Farms Accounts Obligation Farm User State"]
                    },
                    {
                      name: "farms_accounts_reserve_farm_state",
                      docs: ["#14 - Farms Accounts Reserve Farm State"]
                    },
                    {
                      name: "farms_program",
                      docs: ["#15 - Farms Program"]
                    }
                  ]
                }
              ]
            },
            {
              name: "kamino_repay_with_farm",
              accounts: [
                {
                  name: "repay_accounts_owner",
                  docs: ["#1 - Repay Accounts Owner"],
                  writable: true
                },
                {
                  name: "accounts",
                  accounts: [
                    {
                      name: "repay_accounts_obligation",
                      docs: ["#2 - Repay Accounts Obligation"],
                      writable: true
                    },
                    {
                      name: "repay_accounts_lending_market",
                      docs: ["#3 - Repay Accounts Lending Market"]
                    },
                    {
                      name: "repay_accounts_repay_reserve",
                      docs: ["#4 - Repay Accounts Repay Reserve"],
                      writable: true
                    },
                    {
                      name: "repay_accounts_reserve_liquidity_mint",
                      docs: ["#5 - Repay Accounts Reserve Liquidity Mint"]
                    },
                    {
                      name: "repay_accounts_reserve_destination_liquidity",
                      docs: ["#6 - Repay Accounts Reserve Destination Liquidity"],
                      writable: true
                    },
                    {
                      name: "repay_accounts_user_source_liquidity",
                      docs: ["#7 - Repay Accounts User Source Liquidity"],
                      writable: true
                    },
                    {
                      name: "repay_accounts_token_program",
                      docs: ["#8 - Repay Accounts Token Program"]
                    },
                    {
                      name: "repay_accounts_instruction_sysvar_account",
                      docs: ["#9 - Repay Accounts Instruction Sysvar Account"]
                    },
                    {
                      name: "farms_accounts_obligation_farm_user_state",
                      docs: ["#10 - Farms Accounts Obligation Farm User State"]
                    },
                    {
                      name: "farms_accounts_reserve_farm_state",
                      docs: ["#11 - Farms Accounts Reserve Farm State"]
                    },
                    {
                      name: "lending_market_authority",
                      docs: ["#12 - Lending Market Authority"]
                    },
                    {
                      name: "farms_program",
                      docs: ["#13 - Farms Program"]
                    }
                  ]
                }
              ]
            },
            {
              name: "associated_token_program",
              docs: ["CHECK"]
            },
            {
              name: "temp_sol_holder",
              docs: ["CHECK"],
              writable: true
            },
            {
              name: "chainlink_program",
              docs: ["CHECK"]
            },
            {
              name: "chainlink_sol_usd_price_feed",
              docs: ["CHECK"]
            },
            {
              name: "clock",
              address: "SysvarC1ock11111111111111111111111111111111"
            },
            {
              name: "kamino_withdraw_with_farm",
              accounts: [
                {
                  name: "withdraw_accounts_owner",
                  docs: ["#1 - Withdraw Accounts Owner", "CHECK"]
                },
                {
                  name: "accounts",
                  accounts: [
                    {
                      name: "withdraw_accounts_obligation",
                      docs: ["#2 - Withdraw Accounts Obligation", "CHECK"],
                      writable: true
                    },
                    {
                      name: "withdraw_accounts_lending_market",
                      docs: ["#3 - Withdraw Accounts Lending Market", "CHECK"]
                    },
                    {
                      name: "withdraw_accounts_lending_market_authority",
                      docs: ["#4 - Withdraw Accounts Lending Market Authority", "CHECK"]
                    },
                    {
                      name: "withdraw_accounts_withdraw_reserve",
                      docs: ["#5 - Withdraw Accounts Withdraw Reserve", "CHECK"],
                      writable: true
                    },
                    {
                      name: "withdraw_accounts_reserve_liquidity_mint",
                      docs: ["#6 - Withdraw Accounts Reserve Liquidity Mint", "CHECK"]
                    },
                    {
                      name: "withdraw_accounts_reserve_source_collateral",
                      docs: [
                        "#7 - Withdraw Accounts Reserve Source Collateral",
                        "CHECK"
                      ],
                      writable: true
                    },
                    {
                      name: "withdraw_accounts_reserve_collateral_mint",
                      docs: ["#8 - Withdraw Accounts Reserve Collateral Mint", "CHECK"],
                      writable: true
                    },
                    {
                      name: "withdraw_accounts_reserve_liquidity_supply",
                      docs: ["#9 - Withdraw Accounts Reserve Liquidity Supply", "CHECK"],
                      writable: true
                    },
                    {
                      name: "withdraw_accounts_user_destination_liquidity",
                      docs: [
                        "#10 - Withdraw Accounts User Destination Liquidity",
                        "CHECK"
                      ],
                      writable: true
                    },
                    {
                      name: "withdraw_accounts_placeholder_user_destination_collateral",
                      docs: [
                        "#11 - Withdraw Accounts Placeholder User Destination Collateral",
                        "CHECK"
                      ]
                    },
                    {
                      name: "withdraw_accounts_collateral_token_program",
                      docs: ["#12 - Withdraw Accounts Collateral Token Program", "CHECK"]
                    },
                    {
                      name: "withdraw_accounts_liquidity_token_program",
                      docs: ["#13 - Withdraw Accounts Liquidity Token Program", "CHECK"]
                    },
                    {
                      name: "withdraw_accounts_instruction_sysvar_account",
                      docs: [
                        "#14 - Withdraw Accounts Instruction Sysvar Account",
                        "CHECK"
                      ]
                    },
                    {
                      name: "farms_accounts_obligation_farm_user_state",
                      docs: ["#15 - Farms Accounts Obligation Farm User State", "CHECK"],
                      writable: true
                    },
                    {
                      name: "farms_accounts_reserve_farm_state",
                      docs: ["#16 - Farms Accounts Reserve Farm State", "CHECK"],
                      writable: true
                    },
                    {
                      name: "farms_program",
                      docs: ["#17 - Farms Program", "CHECK"]
                    }
                  ]
                }
              ]
            },
            {
              name: "temp_sol_holder_msol_vault",
              docs: ["CHECK"],
              writable: true
            }
          ]
        },
        {
          name: "kamino_lending_user_metadata",
          accounts: [
            {
              name: "owner",
              signer: true
            },
            {
              name: "fee_payer",
              writable: true,
              signer: true
            },
            {
              name: "user_metadata",
              docs: ["CHECK"],
              writable: true
            },
            {
              name: "referrer_user_metadata",
              docs: ["CHECK"]
            },
            {
              name: "rent",
              address: "SysvarRent111111111111111111111111111111111"
            },
            {
              name: "system_program",
              address: "11111111111111111111111111111111"
            },
            {
              name: "kamino_lending_program",
              docs: ["CHECK"]
            }
          ]
        },
        {
          name: "kamino_lending_init_obligation",
          accounts: [
            {
              name: "obligation_owner",
              signer: true
            },
            {
              name: "fee_payer",
              writable: true,
              signer: true
            },
            {
              name: "obligation",
              docs: ["CHECK"],
              writable: true
            },
            {
              name: "lending_market",
              docs: ["CHECK"]
            },
            {
              name: "seed1_account",
              docs: ["CHECK"]
            },
            {
              name: "seed2_account",
              docs: ["CHECK"]
            },
            {
              name: "owner_user_metadata",
              docs: ["CHECK"]
            },
            {
              name: "rent",
              address: "SysvarRent111111111111111111111111111111111"
            },
            {
              name: "system_program",
              address: "11111111111111111111111111111111"
            }
          ]
        },
        {
          name: "kamino_lending_refresh_reserve",
          accounts: [
            {
              name: "reserve",
              writable: true
            },
            {
              name: "lending_market"
            },
            {
              name: "pyth_oracle"
            },
            {
              name: "switchboard_price_oracle"
            },
            {
              name: "switchboard_twap_oracle"
            },
            {
              name: "scope_prices"
            }
          ]
        },
        {
          name: "kamino_lending_refresh_obligation",
          accounts: [
            {
              name: "lending_market"
            },
            {
              name: "obligation",
              writable: true
            }
          ]
        },
        {
          name: "refresh_msol_price_list",
          accounts: [
            {
              name: "oracle_prices",
              docs: ["CHECK"],
              writable: true
            },
            {
              name: "oracle_mappings",
              docs: ["CHECK"]
            },
            {
              name: "oracle_twaps",
              docs: ["CHECK"],
              writable: true
            },
            {
              name: "instruction_sysvar_account_info"
            },
            {
              name: "marinade_liquid_staking_state",
              docs: ["CHECK"]
            },
            {
              name: "pythnet_custody_price_sol_account",
              docs: ["CHECK"]
            },
            {
              name: "marinade_liquid_staking_state_2",
              docs: ["CHECK"]
            },
            {
              name: "pythnet_custody_price_sol_account_2",
              docs: ["CHECK"]
            }
          ]
        },
        {
          name: "msol_liquid_staking",
          accounts: [
            {
              name: "marinade_liquid_staking_state",
              docs: ["#1 - Marinade Liquid Staking State", "CHECK"],
              writable: true
            },
            {
              name: "msol_mint",
              docs: ["#2 - mSOL Mint", "CHECK"],
              writable: true
            },
            {
              name: "marinade_sol_leg_account",
              docs: ["#3 - Marinade SOL Leg Account", "CHECK"],
              writable: true
            },
            {
              name: "marinade_msol_leg_account",
              docs: ["#4 - Marinade mSOL Leg Account", "CHECK"],
              writable: true
            },
            {
              name: "marinade_msol_leg_authority",
              docs: ["#5 - Marinade mSOL Leg Authority", "CHECK"]
            },
            {
              name: "marinade_reserve_sol_pda",
              docs: ["#6 - Marinade Reserve SOL PDA", "CHECK"],
              writable: true
            },
            {
              name: "transfer_from",
              docs: ["#7 - Transfer From", "CHECK"],
              writable: true
            },
            {
              name: "mint_to",
              docs: ["#8 - Mint To", "CHECK"],
              writable: true
            },
            {
              name: "marinade_msol_mint_authority",
              docs: ["#9 - Marinade mSOL Mint Authority", "CHECK"]
            },
            {
              name: "system_program",
              docs: ["#10 - System Program"],
              address: "11111111111111111111111111111111"
            },
            {
              name: "token_program",
              docs: ["#11 - Token Program"],
              address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            },
            {
              name: "marinade_finance_program",
              docs: ["#12 - Marinade Finance Program", "CHECK"]
            },
            {
              name: "referral_state",
              docs: ["#13 - Referral State", "CHECK"],
              writable: true
            },
            {
              name: "msol_token_partner_account",
              docs: ["#14 - mSOL Token Partner Account", "CHECK"],
              writable: true
            }
          ]
        },
        {
          name: "msol_liquid_staking_cpi",
          accounts: [
            {
              name: "marinade_liquid_staking_state",
              docs: ["#1 - Marinade Liquid Staking State", "CHECK"],
              writable: true
            },
            {
              name: "msol_mint",
              docs: ["#2 - mSOL Mint", "CHECK"],
              writable: true
            },
            {
              name: "marinade_sol_leg_account",
              docs: ["#3 - Marinade SOL Leg Account", "CHECK"],
              writable: true
            },
            {
              name: "marinade_msol_leg_account",
              docs: ["#4 - Marinade mSOL Leg Account", "CHECK"],
              writable: true
            },
            {
              name: "marinade_msol_leg_authority",
              docs: ["#5 - Marinade mSOL Leg Authority", "CHECK"]
            },
            {
              name: "marinade_reserve_sol_pda",
              docs: ["#6 - Marinade Reserve SOL PDA", "CHECK"],
              writable: true
            },
            {
              name: "transfer_from",
              docs: ["#7 - Transfer From", "CHECK"],
              writable: true,
              signer: true
            },
            {
              name: "mint_to",
              docs: ["#8 - Mint To", "CHECK"],
              writable: true
            },
            {
              name: "marinade_msol_mint_authority",
              docs: ["#9 - Marinade mSOL Mint Authority", "CHECK"]
            },
            {
              name: "system_program",
              docs: ["#10 - System Program"],
              address: "11111111111111111111111111111111"
            },
            {
              name: "token_program",
              docs: ["#11 - Token Program"],
              address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            },
            {
              name: "marinade_finance_program",
              docs: ["#12 - Marinade Finance Program", "CHECK"]
            },
            {
              name: "referral_state",
              docs: ["#13 - Referral State", "CHECK"],
              writable: true
            },
            {
              name: "msol_token_partner_account",
              docs: ["#14 - mSOL Token Partner Account", "CHECK"],
              writable: true
            }
          ]
        },
        {
          name: "kamino_deposit_with_farm",
          accounts: [
            {
              name: "deposit_accounts_obligation",
              docs: ["#2 - Deposit Accounts Obligation"],
              writable: true
            },
            {
              name: "deposit_accounts_lending_market",
              docs: ["#3 - Deposit Accounts Lending Market"]
            },
            {
              name: "deposit_accounts_lending_market_authority",
              docs: ["#4 - Deposit Accounts Lending Market Authority"]
            },
            {
              name: "deposit_accounts_reserve",
              docs: ["#5 - Deposit Accounts Reserve"],
              writable: true
            },
            {
              name: "deposit_accounts_reserve_liquidity_mint",
              docs: ["#6 - Deposit Accounts Reserve Liquidity Mint"]
            },
            {
              name: "deposit_accounts_reserve_liquidity_supply",
              docs: ["#7 - Deposit Accounts Reserve Liquidity Supply"],
              writable: true
            },
            {
              name: "deposit_accounts_reserve_collateral_mint",
              docs: ["#8 - Deposit Accounts Reserve Collateral Mint"],
              writable: true
            },
            {
              name: "deposit_accounts_reserve_destination_deposit_collateral",
              docs: ["#9 - Deposit Accounts Reserve Destination Deposit Collateral"],
              writable: true
            },
            {
              name: "deposit_accounts_user_source_liquidity",
              docs: ["#10 - Deposit Accounts User Source Liquidity"],
              writable: true
            },
            {
              name: "deposit_accounts_placeholder_user_destination_collateral",
              docs: [
                "#11 - Deposit Accounts Placeholder User Destination Collateral"
              ]
            },
            {
              name: "deposit_accounts_collateral_token_program",
              docs: ["#12 - Deposit Accounts Collateral Token Program"]
            },
            {
              name: "deposit_accounts_liquidity_token_program",
              docs: ["#13 - Deposit Accounts Liquidity Token Program"]
            },
            {
              name: "deposit_accounts_instruction_sysvar_account",
              docs: ["#14 - Deposit Accounts Instruction Sysvar Account"]
            },
            {
              name: "farms_accounts_obligation_farm_user_state",
              docs: ["#15 - Farms Accounts Obligation Farm User State"]
            },
            {
              name: "farms_accounts_reserve_farm_state",
              docs: ["#16 - Farms Accounts Reserve Farm State"]
            },
            {
              name: "farms_program",
              docs: ["#17 - Farms Program"]
            }
          ]
        },
        {
          name: "kamino_deposit_with_farm_cpi",
          accounts: [
            {
              name: "deposit_accounts_owner",
              docs: ["#1 - Deposit Accounts Owner"],
              writable: true,
              signer: true
            },
            {
              name: "accounts",
              accounts: [
                {
                  name: "deposit_accounts_obligation",
                  docs: ["#2 - Deposit Accounts Obligation"],
                  writable: true
                },
                {
                  name: "deposit_accounts_lending_market",
                  docs: ["#3 - Deposit Accounts Lending Market"]
                },
                {
                  name: "deposit_accounts_lending_market_authority",
                  docs: ["#4 - Deposit Accounts Lending Market Authority"]
                },
                {
                  name: "deposit_accounts_reserve",
                  docs: ["#5 - Deposit Accounts Reserve"],
                  writable: true
                },
                {
                  name: "deposit_accounts_reserve_liquidity_mint",
                  docs: ["#6 - Deposit Accounts Reserve Liquidity Mint"]
                },
                {
                  name: "deposit_accounts_reserve_liquidity_supply",
                  docs: ["#7 - Deposit Accounts Reserve Liquidity Supply"],
                  writable: true
                },
                {
                  name: "deposit_accounts_reserve_collateral_mint",
                  docs: ["#8 - Deposit Accounts Reserve Collateral Mint"],
                  writable: true
                },
                {
                  name: "deposit_accounts_reserve_destination_deposit_collateral",
                  docs: [
                    "#9 - Deposit Accounts Reserve Destination Deposit Collateral"
                  ],
                  writable: true
                },
                {
                  name: "deposit_accounts_user_source_liquidity",
                  docs: ["#10 - Deposit Accounts User Source Liquidity"],
                  writable: true
                },
                {
                  name: "deposit_accounts_placeholder_user_destination_collateral",
                  docs: [
                    "#11 - Deposit Accounts Placeholder User Destination Collateral"
                  ]
                },
                {
                  name: "deposit_accounts_collateral_token_program",
                  docs: ["#12 - Deposit Accounts Collateral Token Program"]
                },
                {
                  name: "deposit_accounts_liquidity_token_program",
                  docs: ["#13 - Deposit Accounts Liquidity Token Program"]
                },
                {
                  name: "deposit_accounts_instruction_sysvar_account",
                  docs: ["#14 - Deposit Accounts Instruction Sysvar Account"]
                },
                {
                  name: "farms_accounts_obligation_farm_user_state",
                  docs: ["#15 - Farms Accounts Obligation Farm User State"]
                },
                {
                  name: "farms_accounts_reserve_farm_state",
                  docs: ["#16 - Farms Accounts Reserve Farm State"]
                },
                {
                  name: "farms_program",
                  docs: ["#17 - Farms Program"]
                }
              ]
            }
          ]
        },
        {
          name: "kamino_deposit_with_farm_client",
          accounts: [
            {
              name: "deposit_accounts_owner",
              docs: ["#1 - Deposit Accounts Owner"],
              writable: true
            },
            {
              name: "accounts",
              accounts: [
                {
                  name: "deposit_accounts_obligation",
                  docs: ["#2 - Deposit Accounts Obligation"],
                  writable: true
                },
                {
                  name: "deposit_accounts_lending_market",
                  docs: ["#3 - Deposit Accounts Lending Market"]
                },
                {
                  name: "deposit_accounts_lending_market_authority",
                  docs: ["#4 - Deposit Accounts Lending Market Authority"]
                },
                {
                  name: "deposit_accounts_reserve",
                  docs: ["#5 - Deposit Accounts Reserve"],
                  writable: true
                },
                {
                  name: "deposit_accounts_reserve_liquidity_mint",
                  docs: ["#6 - Deposit Accounts Reserve Liquidity Mint"]
                },
                {
                  name: "deposit_accounts_reserve_liquidity_supply",
                  docs: ["#7 - Deposit Accounts Reserve Liquidity Supply"],
                  writable: true
                },
                {
                  name: "deposit_accounts_reserve_collateral_mint",
                  docs: ["#8 - Deposit Accounts Reserve Collateral Mint"],
                  writable: true
                },
                {
                  name: "deposit_accounts_reserve_destination_deposit_collateral",
                  docs: [
                    "#9 - Deposit Accounts Reserve Destination Deposit Collateral"
                  ],
                  writable: true
                },
                {
                  name: "deposit_accounts_user_source_liquidity",
                  docs: ["#10 - Deposit Accounts User Source Liquidity"],
                  writable: true
                },
                {
                  name: "deposit_accounts_placeholder_user_destination_collateral",
                  docs: [
                    "#11 - Deposit Accounts Placeholder User Destination Collateral"
                  ]
                },
                {
                  name: "deposit_accounts_collateral_token_program",
                  docs: ["#12 - Deposit Accounts Collateral Token Program"]
                },
                {
                  name: "deposit_accounts_liquidity_token_program",
                  docs: ["#13 - Deposit Accounts Liquidity Token Program"]
                },
                {
                  name: "deposit_accounts_instruction_sysvar_account",
                  docs: ["#14 - Deposit Accounts Instruction Sysvar Account"]
                },
                {
                  name: "farms_accounts_obligation_farm_user_state",
                  docs: ["#15 - Farms Accounts Obligation Farm User State"]
                },
                {
                  name: "farms_accounts_reserve_farm_state",
                  docs: ["#16 - Farms Accounts Reserve Farm State"]
                },
                {
                  name: "farms_program",
                  docs: ["#17 - Farms Program"]
                }
              ]
            }
          ]
        },
        {
          name: "kamino_borrow_with_farm",
          accounts: [
            {
              name: "borrow_accounts_obligation",
              docs: ["#2 - Borrow Accounts Obligation"],
              writable: true
            },
            {
              name: "borrow_accounts_lending_market",
              docs: ["#3 - Borrow Accounts Lending Market"]
            },
            {
              name: "borrow_accounts_lending_market_authority",
              docs: ["#4 - Borrow Accounts Lending Market Authority"]
            },
            {
              name: "borrow_accounts_borrow_reserve",
              docs: ["#5 - Borrow Accounts Borrow Reserve"],
              writable: true
            },
            {
              name: "borrow_accounts_borrow_reserve_liquidity_mint",
              docs: ["#6 - Borrow Accounts Borrow Reserve Liquidity Mint"]
            },
            {
              name: "borrow_accounts_reserve_source_liquidity",
              docs: ["#7 - Borrow Accounts Reserve Source Liquidity"],
              writable: true
            },
            {
              name: "borrow_accounts_borrow_reserve_liquidity_fee_receiver",
              docs: ["#8 - Borrow Accounts Borrow Reserve Liquidity Fee Receiver"],
              writable: true
            },
            {
              name: "borrow_accounts_user_destination_liquidity",
              docs: ["#9 - Borrow Accounts User Destination Liquidity"],
              writable: true
            },
            {
              name: "borrow_accounts_referrer_token_state",
              docs: ["#10 - Borrow Accounts Referrer Token State"]
            },
            {
              name: "borrow_accounts_token_program",
              docs: ["#11 - Borrow Accounts Token Program"]
            },
            {
              name: "borrow_accounts_instruction_sysvar_account",
              docs: ["#12 - Borrow Accounts Instruction Sysvar Account"]
            },
            {
              name: "farms_accounts_obligation_farm_user_state",
              docs: ["#13 - Farms Accounts Obligation Farm User State"]
            },
            {
              name: "farms_accounts_reserve_farm_state",
              docs: ["#14 - Farms Accounts Reserve Farm State"]
            },
            {
              name: "farms_program",
              docs: ["#15 - Farms Program"]
            }
          ]
        },
        {
          name: "kamino_borrow_with_farm_cpi",
          accounts: [
            {
              name: "borrow_accounts_owner",
              docs: ["#1 - Borrow Accounts Owner"],
              writable: true,
              signer: true
            },
            {
              name: "accounts",
              accounts: [
                {
                  name: "borrow_accounts_obligation",
                  docs: ["#2 - Borrow Accounts Obligation"],
                  writable: true
                },
                {
                  name: "borrow_accounts_lending_market",
                  docs: ["#3 - Borrow Accounts Lending Market"]
                },
                {
                  name: "borrow_accounts_lending_market_authority",
                  docs: ["#4 - Borrow Accounts Lending Market Authority"]
                },
                {
                  name: "borrow_accounts_borrow_reserve",
                  docs: ["#5 - Borrow Accounts Borrow Reserve"],
                  writable: true
                },
                {
                  name: "borrow_accounts_borrow_reserve_liquidity_mint",
                  docs: ["#6 - Borrow Accounts Borrow Reserve Liquidity Mint"]
                },
                {
                  name: "borrow_accounts_reserve_source_liquidity",
                  docs: ["#7 - Borrow Accounts Reserve Source Liquidity"],
                  writable: true
                },
                {
                  name: "borrow_accounts_borrow_reserve_liquidity_fee_receiver",
                  docs: ["#8 - Borrow Accounts Borrow Reserve Liquidity Fee Receiver"],
                  writable: true
                },
                {
                  name: "borrow_accounts_user_destination_liquidity",
                  docs: ["#9 - Borrow Accounts User Destination Liquidity"],
                  writable: true
                },
                {
                  name: "borrow_accounts_referrer_token_state",
                  docs: ["#10 - Borrow Accounts Referrer Token State"]
                },
                {
                  name: "borrow_accounts_token_program",
                  docs: ["#11 - Borrow Accounts Token Program"]
                },
                {
                  name: "borrow_accounts_instruction_sysvar_account",
                  docs: ["#12 - Borrow Accounts Instruction Sysvar Account"]
                },
                {
                  name: "farms_accounts_obligation_farm_user_state",
                  docs: ["#13 - Farms Accounts Obligation Farm User State"]
                },
                {
                  name: "farms_accounts_reserve_farm_state",
                  docs: ["#14 - Farms Accounts Reserve Farm State"]
                },
                {
                  name: "farms_program",
                  docs: ["#15 - Farms Program"]
                }
              ]
            }
          ]
        },
        {
          name: "kamino_borrow_with_farm_client",
          accounts: [
            {
              name: "borrow_accounts_owner",
              docs: ["#1 - Borrow Accounts Owner"],
              writable: true
            },
            {
              name: "accounts",
              accounts: [
                {
                  name: "borrow_accounts_obligation",
                  docs: ["#2 - Borrow Accounts Obligation"],
                  writable: true
                },
                {
                  name: "borrow_accounts_lending_market",
                  docs: ["#3 - Borrow Accounts Lending Market"]
                },
                {
                  name: "borrow_accounts_lending_market_authority",
                  docs: ["#4 - Borrow Accounts Lending Market Authority"]
                },
                {
                  name: "borrow_accounts_borrow_reserve",
                  docs: ["#5 - Borrow Accounts Borrow Reserve"],
                  writable: true
                },
                {
                  name: "borrow_accounts_borrow_reserve_liquidity_mint",
                  docs: ["#6 - Borrow Accounts Borrow Reserve Liquidity Mint"]
                },
                {
                  name: "borrow_accounts_reserve_source_liquidity",
                  docs: ["#7 - Borrow Accounts Reserve Source Liquidity"],
                  writable: true
                },
                {
                  name: "borrow_accounts_borrow_reserve_liquidity_fee_receiver",
                  docs: ["#8 - Borrow Accounts Borrow Reserve Liquidity Fee Receiver"],
                  writable: true
                },
                {
                  name: "borrow_accounts_user_destination_liquidity",
                  docs: ["#9 - Borrow Accounts User Destination Liquidity"],
                  writable: true
                },
                {
                  name: "borrow_accounts_referrer_token_state",
                  docs: ["#10 - Borrow Accounts Referrer Token State"]
                },
                {
                  name: "borrow_accounts_token_program",
                  docs: ["#11 - Borrow Accounts Token Program"]
                },
                {
                  name: "borrow_accounts_instruction_sysvar_account",
                  docs: ["#12 - Borrow Accounts Instruction Sysvar Account"]
                },
                {
                  name: "farms_accounts_obligation_farm_user_state",
                  docs: ["#13 - Farms Accounts Obligation Farm User State"]
                },
                {
                  name: "farms_accounts_reserve_farm_state",
                  docs: ["#14 - Farms Accounts Reserve Farm State"]
                },
                {
                  name: "farms_program",
                  docs: ["#15 - Farms Program"]
                }
              ]
            }
          ]
        },
        {
          name: "kamino_repay_with_farm",
          accounts: [
            {
              name: "repay_accounts_obligation",
              docs: ["#2 - Repay Accounts Obligation"],
              writable: true
            },
            {
              name: "repay_accounts_lending_market",
              docs: ["#3 - Repay Accounts Lending Market"]
            },
            {
              name: "repay_accounts_repay_reserve",
              docs: ["#4 - Repay Accounts Repay Reserve"],
              writable: true
            },
            {
              name: "repay_accounts_reserve_liquidity_mint",
              docs: ["#5 - Repay Accounts Reserve Liquidity Mint"]
            },
            {
              name: "repay_accounts_reserve_destination_liquidity",
              docs: ["#6 - Repay Accounts Reserve Destination Liquidity"],
              writable: true
            },
            {
              name: "repay_accounts_user_source_liquidity",
              docs: ["#7 - Repay Accounts User Source Liquidity"],
              writable: true
            },
            {
              name: "repay_accounts_token_program",
              docs: ["#8 - Repay Accounts Token Program"]
            },
            {
              name: "repay_accounts_instruction_sysvar_account",
              docs: ["#9 - Repay Accounts Instruction Sysvar Account"]
            },
            {
              name: "farms_accounts_obligation_farm_user_state",
              docs: ["#10 - Farms Accounts Obligation Farm User State"]
            },
            {
              name: "farms_accounts_reserve_farm_state",
              docs: ["#11 - Farms Accounts Reserve Farm State"]
            },
            {
              name: "lending_market_authority",
              docs: ["#12 - Lending Market Authority"]
            },
            {
              name: "farms_program",
              docs: ["#13 - Farms Program"]
            }
          ]
        },
        {
          name: "kamino_repay_with_farm_cpi",
          accounts: [
            {
              name: "repay_accounts_owner",
              docs: ["#1 - Repay Accounts Owner"],
              writable: true,
              signer: true
            },
            {
              name: "accounts",
              accounts: [
                {
                  name: "repay_accounts_obligation",
                  docs: ["#2 - Repay Accounts Obligation"],
                  writable: true
                },
                {
                  name: "repay_accounts_lending_market",
                  docs: ["#3 - Repay Accounts Lending Market"]
                },
                {
                  name: "repay_accounts_repay_reserve",
                  docs: ["#4 - Repay Accounts Repay Reserve"],
                  writable: true
                },
                {
                  name: "repay_accounts_reserve_liquidity_mint",
                  docs: ["#5 - Repay Accounts Reserve Liquidity Mint"]
                },
                {
                  name: "repay_accounts_reserve_destination_liquidity",
                  docs: ["#6 - Repay Accounts Reserve Destination Liquidity"],
                  writable: true
                },
                {
                  name: "repay_accounts_user_source_liquidity",
                  docs: ["#7 - Repay Accounts User Source Liquidity"],
                  writable: true
                },
                {
                  name: "repay_accounts_token_program",
                  docs: ["#8 - Repay Accounts Token Program"]
                },
                {
                  name: "repay_accounts_instruction_sysvar_account",
                  docs: ["#9 - Repay Accounts Instruction Sysvar Account"]
                },
                {
                  name: "farms_accounts_obligation_farm_user_state",
                  docs: ["#10 - Farms Accounts Obligation Farm User State"]
                },
                {
                  name: "farms_accounts_reserve_farm_state",
                  docs: ["#11 - Farms Accounts Reserve Farm State"]
                },
                {
                  name: "lending_market_authority",
                  docs: ["#12 - Lending Market Authority"]
                },
                {
                  name: "farms_program",
                  docs: ["#13 - Farms Program"]
                }
              ]
            }
          ]
        },
        {
          name: "kamino_repay_with_farm_client",
          accounts: [
            {
              name: "repay_accounts_owner",
              docs: ["#1 - Repay Accounts Owner"],
              writable: true
            },
            {
              name: "accounts",
              accounts: [
                {
                  name: "repay_accounts_obligation",
                  docs: ["#2 - Repay Accounts Obligation"],
                  writable: true
                },
                {
                  name: "repay_accounts_lending_market",
                  docs: ["#3 - Repay Accounts Lending Market"]
                },
                {
                  name: "repay_accounts_repay_reserve",
                  docs: ["#4 - Repay Accounts Repay Reserve"],
                  writable: true
                },
                {
                  name: "repay_accounts_reserve_liquidity_mint",
                  docs: ["#5 - Repay Accounts Reserve Liquidity Mint"]
                },
                {
                  name: "repay_accounts_reserve_destination_liquidity",
                  docs: ["#6 - Repay Accounts Reserve Destination Liquidity"],
                  writable: true
                },
                {
                  name: "repay_accounts_user_source_liquidity",
                  docs: ["#7 - Repay Accounts User Source Liquidity"],
                  writable: true
                },
                {
                  name: "repay_accounts_token_program",
                  docs: ["#8 - Repay Accounts Token Program"]
                },
                {
                  name: "repay_accounts_instruction_sysvar_account",
                  docs: ["#9 - Repay Accounts Instruction Sysvar Account"]
                },
                {
                  name: "farms_accounts_obligation_farm_user_state",
                  docs: ["#10 - Farms Accounts Obligation Farm User State"]
                },
                {
                  name: "farms_accounts_reserve_farm_state",
                  docs: ["#11 - Farms Accounts Reserve Farm State"]
                },
                {
                  name: "lending_market_authority",
                  docs: ["#12 - Lending Market Authority"]
                },
                {
                  name: "farms_program",
                  docs: ["#13 - Farms Program"]
                }
              ]
            }
          ]
        },
        {
          name: "order_unstake_msol_client",
          accounts: [
            {
              name: "marinade_finance_program",
              docs: ["CHECK"]
            },
            {
              name: "marinade_liquid_staking_state",
              docs: ["CHECK"],
              writable: true
            },
            {
              name: "msol_mint",
              docs: ["CHECK"],
              writable: true
            },
            {
              name: "burn_msol_from",
              docs: ["CHECK"],
              writable: true
            },
            {
              name: "burn_msol_authority",
              docs: ["CHECK"],
              writable: true,
              signer: true
            },
            {
              name: "new_ticket_account",
              docs: ["CHECK"],
              writable: true
            },
            {
              name: "clock",
              address: "SysvarC1ock11111111111111111111111111111111"
            },
            {
              name: "rent",
              address: "SysvarRent111111111111111111111111111111111"
            },
            {
              name: "token_program",
              address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            }
          ]
        },
        {
          name: "order_unstake_msol_cpi",
          accounts: [
            {
              name: "marinade_liquid_staking_state",
              docs: ["CHECK"],
              writable: true
            },
            {
              name: "msol_mint",
              docs: ["CHECK"],
              writable: true
            },
            {
              name: "burn_msol_from",
              docs: ["CHECK"],
              writable: true
            },
            {
              name: "burn_msol_authority",
              docs: ["CHECK"],
              writable: true,
              signer: true
            },
            {
              name: "new_ticket_account",
              docs: ["CHECK"],
              writable: true,
              signer: true
            },
            {
              name: "clock",
              address: "SysvarC1ock11111111111111111111111111111111"
            },
            {
              name: "rent",
              address: "SysvarRent111111111111111111111111111111111"
            },
            {
              name: "token_program",
              address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            }
          ]
        },
        {
          name: "claim_msol_cpi",
          accounts: [
            {
              name: "state",
              docs: ["CHECK"],
              writable: true
            },
            {
              name: "reserve_pda",
              docs: ["CHECK"],
              writable: true
            },
            {
              name: "ticket_account",
              docs: ["CHECK"],
              writable: true
            },
            {
              name: "transfer_sol_to",
              docs: ["CHECK"],
              writable: true,
              signer: true
            },
            {
              name: "clock",
              address: "SysvarC1ock11111111111111111111111111111111"
            },
            {
              name: "system_program",
              address: "11111111111111111111111111111111"
            }
          ]
        },
        {
          name: "kamino_withdraw_with_farm",
          accounts: [
            {
              name: "withdraw_accounts_obligation",
              docs: ["#2 - Withdraw Accounts Obligation", "CHECK"],
              writable: true
            },
            {
              name: "withdraw_accounts_lending_market",
              docs: ["#3 - Withdraw Accounts Lending Market", "CHECK"]
            },
            {
              name: "withdraw_accounts_lending_market_authority",
              docs: ["#4 - Withdraw Accounts Lending Market Authority", "CHECK"]
            },
            {
              name: "withdraw_accounts_withdraw_reserve",
              docs: ["#5 - Withdraw Accounts Withdraw Reserve", "CHECK"],
              writable: true
            },
            {
              name: "withdraw_accounts_reserve_liquidity_mint",
              docs: ["#6 - Withdraw Accounts Reserve Liquidity Mint", "CHECK"]
            },
            {
              name: "withdraw_accounts_reserve_source_collateral",
              docs: ["#7 - Withdraw Accounts Reserve Source Collateral", "CHECK"],
              writable: true
            },
            {
              name: "withdraw_accounts_reserve_collateral_mint",
              docs: ["#8 - Withdraw Accounts Reserve Collateral Mint", "CHECK"],
              writable: true
            },
            {
              name: "withdraw_accounts_reserve_liquidity_supply",
              docs: ["#9 - Withdraw Accounts Reserve Liquidity Supply", "CHECK"],
              writable: true
            },
            {
              name: "withdraw_accounts_user_destination_liquidity",
              docs: ["#10 - Withdraw Accounts User Destination Liquidity", "CHECK"],
              writable: true
            },
            {
              name: "withdraw_accounts_placeholder_user_destination_collateral",
              docs: [
                "#11 - Withdraw Accounts Placeholder User Destination Collateral",
                "CHECK"
              ]
            },
            {
              name: "withdraw_accounts_collateral_token_program",
              docs: ["#12 - Withdraw Accounts Collateral Token Program", "CHECK"]
            },
            {
              name: "withdraw_accounts_liquidity_token_program",
              docs: ["#13 - Withdraw Accounts Liquidity Token Program", "CHECK"]
            },
            {
              name: "withdraw_accounts_instruction_sysvar_account",
              docs: ["#14 - Withdraw Accounts Instruction Sysvar Account", "CHECK"]
            },
            {
              name: "farms_accounts_obligation_farm_user_state",
              docs: ["#15 - Farms Accounts Obligation Farm User State", "CHECK"],
              writable: true
            },
            {
              name: "farms_accounts_reserve_farm_state",
              docs: ["#16 - Farms Accounts Reserve Farm State", "CHECK"],
              writable: true
            },
            {
              name: "farms_program",
              docs: ["#17 - Farms Program", "CHECK"]
            }
          ]
        },
        {
          name: "kamino_withdraw_with_farm_cpi",
          accounts: [
            {
              name: "withdraw_accounts_owner",
              docs: ["#1 - Withdraw Accounts Owner", "CHECK"],
              writable: true,
              signer: true
            },
            {
              name: "accounts",
              accounts: [
                {
                  name: "withdraw_accounts_obligation",
                  docs: ["#2 - Withdraw Accounts Obligation", "CHECK"],
                  writable: true
                },
                {
                  name: "withdraw_accounts_lending_market",
                  docs: ["#3 - Withdraw Accounts Lending Market", "CHECK"]
                },
                {
                  name: "withdraw_accounts_lending_market_authority",
                  docs: ["#4 - Withdraw Accounts Lending Market Authority", "CHECK"]
                },
                {
                  name: "withdraw_accounts_withdraw_reserve",
                  docs: ["#5 - Withdraw Accounts Withdraw Reserve", "CHECK"],
                  writable: true
                },
                {
                  name: "withdraw_accounts_reserve_liquidity_mint",
                  docs: ["#6 - Withdraw Accounts Reserve Liquidity Mint", "CHECK"]
                },
                {
                  name: "withdraw_accounts_reserve_source_collateral",
                  docs: ["#7 - Withdraw Accounts Reserve Source Collateral", "CHECK"],
                  writable: true
                },
                {
                  name: "withdraw_accounts_reserve_collateral_mint",
                  docs: ["#8 - Withdraw Accounts Reserve Collateral Mint", "CHECK"],
                  writable: true
                },
                {
                  name: "withdraw_accounts_reserve_liquidity_supply",
                  docs: ["#9 - Withdraw Accounts Reserve Liquidity Supply", "CHECK"],
                  writable: true
                },
                {
                  name: "withdraw_accounts_user_destination_liquidity",
                  docs: [
                    "#10 - Withdraw Accounts User Destination Liquidity",
                    "CHECK"
                  ],
                  writable: true
                },
                {
                  name: "withdraw_accounts_placeholder_user_destination_collateral",
                  docs: [
                    "#11 - Withdraw Accounts Placeholder User Destination Collateral",
                    "CHECK"
                  ]
                },
                {
                  name: "withdraw_accounts_collateral_token_program",
                  docs: ["#12 - Withdraw Accounts Collateral Token Program", "CHECK"]
                },
                {
                  name: "withdraw_accounts_liquidity_token_program",
                  docs: ["#13 - Withdraw Accounts Liquidity Token Program", "CHECK"]
                },
                {
                  name: "withdraw_accounts_instruction_sysvar_account",
                  docs: ["#14 - Withdraw Accounts Instruction Sysvar Account", "CHECK"]
                },
                {
                  name: "farms_accounts_obligation_farm_user_state",
                  docs: ["#15 - Farms Accounts Obligation Farm User State", "CHECK"],
                  writable: true
                },
                {
                  name: "farms_accounts_reserve_farm_state",
                  docs: ["#16 - Farms Accounts Reserve Farm State", "CHECK"],
                  writable: true
                },
                {
                  name: "farms_program",
                  docs: ["#17 - Farms Program", "CHECK"]
                }
              ]
            }
          ]
        },
        {
          name: "kamino_withdraw_with_farm_client",
          accounts: [
            {
              name: "withdraw_accounts_owner",
              docs: ["#1 - Withdraw Accounts Owner", "CHECK"]
            },
            {
              name: "accounts",
              accounts: [
                {
                  name: "withdraw_accounts_obligation",
                  docs: ["#2 - Withdraw Accounts Obligation", "CHECK"],
                  writable: true
                },
                {
                  name: "withdraw_accounts_lending_market",
                  docs: ["#3 - Withdraw Accounts Lending Market", "CHECK"]
                },
                {
                  name: "withdraw_accounts_lending_market_authority",
                  docs: ["#4 - Withdraw Accounts Lending Market Authority", "CHECK"]
                },
                {
                  name: "withdraw_accounts_withdraw_reserve",
                  docs: ["#5 - Withdraw Accounts Withdraw Reserve", "CHECK"],
                  writable: true
                },
                {
                  name: "withdraw_accounts_reserve_liquidity_mint",
                  docs: ["#6 - Withdraw Accounts Reserve Liquidity Mint", "CHECK"]
                },
                {
                  name: "withdraw_accounts_reserve_source_collateral",
                  docs: ["#7 - Withdraw Accounts Reserve Source Collateral", "CHECK"],
                  writable: true
                },
                {
                  name: "withdraw_accounts_reserve_collateral_mint",
                  docs: ["#8 - Withdraw Accounts Reserve Collateral Mint", "CHECK"],
                  writable: true
                },
                {
                  name: "withdraw_accounts_reserve_liquidity_supply",
                  docs: ["#9 - Withdraw Accounts Reserve Liquidity Supply", "CHECK"],
                  writable: true
                },
                {
                  name: "withdraw_accounts_user_destination_liquidity",
                  docs: [
                    "#10 - Withdraw Accounts User Destination Liquidity",
                    "CHECK"
                  ],
                  writable: true
                },
                {
                  name: "withdraw_accounts_placeholder_user_destination_collateral",
                  docs: [
                    "#11 - Withdraw Accounts Placeholder User Destination Collateral",
                    "CHECK"
                  ]
                },
                {
                  name: "withdraw_accounts_collateral_token_program",
                  docs: ["#12 - Withdraw Accounts Collateral Token Program", "CHECK"]
                },
                {
                  name: "withdraw_accounts_liquidity_token_program",
                  docs: ["#13 - Withdraw Accounts Liquidity Token Program", "CHECK"]
                },
                {
                  name: "withdraw_accounts_instruction_sysvar_account",
                  docs: ["#14 - Withdraw Accounts Instruction Sysvar Account", "CHECK"]
                },
                {
                  name: "farms_accounts_obligation_farm_user_state",
                  docs: ["#15 - Farms Accounts Obligation Farm User State", "CHECK"],
                  writable: true
                },
                {
                  name: "farms_accounts_reserve_farm_state",
                  docs: ["#16 - Farms Accounts Reserve Farm State", "CHECK"],
                  writable: true
                },
                {
                  name: "farms_program",
                  docs: ["#17 - Farms Program", "CHECK"]
                }
              ]
            }
          ]
        }
      ],
      args: []
    },
    {
      name: "sell",
      discriminator: [51, 230, 133, 164, 1, 127, 131, 173],
      accounts: [
        {
          name: "token_a_program"
        },
        {
          name: "token_b_program"
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "liquidity_pool_state",
          writable: true
        },
        {
          name: "user",
          docs: ["CHECK"],
          writable: true,
          signer: true
        },
        {
          name: "token_a_mint",
          docs: ["CHECK"]
        },
        {
          name: "token_b_mint",
          docs: ["CHECK"]
        },
        {
          name: "user_token_a_vault",
          writable: true
        },
        {
          name: "user_token_b_vault",
          writable: true
        },
        {
          name: "token_a_vault",
          writable: true
        },
        {
          name: "token_b_vault",
          writable: true
        },
        {
          name: "protocol_config",
          writable: true
        },
        {
          name: "instruction_sysvar_account_info",
          docs: ["CHECK"],
          address: "Sysvar1nstructions1111111111111111111111111"
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: {
              name: "SellParams"
            }
          }
        }
      ],
      returns: "u64"
    },
    {
      name: "set_protocol_slot_fees",
      discriminator: [181, 82, 19, 15, 126, 205, 152, 242],
      accounts: [
        {
          name: "owner",
          signer: true
        },
        {
          name: "protocol_config_state",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  99,
                  111,
                  110,
                  102,
                  105,
                  103,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              },
              {
                kind: "arg",
                path: "version"
              }
            ]
          }
        },
        {
          name: "protocol_owner_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  111,
                  119,
                  110,
                  101,
                  114,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              }
            ]
          }
        }
      ],
      args: [
        {
          name: "version",
          type: "u16"
        },
        {
          name: "fee_type",
          type: {
            defined: {
              name: "FeeType"
            }
          }
        },
        {
          name: "slot_fees",
          type: {
            defined: {
              name: "SlotFeeBracketsParams"
            }
          }
        }
      ]
    },
    {
      name: "update_allow_create_pool",
      discriminator: [223, 252, 231, 62, 96, 219, 241, 214],
      accounts: [
        {
          name: "admin",
          signer: true
        },
        {
          name: "protocol_config_state",
          writable: true
        },
        {
          name: "protocol_admin_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  102,
                  101,
                  101,
                  95,
                  97,
                  100,
                  109,
                  105,
                  110,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              }
            ]
          }
        }
      ],
      args: [
        {
          name: "version",
          type: "u16"
        },
        {
          name: "allow_create_pool",
          type: "bool"
        }
      ]
    },
    {
      name: "update_creator_trading_fee_receiver",
      discriminator: [246, 229, 200, 79, 31, 21, 120, 25],
      accounts: [
        {
          name: "swap",
          accounts: [
            {
              name: "token_a_program"
            },
            {
              name: "token_b_program"
            },
            {
              name: "associated_token_program",
              address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
            },
            {
              name: "system_program",
              address: "11111111111111111111111111111111"
            },
            {
              name: "liquidity_pool_state",
              writable: true
            },
            {
              name: "user",
              docs: ["CHECK"],
              writable: true,
              signer: true
            },
            {
              name: "token_a_mint",
              docs: ["CHECK"]
            },
            {
              name: "token_b_mint",
              docs: ["CHECK"]
            },
            {
              name: "user_token_a_vault",
              writable: true
            },
            {
              name: "user_token_b_vault",
              writable: true
            },
            {
              name: "token_a_vault",
              writable: true
            },
            {
              name: "token_b_vault",
              writable: true
            },
            {
              name: "protocol_config",
              writable: true
            },
            {
              name: "instruction_sysvar_account_info",
              docs: ["CHECK"],
              address: "Sysvar1nstructions1111111111111111111111111"
            }
          ]
        },
        {
          name: "new_receiver",
          signer: true
        }
      ],
      args: []
    },
    {
      name: "update_protocol_config",
      discriminator: [197, 97, 123, 54, 221, 168, 11, 135],
      accounts: [
        {
          name: "owner",
          signer: true
        },
        {
          name: "protocol_config_state",
          writable: true
        },
        {
          name: "protocol_owner_state",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  114,
                  111,
                  116,
                  111,
                  99,
                  111,
                  108,
                  95,
                  111,
                  119,
                  110,
                  101,
                  114,
                  95,
                  115,
                  116,
                  97,
                  116,
                  101
                ]
              }
            ]
          }
        }
      ],
      args: [
        {
          name: "version",
          type: "u16"
        },
        {
          name: "params",
          type: {
            defined: {
              name: "ProtocolConfigParams"
            }
          }
        }
      ]
    }
  ],
  accounts: [
    {
      name: "LiquidityPoolState",
      discriminator: [190, 158, 220, 130, 15, 162, 132, 252]
    },
    {
      name: "MsolTicketSolSpent",
      discriminator: [66, 196, 62, 134, 124, 149, 250, 66]
    },
    {
      name: "ProtocolAdminState",
      discriminator: [24, 124, 174, 225, 232, 30, 115, 192]
    },
    {
      name: "ProtocolConfig",
      discriminator: [207, 91, 250, 28, 152, 179, 215, 209]
    },
    {
      name: "ProtocolOwnerState",
      discriminator: [208, 64, 209, 204, 113, 226, 22, 98]
    }
  ],
  events: [
    {
      name: "CreateLiquidityPoolEvent",
      discriminator: [116, 216, 239, 141, 207, 211, 178, 127]
    },
    {
      name: "CreateStandardLiquidityPoolEvent",
      discriminator: [189, 56, 131, 144, 75, 63, 249, 148]
    },
    {
      name: "CreatingLiquidityPoolEvent",
      discriminator: [52, 128, 4, 166, 122, 176, 84, 207]
    },
    {
      name: "TradeEvent",
      discriminator: [189, 219, 127, 211, 78, 230, 97, 238]
    },
    {
      name: "UserDefinedEvent",
      discriminator: [33, 21, 108, 20, 241, 244, 167, 131]
    }
  ],
  errors: [
    {
      code: 6e3,
      name: "UnsupportedTokenMint",
      msg: "Unsupported token mint"
    },
    {
      code: 6001,
      name: "InvalidTokenVaultBalance",
      msg: "Invalid token vault balance"
    },
    {
      code: 6002,
      name: "InvalidUserToken",
      msg: "Invalid user token"
    },
    {
      code: 6003,
      name: "InvalidTaxationMode",
      msg: "Invalid taxation mode"
    },
    {
      code: 6004,
      name: "InvalidOwner",
      msg: "Invalid owner"
    },
    {
      code: 6005,
      name: "InvalidLockLiquidityProviderTokenPercentage",
      msg: "Invalid lock liquidity provider token percentage"
    },
    {
      code: 6006,
      name: "CannotCreatePoolWithDisabledProtocolConfigVersion",
      msg: "Cannot create pool with the a disabled protocol config version"
    },
    {
      code: 6007,
      name: "InvalidTokenInputAmount",
      msg: "Invalid token input amount"
    },
    {
      code: 6008,
      name: "InvalidSwapTax",
      msg: "Invalid swap tax"
    },
    {
      code: 6009,
      name: "InvalidFeeMode",
      msg: "Invalid fee mode"
    },
    {
      code: 6010,
      name: "InvalidLiquidityProviderTokenLockVault",
      msg: "Invalid liquidity provider token lock vault"
    },
    {
      code: 6011,
      name: "InvalidUserLiquidityProviderTokenVault",
      msg: "Invalid liquidity provider token vault"
    },
    {
      code: 6012,
      name: "InsufficientBalance",
      msg: "Insufficient balance"
    },
    {
      code: 6013,
      name: "ExceededSlippage",
      msg: "Exceeded slippage"
    },
    {
      code: 6014,
      name: "InvalidAddLiquidityInput",
      msg: "Invalid add liquidity input"
    },
    {
      code: 6015,
      name: "InvalidRemoveLiquidityInput",
      msg: "Invalid remove liquidity input"
    },
    {
      code: 6016,
      name: "AddLiquidityDisabled",
      msg: "Add liquidity is disabled"
    },
    {
      code: 6017,
      name: "RemoveLiquidityDisabled",
      msg: "Remove liquidity is disabled"
    },
    {
      code: 6018,
      name: "SwapDisabled",
      msg: "Swap is disabled"
    },
    {
      code: 6019,
      name: "LiquidityPoolIsNotOpenYet",
      msg: "Liquidity pool is not open yet"
    },
    {
      code: 6020,
      name: "InvalidSwapInInputs",
      msg: "Invalid swap in inputs"
    },
    {
      code: 6021,
      name: "InvalidProtocolSwapFeeWallet",
      msg: "Invalid protocol swap fee wallet"
    },
    {
      code: 6022,
      name: "InvalidSwapOutInputs",
      msg: "Invalid swap out inputs"
    },
    {
      code: 6023,
      name: "InvalidPostFeeAmount",
      msg: "Invalid post fee amount"
    },
    {
      code: 6024,
      name: "ExceededQuoteTokenSlippage",
      msg: "Exceeded quote token slippage"
    },
    {
      code: 6025,
      name: "ExceededBaseTokenSlippage",
      msg: "Exceeded base token slippage"
    },
    {
      code: 6026,
      name: "LpTokensLocked",
      msg: "Lp tokens locked"
    },
    {
      code: 6027,
      name: "InvalidProtocolBaseTokenSwapFeeVault",
      msg: "Invalid protocol base token swap fee vault"
    },
    {
      code: 6028,
      name: "InvalidProtocolQuoteTokenSwapFeeVault",
      msg: "Invalid protocol quote token swap fee vault"
    },
    {
      code: 6029,
      name: "InvalidUserPoolStatsAccount",
      msg: "Invalid user pool stats account"
    },
    {
      code: 6030,
      name: "InvalidUserGlobalStatsAccount",
      msg: "Invalid user global stats account"
    },
    {
      code: 6031,
      name: "CannotUpdateLpLock",
      msg: "Cannot update lp lock"
    },
    {
      code: 6032,
      name: "ZeroAmount",
      msg: "Zero amount"
    },
    {
      code: 6033,
      name: "CannotUpdateLpOpenTime",
      msg: "Cannot update lp open time"
    },
    {
      code: 6034,
      name: "CannotSetLockBurnLpTokens",
      msg: "Cannot set lock burn lp tokens"
    },
    {
      code: 6035,
      name: "InvalidTax",
      msg: "Invalid tax"
    },
    {
      code: 6036,
      name: "InvalidChainlinkFeedAccount",
      msg: "Invalid chainlink feed account"
    },
    {
      code: 6037,
      name: "InvalidChainlinkProgram",
      msg: "Invalid chainlink program"
    },
    {
      code: 6038,
      name: "InvalidConfigVersion",
      msg: "Invalid config version"
    },
    {
      code: 6039,
      name: "CannotUpdateLockedTaxation",
      msg: "Cannot update locked taxation"
    },
    {
      code: 6040,
      name: "CannotClaimSwapFee",
      msg: "Cannot claim swap fee"
    },
    {
      code: 6041,
      name: "NonCreatorCannotAddLp",
      msg: "This pool does not allow non-creator to add lp"
    },
    {
      code: 6042,
      name: "SimpleAmmBaseTokenCannotHaveFreezeAuthority",
      msg: "Simple amm base token mint cannot have freeze authority"
    },
    {
      code: 6043,
      name: "SimpleAmmBaseTokenCannotHaveMintAuthority",
      msg: "Simple amm base token mint cannot have mint authority"
    },
    {
      code: 6044,
      name: "SimpleAmmQuoteTokenMustBeWSOL",
      msg: "Simple amm quote token mint must be WSOL"
    },
    {
      code: 6045,
      name: "SimpleAmmBaseTokenSupplyMustMatchInputAmount",
      msg: "Simple amm base token supply must match input amount"
    },
    {
      code: 6046,
      name: "SimpleAmmBaseTokenMustBeSplToken",
      msg: "Simple amm base token mint must be SPL token"
    },
    {
      code: 6047,
      name: "InvalidProgramAuthorityLookupTableAddress",
      msg: "Invalid program authority lookup table address"
    },
    {
      code: 6048,
      name: "CannotCreatePoolWithUnsupportedPoolType",
      msg: "CannotCreatePoolWithUnsupportedPoolType"
    },
    {
      code: 6049,
      name: "InvalidLendingMarket",
      msg: "InvalidLendingMarket"
    },
    {
      code: 6050,
      name: "KaminoPriceListRefreshIxNotFound",
      msg: "KaminoPriceListRefreshIxNotFound"
    },
    {
      code: 6051,
      name: "KaminoError",
      msg: "KaminoError"
    },
    {
      code: 6052,
      name: "ReserveRebalancing",
      msg: "Reserve rebalancing, please try again."
    },
    {
      code: 6053,
      name: "OnlySingleSwapAllowed",
      msg: "Only single swap allowed"
    }
  ],
  types: [
    {
      name: "AdminUpdateLiquidityPoolState",
      type: {
        kind: "enum",
        variants: [
          {
            name: "CreatorTradingFeeClaimStatus",
            fields: [
              {
                defined: {
                  name: "CreatorTradingFeeClaimStatus"
                }
              }
            ]
          },
          {
            name: "CreatorTradingFeeDistribution",
            fields: [
              {
                defined: {
                  name: "CreatorTradingFeeDistribution"
                }
              }
            ]
          },
          {
            name: "CreatorTradingFeeReceiver",
            fields: ["pubkey"]
          },
          {
            name: "FeeConfigurationMode",
            fields: [
              {
                defined: {
                  name: "FeeConfigurationMode"
                }
              }
            ]
          },
          {
            name: "SlotOffsetBasedFees",
            fields: [
              {
                name: "fee_type",
                type: {
                  defined: {
                    name: "FeeType"
                  }
                }
              },
              {
                name: "fees",
                type: {
                  defined: {
                    name: "SlotFeeBrackets"
                  }
                }
              }
            ]
          },
          {
            name: "MarketCapBasedFees",
            fields: [
              {
                name: "fee_type",
                type: {
                  defined: {
                    name: "FeeType"
                  }
                }
              },
              {
                name: "fees",
                type: {
                  defined: {
                    name: "FeeBrackets"
                  }
                }
              }
            ]
          },
          {
            name: "ToggleSwapPermission",
            fields: ["bool"]
          }
        ]
      }
    },
    {
      name: "BuyParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "max_sol_spend",
            type: "u64"
          },
          {
            name: "minimum_amount_out",
            type: "u64"
          },
          {
            name: "encoded_user_defined_event_data",
            type: "string"
          }
        ]
      }
    },
    {
      name: "CreateLiquidityPoolEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "liquidity_pool_id",
            type: "pubkey"
          },
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "base_token_input_transfer_fee_amount",
            type: "u64"
          },
          {
            name: "quote_token_input_transfer_fee_amount",
            type: "u64"
          },
          {
            name: "base_token_input_amount",
            type: "u64"
          },
          {
            name: "quote_token_input_amount",
            type: "u64"
          },
          {
            name: "lp_token_output_amount",
            type: "u64"
          },
          {
            name: "locked_lp",
            type: "bool"
          }
        ]
      }
    },
    {
      name: "CreateStandardLiquidityPoolEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool_id",
            type: "pubkey"
          },
          {
            name: "payer",
            type: "pubkey"
          },
          {
            name: "creator",
            type: "pubkey"
          },
          {
            name: "mint",
            type: "pubkey"
          },
          {
            name: "config_version",
            type: "u16"
          },
          {
            name: "initial_token_reserve",
            type: "u64"
          },
          {
            name: "initial_virtual_wsol_reserve",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "CreateStandardLiquidityPoolParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "encoded_user_defined_event_data",
            type: "string"
          },
          {
            name: "initial_purchase_amount",
            type: "u64"
          },
          {
            name: "max_sol_spend",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "CreatingLiquidityPoolEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "id",
            type: "pubkey"
          },
          {
            name: "base",
            type: "pubkey"
          },
          {
            name: "quote",
            type: "pubkey"
          },
          {
            name: "base_amount",
            type: "u64"
          },
          {
            name: "quote_amount",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "CreatorTradingFeeClaimStatus",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Unclaimed"
          },
          {
            name: "Submitted"
          },
          {
            name: "Processed"
          }
        ]
      }
    },
    {
      name: "CreatorTradingFeeDistribution",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Community"
          },
          {
            name: "Creator"
          },
          {
            name: "Blocked"
          },
          {
            name: "Shared"
          }
        ]
      }
    },
    {
      name: "FeeBracket",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "market_cap_upper_bound",
            type: "u64"
          },
          {
            name: "buy_fee_bps",
            type: "u32"
          },
          {
            name: "sell_fee_bps",
            type: "u32"
          }
        ]
      }
    },
    {
      name: "FeeBrackets",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "brackets",
            type: {
              array: [
                {
                  defined: {
                    name: "FeeBracket"
                  }
                },
                4
              ]
            }
          },
          {
            name: "count",
            type: "u8"
          },
          {
            name: "_padding",
            type: {
              array: ["u8", 7]
            }
          }
        ]
      }
    },
    {
      name: "FeeConfigurationMode",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Global"
          },
          {
            name: "Local"
          }
        ]
      }
    },
    {
      name: "FeeType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "ProtocolFee"
          },
          {
            name: "LiquidityProviderFee"
          },
          {
            name: "CreatorFee"
          },
          {
            name: "CreatorFeeProtocolFee"
          },
          {
            name: "ReflectionFee"
          }
        ]
      }
    },
    {
      name: "LiquidityPoolAllowlist",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "swap",
            type: "u8"
          },
          {
            name: "remove_liquidity",
            type: "u8"
          },
          {
            name: "deposit_liquidity",
            type: "u8"
          },
          {
            name: "same_slot_trading",
            type: "u8"
          },
          {
            name: "update_creator_trading_fee",
            type: "u8"
          },
          {
            name: "padding1",
            type: {
              array: ["u8", 2]
            }
          }
        ]
      }
    },
    {
      name: "LiquidityPoolFeatureFlags",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "sandwich_resistant_mode",
            type: "u8"
          },
          {
            name: "padding1",
            type: {
              array: ["u8", 7]
            }
          }
        ]
      }
    },
    {
      name: "LiquidityPoolInfo",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "creator",
            type: "pubkey"
          },
          {
            name: "update_authority",
            type: "pubkey"
          },
          {
            name: "open_at",
            type: "u64"
          },
          {
            name: "created_at",
            type: "u64"
          },
          {
            name: "protocol_config_version",
            type: "u16"
          },
          {
            name: "r#type",
            type: "u8"
          },
          {
            name: "pool_authority_bump",
            type: "u8"
          },
          {
            name: "temp_sol_holder_bump",
            type: "u8"
          },
          {
            name: "_pad",
            type: {
              array: ["u8", 3]
            }
          }
        ]
      }
    },
    {
      name: "LiquidityPoolLpTokenInfo",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "supply",
            type: {
              defined: {
                name: "LiquidityPoolLpTokenSupply"
              }
            }
          },
          {
            name: "decimals",
            type: "u8"
          },
          {
            name: "_pad",
            type: {
              array: ["u8", 7]
            }
          }
        ]
      }
    },
    {
      name: "LiquidityPoolLpTokenSupply",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "initial",
            type: "u64"
          },
          {
            name: "total",
            type: "u64"
          },
          {
            name: "unlocked",
            type: "u64"
          },
          {
            name: "locked",
            type: "u64"
          },
          {
            name: "burnt",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "LiquidityPoolMarketCapBasedFees",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "protocol_trading_fee",
            type: {
              defined: {
                name: "FeeBrackets"
              }
            }
          },
          {
            name: "liquidity_provider_trading_fee",
            type: {
              defined: {
                name: "FeeBrackets"
              }
            }
          },
          {
            name: "creator_trading_fee",
            type: {
              defined: {
                name: "FeeBrackets"
              }
            }
          },
          {
            name: "creator_trading_fee_protocol_fee",
            type: {
              defined: {
                name: "FeeBrackets"
              }
            }
          },
          {
            name: "reflection_trading_fee",
            type: {
              defined: {
                name: "FeeBrackets"
              }
            }
          }
        ]
      }
    },
    {
      name: "LiquidityPoolReserve",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "token_a",
            type: "u64"
          },
          {
            name: "token_b",
            type: "u64"
          },
          {
            name: "snapshot_slot",
            type: "u64"
          },
          {
            name: "snapshot_a",
            type: "u64"
          },
          {
            name: "snapshot_b",
            type: "u64"
          },
          {
            name: "padding",
            type: "u64"
          },
          {
            name: "initial_a",
            type: "u64"
          },
          {
            name: "initial_b",
            type: "u64"
          },
          {
            name: "leader_slot_window",
            type: "u8"
          },
          {
            name: "_pad",
            type: {
              array: ["u8", 7]
            }
          }
        ]
      }
    },
    {
      name: "LiquidityPoolSlotOffsetBasedFees",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "protocol_trading_fee",
            type: {
              defined: {
                name: "SlotFeeBrackets"
              }
            }
          },
          {
            name: "liquidity_provider_trading_fee",
            type: {
              defined: {
                name: "SlotFeeBrackets"
              }
            }
          },
          {
            name: "creator_trading_fee",
            type: {
              defined: {
                name: "SlotFeeBrackets"
              }
            }
          },
          {
            name: "creator_trading_fee_protocol_fee",
            type: {
              defined: {
                name: "SlotFeeBrackets"
              }
            }
          },
          {
            name: "reflection_trading_fee",
            type: {
              defined: {
                name: "SlotFeeBrackets"
              }
            }
          },
          {
            name: "_pad",
            type: {
              array: ["u8", 6]
            }
          }
        ]
      }
    },
    {
      name: "LiquidityPoolState",
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "info",
            type: {
              defined: {
                name: "LiquidityPoolInfo"
              }
            }
          },
          {
            name: "market_cap_based_fees",
            type: {
              defined: {
                name: "LiquidityPoolMarketCapBasedFees"
              }
            }
          },
          {
            name: "reserve",
            type: {
              defined: {
                name: "LiquidityPoolReserve"
              }
            }
          },
          {
            name: "lp_token",
            type: {
              defined: {
                name: "LiquidityPoolLpTokenInfo"
              }
            }
          },
          {
            name: "protocol_trading_fees",
            type: "u64"
          },
          {
            name: "creator_trading_fees",
            type: "u64"
          },
          {
            name: "creator_trading_fees_claimed_by_creator",
            type: "u64"
          },
          {
            name: "creator_trading_fees_claimed_by_others",
            type: "u64"
          },
          {
            name: "liquidity_provider_trading_fees",
            type: "u64"
          },
          {
            name: "creator_trading_fee_protocol_fees",
            type: "u64"
          },
          {
            name: "reflection_trading_fees",
            type: "u64"
          },
          {
            name: "created_at_slot",
            type: "u64"
          },
          {
            name: "trading_volume_usd",
            type: "f64"
          },
          {
            name: "creator_trading_fee_trading_volume_threshold",
            type: "f64"
          },
          {
            name: "creator_trading_fee_trading_volume_threshold_reached_unix_timestamp",
            type: "u64"
          },
          {
            name: "token_a_vault",
            type: "pubkey"
          },
          {
            name: "token_b_vault",
            type: "pubkey"
          },
          {
            name: "protocol_config",
            type: "pubkey"
          },
          {
            name: "key",
            type: "pubkey"
          },
          {
            name: "token_a",
            type: {
              defined: {
                name: "LiquidityPoolTokenInfo"
              }
            }
          },
          {
            name: "token_b",
            type: {
              defined: {
                name: "LiquidityPoolTokenInfo"
              }
            }
          },
          {
            name: "allowlist",
            type: {
              defined: {
                name: "LiquidityPoolAllowlist"
              }
            }
          },
          {
            name: "feature_flags",
            type: {
              defined: {
                name: "LiquidityPoolFeatureFlags"
              }
            }
          },
          {
            name: "taxable_side",
            type: "u8"
          },
          {
            name: "taxable_side_type",
            type: "u8"
          },
          {
            name: "creator_trading_fee_distribution",
            type: "u8"
          },
          {
            name: "creator_trading_fee_claim_status",
            type: "u8"
          },
          {
            name: "fee_configuration_mode",
            type: "u8"
          },
          {
            name: "is_migrated",
            type: "u8"
          },
          {
            name: "_pad",
            type: {
              array: ["u8", 13]
            }
          },
          {
            name: "slot_offset_based_fees",
            type: {
              defined: {
                name: "LiquidityPoolSlotOffsetBasedFees"
              }
            }
          },
          {
            name: "creator_trading_fee_receiver",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "LiquidityPoolTokenInfo",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "mint",
            type: "pubkey"
          },
          {
            name: "decimals",
            type: "u8"
          },
          {
            name: "owner",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "LiquidityPoolType",
      repr: {
        kind: "c"
      },
      type: {
        kind: "enum",
        variants: [
          {
            name: "None"
          },
          {
            name: "Pro"
          },
          {
            name: "Standard"
          }
        ]
      }
    },
    {
      name: "MsolTicketSolSpent",
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "cost_basis",
            type: "u64"
          },
          {
            name: "msol_unstaked",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "ProtocolAdminState",
      type: {
        kind: "struct",
        fields: [
          {
            name: "current_protocol_admin",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "ProtocolConfig",
      serialization: "bytemuck",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "create_pool_fee",
            type: "u64"
          },
          {
            name: "initial_token_b_amount",
            type: "f64"
          },
          {
            name: "initial_token_a_amount",
            type: "u64"
          },
          {
            name: "unstaked_wsol_reserve",
            type: "u64"
          },
          {
            name: "total_sol_spent",
            type: "u64"
          },
          {
            name: "total_msol_received",
            type: "u64"
          },
          {
            name: "total_realized_profit",
            type: "u64"
          },
          {
            name: "pool_count",
            type: "u64"
          },
          {
            name: "max_supply_per_wallet",
            type: "u64"
          },
          {
            name: "creator_trading_fee_trading_volume_threshold",
            type: "f64"
          },
          {
            name: "market_cap_based_fees",
            type: {
              defined: {
                name: "LiquidityPoolMarketCapBasedFees"
              }
            }
          },
          {
            name: "buffer_bps",
            type: "u16"
          },
          {
            name: "auto_staking_threshold_bps",
            type: "u16"
          },
          {
            name: "version",
            type: "u16"
          },
          {
            name: "protocol_config_state_bump",
            type: "u8"
          },
          {
            name: "allow_create_pool",
            type: "u8"
          },
          {
            name: "supported_pool_type",
            type: "u8"
          },
          {
            name: "default_leader_slot_window",
            type: "u8"
          },
          {
            name: "auto_staking_enabled",
            type: "u8"
          },
          {
            name: "leader_slot_window",
            type: "u8"
          },
          {
            name: "sandwich_resistence_enabled",
            type: "u8"
          },
          {
            name: "token_a_decimals",
            type: "u8"
          },
          {
            name: "migration_market_cap_threshold",
            type: "u16"
          },
          {
            name: "_pad",
            type: {
              array: ["u8", 8]
            }
          },
          {
            name: "max_creator_trading_fee",
            type: "u32"
          },
          {
            name: "slot_offset_based_fees",
            type: {
              defined: {
                name: "LiquidityPoolSlotOffsetBasedFees"
              }
            }
          }
        ]
      }
    },
    {
      name: "ProtocolConfigParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "create_pool_fee",
            type: "u64"
          },
          {
            name: "allow_create_pool",
            type: "bool"
          },
          {
            name: "supported_pool_type",
            type: {
              defined: {
                name: "LiquidityPoolType"
              }
            }
          },
          {
            name: "market_cap_based_fees",
            type: {
              defined: {
                name: "LiquidityPoolMarketCapBasedFees"
              }
            }
          },
          {
            name: "initial_token_b_amount",
            type: "f64"
          },
          {
            name: "initial_token_a_amount",
            type: "u64"
          },
          {
            name: "default_leader_slot_window",
            type: "u8"
          },
          {
            name: "auto_staking_enabled",
            type: "bool"
          },
          {
            name: "sandwich_resistence_enabled",
            type: "bool"
          },
          {
            name: "buffer_bps",
            type: "u16"
          },
          {
            name: "auto_staking_threshold_bps",
            type: "u16"
          },
          {
            name: "token_a_decimals",
            type: "u8"
          },
          {
            name: "max_creator_trading_fee",
            type: "u32"
          },
          {
            name: "max_supply_per_wallet",
            type: "u64"
          },
          {
            name: "creator_trading_fee_trading_volume_threshold",
            type: "f64"
          },
          {
            name: "migration_market_cap_threshold",
            type: "u16"
          }
        ]
      }
    },
    {
      name: "ProtocolOwnerState",
      type: {
        kind: "struct",
        fields: [
          {
            name: "current_protocol_owner",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "SellParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "amount_in",
            type: "u64"
          },
          {
            name: "minimum_amount_out",
            type: "u64"
          },
          {
            name: "encoded_user_defined_event_data",
            type: "string"
          }
        ]
      }
    },
    {
      name: "SlotFeeBracket",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "buy_fee_bps",
            type: "u16"
          },
          {
            name: "sell_fee_bps",
            type: "u16"
          },
          {
            name: "slot_offset_upperbound",
            type: "u16"
          }
        ]
      }
    },
    {
      name: "SlotFeeBrackets",
      repr: {
        kind: "c"
      },
      type: {
        kind: "struct",
        fields: [
          {
            name: "brackets",
            type: {
              array: [
                {
                  defined: {
                    name: "SlotFeeBracket"
                  }
                },
                42
              ]
            }
          },
          {
            name: "max_slot_offset",
            type: "u16"
          },
          {
            name: "max_fee_bps",
            type: "u16"
          },
          {
            name: "count",
            type: "u8"
          },
          {
            name: "enabled",
            type: "u8"
          },
          {
            name: "_padding",
            type: {
              array: ["u8", 4]
            }
          }
        ]
      }
    },
    {
      name: "SlotFeeBracketsParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "brackets",
            type: {
              vec: {
                defined: {
                  name: "SlotFeeBracket"
                }
              }
            }
          },
          {
            name: "max_slot_offset",
            type: "u16"
          },
          {
            name: "max_fee_bps",
            type: "u16"
          },
          {
            name: "count",
            type: "u8"
          },
          {
            name: "enabled",
            type: "u8"
          }
        ]
      }
    },
    {
      name: "TradeEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "base_reserve",
            type: "u64"
          },
          {
            name: "quote_reserve",
            type: "u64"
          },
          {
            name: "total_creator_trading_fees",
            type: "u64"
          },
          {
            name: "total_fee_paid",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "UserDefinedEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "liquidity_pool_id",
            type: "pubkey"
          },
          {
            name: "instruction_name",
            type: "string"
          },
          {
            name: "base64_data",
            type: "string"
          }
        ]
      }
    }
  ]
};

// idl/bonkswap.json
var bonkswap_default = {
  version: "0.1.1",
  name: "bonkswap",
  instructions: [
    {
      name: "createPool",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapstatev1"
              }
            ]
          }
        },
        {
          name: "pool",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswappoolv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_x"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_y"
              }
            ]
          }
        },
        {
          name: "tokenX",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenY",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolXAccount",
          isMut: true,
          isSigner: true
        },
        {
          name: "poolYAccount",
          isMut: true,
          isSigner: true
        },
        {
          name: "adminXAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "adminYAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "projectOwner",
          isMut: false,
          isSigner: false
        },
        {
          name: "programAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "lpFee",
          type: {
            defined: "FixedPoint"
          }
        },
        {
          name: "buybackFee",
          type: {
            defined: "FixedPoint"
          }
        },
        {
          name: "projectFee",
          type: {
            defined: "FixedPoint"
          }
        },
        {
          name: "mercantiFee",
          type: {
            defined: "FixedPoint"
          }
        },
        {
          name: "initialTokenX",
          type: {
            defined: "Token"
          }
        },
        {
          name: "initialTokenY",
          type: {
            defined: "Token"
          }
        },
        {
          name: "bump",
          type: "u8"
        }
      ]
    },
    {
      name: "createProvider",
      accounts: [
        {
          name: "pool",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswappoolv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_x"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_y"
              }
            ]
          }
        },
        {
          name: "farm",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapfarmv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Pool",
                path: "pool"
              }
            ]
          }
        },
        {
          name: "provider",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapproviderv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Pool",
                path: "pool"
              },
              {
                kind: "account",
                type: "publicKey",
                path: "owner"
              }
            ]
          }
        },
        {
          name: "tokenX",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenY",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolXAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolYAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "ownerXAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "ownerYAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "owner",
          isMut: true,
          isSigner: true
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "tokenXAmount",
          type: {
            defined: "Token"
          }
        },
        {
          name: "tokenYAmount",
          type: {
            defined: "Token"
          }
        },
        {
          name: "bump",
          type: "u8"
        }
      ]
    },
    {
      name: "createState",
      accounts: [
        {
          name: "state",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapstatev1"
              }
            ]
          }
        },
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "programAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "nonce",
          type: "u8"
        }
      ]
    },
    {
      name: "addTokens",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapstatev1"
              }
            ]
          }
        },
        {
          name: "pool",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswappoolv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_x"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_y"
              }
            ]
          }
        },
        {
          name: "farm",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapfarmv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Pool",
                path: "pool"
              }
            ]
          }
        },
        {
          name: "provider",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapproviderv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Pool",
                path: "pool"
              },
              {
                kind: "account",
                type: "publicKey",
                path: "owner"
              }
            ]
          }
        },
        {
          name: "tokenX",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenY",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenMarco",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProjectFirst",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProjectSecond",
          isMut: true,
          isSigner: false
        },
        {
          name: "ownerXAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "ownerYAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolXAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolYAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "ownerMarcoAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "ownerProjectFirstAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "ownerProjectSecondAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenMarcoAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProjectFirstAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProjectSecondAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "owner",
          isMut: true,
          isSigner: true
        },
        {
          name: "programAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "deltaX",
          type: {
            defined: "Token"
          }
        },
        {
          name: "deltaY",
          type: {
            defined: "Token"
          }
        }
      ]
    },
    {
      name: "withdrawBuyback",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapstatev1"
              }
            ]
          }
        },
        {
          name: "pool",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswappoolv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_x"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_y"
              }
            ]
          }
        },
        {
          name: "tokenX",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenY",
          isMut: false,
          isSigner: false
        },
        {
          name: "buybackXAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "buybackYAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolXAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolYAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "programAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "swap",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapstatev1"
              }
            ]
          }
        },
        {
          name: "pool",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswappoolv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_x"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_y"
              }
            ]
          }
        },
        {
          name: "tokenX",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenY",
          isMut: false,
          isSigner: false
        },
        {
          name: "poolXAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolYAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapperXAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapperYAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapper",
          isMut: true,
          isSigner: true
        },
        {
          name: "referrerXAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "referrerYAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "referrer",
          isMut: true,
          isSigner: false
        },
        {
          name: "programAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "deltaIn",
          type: {
            defined: "Token"
          }
        },
        {
          name: "priceLimit",
          type: {
            defined: "FixedPoint"
          }
        },
        {
          name: "xToY",
          type: "bool"
        }
      ]
    },
    {
      name: "withdrawShares",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapstatev1"
              }
            ]
          }
        },
        {
          name: "pool",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswappoolv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_x"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_y"
              }
            ]
          }
        },
        {
          name: "farm",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapfarmv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Pool",
                path: "pool"
              }
            ]
          }
        },
        {
          name: "provider",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapproviderv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Pool",
                path: "pool"
              },
              {
                kind: "account",
                type: "publicKey",
                path: "owner"
              }
            ]
          }
        },
        {
          name: "tokenX",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenY",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenMarco",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProjectFirst",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProjectSecond",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolXAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolYAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenMarcoAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProjectFirstAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProjectSecondAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "ownerXAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "ownerYAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "ownerMarcoAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "ownerProjectFirstAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "ownerProjectSecondAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "owner",
          isMut: true,
          isSigner: true
        },
        {
          name: "programAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "shares",
          type: {
            defined: "Token"
          }
        }
      ]
    },
    {
      name: "withdrawLpFee",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapstatev1"
              }
            ]
          }
        },
        {
          name: "pool",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswappoolv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_x"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_y"
              }
            ]
          }
        },
        {
          name: "provider",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapproviderv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Pool",
                path: "pool"
              },
              {
                kind: "account",
                type: "publicKey",
                path: "owner"
              }
            ]
          }
        },
        {
          name: "tokenX",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenY",
          isMut: false,
          isSigner: false
        },
        {
          name: "ownerXAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "ownerYAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolXAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolYAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "owner",
          isMut: true,
          isSigner: true
        },
        {
          name: "programAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "withdrawProjectFee",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapstatev1"
              }
            ]
          }
        },
        {
          name: "pool",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswappoolv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_x"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_y"
              }
            ]
          }
        },
        {
          name: "tokenX",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenY",
          isMut: false,
          isSigner: false
        },
        {
          name: "projectOwnerXAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "projectOwnerYAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolXAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolYAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "projectOwner",
          isMut: true,
          isSigner: true
        },
        {
          name: "programAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "createFarm",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapstatev1"
              }
            ]
          }
        },
        {
          name: "pool",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswappoolv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_x"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_y"
              }
            ]
          }
        },
        {
          name: "farm",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapfarmv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Pool",
                path: "pool"
              }
            ]
          }
        },
        {
          name: "tokenX",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenY",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenMarco",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenMarcoAccount",
          isMut: true,
          isSigner: true
        },
        {
          name: "adminMarcoAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "programAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "supply",
          type: {
            defined: "Token"
          }
        },
        {
          name: "duration",
          type: "u64"
        },
        {
          name: "bump",
          type: "u8"
        }
      ]
    },
    {
      name: "createDualFarm",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapstatev1"
              }
            ]
          }
        },
        {
          name: "pool",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswappoolv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_x"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_y"
              }
            ]
          }
        },
        {
          name: "farm",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapfarmv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Pool",
                path: "pool"
              }
            ]
          }
        },
        {
          name: "tokenX",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenY",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenMarco",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProjectFirst",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenMarcoAccount",
          isMut: true,
          isSigner: true
        },
        {
          name: "tokenProjectFirstAccount",
          isMut: true,
          isSigner: true
        },
        {
          name: "adminMarcoAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "adminProjectFirstAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "programAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "supplyMarco",
          type: {
            defined: "Token"
          }
        },
        {
          name: "supplyProjectFirst",
          type: {
            defined: "Token"
          }
        },
        {
          name: "duration",
          type: "u64"
        },
        {
          name: "bump",
          type: "u8"
        }
      ]
    },
    {
      name: "createTripleFarm",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapstatev1"
              }
            ]
          }
        },
        {
          name: "pool",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswappoolv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_x"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_y"
              }
            ]
          }
        },
        {
          name: "farm",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapfarmv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Pool",
                path: "pool"
              }
            ]
          }
        },
        {
          name: "tokenX",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenY",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenMarco",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProjectFirst",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProjectSecond",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenMarcoAccount",
          isMut: true,
          isSigner: true
        },
        {
          name: "tokenProjectFirstAccount",
          isMut: true,
          isSigner: true
        },
        {
          name: "tokenProjectSecondAccount",
          isMut: true,
          isSigner: true
        },
        {
          name: "adminMarcoAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "adminProjectFirstAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "adminProjectSecondAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "programAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "supplyMarco",
          type: {
            defined: "Token"
          }
        },
        {
          name: "supplyProjectFirst",
          type: {
            defined: "Token"
          }
        },
        {
          name: "supplyProjectSecond",
          type: {
            defined: "Token"
          }
        },
        {
          name: "duration",
          type: "u64"
        },
        {
          name: "bump",
          type: "u8"
        }
      ]
    },
    {
      name: "withdrawRewards",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapstatev1"
              }
            ]
          }
        },
        {
          name: "pool",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswappoolv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_x"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_y"
              }
            ]
          }
        },
        {
          name: "farm",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapfarmv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Pool",
                path: "pool"
              }
            ]
          }
        },
        {
          name: "provider",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapproviderv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Pool",
                path: "pool"
              },
              {
                kind: "account",
                type: "publicKey",
                path: "owner"
              }
            ]
          }
        },
        {
          name: "tokenX",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenY",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenMarco",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProjectFirst",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProjectSecond",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenMarcoAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProjectFirstAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProjectSecondAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "ownerMarcoAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "ownerProjectFirstAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "ownerProjectSecondAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "owner",
          isMut: true,
          isSigner: true
        },
        {
          name: "programAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "closePool",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapstatev1"
              }
            ]
          }
        },
        {
          name: "pool",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswappoolv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_x"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_y"
              }
            ]
          }
        },
        {
          name: "farm",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapfarmv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Pool",
                path: "pool"
              }
            ]
          }
        },
        {
          name: "tokenX",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenY",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenMarcoAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProjectFirstAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProjectSecondAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolXAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolYAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "buybackXAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "buybackYAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "programAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "withdrawMercantiFee",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapstatev1"
              }
            ]
          }
        },
        {
          name: "pool",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswappoolv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_x"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_y"
              }
            ]
          }
        },
        {
          name: "tokenX",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenY",
          isMut: false,
          isSigner: false
        },
        {
          name: "mercantiXAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "mercantiYAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolXAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolYAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "programAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "addSupply",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapstatev1"
              }
            ]
          }
        },
        {
          name: "pool",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswappoolv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_x"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_y"
              }
            ]
          }
        },
        {
          name: "farm",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapfarmv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Pool",
                path: "pool"
              }
            ]
          }
        },
        {
          name: "tokenX",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenY",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenMarcoAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProjectFirstAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProjectSecondAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "adminMarcoAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "adminProjectFirstAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "adminProjectSecondAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "supplyMarco",
          type: {
            defined: "Token"
          }
        },
        {
          name: "supplyProjectFirst",
          type: {
            defined: "Token"
          }
        },
        {
          name: "supplyProjectSecond",
          type: {
            defined: "Token"
          }
        },
        {
          name: "duration",
          type: "u64"
        }
      ]
    },
    {
      name: "updateFees",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapstatev1"
              }
            ]
          }
        },
        {
          name: "pool",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswappoolv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_x"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_y"
              }
            ]
          }
        },
        {
          name: "tokenX",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenY",
          isMut: false,
          isSigner: false
        },
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "programAuthority",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "newBuybackFee",
          type: {
            defined: "FixedPoint"
          }
        },
        {
          name: "newProjectFee",
          type: {
            defined: "FixedPoint"
          }
        },
        {
          name: "newProviderFee",
          type: {
            defined: "FixedPoint"
          }
        },
        {
          name: "newMercantiFee",
          type: {
            defined: "FixedPoint"
          }
        }
      ]
    },
    {
      name: "resetFarm",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapstatev1"
              }
            ]
          }
        },
        {
          name: "pool",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswappoolv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_x"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "token_y"
              }
            ]
          }
        },
        {
          name: "farm",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapfarmv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Pool",
                path: "pool"
              }
            ]
          }
        },
        {
          name: "tokenX",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenY",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenMarco",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenMarcoAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProjectFirstAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProjectSecondAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "adminMarcoAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "adminProjectFirstAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "adminProjectSecondAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "programAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "updateRewardTokens",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapstatev1"
              }
            ]
          }
        },
        {
          name: "pool",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswappoolv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Pool",
                path: "pool.token_x"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Pool",
                path: "pool.token_y"
              }
            ]
          }
        },
        {
          name: "farm",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "bonkswapfarmv1"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Pool",
                path: "pool"
              }
            ]
          }
        },
        {
          name: "tokenMarcoAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProjectFirstAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProjectSecondAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenMarco",
          isMut: false,
          isSigner: false
        },
        {
          name: "newTokenMarcoAccount",
          isMut: true,
          isSigner: true
        },
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "programAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    }
  ],
  accounts: [
    {
      name: "Farm",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool",
            type: "publicKey"
          },
          {
            name: "tokens",
            type: {
              array: [
                "publicKey",
                3
              ]
            }
          },
          {
            name: "tokenAccounts",
            type: {
              array: [
                "publicKey",
                3
              ]
            }
          },
          {
            name: "supply",
            type: {
              array: [
                {
                  defined: "Token"
                },
                3
              ]
            }
          },
          {
            name: "supplyLeft",
            type: {
              array: [
                {
                  defined: "Token"
                },
                3
              ]
            }
          },
          {
            name: "accumulatedSecondsPerShare",
            type: {
              defined: "FixedPoint"
            }
          },
          {
            name: "offsetSecondsPerShare",
            type: {
              defined: "FixedPoint"
            }
          },
          {
            name: "startTime",
            type: "u64"
          },
          {
            name: "endTime",
            type: "u64"
          },
          {
            name: "lastUpdate",
            type: "u64"
          },
          {
            name: "bump",
            type: "u8"
          },
          {
            name: "farmType",
            type: {
              defined: "FarmType"
            }
          }
        ]
      }
    },
    {
      name: "PoolV2",
      type: {
        kind: "struct",
        fields: [
          {
            name: "tokenX",
            type: "publicKey"
          },
          {
            name: "tokenY",
            type: "publicKey"
          },
          {
            name: "poolXAccount",
            type: "publicKey"
          },
          {
            name: "poolYAccount",
            type: "publicKey"
          },
          {
            name: "admin",
            type: "publicKey"
          },
          {
            name: "projectOwner",
            type: "publicKey"
          },
          {
            name: "tokenXReserve",
            type: {
              defined: "Token"
            }
          },
          {
            name: "tokenYReserve",
            type: {
              defined: "Token"
            }
          },
          {
            name: "selfShares",
            type: {
              defined: "Token"
            }
          },
          {
            name: "allShares",
            type: {
              defined: "Token"
            }
          },
          {
            name: "buybackAmountX",
            type: {
              defined: "Token"
            }
          },
          {
            name: "buybackAmountY",
            type: {
              defined: "Token"
            }
          },
          {
            name: "projectAmountX",
            type: {
              defined: "Token"
            }
          },
          {
            name: "projectAmountY",
            type: {
              defined: "Token"
            }
          },
          {
            name: "mercantiAmountX",
            type: {
              defined: "Token"
            }
          },
          {
            name: "mercantiAmountY",
            type: {
              defined: "Token"
            }
          },
          {
            name: "lpAccumulatorX",
            type: {
              defined: "FixedPoint"
            }
          },
          {
            name: "lpAccumulatorY",
            type: {
              defined: "FixedPoint"
            }
          },
          {
            name: "constK",
            type: {
              defined: "Product"
            }
          },
          {
            name: "price",
            type: {
              defined: "FixedPoint"
            }
          },
          {
            name: "lpFee",
            type: {
              defined: "FixedPoint"
            }
          },
          {
            name: "buybackFee",
            type: {
              defined: "FixedPoint"
            }
          },
          {
            name: "projectFee",
            type: {
              defined: "FixedPoint"
            }
          },
          {
            name: "mercantiFee",
            type: {
              defined: "FixedPoint"
            }
          },
          {
            name: "farmCount",
            type: "u64"
          },
          {
            name: "poolBump",
            type: "u8"
          },
          {
            name: "lpToken",
            type: "publicKey"
          },
          {
            name: "lpTokenMintBump",
            type: "u8"
          },
          {
            name: "padding",
            type: {
              array: [
                "u64",
                8
              ]
            }
          }
        ]
      }
    },
    {
      name: "Pool",
      type: {
        kind: "struct",
        fields: [
          {
            name: "tokenX",
            type: "publicKey"
          },
          {
            name: "tokenY",
            type: "publicKey"
          },
          {
            name: "poolXAccount",
            type: "publicKey"
          },
          {
            name: "poolYAccount",
            type: "publicKey"
          },
          {
            name: "admin",
            type: "publicKey"
          },
          {
            name: "projectOwner",
            type: "publicKey"
          },
          {
            name: "tokenXReserve",
            type: {
              defined: "Token"
            }
          },
          {
            name: "tokenYReserve",
            type: {
              defined: "Token"
            }
          },
          {
            name: "selfShares",
            type: {
              defined: "Token"
            }
          },
          {
            name: "allShares",
            type: {
              defined: "Token"
            }
          },
          {
            name: "buybackAmountX",
            type: {
              defined: "Token"
            }
          },
          {
            name: "buybackAmountY",
            type: {
              defined: "Token"
            }
          },
          {
            name: "projectAmountX",
            type: {
              defined: "Token"
            }
          },
          {
            name: "projectAmountY",
            type: {
              defined: "Token"
            }
          },
          {
            name: "mercantiAmountX",
            type: {
              defined: "Token"
            }
          },
          {
            name: "mercantiAmountY",
            type: {
              defined: "Token"
            }
          },
          {
            name: "lpAccumulatorX",
            type: {
              defined: "FixedPoint"
            }
          },
          {
            name: "lpAccumulatorY",
            type: {
              defined: "FixedPoint"
            }
          },
          {
            name: "constK",
            type: {
              defined: "Product"
            }
          },
          {
            name: "price",
            type: {
              defined: "FixedPoint"
            }
          },
          {
            name: "lpFee",
            type: {
              defined: "FixedPoint"
            }
          },
          {
            name: "buybackFee",
            type: {
              defined: "FixedPoint"
            }
          },
          {
            name: "projectFee",
            type: {
              defined: "FixedPoint"
            }
          },
          {
            name: "mercantiFee",
            type: {
              defined: "FixedPoint"
            }
          },
          {
            name: "farmCount",
            type: "u64"
          },
          {
            name: "bump",
            type: "u8"
          }
        ]
      }
    },
    {
      name: "Provider",
      type: {
        kind: "struct",
        fields: [
          {
            name: "tokenX",
            type: "publicKey"
          },
          {
            name: "tokenY",
            type: "publicKey"
          },
          {
            name: "owner",
            type: "publicKey"
          },
          {
            name: "shares",
            type: {
              defined: "Token"
            }
          },
          {
            name: "lastFeeAccumulatorX",
            type: {
              defined: "FixedPoint"
            }
          },
          {
            name: "lastFeeAccumulatorY",
            type: {
              defined: "FixedPoint"
            }
          },
          {
            name: "lastSecondsPerShare",
            type: {
              defined: "FixedPoint"
            }
          },
          {
            name: "lastWithdrawTime",
            type: "u64"
          },
          {
            name: "tokensOwedX",
            type: {
              defined: "Token"
            }
          },
          {
            name: "tokensOwedY",
            type: {
              defined: "Token"
            }
          },
          {
            name: "currentFarmCount",
            type: "u64"
          },
          {
            name: "bump",
            type: "u8"
          }
        ]
      }
    },
    {
      name: "State",
      type: {
        kind: "struct",
        fields: [
          {
            name: "admin",
            type: "publicKey"
          },
          {
            name: "programAuthority",
            type: "publicKey"
          },
          {
            name: "bump",
            type: "u8"
          },
          {
            name: "nonce",
            type: "u8"
          }
        ]
      }
    }
  ],
  types: [
    {
      name: "FixedPoint",
      type: {
        kind: "struct",
        fields: [
          {
            name: "v",
            type: "u128"
          }
        ]
      }
    },
    {
      name: "Token",
      type: {
        kind: "struct",
        fields: [
          {
            name: "v",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "Product",
      type: {
        kind: "struct",
        fields: [
          {
            name: "v",
            type: "u128"
          }
        ]
      }
    },
    {
      name: "FarmType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Single"
          },
          {
            name: "Dual"
          },
          {
            name: "Triple"
          }
        ]
      }
    }
  ],
  errors: [
    {
      code: 6e3,
      name: "DeltaTooBig",
      msg: "Delta greater than provider's tokens"
    },
    {
      code: 6001,
      name: "TokenUnderflow",
      msg: "Token amount underflow"
    },
    {
      code: 6002,
      name: "WrongRatio",
      msg: "Wrong tokens ratio"
    },
    {
      code: 6003,
      name: "TooMuchShares",
      msg: "Too much shares provided"
    },
    {
      code: 6004,
      name: "SwapToBig",
      msg: "Swap too big"
    },
    {
      code: 6005,
      name: "FeeExceeded",
      msg: "Fee exceeded 100%"
    },
    {
      code: 6007,
      name: "ScalesNotEqual",
      msg: "Scales have to be equal"
    },
    {
      code: 6008,
      name: "FeeExceededDeltaOut",
      msg: "Fees exceeded delta_out"
    },
    {
      code: 6009,
      name: "PriceLimitExceeded",
      msg: "Price limit exceeded"
    },
    {
      code: 6010,
      name: "MintMismatch",
      msg: "Mint mismatch"
    },
    {
      code: 6011,
      name: "TokensAreTheSame",
      msg: "Tokens are the same"
    },
    {
      code: 6012,
      name: "WrongFarm",
      msg: "Cannot add supply to wrong farm"
    },
    {
      code: 6013,
      name: "RewardsExceedingSupply",
      msg: "Cannot withdraw rewards exceeding supply left"
    },
    {
      code: 6014,
      name: "FarmNotEnded",
      msg: "Farm has not ended, cannot add additional rewards"
    },
    {
      code: 6015,
      name: "ZeroAmount",
      msg: "Must provide a nonzero amount"
    },
    {
      code: 6016,
      name: "InvariantDecreased",
      msg: "Invariant has changed"
    }
  ],
  metadata: {
    address: "BSwp6bEBihVLdqJRKGgzjcGLHkcTuzmSo1TQkHepzH8p"
  }
};

// idl/aldrin-clob.json
var aldrin_clob_default = {
  version: "0.0.0",
  name: "Aldrin CLOB Dex",
  instructions: [
    {
      name: "InitializeMarket",
      accounts: [
        {
          name: "marketToInitialize",
          isMut: true,
          isSigner: false,
          docs: [
            "the market to initialize"
          ]
        },
        {
          name: "requestQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "zeroed out request queue"
          ]
        },
        {
          name: "eventQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "zeroed out event queue"
          ]
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false,
          docs: [
            "zeroed out bids"
          ]
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false,
          docs: [
            "zeroed out asks"
          ]
        },
        {
          name: "splTokenAccountCoin",
          isMut: true,
          isSigner: false,
          docs: [
            "spl-token account for the coin currency"
          ]
        },
        {
          name: "splTokenAccountPrice",
          isMut: true,
          isSigner: false,
          docs: [
            "spl-token account for the price currency"
          ]
        },
        {
          name: "coinCurrencyMint",
          isMut: false,
          isSigner: false,
          docs: [
            "coin currency Mint"
          ]
        },
        {
          name: "priceCurrencyMint",
          isMut: false,
          isSigner: false,
          docs: [
            "price currency Mint"
          ]
        },
        {
          name: "rentSysvar",
          isMut: false,
          isSigner: false,
          docs: [
            "the rent sysvar"
          ]
        },
        {
          name: "openOrdersMarketAuthority",
          isMut: false,
          isSigner: false,
          optional: true,
          docs: [
            "open orders market authority (optional)"
          ]
        },
        {
          name: "pruneAuthority",
          isMut: false,
          isSigner: false,
          optional: true,
          docs: [
            "prune authority (optional, requires open orders market authority)"
          ]
        },
        {
          name: "crankAuthority",
          isMut: false,
          isSigner: false,
          optional: true,
          docs: [
            "crank authority (optional, requires prune authority)"
          ]
        }
      ],
      args: [
        {
          name: "args",
          type: {
            defined: "InitializeMarketInstruction"
          }
        }
      ]
    },
    {
      name: "NewOrder",
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: false,
          docs: [
            "the market"
          ]
        },
        {
          name: "openOrders",
          isMut: true,
          isSigner: false,
          docs: [
            "the OpenOrders account to use"
          ]
        },
        {
          name: "requestQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "the request queue"
          ]
        },
        {
          name: "orderPayer",
          isMut: true,
          isSigner: false,
          docs: [
            "the (coin or price currency) account paying for the order"
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true,
          docs: [
            "owner of the OpenOrders account"
          ]
        },
        {
          name: "coinVault",
          isMut: true,
          isSigner: false,
          docs: [
            "coin vault"
          ]
        },
        {
          name: "pcVault",
          isMut: true,
          isSigner: false,
          docs: [
            "pc vault"
          ]
        },
        {
          name: "splTokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "spl token program"
          ]
        },
        {
          name: "rentSysvar",
          isMut: false,
          isSigner: false,
          docs: [
            "the rent sysvar"
          ]
        },
        {
          name: "feeDiscounts",
          isMut: false,
          isSigner: false,
          optional: true,
          docs: [
            "(optional) the (M)SRM account used for fee discounts"
          ]
        }
      ],
      args: [
        {
          name: "args",
          type: {
            defined: "NewOrderInstructionV1"
          },
          docs: []
        }
      ]
    },
    {
      name: "MatchOrders",
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: false,
          docs: [
            "market"
          ]
        },
        {
          name: "requestQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "req_q"
          ]
        },
        {
          name: "eventQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "event_q"
          ]
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false,
          docs: [
            "bids"
          ]
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false,
          docs: [
            "asks"
          ]
        }
      ],
      args: [
        {
          name: "limit",
          type: "u16"
        }
      ]
    },
    {
      name: "ConsumeEvents",
      accounts: [
        {
          name: "openOrders",
          isMut: true,
          isSigner: false,
          docs: [
            "OpenOrders; TODO: this is an array of accounts"
          ]
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          docs: [
            "market"
          ]
        },
        {
          name: "eventQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "event queue"
          ]
        },
        {
          name: "coinFeeReceivable",
          isMut: true,
          isSigner: false,
          docs: []
        },
        {
          name: "pcFeeReceivable",
          isMut: true,
          isSigner: false,
          docs: []
        }
      ],
      args: [
        {
          name: "limit",
          type: "u16",
          docs: []
        }
      ]
    },
    {
      name: "CancelOrder",
      accounts: [
        {
          name: "market",
          isMut: false,
          isSigner: false,
          docs: [
            "market"
          ]
        },
        {
          name: "openOrders",
          isMut: true,
          isSigner: false,
          docs: [
            "OpenOrders"
          ]
        },
        {
          name: "requestQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "the request queue"
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true,
          docs: [
            "the OpenOrders owner"
          ]
        }
      ],
      args: [
        {
          name: "args",
          type: {
            defined: "CancelOrderInstructionV2"
          }
        }
      ]
    },
    {
      name: "SettleFunds",
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: false,
          docs: [
            "market"
          ]
        },
        {
          name: "openOrders",
          isMut: true,
          isSigner: false,
          docs: [
            "OpenOrders"
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true,
          docs: [
            "the OpenOrders owner"
          ]
        },
        {
          name: "coinVault",
          isMut: true,
          isSigner: false,
          docs: [
            "coin vault"
          ]
        },
        {
          name: "pcVault",
          isMut: true,
          isSigner: false,
          docs: [
            "pc vault"
          ]
        },
        {
          name: "coinWallet",
          isMut: true,
          isSigner: false,
          docs: [
            "coin wallet"
          ]
        },
        {
          name: "pcWallet",
          isMut: true,
          isSigner: false,
          docs: [
            "pc wallet"
          ]
        },
        {
          name: "vaultSigner",
          isMut: false,
          isSigner: false,
          docs: [
            "vault signer"
          ]
        },
        {
          name: "splTokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "spl token program"
          ]
        },
        {
          name: "referrerPcWallet",
          isMut: true,
          isSigner: false,
          optional: true,
          docs: [
            "(optional) referrer pc wallet"
          ]
        }
      ],
      args: []
    },
    {
      name: "CancelOrderByClientId",
      accounts: [
        {
          name: "market",
          isMut: false,
          isSigner: false,
          docs: [
            "market"
          ]
        },
        {
          name: "openOrders",
          isMut: true,
          isSigner: false,
          docs: [
            "OpenOrders"
          ]
        },
        {
          name: "requestQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "the request queue"
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true,
          docs: [
            "the OpenOrders owner"
          ]
        }
      ],
      args: [
        {
          name: "clientOrderID",
          type: "u64",
          docs: []
        }
      ]
    },
    {
      name: "DisableMarket",
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: false,
          docs: [
            "market"
          ]
        },
        {
          name: "disableAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "disable authority"
          ]
        }
      ],
      args: []
    },
    {
      name: "SweepFees",
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: false,
          docs: [
            "market"
          ]
        },
        {
          name: "pcVault",
          isMut: true,
          isSigner: false,
          docs: [
            "pc vault"
          ]
        },
        {
          name: "feeSweepingAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "fee sweeping authority"
          ]
        },
        {
          name: "feeReceivable",
          isMut: true,
          isSigner: false,
          docs: [
            "fee receivable account"
          ]
        },
        {
          name: "vaultSigner",
          isMut: false,
          isSigner: false,
          docs: [
            "vault signer"
          ]
        },
        {
          name: "splTokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "spl token program"
          ]
        }
      ],
      args: []
    },
    {
      name: "NewOrderV2",
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: false,
          docs: [
            "the market"
          ]
        },
        {
          name: "openOrders",
          isMut: true,
          isSigner: false,
          docs: [
            "the OpenOrders account to use"
          ]
        },
        {
          name: "requestQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "the request queue"
          ]
        },
        {
          name: "orderPayer",
          isMut: true,
          isSigner: false,
          docs: [
            "the (coin or price currency) account paying for the order"
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true,
          docs: [
            "owner of the OpenOrders account"
          ]
        },
        {
          name: "coinVault",
          isMut: true,
          isSigner: false,
          docs: [
            "coin vault"
          ]
        },
        {
          name: "pcVault",
          isMut: true,
          isSigner: false,
          docs: [
            "pc vault"
          ]
        },
        {
          name: "splTokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "spl token program"
          ]
        },
        {
          name: "rentSysvar",
          isMut: false,
          isSigner: false,
          docs: [
            "the rent sysvar"
          ]
        },
        {
          name: "feeDiscounts",
          isMut: false,
          isSigner: false,
          optional: true,
          docs: [
            "(optional) the (M)SRM account used for fee discounts"
          ]
        }
      ],
      args: [
        {
          name: "args",
          type: {
            defined: "NewOrderInstructionV2"
          }
        }
      ]
    },
    {
      name: "NewOrderV3",
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: false,
          docs: [
            "the market"
          ]
        },
        {
          name: "openOrders",
          isMut: true,
          isSigner: false,
          docs: [
            "the OpenOrders account to use"
          ]
        },
        {
          name: "requestQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "the request queue"
          ]
        },
        {
          name: "eventQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "the event queue"
          ]
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false,
          docs: [
            "bids"
          ]
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false,
          docs: [
            "asks"
          ]
        },
        {
          name: "orderPayer",
          isMut: true,
          isSigner: false,
          docs: [
            "the (coin or price currency) account paying for the order"
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true,
          docs: [
            "owner of the OpenOrders account"
          ]
        },
        {
          name: "coinVault",
          isMut: true,
          isSigner: false,
          docs: [
            "coin vault"
          ]
        },
        {
          name: "pcVault",
          isMut: true,
          isSigner: false,
          docs: [
            "pc vault"
          ]
        },
        {
          name: "splTokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "spl token program"
          ]
        },
        {
          name: "rentSysvar",
          isMut: false,
          isSigner: false,
          docs: [
            "the rent sysvar"
          ]
        },
        {
          name: "feeDiscounts",
          isMut: false,
          isSigner: false,
          optional: true,
          docs: [
            "(optional) the (M)SRM account used for fee discounts"
          ]
        }
      ],
      args: [
        {
          name: "args",
          type: {
            defined: "NewOrderInstructionV3"
          },
          docs: []
        }
      ]
    },
    {
      name: "CancelOrderV2",
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: false,
          docs: [
            "market"
          ]
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false,
          docs: [
            "bids"
          ]
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false,
          docs: [
            "asks"
          ]
        },
        {
          name: "openOrders",
          isMut: true,
          isSigner: false,
          docs: [
            "OpenOrders"
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true,
          docs: [
            "the OpenOrders owner"
          ]
        },
        {
          name: "eventQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "event_q"
          ]
        }
      ],
      args: [
        {
          name: "args",
          type: {
            defined: "CancelOrderInstructionV2"
          },
          docs: []
        }
      ]
    },
    {
      name: "CancelOrderByClientIdV2",
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: false,
          docs: [
            "market"
          ]
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false,
          docs: [
            "bids"
          ]
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false,
          docs: [
            "asks"
          ]
        },
        {
          name: "openOrders",
          isMut: true,
          isSigner: false,
          docs: [
            "OpenOrders"
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true,
          docs: [
            "the OpenOrders owner"
          ]
        },
        {
          name: "eventQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "event_q"
          ]
        }
      ],
      args: [
        {
          name: "client_order_id",
          type: "u64",
          docs: []
        }
      ]
    },
    {
      name: "SendTake",
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: false,
          docs: [
            "market"
          ]
        },
        {
          name: "requestQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "the request queue"
          ]
        },
        {
          name: "eventQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "the event queue"
          ]
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false,
          docs: [
            "bids"
          ]
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false,
          docs: [
            "asks"
          ]
        },
        {
          name: "coinCurrencyWallet",
          isMut: true,
          isSigner: false,
          docs: [
            "the coin currency wallet account"
          ]
        },
        {
          name: "priceCurrencyWallet",
          isMut: true,
          isSigner: false,
          docs: [
            "the price currency wallet account"
          ]
        },
        {
          name: "signer",
          isMut: false,
          isSigner: false,
          docs: [
            "signer"
          ]
        },
        {
          name: "coinVault",
          isMut: true,
          isSigner: false,
          docs: [
            "coin vault"
          ]
        },
        {
          name: "pcVault",
          isMut: true,
          isSigner: false,
          docs: [
            "pc vault"
          ]
        },
        {
          name: "splTokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "spl token program"
          ]
        },
        {
          name: "vaultSigner",
          isMut: false,
          isSigner: false,
          docs: [
            "vault signer"
          ]
        },
        {
          name: "feeDiscounts",
          isMut: false,
          isSigner: false,
          docs: [
            "(optional) the (M)SRM account used for fee discounts"
          ]
        }
      ],
      args: [
        {
          name: "args",
          type: {
            defined: "SendTakeInstruction"
          }
        }
      ]
    },
    {
      name: "CloseOpenOrders",
      accounts: [
        {
          name: "openOrders",
          isMut: true,
          isSigner: false,
          docs: [
            "OpenOrders"
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true,
          docs: [
            "the OpenOrders owner"
          ]
        },
        {
          name: "destination",
          isMut: true,
          isSigner: false,
          docs: [
            "the destination account to send rent exemption SOL to"
          ]
        },
        {
          name: "market",
          isMut: false,
          isSigner: false,
          docs: [
            "market"
          ]
        }
      ],
      args: []
    },
    {
      name: "InitOpenOrders",
      accounts: [
        {
          name: "openOrders",
          isMut: true,
          isSigner: false,
          docs: [
            "OpenOrders"
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true,
          docs: [
            "the OpenOrders owner"
          ]
        },
        {
          name: "market",
          isMut: false,
          isSigner: false,
          docs: [
            "market"
          ]
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false,
          docs: [
            "TODO: rent?"
          ]
        },
        {
          name: "marketAuthority",
          isMut: false,
          isSigner: false,
          optional: true,
          docs: [
            "open orders market authority (optional)."
          ]
        }
      ],
      args: []
    },
    {
      name: "Prune",
      docs: [
        "Removes all orders for a given open orders account from the orderbook."
      ],
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: false,
          docs: [
            "market"
          ]
        },
        {
          name: "bids",
          isMut: true,
          isSigner: false,
          docs: [
            "bids"
          ]
        },
        {
          name: "asks",
          isMut: true,
          isSigner: false,
          docs: [
            "asks"
          ]
        },
        {
          name: "pruneAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "prune authority"
          ]
        },
        {
          name: "openOrders",
          isMut: true,
          isSigner: false,
          docs: [
            "open orders."
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: false,
          docs: [
            "open orders owner."
          ]
        },
        {
          name: "eventQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "event queue."
          ]
        }
      ],
      args: [
        {
          name: "limit",
          type: "u16",
          docs: []
        }
      ]
    },
    {
      name: "ConsumeEventsPermissioned",
      accounts: [
        {
          name: "openOrders",
          isMut: true,
          isSigner: false,
          docs: [
            "OpenOrders; TODO: this is an array"
          ]
        },
        {
          name: "market",
          isMut: true,
          isSigner: false,
          docs: [
            "market"
          ]
        },
        {
          name: "eventQueue",
          isMut: true,
          isSigner: false,
          docs: [
            "event queue"
          ]
        },
        {
          name: "crankAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "crank authority"
          ]
        }
      ],
      args: [
        {
          name: "limit",
          type: "u16",
          docs: []
        }
      ]
    }
  ],
  accounts: [
    {
      name: "MarketStateV2",
      type: {
        kind: "struct",
        fields: [
          {
            name: "inner",
            type: {
              defined: "MarketState"
            },
            docs: []
          },
          {
            name: "open_orders_authority",
            type: "publicKey",
            docs: []
          },
          {
            name: "prune_authority",
            type: "publicKey",
            docs: []
          },
          {
            name: "consume_events_authority",
            type: "publicKey",
            docs: []
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                992
              ]
            },
            docs: [
              "Unused bytes for future upgrades."
            ]
          }
        ]
      },
      docs: []
    },
    {
      name: "MarketState",
      type: {
        kind: "struct",
        fields: [
          {
            name: "account_flags",
            type: "u64",
            docs: [
              "0",
              "Initialized, Market"
            ]
          },
          {
            name: "own_address",
            type: {
              array: [
                "u64",
                4
              ]
            },
            docs: [
              "1"
            ]
          },
          {
            name: "vault_signer_nonce",
            type: "u64",
            docs: [
              "5"
            ]
          },
          {
            name: "coin_mint",
            type: {
              array: [
                "u64",
                4
              ]
            },
            docs: [
              "6"
            ]
          },
          {
            name: "pc_mint",
            type: {
              array: [
                "u64",
                4
              ]
            },
            docs: [
              "10"
            ]
          },
          {
            name: "coin_vault",
            type: {
              array: [
                "u64",
                4
              ]
            },
            docs: [
              "14"
            ]
          },
          {
            name: "coin_deposits_total",
            type: "u64",
            docs: [
              "18"
            ]
          },
          {
            name: "coin_fees_accrued",
            type: "u64",
            docs: [
              "19"
            ]
          },
          {
            name: "pc_vault",
            type: {
              array: [
                "u64",
                4
              ]
            },
            docs: [
              "20"
            ]
          },
          {
            name: "pc_deposits_total",
            type: "u64",
            docs: [
              "24"
            ]
          },
          {
            name: "pc_fees_accrued",
            type: "u64",
            docs: [
              "25"
            ]
          },
          {
            name: "pc_dust_threshold",
            type: "u64",
            docs: [
              "26"
            ]
          },
          {
            name: "req_q",
            type: {
              array: [
                "u64",
                4
              ]
            },
            docs: [
              "27"
            ]
          },
          {
            name: "event_q",
            type: {
              array: [
                "u64",
                4
              ]
            },
            docs: [
              "31"
            ]
          },
          {
            name: "bids",
            type: {
              array: [
                "u64",
                4
              ]
            },
            docs: [
              "35"
            ]
          },
          {
            name: "asks",
            type: {
              array: [
                "u64",
                4
              ]
            },
            docs: [
              "39"
            ]
          },
          {
            name: "coin_lot_size",
            type: "u64",
            docs: [
              "43"
            ]
          },
          {
            name: "pc_lot_size",
            type: "u64",
            docs: [
              "44"
            ]
          },
          {
            name: "fee_rate_bps",
            type: "u64",
            docs: [
              "45"
            ]
          },
          {
            name: "referrer_rebates_accrued",
            type: "u64",
            docs: [
              "46"
            ]
          }
        ]
      },
      docs: []
    },
    {
      name: "OpenOrders",
      type: {
        kind: "struct",
        fields: [
          {
            name: "account_flags",
            type: "u64",
            docs: [
              "Initialized, OpenOrders"
            ]
          },
          {
            name: "market",
            type: {
              array: [
                "u64",
                4
              ]
            },
            docs: []
          },
          {
            name: "owner",
            type: {
              array: [
                "u64",
                4
              ]
            },
            docs: []
          },
          {
            name: "native_coin_free",
            type: "u64",
            docs: []
          },
          {
            name: "native_coin_total",
            type: "u64",
            docs: []
          },
          {
            name: "native_pc_free",
            type: "u64",
            docs: []
          },
          {
            name: "native_pc_total",
            type: "u64",
            docs: []
          },
          {
            name: "free_slot_bits",
            type: "u128",
            docs: []
          },
          {
            name: "is_bid_bits",
            type: "u128",
            docs: []
          },
          {
            name: "orders",
            type: {
              array: [
                "u128",
                128
              ]
            },
            docs: []
          },
          {
            name: "client_order_ids",
            type: {
              array: [
                "u64",
                128
              ]
            },
            docs: [
              "Using Option<NonZeroU64> in a pod type requires nightly"
            ]
          },
          {
            name: "referrer_rebates_accrued",
            type: "u64",
            docs: []
          }
        ]
      },
      docs: []
    },
    {
      name: "RequestQueueHeader",
      type: {
        kind: "struct",
        fields: [
          {
            name: "account_flags",
            type: "u64",
            docs: [
              "Initialized, RequestQueue"
            ]
          },
          {
            name: "head",
            type: "u64",
            docs: []
          },
          {
            name: "count",
            type: "u64",
            docs: []
          },
          {
            name: "next_seq_num",
            type: "u64",
            docs: []
          }
        ]
      },
      docs: []
    },
    {
      name: "Request",
      type: {
        kind: "struct",
        fields: [
          {
            name: "request_flags",
            type: "u8",
            docs: []
          },
          {
            name: "owner_slot",
            type: "u8",
            docs: []
          },
          {
            name: "fee_tier",
            type: "u8",
            docs: []
          },
          {
            name: "self_trade_behavior",
            type: "u8",
            docs: []
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                4
              ]
            },
            docs: []
          },
          {
            name: "max_coin_qty_or_cancel_id",
            type: "u64",
            docs: []
          },
          {
            name: "native_pc_qty_locked",
            type: "u64",
            docs: []
          },
          {
            name: "order_id",
            type: "u128",
            docs: []
          },
          {
            name: "owner",
            type: {
              array: [
                "u64",
                4
              ]
            },
            docs: []
          },
          {
            name: "client_order_id",
            type: "u64",
            docs: []
          }
        ]
      },
      docs: []
    },
    {
      name: "RequestView",
      type: {
        kind: "enum",
        variants: [
          {
            name: "NewOrder",
            fields: [
              {
                name: "side",
                type: {
                  defined: "Side"
                },
                docs: []
              },
              {
                name: "order_type",
                type: {
                  defined: "OrderType"
                },
                docs: []
              },
              {
                name: "owner_slot",
                type: "u8",
                docs: []
              },
              {
                name: "fee_tier",
                type: {
                  defined: "FeeTier"
                },
                docs: []
              },
              {
                name: "order_id",
                type: "u128",
                docs: []
              },
              {
                name: "max_coin_qty",
                type: "u64",
                docs: []
              },
              {
                name: "native_pc_qty_locked",
                type: {
                  option: "u64"
                },
                docs: []
              },
              {
                name: "owner",
                type: {
                  array: [
                    "u64",
                    4
                  ]
                },
                docs: []
              },
              {
                name: "client_order_id",
                type: {
                  option: "u64"
                },
                docs: []
              },
              {
                name: "self_trade_behavior",
                type: {
                  defined: "SelfTradeBehavior"
                },
                docs: []
              }
            ]
          },
          {
            name: "CancelOrder",
            fields: [
              {
                name: "side",
                type: {
                  defined: "Side"
                },
                docs: []
              },
              {
                name: "order_id",
                type: "u128",
                docs: []
              },
              {
                name: "cancel_id",
                type: "u64",
                docs: []
              },
              {
                name: "expected_owner_slot",
                type: "u8",
                docs: []
              },
              {
                name: "expected_owner",
                type: {
                  array: [
                    "u64",
                    4
                  ]
                },
                docs: []
              },
              {
                name: "client_order_id",
                type: {
                  option: "u64"
                },
                docs: []
              }
            ]
          }
        ]
      },
      docs: []
    },
    {
      name: "EventQueueHeader",
      type: {
        kind: "struct",
        fields: [
          {
            name: "account_flags",
            type: "u64",
            docs: [
              "Initialized, EventQueue"
            ]
          },
          {
            name: "head",
            type: "u64",
            docs: []
          },
          {
            name: "count",
            type: "u64",
            docs: []
          },
          {
            name: "seq_num",
            type: "u64",
            docs: []
          }
        ]
      },
      docs: []
    },
    {
      name: "Event",
      type: {
        kind: "struct",
        fields: [
          {
            name: "event_flags",
            type: "u8",
            docs: []
          },
          {
            name: "owner_slot",
            type: "u8",
            docs: []
          },
          {
            name: "fee_tier",
            type: "u8",
            docs: []
          },
          {
            name: "_padding",
            type: {
              array: [
                "u8",
                5
              ]
            },
            docs: []
          },
          {
            name: "native_qty_released",
            type: "u64",
            docs: []
          },
          {
            name: "native_qty_paid",
            type: "u64",
            docs: []
          },
          {
            name: "native_fee_or_rebate",
            type: "u64",
            docs: []
          },
          {
            name: "order_id",
            type: "u128",
            docs: []
          },
          {
            name: "owner",
            type: {
              array: [
                "u64",
                4
              ]
            },
            docs: []
          },
          {
            name: "client_order_id",
            type: "u64",
            docs: []
          }
        ]
      },
      docs: []
    },
    {
      name: "EventView",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Fill",
            fields: [
              {
                name: "side",
                type: {
                  defined: "Side"
                },
                docs: []
              },
              {
                name: "maker",
                type: "bool",
                docs: []
              },
              {
                name: "native_qty_paid",
                type: "u64",
                docs: []
              },
              {
                name: "native_qty_received",
                type: "u64",
                docs: []
              },
              {
                name: "native_fee_or_rebate",
                type: "u64",
                docs: []
              },
              {
                name: "order_id",
                type: "u128",
                docs: []
              },
              {
                name: "owner",
                type: {
                  array: [
                    "u64",
                    4
                  ]
                },
                docs: []
              },
              {
                name: "owner_slot",
                type: "u8",
                docs: []
              },
              {
                name: "fee_tier",
                type: {
                  defined: "FeeTier"
                },
                docs: []
              },
              {
                name: "client_order_id",
                type: {
                  option: "u64"
                },
                docs: []
              }
            ]
          },
          {
            name: "Out",
            fields: [
              {
                name: "side",
                type: {
                  defined: "Side"
                },
                docs: []
              },
              {
                name: "release_funds",
                type: "bool",
                docs: []
              },
              {
                name: "native_qty_unlocked",
                type: "u64",
                docs: []
              },
              {
                name: "native_qty_still_locked",
                type: "u64",
                docs: []
              },
              {
                name: "order_id",
                type: "u128",
                docs: []
              },
              {
                name: "owner",
                type: {
                  array: [
                    "u64",
                    4
                  ]
                },
                docs: []
              },
              {
                name: "owner_slot",
                type: "u8",
                docs: []
              },
              {
                name: "client_order_id",
                type: {
                  option: "u64"
                },
                docs: []
              }
            ]
          }
        ]
      },
      docs: []
    }
  ],
  types: [
    {
      name: "InitializeMarketInstruction",
      type: {
        kind: "struct",
        fields: [
          {
            name: "coin_lot_size",
            type: "u64",
            docs: [
              "In the matching engine, all prices and balances are integers.",
              "This only works if the smallest representable quantity of the coin",
              "is at least a few orders of magnitude larger than the smallest representable",
              "quantity of the price currency. The internal representation also relies on",
              "on the assumption that every order will have a (quantity x price) value that",
              "fits into a u64.",
              "",
              "If these assumptions are problematic, rejigger the lot sizes."
            ]
          },
          {
            name: "pc_lot_size",
            type: "u64",
            docs: []
          },
          {
            name: "fee_rate_bps",
            type: "u16",
            docs: []
          },
          {
            name: "vault_signer_nonce",
            type: "u64",
            docs: []
          },
          {
            name: "pc_dust_threshold",
            type: "u64",
            docs: []
          }
        ]
      },
      docs: []
    },
    {
      name: "NewOrderInstructionV1",
      type: {
        kind: "struct",
        fields: [
          {
            name: "side",
            type: {
              defined: "Side"
            },
            docs: []
          },
          {
            name: "limit_price",
            type: "u64",
            docs: []
          },
          {
            name: "max_qty",
            type: "u64",
            docs: []
          },
          {
            name: "order_type",
            type: {
              defined: "OrderType"
            },
            docs: []
          },
          {
            name: "client_id",
            type: "u64",
            docs: []
          }
        ]
      },
      docs: []
    },
    {
      name: "CancelOrderInstructionV2",
      type: {
        kind: "struct",
        fields: [
          {
            name: "side",
            type: {
              defined: "Side"
            },
            docs: []
          },
          {
            name: "order_id",
            type: "u128",
            docs: []
          }
        ]
      },
      docs: []
    },
    {
      name: "NewOrderInstructionV2",
      type: {
        kind: "struct",
        fields: [
          {
            name: "side",
            type: {
              defined: "Side"
            },
            docs: []
          },
          {
            name: "limit_price",
            type: "u64",
            docs: []
          },
          {
            name: "max_qty",
            type: "u64",
            docs: []
          },
          {
            name: "order_type",
            type: {
              defined: "OrderType"
            },
            docs: []
          },
          {
            name: "client_id",
            type: "u64",
            docs: []
          },
          {
            name: "self_trade_behavior",
            type: {
              defined: "SelfTradeBehavior"
            },
            docs: []
          }
        ]
      },
      docs: []
    },
    {
      name: "NewOrderInstructionV3",
      type: {
        kind: "struct",
        fields: [
          {
            name: "side",
            type: {
              defined: "Side"
            },
            docs: []
          },
          {
            name: "limit_price",
            type: "u64",
            docs: []
          },
          {
            name: "max_coin_qty",
            type: "u64",
            docs: []
          },
          {
            name: "max_native_pc_qty_including_fees",
            type: "u64",
            docs: []
          },
          {
            name: "self_trade_behavior",
            type: {
              defined: "SelfTradeBehavior"
            },
            docs: []
          },
          {
            name: "order_type",
            type: {
              defined: "OrderType"
            },
            docs: []
          },
          {
            name: "client_order_id",
            type: "u64",
            docs: []
          },
          {
            name: "limit",
            type: "u16",
            docs: []
          }
        ]
      },
      docs: []
    },
    {
      name: "SendTakeInstruction",
      type: {
        kind: "struct",
        fields: [
          {
            name: "side",
            type: {
              defined: "Side"
            },
            docs: []
          },
          {
            name: "limit_price",
            type: "u64",
            docs: []
          },
          {
            name: "max_coin_qty",
            type: "u64",
            docs: []
          },
          {
            name: "max_native_pc_qty_including_fees",
            type: "u64",
            docs: []
          },
          {
            name: "min_coin_qty",
            type: "u64",
            docs: []
          },
          {
            name: "min_native_pc_qty",
            type: "u64",
            docs: []
          },
          {
            name: "limit",
            type: "u16",
            docs: []
          }
        ]
      },
      docs: []
    },
    {
      name: "Side",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Bid"
          },
          {
            name: "Ask"
          }
        ]
      },
      docs: []
    },
    {
      name: "OrderType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Limit"
          },
          {
            name: "ImmediateOrCancel"
          },
          {
            name: "PostOnly"
          }
        ]
      },
      docs: []
    },
    {
      name: "SelfTradeBehavior",
      type: {
        kind: "enum",
        variants: [
          {
            name: "DecrementTake"
          },
          {
            name: "CancelProvide"
          },
          {
            name: "AbortTransaction"
          }
        ]
      },
      docs: []
    },
    {
      name: "FeeTier",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Base"
          },
          {
            name: "SRM2"
          },
          {
            name: "SRM3"
          },
          {
            name: "SRM4"
          },
          {
            name: "SRM5"
          },
          {
            name: "SRM6"
          },
          {
            name: "MSRM"
          },
          {
            name: "Stable"
          }
        ]
      },
      docs: []
    }
  ],
  events: [],
  errors: [],
  metadata: {
    instruction_selector_type: "serum-fork"
  }
};

// idl/drift-v2.json
var drift_v2_default = {
  version: "2.106.0",
  name: "drift",
  instructions: [
    {
      name: "initializeUser",
      accounts: [
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "subAccountId",
          type: "u16"
        },
        {
          name: "name",
          type: {
            array: [
              "u8",
              32
            ]
          }
        }
      ]
    },
    {
      name: "initializeUserStats",
      accounts: [
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "initializeRfqUser",
      accounts: [
        {
          name: "rfqUser",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "initializeSwiftUserOrders",
      accounts: [
        {
          name: "swiftUserOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "user",
          isMut: false,
          isSigner: false
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "numOrders",
          type: "u16"
        }
      ]
    },
    {
      name: "resizeSwiftUserOrders",
      accounts: [
        {
          name: "swiftUserOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: true,
          isSigner: true
        },
        {
          name: "user",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "numOrders",
          type: "u16"
        }
      ]
    },
    {
      name: "initializeReferrerName",
      accounts: [
        {
          name: "referrerName",
          isMut: true,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "name",
          type: {
            array: [
              "u8",
              32
            ]
          }
        }
      ]
    },
    {
      name: "deposit",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "spotMarketVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "userTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "marketIndex",
          type: "u16"
        },
        {
          name: "amount",
          type: "u64"
        },
        {
          name: "reduceOnly",
          type: "bool"
        }
      ]
    },
    {
      name: "withdraw",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "spotMarketVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "driftSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "userTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "marketIndex",
          type: "u16"
        },
        {
          name: "amount",
          type: "u64"
        },
        {
          name: "reduceOnly",
          type: "bool"
        }
      ]
    },
    {
      name: "transferDeposit",
      accounts: [
        {
          name: "fromUser",
          isMut: true,
          isSigner: false
        },
        {
          name: "toUser",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarketVault",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "marketIndex",
          type: "u16"
        },
        {
          name: "amount",
          type: "u64"
        }
      ]
    },
    {
      name: "placePerpOrder",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: "OrderParams"
          }
        }
      ]
    },
    {
      name: "cancelOrder",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "orderId",
          type: {
            option: "u32"
          }
        }
      ]
    },
    {
      name: "cancelOrderByUserId",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "userOrderId",
          type: "u8"
        }
      ]
    },
    {
      name: "cancelOrders",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "marketType",
          type: {
            option: {
              defined: "MarketType"
            }
          }
        },
        {
          name: "marketIndex",
          type: {
            option: "u16"
          }
        },
        {
          name: "direction",
          type: {
            option: {
              defined: "PositionDirection"
            }
          }
        }
      ]
    },
    {
      name: "cancelOrdersByIds",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "orderIds",
          type: {
            vec: "u32"
          }
        }
      ]
    },
    {
      name: "modifyOrder",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "orderId",
          type: {
            option: "u32"
          }
        },
        {
          name: "modifyOrderParams",
          type: {
            defined: "ModifyOrderParams"
          }
        }
      ]
    },
    {
      name: "modifyOrderByUserId",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "userOrderId",
          type: "u8"
        },
        {
          name: "modifyOrderParams",
          type: {
            defined: "ModifyOrderParams"
          }
        }
      ]
    },
    {
      name: "placeAndTakePerpOrder",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: "OrderParams"
          }
        },
        {
          name: "successCondition",
          type: {
            option: "u32"
          }
        }
      ]
    },
    {
      name: "placeAndMakePerpOrder",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "taker",
          isMut: true,
          isSigner: false
        },
        {
          name: "takerStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: "OrderParams"
          }
        },
        {
          name: "takerOrderId",
          type: "u32"
        }
      ]
    },
    {
      name: "placeAndMakeSwiftPerpOrder",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "taker",
          isMut: true,
          isSigner: false
        },
        {
          name: "takerStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "takerSwiftUserOrders",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: "OrderParams"
          }
        },
        {
          name: "swiftOrderUuid",
          type: {
            array: [
              "u8",
              8
            ]
          }
        }
      ]
    },
    {
      name: "placeSwiftTakerOrder",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "swiftUserOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "ixSysvar",
          isMut: false,
          isSigner: false,
          docs: [
            "the supplied Sysvar could be anything else.",
            "The Instruction Sysvar has not been implemented",
            "in the Anchor framework yet, so this is the safe approach."
          ]
        }
      ],
      args: [
        {
          name: "swiftOrderParamsMessageBytes",
          type: "bytes"
        }
      ]
    },
    {
      name: "placeAndMatchRfqOrders",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "ixSysvar",
          isMut: false,
          isSigner: false,
          docs: [
            "the supplied Sysvar could be anything else.",
            "The Instruction Sysvar has not been implemented",
            "in the Anchor framework yet, so this is the safe approach."
          ]
        }
      ],
      args: [
        {
          name: "rfqMatches",
          type: {
            vec: {
              defined: "RFQMatch"
            }
          }
        }
      ]
    },
    {
      name: "placeSpotOrder",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: "OrderParams"
          }
        }
      ]
    },
    {
      name: "placeAndTakeSpotOrder",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: "OrderParams"
          }
        },
        {
          name: "fulfillmentType",
          type: {
            option: {
              defined: "SpotFulfillmentType"
            }
          }
        },
        {
          name: "makerOrderId",
          type: {
            option: "u32"
          }
        }
      ]
    },
    {
      name: "placeAndMakeSpotOrder",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "taker",
          isMut: true,
          isSigner: false
        },
        {
          name: "takerStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: "OrderParams"
          }
        },
        {
          name: "takerOrderId",
          type: "u32"
        },
        {
          name: "fulfillmentType",
          type: {
            option: {
              defined: "SpotFulfillmentType"
            }
          }
        }
      ]
    },
    {
      name: "placeOrders",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "params",
          type: {
            vec: {
              defined: "OrderParams"
            }
          }
        }
      ]
    },
    {
      name: "beginSwap",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "outSpotMarketVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "inSpotMarketVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "outTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "inTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "driftSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "instructions",
          isMut: false,
          isSigner: false,
          docs: [
            "Instructions Sysvar for instruction introspection"
          ]
        }
      ],
      args: [
        {
          name: "inMarketIndex",
          type: "u16"
        },
        {
          name: "outMarketIndex",
          type: "u16"
        },
        {
          name: "amountIn",
          type: "u64"
        }
      ]
    },
    {
      name: "endSwap",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "outSpotMarketVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "inSpotMarketVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "outTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "inTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "driftSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "instructions",
          isMut: false,
          isSigner: false,
          docs: [
            "Instructions Sysvar for instruction introspection"
          ]
        }
      ],
      args: [
        {
          name: "inMarketIndex",
          type: "u16"
        },
        {
          name: "outMarketIndex",
          type: "u16"
        },
        {
          name: "limitPrice",
          type: {
            option: "u64"
          }
        },
        {
          name: "reduceOnly",
          type: {
            option: {
              defined: "SwapReduceOnly"
            }
          }
        }
      ]
    },
    {
      name: "addPerpLpShares",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "nShares",
          type: "u64"
        },
        {
          name: "marketIndex",
          type: "u16"
        }
      ]
    },
    {
      name: "removePerpLpShares",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "sharesToBurn",
          type: "u64"
        },
        {
          name: "marketIndex",
          type: "u16"
        }
      ]
    },
    {
      name: "removePerpLpSharesInExpiringMarket",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "sharesToBurn",
          type: "u64"
        },
        {
          name: "marketIndex",
          type: "u16"
        }
      ]
    },
    {
      name: "updateUserName",
      accounts: [
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "subAccountId",
          type: "u16"
        },
        {
          name: "name",
          type: {
            array: [
              "u8",
              32
            ]
          }
        }
      ]
    },
    {
      name: "updateUserCustomMarginRatio",
      accounts: [
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "subAccountId",
          type: "u16"
        },
        {
          name: "marginRatio",
          type: "u32"
        }
      ]
    },
    {
      name: "updateUserMarginTradingEnabled",
      accounts: [
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "subAccountId",
          type: "u16"
        },
        {
          name: "marginTradingEnabled",
          type: "bool"
        }
      ]
    },
    {
      name: "updateUserPoolId",
      accounts: [
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "subAccountId",
          type: "u16"
        },
        {
          name: "poolId",
          type: "u8"
        }
      ]
    },
    {
      name: "updateUserDelegate",
      accounts: [
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "subAccountId",
          type: "u16"
        },
        {
          name: "delegate",
          type: "publicKey"
        }
      ]
    },
    {
      name: "updateUserReduceOnly",
      accounts: [
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "subAccountId",
          type: "u16"
        },
        {
          name: "reduceOnly",
          type: "bool"
        }
      ]
    },
    {
      name: "updateUserAdvancedLp",
      accounts: [
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "subAccountId",
          type: "u16"
        },
        {
          name: "advancedLp",
          type: "bool"
        }
      ]
    },
    {
      name: "updateUserProtectedMakerOrders",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "protectedMakerModeConfig",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "subAccountId",
          type: "u16"
        },
        {
          name: "protectedMakerOrders",
          type: "bool"
        }
      ]
    },
    {
      name: "deleteUser",
      accounts: [
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: true,
          isSigner: true
        }
      ],
      args: []
    },
    {
      name: "forceDeleteUser",
      accounts: [
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: true,
          isSigner: false
        },
        {
          name: "keeper",
          isMut: true,
          isSigner: true
        },
        {
          name: "driftSigner",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "deleteSwiftUserOrders",
      accounts: [
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "swiftUserOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: []
    },
    {
      name: "reclaimRent",
      accounts: [
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "enableUserHighLeverageMode",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "highLeverageModeConfig",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "subAccountId",
          type: "u16"
        }
      ]
    },
    {
      name: "fillPerpOrder",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "filler",
          isMut: true,
          isSigner: false
        },
        {
          name: "fillerStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "orderId",
          type: {
            option: "u32"
          }
        },
        {
          name: "makerOrderId",
          type: {
            option: "u32"
          }
        }
      ]
    },
    {
      name: "revertFill",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "filler",
          isMut: true,
          isSigner: false
        },
        {
          name: "fillerStats",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "fillSpotOrder",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "filler",
          isMut: true,
          isSigner: false
        },
        {
          name: "fillerStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "orderId",
          type: {
            option: "u32"
          }
        },
        {
          name: "fulfillmentType",
          type: {
            option: {
              defined: "SpotFulfillmentType"
            }
          }
        },
        {
          name: "makerOrderId",
          type: {
            option: "u32"
          }
        }
      ]
    },
    {
      name: "triggerOrder",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "filler",
          isMut: true,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "orderId",
          type: "u32"
        }
      ]
    },
    {
      name: "forceCancelOrders",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "filler",
          isMut: true,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "updateUserIdle",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "filler",
          isMut: true,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "logUserBalances",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "disableUserHighLeverageMode",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "highLeverageModeConfig",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "updateUserFuelBonus",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "updateUserStatsReferrerStatus",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "updateUserOpenOrdersCount",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "filler",
          isMut: true,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "adminDisableUpdatePerpBidAskTwap",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "disable",
          type: "bool"
        }
      ]
    },
    {
      name: "settlePnl",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "spotMarketVault",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "marketIndex",
          type: "u16"
        }
      ]
    },
    {
      name: "settleMultiplePnls",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "spotMarketVault",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "marketIndexes",
          type: {
            vec: "u16"
          }
        },
        {
          name: "mode",
          type: {
            defined: "SettlePnlMode"
          }
        }
      ]
    },
    {
      name: "settleFundingPayment",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "settleLp",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "marketIndex",
          type: "u16"
        }
      ]
    },
    {
      name: "settleExpiredMarket",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "marketIndex",
          type: "u16"
        }
      ]
    },
    {
      name: "liquidatePerp",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "liquidator",
          isMut: true,
          isSigner: false
        },
        {
          name: "liquidatorStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "marketIndex",
          type: "u16"
        },
        {
          name: "liquidatorMaxBaseAssetAmount",
          type: "u64"
        },
        {
          name: "limitPrice",
          type: {
            option: "u64"
          }
        }
      ]
    },
    {
      name: "liquidatePerpWithFill",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "liquidator",
          isMut: true,
          isSigner: false
        },
        {
          name: "liquidatorStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "marketIndex",
          type: "u16"
        }
      ]
    },
    {
      name: "liquidateSpot",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "liquidator",
          isMut: true,
          isSigner: false
        },
        {
          name: "liquidatorStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "assetMarketIndex",
          type: "u16"
        },
        {
          name: "liabilityMarketIndex",
          type: "u16"
        },
        {
          name: "liquidatorMaxLiabilityTransfer",
          type: "u128"
        },
        {
          name: "limitPrice",
          type: {
            option: "u64"
          }
        }
      ]
    },
    {
      name: "liquidateSpotWithSwapBegin",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "liquidator",
          isMut: true,
          isSigner: false
        },
        {
          name: "liquidatorStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "liabilitySpotMarketVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "assetSpotMarketVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "liabilityTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "assetTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "driftSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "instructions",
          isMut: false,
          isSigner: false,
          docs: [
            "Instructions Sysvar for instruction introspection"
          ]
        }
      ],
      args: [
        {
          name: "assetMarketIndex",
          type: "u16"
        },
        {
          name: "liabilityMarketIndex",
          type: "u16"
        },
        {
          name: "swapAmount",
          type: "u64"
        }
      ]
    },
    {
      name: "liquidateSpotWithSwapEnd",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "liquidator",
          isMut: true,
          isSigner: false
        },
        {
          name: "liquidatorStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "liabilitySpotMarketVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "assetSpotMarketVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "liabilityTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "assetTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "driftSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "instructions",
          isMut: false,
          isSigner: false,
          docs: [
            "Instructions Sysvar for instruction introspection"
          ]
        }
      ],
      args: [
        {
          name: "assetMarketIndex",
          type: "u16"
        },
        {
          name: "liabilityMarketIndex",
          type: "u16"
        }
      ]
    },
    {
      name: "liquidateBorrowForPerpPnl",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "liquidator",
          isMut: true,
          isSigner: false
        },
        {
          name: "liquidatorStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "perpMarketIndex",
          type: "u16"
        },
        {
          name: "spotMarketIndex",
          type: "u16"
        },
        {
          name: "liquidatorMaxLiabilityTransfer",
          type: "u128"
        },
        {
          name: "limitPrice",
          type: {
            option: "u64"
          }
        }
      ]
    },
    {
      name: "liquidatePerpPnlForDeposit",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "liquidator",
          isMut: true,
          isSigner: false
        },
        {
          name: "liquidatorStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "perpMarketIndex",
          type: "u16"
        },
        {
          name: "spotMarketIndex",
          type: "u16"
        },
        {
          name: "liquidatorMaxPnlTransfer",
          type: "u128"
        },
        {
          name: "limitPrice",
          type: {
            option: "u64"
          }
        }
      ]
    },
    {
      name: "setUserStatusToBeingLiquidated",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: []
    },
    {
      name: "resolvePerpPnlDeficit",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "spotMarketVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "insuranceFundVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "driftSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "spotMarketIndex",
          type: "u16"
        },
        {
          name: "perpMarketIndex",
          type: "u16"
        }
      ]
    },
    {
      name: "resolvePerpBankruptcy",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "liquidator",
          isMut: true,
          isSigner: false
        },
        {
          name: "liquidatorStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "spotMarketVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "insuranceFundVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "driftSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "quoteSpotMarketIndex",
          type: "u16"
        },
        {
          name: "marketIndex",
          type: "u16"
        }
      ]
    },
    {
      name: "resolveSpotBankruptcy",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "liquidator",
          isMut: true,
          isSigner: false
        },
        {
          name: "liquidatorStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "spotMarketVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "insuranceFundVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "driftSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "marketIndex",
          type: "u16"
        }
      ]
    },
    {
      name: "settleRevenueToInsuranceFund",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "spotMarketVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "driftSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "insuranceFundVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "spotMarketIndex",
          type: "u16"
        }
      ]
    },
    {
      name: "updateFundingRate",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "oracle",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "marketIndex",
          type: "u16"
        }
      ]
    },
    {
      name: "updatePrelaunchOracle",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: false,
          isSigner: false
        },
        {
          name: "oracle",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "updatePerpBidAskTwap",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "oracle",
          isMut: false,
          isSigner: false
        },
        {
          name: "keeperStats",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: []
    },
    {
      name: "updateSpotMarketCumulativeInterest",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "oracle",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarketVault",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "updateAmms",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "marketIndexes",
          type: {
            array: [
              "u16",
              5
            ]
          }
        }
      ]
    },
    {
      name: "updateSpotMarketExpiry",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "expiryTs",
          type: "i64"
        }
      ]
    },
    {
      name: "updateUserQuoteAssetInsuranceStake",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "insuranceFundStake",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "signer",
          isMut: false,
          isSigner: true
        },
        {
          name: "insuranceFundVault",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "updateUserGovTokenInsuranceStake",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "insuranceFundStake",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "signer",
          isMut: false,
          isSigner: true
        },
        {
          name: "insuranceFundVault",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "updateUserGovTokenInsuranceStakeDevnet",
      accounts: [
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "signer",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "govStakeAmount",
          type: "u64"
        }
      ]
    },
    {
      name: "initializeInsuranceFundStake",
      accounts: [
        {
          name: "spotMarket",
          isMut: false,
          isSigner: false
        },
        {
          name: "insuranceFundStake",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "marketIndex",
          type: "u16"
        }
      ]
    },
    {
      name: "addInsuranceFundStake",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "insuranceFundStake",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "spotMarketVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "insuranceFundVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "driftSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "userTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "marketIndex",
          type: "u16"
        },
        {
          name: "amount",
          type: "u64"
        }
      ]
    },
    {
      name: "requestRemoveInsuranceFundStake",
      accounts: [
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "insuranceFundStake",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "insuranceFundVault",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "marketIndex",
          type: "u16"
        },
        {
          name: "amount",
          type: "u64"
        }
      ]
    },
    {
      name: "cancelRequestRemoveInsuranceFundStake",
      accounts: [
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "insuranceFundStake",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "insuranceFundVault",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "marketIndex",
          type: "u16"
        }
      ]
    },
    {
      name: "removeInsuranceFundStake",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "insuranceFundStake",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "insuranceFundVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "driftSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "userTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "marketIndex",
          type: "u16"
        }
      ]
    },
    {
      name: "transferProtocolIfShares",
      accounts: [
        {
          name: "signer",
          isMut: false,
          isSigner: true
        },
        {
          name: "transferConfig",
          isMut: true,
          isSigner: false
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "insuranceFundStake",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "insuranceFundVault",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "marketIndex",
          type: "u16"
        },
        {
          name: "shares",
          type: "u128"
        }
      ]
    },
    {
      name: "updatePythPullOracle",
      accounts: [
        {
          name: "keeper",
          isMut: true,
          isSigner: true
        },
        {
          name: "pythSolanaReceiver",
          isMut: false,
          isSigner: false
        },
        {
          name: "encodedVaa",
          isMut: false,
          isSigner: false
        },
        {
          name: "priceFeed",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "feedId",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "params",
          type: "bytes"
        }
      ]
    },
    {
      name: "postPythPullOracleUpdateAtomic",
      accounts: [
        {
          name: "keeper",
          isMut: true,
          isSigner: true
        },
        {
          name: "pythSolanaReceiver",
          isMut: false,
          isSigner: false
        },
        {
          name: "guardianSet",
          isMut: false,
          isSigner: false
        },
        {
          name: "priceFeed",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "feedId",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "params",
          type: "bytes"
        }
      ]
    },
    {
      name: "postMultiPythPullOracleUpdatesAtomic",
      accounts: [
        {
          name: "keeper",
          isMut: true,
          isSigner: true
        },
        {
          name: "pythSolanaReceiver",
          isMut: false,
          isSigner: false
        },
        {
          name: "guardianSet",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "params",
          type: "bytes"
        }
      ]
    },
    {
      name: "pauseSpotMarketDepositWithdraw",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "keeper",
          isMut: false,
          isSigner: true
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "spotMarketVault",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "initialize",
      accounts: [
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        },
        {
          name: "quoteAssetMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "driftSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "initializeSpotMarket",
      accounts: [
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "spotMarketMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarketVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "insuranceFundVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "driftSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        },
        {
          name: "oracle",
          isMut: false,
          isSigner: false
        },
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "optimalUtilization",
          type: "u32"
        },
        {
          name: "optimalBorrowRate",
          type: "u32"
        },
        {
          name: "maxBorrowRate",
          type: "u32"
        },
        {
          name: "oracleSource",
          type: {
            defined: "OracleSource"
          }
        },
        {
          name: "initialAssetWeight",
          type: "u32"
        },
        {
          name: "maintenanceAssetWeight",
          type: "u32"
        },
        {
          name: "initialLiabilityWeight",
          type: "u32"
        },
        {
          name: "maintenanceLiabilityWeight",
          type: "u32"
        },
        {
          name: "imfFactor",
          type: "u32"
        },
        {
          name: "liquidatorFee",
          type: "u32"
        },
        {
          name: "ifLiquidationFee",
          type: "u32"
        },
        {
          name: "activeStatus",
          type: "bool"
        },
        {
          name: "assetTier",
          type: {
            defined: "AssetTier"
          }
        },
        {
          name: "scaleInitialAssetWeightStart",
          type: "u64"
        },
        {
          name: "withdrawGuardThreshold",
          type: "u64"
        },
        {
          name: "orderTickSize",
          type: "u64"
        },
        {
          name: "orderStepSize",
          type: "u64"
        },
        {
          name: "ifTotalFactor",
          type: "u32"
        },
        {
          name: "name",
          type: {
            array: [
              "u8",
              32
            ]
          }
        }
      ]
    },
    {
      name: "deleteInitializedSpotMarket",
      accounts: [
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "spotMarketVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "insuranceFundVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "driftSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "marketIndex",
          type: "u16"
        }
      ]
    },
    {
      name: "initializeSerumFulfillmentConfig",
      accounts: [
        {
          name: "baseSpotMarket",
          isMut: false,
          isSigner: false
        },
        {
          name: "quoteSpotMarket",
          isMut: false,
          isSigner: false
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        },
        {
          name: "serumProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "serumMarket",
          isMut: false,
          isSigner: false
        },
        {
          name: "serumOpenOrders",
          isMut: true,
          isSigner: false
        },
        {
          name: "driftSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "serumFulfillmentConfig",
          isMut: true,
          isSigner: false
        },
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "marketIndex",
          type: "u16"
        }
      ]
    },
    {
      name: "updateSerumFulfillmentConfigStatus",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "serumFulfillmentConfig",
          isMut: true,
          isSigner: false
        },
        {
          name: "admin",
          isMut: true,
          isSigner: true
        }
      ],
      args: [
        {
          name: "status",
          type: {
            defined: "SpotFulfillmentConfigStatus"
          }
        }
      ]
    },
    {
      name: "initializeOpenbookV2FulfillmentConfig",
      accounts: [
        {
          name: "baseSpotMarket",
          isMut: false,
          isSigner: false
        },
        {
          name: "quoteSpotMarket",
          isMut: false,
          isSigner: false
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        },
        {
          name: "openbookV2Program",
          isMut: false,
          isSigner: false
        },
        {
          name: "openbookV2Market",
          isMut: false,
          isSigner: false
        },
        {
          name: "driftSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "openbookV2FulfillmentConfig",
          isMut: true,
          isSigner: false
        },
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "marketIndex",
          type: "u16"
        }
      ]
    },
    {
      name: "openbookV2FulfillmentConfigStatus",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "openbookV2FulfillmentConfig",
          isMut: true,
          isSigner: false
        },
        {
          name: "admin",
          isMut: true,
          isSigner: true
        }
      ],
      args: [
        {
          name: "status",
          type: {
            defined: "SpotFulfillmentConfigStatus"
          }
        }
      ]
    },
    {
      name: "initializePhoenixFulfillmentConfig",
      accounts: [
        {
          name: "baseSpotMarket",
          isMut: false,
          isSigner: false
        },
        {
          name: "quoteSpotMarket",
          isMut: false,
          isSigner: false
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        },
        {
          name: "phoenixProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "phoenixMarket",
          isMut: false,
          isSigner: false
        },
        {
          name: "driftSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "phoenixFulfillmentConfig",
          isMut: true,
          isSigner: false
        },
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "marketIndex",
          type: "u16"
        }
      ]
    },
    {
      name: "phoenixFulfillmentConfigStatus",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "phoenixFulfillmentConfig",
          isMut: true,
          isSigner: false
        },
        {
          name: "admin",
          isMut: true,
          isSigner: true
        }
      ],
      args: [
        {
          name: "status",
          type: {
            defined: "SpotFulfillmentConfigStatus"
          }
        }
      ]
    },
    {
      name: "updateSerumVault",
      accounts: [
        {
          name: "state",
          isMut: true,
          isSigner: false
        },
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "srmVault",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "initializePerpMarket",
      accounts: [
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "oracle",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "marketIndex",
          type: "u16"
        },
        {
          name: "ammBaseAssetReserve",
          type: "u128"
        },
        {
          name: "ammQuoteAssetReserve",
          type: "u128"
        },
        {
          name: "ammPeriodicity",
          type: "i64"
        },
        {
          name: "ammPegMultiplier",
          type: "u128"
        },
        {
          name: "oracleSource",
          type: {
            defined: "OracleSource"
          }
        },
        {
          name: "contractTier",
          type: {
            defined: "ContractTier"
          }
        },
        {
          name: "marginRatioInitial",
          type: "u32"
        },
        {
          name: "marginRatioMaintenance",
          type: "u32"
        },
        {
          name: "liquidatorFee",
          type: "u32"
        },
        {
          name: "ifLiquidationFee",
          type: "u32"
        },
        {
          name: "imfFactor",
          type: "u32"
        },
        {
          name: "activeStatus",
          type: "bool"
        },
        {
          name: "baseSpread",
          type: "u32"
        },
        {
          name: "maxSpread",
          type: "u32"
        },
        {
          name: "maxOpenInterest",
          type: "u128"
        },
        {
          name: "maxRevenueWithdrawPerPeriod",
          type: "u64"
        },
        {
          name: "quoteMaxInsurance",
          type: "u64"
        },
        {
          name: "orderStepSize",
          type: "u64"
        },
        {
          name: "orderTickSize",
          type: "u64"
        },
        {
          name: "minOrderSize",
          type: "u64"
        },
        {
          name: "concentrationCoefScale",
          type: "u128"
        },
        {
          name: "curveUpdateIntensity",
          type: "u8"
        },
        {
          name: "ammJitIntensity",
          type: "u8"
        },
        {
          name: "name",
          type: {
            array: [
              "u8",
              32
            ]
          }
        }
      ]
    },
    {
      name: "initializePredictionMarket",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "deleteInitializedPerpMarket",
      accounts: [
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "marketIndex",
          type: "u16"
        }
      ]
    },
    {
      name: "moveAmmPrice",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "baseAssetReserve",
          type: "u128"
        },
        {
          name: "quoteAssetReserve",
          type: "u128"
        },
        {
          name: "sqrtK",
          type: "u128"
        }
      ]
    },
    {
      name: "recenterPerpMarketAmm",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "pegMultiplier",
          type: "u128"
        },
        {
          name: "sqrtK",
          type: "u128"
        }
      ]
    },
    {
      name: "updatePerpMarketAmmSummaryStats",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: false,
          isSigner: false
        },
        {
          name: "oracle",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: "UpdatePerpMarketSummaryStatsParams"
          }
        }
      ]
    },
    {
      name: "updatePerpMarketExpiry",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "expiryTs",
          type: "i64"
        }
      ]
    },
    {
      name: "settleExpiredMarketPoolsToRevenuePool",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "depositIntoPerpMarketFeePool",
      accounts: [
        {
          name: "state",
          isMut: true,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "sourceVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "driftSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "quoteSpotMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "spotMarketVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "amount",
          type: "u64"
        }
      ]
    },
    {
      name: "depositIntoSpotMarketVault",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "sourceVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "spotMarketVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "amount",
          type: "u64"
        }
      ]
    },
    {
      name: "depositIntoSpotMarketRevenuePool",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: true,
          isSigner: true
        },
        {
          name: "spotMarketVault",
          isMut: true,
          isSigner: false
        },
        {
          name: "userTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "amount",
          type: "u64"
        }
      ]
    },
    {
      name: "repegAmmCurve",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "oracle",
          isMut: false,
          isSigner: false
        },
        {
          name: "admin",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "newPegCandidate",
          type: "u128"
        }
      ]
    },
    {
      name: "updatePerpMarketAmmOracleTwap",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "oracle",
          isMut: false,
          isSigner: false
        },
        {
          name: "admin",
          isMut: false,
          isSigner: true
        }
      ],
      args: []
    },
    {
      name: "resetPerpMarketAmmOracleTwap",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "oracle",
          isMut: false,
          isSigner: false
        },
        {
          name: "admin",
          isMut: false,
          isSigner: true
        }
      ],
      args: []
    },
    {
      name: "updateK",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "oracle",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "sqrtK",
          type: "u128"
        }
      ]
    },
    {
      name: "updatePerpMarketMarginRatio",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "marginRatioInitial",
          type: "u32"
        },
        {
          name: "marginRatioMaintenance",
          type: "u32"
        }
      ]
    },
    {
      name: "updatePerpMarketHighLeverageMarginRatio",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "marginRatioInitial",
          type: "u16"
        },
        {
          name: "marginRatioMaintenance",
          type: "u16"
        }
      ]
    },
    {
      name: "updatePerpMarketFundingPeriod",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "fundingPeriod",
          type: "i64"
        }
      ]
    },
    {
      name: "updatePerpMarketMaxImbalances",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "unrealizedMaxImbalance",
          type: "u64"
        },
        {
          name: "maxRevenueWithdrawPerPeriod",
          type: "u64"
        },
        {
          name: "quoteMaxInsurance",
          type: "u64"
        }
      ]
    },
    {
      name: "updatePerpMarketLiquidationFee",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "liquidatorFee",
          type: "u32"
        },
        {
          name: "ifLiquidationFee",
          type: "u32"
        }
      ]
    },
    {
      name: "updateInsuranceFundUnstakingPeriod",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "insuranceFundUnstakingPeriod",
          type: "i64"
        }
      ]
    },
    {
      name: "updateSpotMarketPoolId",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "poolId",
          type: "u8"
        }
      ]
    },
    {
      name: "updateSpotMarketLiquidationFee",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "liquidatorFee",
          type: "u32"
        },
        {
          name: "ifLiquidationFee",
          type: "u32"
        }
      ]
    },
    {
      name: "updateWithdrawGuardThreshold",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "withdrawGuardThreshold",
          type: "u64"
        }
      ]
    },
    {
      name: "updateSpotMarketIfFactor",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "spotMarketIndex",
          type: "u16"
        },
        {
          name: "userIfFactor",
          type: "u32"
        },
        {
          name: "totalIfFactor",
          type: "u32"
        }
      ]
    },
    {
      name: "updateSpotMarketRevenueSettlePeriod",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "revenueSettlePeriod",
          type: "i64"
        }
      ]
    },
    {
      name: "updateSpotMarketStatus",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "status",
          type: {
            defined: "MarketStatus"
          }
        }
      ]
    },
    {
      name: "updateSpotMarketPausedOperations",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "pausedOperations",
          type: "u8"
        }
      ]
    },
    {
      name: "updateSpotMarketAssetTier",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "assetTier",
          type: {
            defined: "AssetTier"
          }
        }
      ]
    },
    {
      name: "updateSpotMarketMarginWeights",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "initialAssetWeight",
          type: "u32"
        },
        {
          name: "maintenanceAssetWeight",
          type: "u32"
        },
        {
          name: "initialLiabilityWeight",
          type: "u32"
        },
        {
          name: "maintenanceLiabilityWeight",
          type: "u32"
        },
        {
          name: "imfFactor",
          type: "u32"
        }
      ]
    },
    {
      name: "updateSpotMarketBorrowRate",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "optimalUtilization",
          type: "u32"
        },
        {
          name: "optimalBorrowRate",
          type: "u32"
        },
        {
          name: "maxBorrowRate",
          type: "u32"
        },
        {
          name: "minBorrowRate",
          type: {
            option: "u8"
          }
        }
      ]
    },
    {
      name: "updateSpotMarketMaxTokenDeposits",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "maxTokenDeposits",
          type: "u64"
        }
      ]
    },
    {
      name: "updateSpotMarketMaxTokenBorrows",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "maxTokenBorrowsFraction",
          type: "u16"
        }
      ]
    },
    {
      name: "updateSpotMarketScaleInitialAssetWeightStart",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "scaleInitialAssetWeightStart",
          type: "u64"
        }
      ]
    },
    {
      name: "updateSpotMarketOracle",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "oracle",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "oracle",
          type: "publicKey"
        },
        {
          name: "oracleSource",
          type: {
            defined: "OracleSource"
          }
        }
      ]
    },
    {
      name: "updateSpotMarketStepSizeAndTickSize",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "stepSize",
          type: "u64"
        },
        {
          name: "tickSize",
          type: "u64"
        }
      ]
    },
    {
      name: "updateSpotMarketMinOrderSize",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "orderSize",
          type: "u64"
        }
      ]
    },
    {
      name: "updateSpotMarketOrdersEnabled",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "ordersEnabled",
          type: "bool"
        }
      ]
    },
    {
      name: "updateSpotMarketIfPausedOperations",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "pausedOperations",
          type: "u8"
        }
      ]
    },
    {
      name: "updateSpotMarketName",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "name",
          type: {
            array: [
              "u8",
              32
            ]
          }
        }
      ]
    },
    {
      name: "updatePerpMarketStatus",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "status",
          type: {
            defined: "MarketStatus"
          }
        }
      ]
    },
    {
      name: "updatePerpMarketPausedOperations",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "pausedOperations",
          type: "u8"
        }
      ]
    },
    {
      name: "updatePerpMarketContractTier",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "contractTier",
          type: {
            defined: "ContractTier"
          }
        }
      ]
    },
    {
      name: "updatePerpMarketImfFactor",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "imfFactor",
          type: "u32"
        },
        {
          name: "unrealizedPnlImfFactor",
          type: "u32"
        }
      ]
    },
    {
      name: "updatePerpMarketUnrealizedAssetWeight",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "unrealizedInitialAssetWeight",
          type: "u32"
        },
        {
          name: "unrealizedMaintenanceAssetWeight",
          type: "u32"
        }
      ]
    },
    {
      name: "updatePerpMarketConcentrationCoef",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "concentrationScale",
          type: "u128"
        }
      ]
    },
    {
      name: "updatePerpMarketCurveUpdateIntensity",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "curveUpdateIntensity",
          type: "u8"
        }
      ]
    },
    {
      name: "updatePerpMarketTargetBaseAssetAmountPerLp",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "targetBaseAssetAmountPerLp",
          type: "i32"
        }
      ]
    },
    {
      name: "updatePerpMarketPerLpBase",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "perLpBase",
          type: "i8"
        }
      ]
    },
    {
      name: "updateLpCooldownTime",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "lpCooldownTime",
          type: "u64"
        }
      ]
    },
    {
      name: "updatePerpFeeStructure",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "feeStructure",
          type: {
            defined: "FeeStructure"
          }
        }
      ]
    },
    {
      name: "updateSpotFeeStructure",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "feeStructure",
          type: {
            defined: "FeeStructure"
          }
        }
      ]
    },
    {
      name: "updateInitialPctToLiquidate",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "initialPctToLiquidate",
          type: "u16"
        }
      ]
    },
    {
      name: "updateLiquidationDuration",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "liquidationDuration",
          type: "u8"
        }
      ]
    },
    {
      name: "updateLiquidationMarginBufferRatio",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "liquidationMarginBufferRatio",
          type: "u32"
        }
      ]
    },
    {
      name: "updateOracleGuardRails",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "oracleGuardRails",
          type: {
            defined: "OracleGuardRails"
          }
        }
      ]
    },
    {
      name: "updateStateSettlementDuration",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "settlementDuration",
          type: "u16"
        }
      ]
    },
    {
      name: "updateStateMaxNumberOfSubAccounts",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "maxNumberOfSubAccounts",
          type: "u16"
        }
      ]
    },
    {
      name: "updateStateMaxInitializeUserFee",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "maxInitializeUserFee",
          type: "u16"
        }
      ]
    },
    {
      name: "updatePerpMarketOracle",
      accounts: [
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "oracle",
          isMut: false,
          isSigner: false
        },
        {
          name: "admin",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "oracle",
          type: "publicKey"
        },
        {
          name: "oracleSource",
          type: {
            defined: "OracleSource"
          }
        }
      ]
    },
    {
      name: "updatePerpMarketBaseSpread",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "baseSpread",
          type: "u32"
        }
      ]
    },
    {
      name: "updateAmmJitIntensity",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "ammJitIntensity",
          type: "u8"
        }
      ]
    },
    {
      name: "updatePerpMarketMaxSpread",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "maxSpread",
          type: "u32"
        }
      ]
    },
    {
      name: "updatePerpMarketStepSizeAndTickSize",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "stepSize",
          type: "u64"
        },
        {
          name: "tickSize",
          type: "u64"
        }
      ]
    },
    {
      name: "updatePerpMarketName",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "name",
          type: {
            array: [
              "u8",
              32
            ]
          }
        }
      ]
    },
    {
      name: "updatePerpMarketMinOrderSize",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "orderSize",
          type: "u64"
        }
      ]
    },
    {
      name: "updatePerpMarketMaxSlippageRatio",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "maxSlippageRatio",
          type: "u16"
        }
      ]
    },
    {
      name: "updatePerpMarketMaxFillReserveFraction",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "maxFillReserveFraction",
          type: "u16"
        }
      ]
    },
    {
      name: "updatePerpMarketMaxOpenInterest",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "maxOpenInterest",
          type: "u128"
        }
      ]
    },
    {
      name: "updatePerpMarketNumberOfUsers",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "numberOfUsers",
          type: {
            option: "u32"
          }
        },
        {
          name: "numberOfUsersWithBase",
          type: {
            option: "u32"
          }
        }
      ]
    },
    {
      name: "updatePerpMarketFeeAdjustment",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "feeAdjustment",
          type: "i16"
        }
      ]
    },
    {
      name: "updateSpotMarketFeeAdjustment",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "feeAdjustment",
          type: "i16"
        }
      ]
    },
    {
      name: "updatePerpMarketFuel",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "fuelBoostTaker",
          type: {
            option: "u8"
          }
        },
        {
          name: "fuelBoostMaker",
          type: {
            option: "u8"
          }
        },
        {
          name: "fuelBoostPosition",
          type: {
            option: "u8"
          }
        }
      ]
    },
    {
      name: "updateSpotMarketFuel",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "spotMarket",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "fuelBoostDeposits",
          type: {
            option: "u8"
          }
        },
        {
          name: "fuelBoostBorrows",
          type: {
            option: "u8"
          }
        },
        {
          name: "fuelBoostTaker",
          type: {
            option: "u8"
          }
        },
        {
          name: "fuelBoostMaker",
          type: {
            option: "u8"
          }
        },
        {
          name: "fuelBoostInsurance",
          type: {
            option: "u8"
          }
        }
      ]
    },
    {
      name: "initUserFuel",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: false
        },
        {
          name: "userStats",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "fuelBoostDeposits",
          type: {
            option: "i32"
          }
        },
        {
          name: "fuelBoostBorrows",
          type: {
            option: "u32"
          }
        },
        {
          name: "fuelBoostTaker",
          type: {
            option: "u32"
          }
        },
        {
          name: "fuelBoostMaker",
          type: {
            option: "u32"
          }
        },
        {
          name: "fuelBoostInsurance",
          type: {
            option: "u32"
          }
        }
      ]
    },
    {
      name: "updateAdmin",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "admin",
          type: "publicKey"
        }
      ]
    },
    {
      name: "updateWhitelistMint",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "whitelistMint",
          type: "publicKey"
        }
      ]
    },
    {
      name: "updateDiscountMint",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "discountMint",
          type: "publicKey"
        }
      ]
    },
    {
      name: "updateExchangeStatus",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "exchangeStatus",
          type: "u8"
        }
      ]
    },
    {
      name: "updatePerpAuctionDuration",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "minPerpAuctionDuration",
          type: "u8"
        }
      ]
    },
    {
      name: "updateSpotAuctionDuration",
      accounts: [
        {
          name: "admin",
          isMut: false,
          isSigner: true
        },
        {
          name: "state",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "defaultSpotAuctionDuration",
          type: "u8"
        }
      ]
    },
    {
      name: "initializeProtocolIfSharesTransferConfig",
      accounts: [
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "protocolIfSharesTransferConfig",
          isMut: true,
          isSigner: false
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "updateProtocolIfSharesTransferConfig",
      accounts: [
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "protocolIfSharesTransferConfig",
          isMut: true,
          isSigner: false
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "whitelistedSigners",
          type: {
            option: {
              array: [
                "publicKey",
                4
              ]
            }
          }
        },
        {
          name: "maxTransferPerEpoch",
          type: {
            option: "u128"
          }
        }
      ]
    },
    {
      name: "initializePrelaunchOracle",
      accounts: [
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "prelaunchOracle",
          isMut: true,
          isSigner: false
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: "PrelaunchOracleParams"
          }
        }
      ]
    },
    {
      name: "updatePrelaunchOracleParams",
      accounts: [
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "prelaunchOracle",
          isMut: true,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: true,
          isSigner: false
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "params",
          type: {
            defined: "PrelaunchOracleParams"
          }
        }
      ]
    },
    {
      name: "deletePrelaunchOracle",
      accounts: [
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "prelaunchOracle",
          isMut: true,
          isSigner: false
        },
        {
          name: "perpMarket",
          isMut: false,
          isSigner: false
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "perpMarketIndex",
          type: "u16"
        }
      ]
    },
    {
      name: "initializePythPullOracle",
      accounts: [
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "pythSolanaReceiver",
          isMut: false,
          isSigner: false
        },
        {
          name: "priceFeed",
          isMut: true,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "feedId",
          type: {
            array: [
              "u8",
              32
            ]
          }
        }
      ]
    },
    {
      name: "initializePythLazerOracle",
      accounts: [
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "lazerOracle",
          isMut: true,
          isSigner: false
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "feedId",
          type: "u32"
        }
      ]
    },
    {
      name: "postPythLazerOracleUpdate",
      accounts: [
        {
          name: "keeper",
          isMut: true,
          isSigner: true
        },
        {
          name: "pythLazerStorage",
          isMut: false,
          isSigner: false
        },
        {
          name: "ixSysvar",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "pythMessage",
          type: "bytes"
        }
      ]
    },
    {
      name: "initializeHighLeverageModeConfig",
      accounts: [
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "highLeverageModeConfig",
          isMut: true,
          isSigner: false
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "maxUsers",
          type: "u32"
        }
      ]
    },
    {
      name: "updateHighLeverageModeConfig",
      accounts: [
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "highLeverageModeConfig",
          isMut: true,
          isSigner: false
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "maxUsers",
          type: "u32"
        },
        {
          name: "reduceOnly",
          type: "bool"
        }
      ]
    },
    {
      name: "initializeProtectedMakerModeConfig",
      accounts: [
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "protectedMakerModeConfig",
          isMut: true,
          isSigner: false
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "maxUsers",
          type: "u32"
        }
      ]
    },
    {
      name: "updateProtectedMakerModeConfig",
      accounts: [
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "protectedMakerModeConfig",
          isMut: true,
          isSigner: false
        },
        {
          name: "state",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "maxUsers",
          type: "u32"
        },
        {
          name: "reduceOnly",
          type: "bool"
        }
      ]
    }
  ],
  accounts: [
    {
      name: "OpenbookV2FulfillmentConfig",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pubkey",
            type: "publicKey"
          },
          {
            name: "openbookV2ProgramId",
            type: "publicKey"
          },
          {
            name: "openbookV2Market",
            type: "publicKey"
          },
          {
            name: "openbookV2MarketAuthority",
            type: "publicKey"
          },
          {
            name: "openbookV2EventHeap",
            type: "publicKey"
          },
          {
            name: "openbookV2Bids",
            type: "publicKey"
          },
          {
            name: "openbookV2Asks",
            type: "publicKey"
          },
          {
            name: "openbookV2BaseVault",
            type: "publicKey"
          },
          {
            name: "openbookV2QuoteVault",
            type: "publicKey"
          },
          {
            name: "marketIndex",
            type: "u16"
          },
          {
            name: "fulfillmentType",
            type: {
              defined: "SpotFulfillmentType"
            }
          },
          {
            name: "status",
            type: {
              defined: "SpotFulfillmentConfigStatus"
            }
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                4
              ]
            }
          }
        ]
      }
    },
    {
      name: "PhoenixV1FulfillmentConfig",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pubkey",
            type: "publicKey"
          },
          {
            name: "phoenixProgramId",
            type: "publicKey"
          },
          {
            name: "phoenixLogAuthority",
            type: "publicKey"
          },
          {
            name: "phoenixMarket",
            type: "publicKey"
          },
          {
            name: "phoenixBaseVault",
            type: "publicKey"
          },
          {
            name: "phoenixQuoteVault",
            type: "publicKey"
          },
          {
            name: "marketIndex",
            type: "u16"
          },
          {
            name: "fulfillmentType",
            type: {
              defined: "SpotFulfillmentType"
            }
          },
          {
            name: "status",
            type: {
              defined: "SpotFulfillmentConfigStatus"
            }
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                4
              ]
            }
          }
        ]
      }
    },
    {
      name: "SerumV3FulfillmentConfig",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pubkey",
            type: "publicKey"
          },
          {
            name: "serumProgramId",
            type: "publicKey"
          },
          {
            name: "serumMarket",
            type: "publicKey"
          },
          {
            name: "serumRequestQueue",
            type: "publicKey"
          },
          {
            name: "serumEventQueue",
            type: "publicKey"
          },
          {
            name: "serumBids",
            type: "publicKey"
          },
          {
            name: "serumAsks",
            type: "publicKey"
          },
          {
            name: "serumBaseVault",
            type: "publicKey"
          },
          {
            name: "serumQuoteVault",
            type: "publicKey"
          },
          {
            name: "serumOpenOrders",
            type: "publicKey"
          },
          {
            name: "serumSignerNonce",
            type: "u64"
          },
          {
            name: "marketIndex",
            type: "u16"
          },
          {
            name: "fulfillmentType",
            type: {
              defined: "SpotFulfillmentType"
            }
          },
          {
            name: "status",
            type: {
              defined: "SpotFulfillmentConfigStatus"
            }
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                4
              ]
            }
          }
        ]
      }
    },
    {
      name: "HighLeverageModeConfig",
      type: {
        kind: "struct",
        fields: [
          {
            name: "maxUsers",
            type: "u32"
          },
          {
            name: "currentUsers",
            type: "u32"
          },
          {
            name: "reduceOnly",
            type: "u8"
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                31
              ]
            }
          }
        ]
      }
    },
    {
      name: "InsuranceFundStake",
      type: {
        kind: "struct",
        fields: [
          {
            name: "authority",
            type: "publicKey"
          },
          {
            name: "ifShares",
            type: "u128"
          },
          {
            name: "lastWithdrawRequestShares",
            type: "u128"
          },
          {
            name: "ifBase",
            type: "u128"
          },
          {
            name: "lastValidTs",
            type: "i64"
          },
          {
            name: "lastWithdrawRequestValue",
            type: "u64"
          },
          {
            name: "lastWithdrawRequestTs",
            type: "i64"
          },
          {
            name: "costBasis",
            type: "i64"
          },
          {
            name: "marketIndex",
            type: "u16"
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                14
              ]
            }
          }
        ]
      }
    },
    {
      name: "ProtocolIfSharesTransferConfig",
      type: {
        kind: "struct",
        fields: [
          {
            name: "whitelistedSigners",
            type: {
              array: [
                "publicKey",
                4
              ]
            }
          },
          {
            name: "maxTransferPerEpoch",
            type: "u128"
          },
          {
            name: "currentEpochTransfer",
            type: "u128"
          },
          {
            name: "nextEpochTs",
            type: "i64"
          },
          {
            name: "padding",
            type: {
              array: [
                "u128",
                8
              ]
            }
          }
        ]
      }
    },
    {
      name: "PrelaunchOracle",
      type: {
        kind: "struct",
        fields: [
          {
            name: "price",
            type: "i64"
          },
          {
            name: "maxPrice",
            type: "i64"
          },
          {
            name: "confidence",
            type: "u64"
          },
          {
            name: "lastUpdateSlot",
            type: "u64"
          },
          {
            name: "ammLastUpdateSlot",
            type: "u64"
          },
          {
            name: "perpMarketIndex",
            type: "u16"
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                70
              ]
            }
          }
        ]
      }
    },
    {
      name: "PerpMarket",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pubkey",
            docs: [
              "The perp market's address. It is a pda of the market index"
            ],
            type: "publicKey"
          },
          {
            name: "amm",
            docs: [
              "The automated market maker"
            ],
            type: {
              defined: "AMM"
            }
          },
          {
            name: "pnlPool",
            docs: [
              "The market's pnl pool. When users settle negative pnl, the balance increases.",
              "When users settle positive pnl, the balance decreases. Can not go negative."
            ],
            type: {
              defined: "PoolBalance"
            }
          },
          {
            name: "name",
            docs: [
              "Encoded display name for the perp market e.g. SOL-PERP"
            ],
            type: {
              array: [
                "u8",
                32
              ]
            }
          },
          {
            name: "insuranceClaim",
            docs: [
              "The perp market's claim on the insurance fund"
            ],
            type: {
              defined: "InsuranceClaim"
            }
          },
          {
            name: "unrealizedPnlMaxImbalance",
            docs: [
              "The max pnl imbalance before positive pnl asset weight is discounted",
              "pnl imbalance is the difference between long and short pnl. When it's greater than 0,",
              "the amm has negative pnl and the initial asset weight for positive pnl is discounted",
              "precision = QUOTE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "expiryTs",
            docs: [
              "The ts when the market will be expired. Only set if market is in reduce only mode"
            ],
            type: "i64"
          },
          {
            name: "expiryPrice",
            docs: [
              "The price at which positions will be settled. Only set if market is expired",
              "precision = PRICE_PRECISION"
            ],
            type: "i64"
          },
          {
            name: "nextFillRecordId",
            docs: [
              "Every trade has a fill record id. This is the next id to be used"
            ],
            type: "u64"
          },
          {
            name: "nextFundingRateRecordId",
            docs: [
              "Every funding rate update has a record id. This is the next id to be used"
            ],
            type: "u64"
          },
          {
            name: "nextCurveRecordId",
            docs: [
              "Every amm k updated has a record id. This is the next id to be used"
            ],
            type: "u64"
          },
          {
            name: "imfFactor",
            docs: [
              "The initial margin fraction factor. Used to increase margin ratio for large positions",
              "precision: MARGIN_PRECISION"
            ],
            type: "u32"
          },
          {
            name: "unrealizedPnlImfFactor",
            docs: [
              "The imf factor for unrealized pnl. Used to discount asset weight for large positive pnl",
              "precision: MARGIN_PRECISION"
            ],
            type: "u32"
          },
          {
            name: "liquidatorFee",
            docs: [
              "The fee the liquidator is paid for taking over perp position",
              "precision: LIQUIDATOR_FEE_PRECISION"
            ],
            type: "u32"
          },
          {
            name: "ifLiquidationFee",
            docs: [
              "The fee the insurance fund receives from liquidation",
              "precision: LIQUIDATOR_FEE_PRECISION"
            ],
            type: "u32"
          },
          {
            name: "marginRatioInitial",
            docs: [
              "The margin ratio which determines how much collateral is required to open a position",
              "e.g. margin ratio of .1 means a user must have $100 of total collateral to open a $1000 position",
              "precision: MARGIN_PRECISION"
            ],
            type: "u32"
          },
          {
            name: "marginRatioMaintenance",
            docs: [
              "The margin ratio which determines when a user will be liquidated",
              "e.g. margin ratio of .05 means a user must have $50 of total collateral to maintain a $1000 position",
              "else they will be liquidated",
              "precision: MARGIN_PRECISION"
            ],
            type: "u32"
          },
          {
            name: "unrealizedPnlInitialAssetWeight",
            docs: [
              "The initial asset weight for positive pnl. Negative pnl always has an asset weight of 1",
              "precision: SPOT_WEIGHT_PRECISION"
            ],
            type: "u32"
          },
          {
            name: "unrealizedPnlMaintenanceAssetWeight",
            docs: [
              "The maintenance asset weight for positive pnl. Negative pnl always has an asset weight of 1",
              "precision: SPOT_WEIGHT_PRECISION"
            ],
            type: "u32"
          },
          {
            name: "numberOfUsersWithBase",
            docs: [
              "number of users in a position (base)"
            ],
            type: "u32"
          },
          {
            name: "numberOfUsers",
            docs: [
              "number of users in a position (pnl) or pnl (quote)"
            ],
            type: "u32"
          },
          {
            name: "marketIndex",
            type: "u16"
          },
          {
            name: "status",
            docs: [
              "Whether a market is active, reduce only, expired, etc",
              "Affects whether users can open/close positions"
            ],
            type: {
              defined: "MarketStatus"
            }
          },
          {
            name: "contractType",
            docs: [
              "Currently only Perpetual markets are supported"
            ],
            type: {
              defined: "ContractType"
            }
          },
          {
            name: "contractTier",
            docs: [
              "The contract tier determines how much insurance a market can receive, with more speculative markets receiving less insurance",
              "It also influences the order perp markets can be liquidated, with less speculative markets being liquidated first"
            ],
            type: {
              defined: "ContractTier"
            }
          },
          {
            name: "pausedOperations",
            type: "u8"
          },
          {
            name: "quoteSpotMarketIndex",
            docs: [
              "The spot market that pnl is settled in"
            ],
            type: "u16"
          },
          {
            name: "feeAdjustment",
            docs: [
              "Between -100 and 100, represents what % to increase/decrease the fee by",
              "E.g. if this is -50 and the fee is 5bps, the new fee will be 2.5bps",
              "if this is 50 and the fee is 5bps, the new fee will be 7.5bps"
            ],
            type: "i16"
          },
          {
            name: "fuelBoostPosition",
            docs: [
              "fuel multiplier for perp funding",
              "precision: 10"
            ],
            type: "u8"
          },
          {
            name: "fuelBoostTaker",
            docs: [
              "fuel multiplier for perp taker",
              "precision: 10"
            ],
            type: "u8"
          },
          {
            name: "fuelBoostMaker",
            docs: [
              "fuel multiplier for perp maker",
              "precision: 10"
            ],
            type: "u8"
          },
          {
            name: "poolId",
            type: "u8"
          },
          {
            name: "highLeverageMarginRatioInitial",
            type: "u16"
          },
          {
            name: "highLeverageMarginRatioMaintenance",
            type: "u16"
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                38
              ]
            }
          }
        ]
      }
    },
    {
      name: "ProtectedMakerModeConfig",
      type: {
        kind: "struct",
        fields: [
          {
            name: "maxUsers",
            type: "u32"
          },
          {
            name: "currentUsers",
            type: "u32"
          },
          {
            name: "reduceOnly",
            type: "u8"
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                31
              ]
            }
          }
        ]
      }
    },
    {
      name: "PythLazerOracle",
      type: {
        kind: "struct",
        fields: [
          {
            name: "price",
            type: "i64"
          },
          {
            name: "publishTime",
            type: "u64"
          },
          {
            name: "postedSlot",
            type: "u64"
          },
          {
            name: "exponent",
            type: "i32"
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                4
              ]
            }
          },
          {
            name: "conf",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "RFQUser",
      type: {
        kind: "struct",
        fields: [
          {
            name: "userPubkey",
            type: "publicKey"
          },
          {
            name: "rfqOrderData",
            type: {
              array: [
                {
                  defined: "RFQOrderId"
                },
                32
              ]
            }
          }
        ]
      }
    },
    {
      name: "SpotMarket",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pubkey",
            docs: [
              "The address of the spot market. It is a pda of the market index"
            ],
            type: "publicKey"
          },
          {
            name: "oracle",
            docs: [
              "The oracle used to price the markets deposits/borrows"
            ],
            type: "publicKey"
          },
          {
            name: "mint",
            docs: [
              "The token mint of the market"
            ],
            type: "publicKey"
          },
          {
            name: "vault",
            docs: [
              "The vault used to store the market's deposits",
              "The amount in the vault should be equal to or greater than deposits - borrows"
            ],
            type: "publicKey"
          },
          {
            name: "name",
            docs: [
              "The encoded display name for the market e.g. SOL"
            ],
            type: {
              array: [
                "u8",
                32
              ]
            }
          },
          {
            name: "historicalOracleData",
            type: {
              defined: "HistoricalOracleData"
            }
          },
          {
            name: "historicalIndexData",
            type: {
              defined: "HistoricalIndexData"
            }
          },
          {
            name: "revenuePool",
            docs: [
              "Revenue the protocol has collected in this markets token",
              "e.g. for SOL-PERP, funds can be settled in usdc and will flow into the USDC revenue pool"
            ],
            type: {
              defined: "PoolBalance"
            }
          },
          {
            name: "spotFeePool",
            docs: [
              "The fees collected from swaps between this market and the quote market",
              "Is settled to the quote markets revenue pool"
            ],
            type: {
              defined: "PoolBalance"
            }
          },
          {
            name: "insuranceFund",
            docs: [
              "Details on the insurance fund covering bankruptcies in this markets token",
              "Covers bankruptcies for borrows with this markets token and perps settling in this markets token"
            ],
            type: {
              defined: "InsuranceFund"
            }
          },
          {
            name: "totalSpotFee",
            docs: [
              "The total spot fees collected for this market",
              "precision: QUOTE_PRECISION"
            ],
            type: "u128"
          },
          {
            name: "depositBalance",
            docs: [
              "The sum of the scaled balances for deposits across users and pool balances",
              "To convert to the deposit token amount, multiply by the cumulative deposit interest",
              "precision: SPOT_BALANCE_PRECISION"
            ],
            type: "u128"
          },
          {
            name: "borrowBalance",
            docs: [
              "The sum of the scaled balances for borrows across users and pool balances",
              "To convert to the borrow token amount, multiply by the cumulative borrow interest",
              "precision: SPOT_BALANCE_PRECISION"
            ],
            type: "u128"
          },
          {
            name: "cumulativeDepositInterest",
            docs: [
              "The cumulative interest earned by depositors",
              "Used to calculate the deposit token amount from the deposit balance",
              "precision: SPOT_CUMULATIVE_INTEREST_PRECISION"
            ],
            type: "u128"
          },
          {
            name: "cumulativeBorrowInterest",
            docs: [
              "The cumulative interest earned by borrowers",
              "Used to calculate the borrow token amount from the borrow balance",
              "precision: SPOT_CUMULATIVE_INTEREST_PRECISION"
            ],
            type: "u128"
          },
          {
            name: "totalSocialLoss",
            docs: [
              "The total socialized loss from borrows, in the mint's token",
              "precision: token mint precision"
            ],
            type: "u128"
          },
          {
            name: "totalQuoteSocialLoss",
            docs: [
              "The total socialized loss from borrows, in the quote market's token",
              "preicision: QUOTE_PRECISION"
            ],
            type: "u128"
          },
          {
            name: "withdrawGuardThreshold",
            docs: [
              "no withdraw limits/guards when deposits below this threshold",
              "precision: token mint precision"
            ],
            type: "u64"
          },
          {
            name: "maxTokenDeposits",
            docs: [
              "The max amount of token deposits in this market",
              "0 if there is no limit",
              "precision: token mint precision"
            ],
            type: "u64"
          },
          {
            name: "depositTokenTwap",
            docs: [
              "24hr average of deposit token amount",
              "precision: token mint precision"
            ],
            type: "u64"
          },
          {
            name: "borrowTokenTwap",
            docs: [
              "24hr average of borrow token amount",
              "precision: token mint precision"
            ],
            type: "u64"
          },
          {
            name: "utilizationTwap",
            docs: [
              "24hr average of utilization",
              "which is borrow amount over token amount",
              "precision: SPOT_UTILIZATION_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "lastInterestTs",
            docs: [
              "Last time the cumulative deposit and borrow interest was updated"
            ],
            type: "u64"
          },
          {
            name: "lastTwapTs",
            docs: [
              "Last time the deposit/borrow/utilization averages were updated"
            ],
            type: "u64"
          },
          {
            name: "expiryTs",
            docs: [
              "The time the market is set to expire. Only set if market is in reduce only mode"
            ],
            type: "i64"
          },
          {
            name: "orderStepSize",
            docs: [
              "Spot orders must be a multiple of the step size",
              "precision: token mint precision"
            ],
            type: "u64"
          },
          {
            name: "orderTickSize",
            docs: [
              "Spot orders must be a multiple of the tick size",
              "precision: PRICE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "minOrderSize",
            docs: [
              "The minimum order size",
              "precision: token mint precision"
            ],
            type: "u64"
          },
          {
            name: "maxPositionSize",
            docs: [
              "The maximum spot position size",
              "if the limit is 0, there is no limit",
              "precision: token mint precision"
            ],
            type: "u64"
          },
          {
            name: "nextFillRecordId",
            docs: [
              "Every spot trade has a fill record id. This is the next id to use"
            ],
            type: "u64"
          },
          {
            name: "nextDepositRecordId",
            docs: [
              "Every deposit has a deposit record id. This is the next id to use"
            ],
            type: "u64"
          },
          {
            name: "initialAssetWeight",
            docs: [
              "The initial asset weight used to calculate a deposits contribution to a users initial total collateral",
              "e.g. if the asset weight is .8, $100 of deposits contributes $80 to the users initial total collateral",
              "precision: SPOT_WEIGHT_PRECISION"
            ],
            type: "u32"
          },
          {
            name: "maintenanceAssetWeight",
            docs: [
              "The maintenance asset weight used to calculate a deposits contribution to a users maintenance total collateral",
              "e.g. if the asset weight is .9, $100 of deposits contributes $90 to the users maintenance total collateral",
              "precision: SPOT_WEIGHT_PRECISION"
            ],
            type: "u32"
          },
          {
            name: "initialLiabilityWeight",
            docs: [
              "The initial liability weight used to calculate a borrows contribution to a users initial margin requirement",
              "e.g. if the liability weight is .9, $100 of borrows contributes $90 to the users initial margin requirement",
              "precision: SPOT_WEIGHT_PRECISION"
            ],
            type: "u32"
          },
          {
            name: "maintenanceLiabilityWeight",
            docs: [
              "The maintenance liability weight used to calculate a borrows contribution to a users maintenance margin requirement",
              "e.g. if the liability weight is .8, $100 of borrows contributes $80 to the users maintenance margin requirement",
              "precision: SPOT_WEIGHT_PRECISION"
            ],
            type: "u32"
          },
          {
            name: "imfFactor",
            docs: [
              "The initial margin fraction factor. Used to increase liability weight/decrease asset weight for large positions",
              "precision: MARGIN_PRECISION"
            ],
            type: "u32"
          },
          {
            name: "liquidatorFee",
            docs: [
              "The fee the liquidator is paid for taking over borrow/deposit",
              "precision: LIQUIDATOR_FEE_PRECISION"
            ],
            type: "u32"
          },
          {
            name: "ifLiquidationFee",
            docs: [
              "The fee the insurance fund receives from liquidation",
              "precision: LIQUIDATOR_FEE_PRECISION"
            ],
            type: "u32"
          },
          {
            name: "optimalUtilization",
            docs: [
              "The optimal utilization rate for this market.",
              "Used to determine the markets borrow rate",
              "precision: SPOT_UTILIZATION_PRECISION"
            ],
            type: "u32"
          },
          {
            name: "optimalBorrowRate",
            docs: [
              "The borrow rate for this market when the market has optimal utilization",
              "precision: SPOT_RATE_PRECISION"
            ],
            type: "u32"
          },
          {
            name: "maxBorrowRate",
            docs: [
              "The borrow rate for this market when the market has 1000 utilization",
              "precision: SPOT_RATE_PRECISION"
            ],
            type: "u32"
          },
          {
            name: "decimals",
            docs: [
              "The market's token mint's decimals. To from decimals to a precision, 10^decimals"
            ],
            type: "u32"
          },
          {
            name: "marketIndex",
            type: "u16"
          },
          {
            name: "ordersEnabled",
            docs: [
              "Whether or not spot trading is enabled"
            ],
            type: "bool"
          },
          {
            name: "oracleSource",
            type: {
              defined: "OracleSource"
            }
          },
          {
            name: "status",
            type: {
              defined: "MarketStatus"
            }
          },
          {
            name: "assetTier",
            docs: [
              "The asset tier affects how a deposit can be used as collateral and the priority for a borrow being liquidated"
            ],
            type: {
              defined: "AssetTier"
            }
          },
          {
            name: "pausedOperations",
            type: "u8"
          },
          {
            name: "ifPausedOperations",
            type: "u8"
          },
          {
            name: "feeAdjustment",
            type: "i16"
          },
          {
            name: "maxTokenBorrowsFraction",
            docs: [
              "What fraction of max_token_deposits",
              "disabled when 0, 1 => 1/10000 => .01% of max_token_deposits",
              "precision: X/10000"
            ],
            type: "u16"
          },
          {
            name: "flashLoanAmount",
            docs: [
              "For swaps, the amount of token loaned out in the begin_swap ix",
              "precision: token mint precision"
            ],
            type: "u64"
          },
          {
            name: "flashLoanInitialTokenAmount",
            docs: [
              "For swaps, the amount in the users token account in the begin_swap ix",
              "Used to calculate how much of the token left the system in end_swap ix",
              "precision: token mint precision"
            ],
            type: "u64"
          },
          {
            name: "totalSwapFee",
            docs: [
              "The total fees received from swaps",
              "precision: token mint precision"
            ],
            type: "u64"
          },
          {
            name: "scaleInitialAssetWeightStart",
            docs: [
              "When to begin scaling down the initial asset weight",
              "disabled when 0",
              "precision: QUOTE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "minBorrowRate",
            docs: [
              "The min borrow rate for this market when the market regardless of utilization",
              "1 => 1/200 => .5%",
              "precision: X/200"
            ],
            type: "u8"
          },
          {
            name: "fuelBoostDeposits",
            docs: [
              "fuel multiplier for spot deposits",
              "precision: 10"
            ],
            type: "u8"
          },
          {
            name: "fuelBoostBorrows",
            docs: [
              "fuel multiplier for spot borrows",
              "precision: 10"
            ],
            type: "u8"
          },
          {
            name: "fuelBoostTaker",
            docs: [
              "fuel multiplier for spot taker",
              "precision: 10"
            ],
            type: "u8"
          },
          {
            name: "fuelBoostMaker",
            docs: [
              "fuel multiplier for spot maker",
              "precision: 10"
            ],
            type: "u8"
          },
          {
            name: "fuelBoostInsurance",
            docs: [
              "fuel multiplier for spot insurance stake",
              "precision: 10"
            ],
            type: "u8"
          },
          {
            name: "tokenProgram",
            type: "u8"
          },
          {
            name: "poolId",
            type: "u8"
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                40
              ]
            }
          }
        ]
      }
    },
    {
      name: "State",
      type: {
        kind: "struct",
        fields: [
          {
            name: "admin",
            type: "publicKey"
          },
          {
            name: "whitelistMint",
            type: "publicKey"
          },
          {
            name: "discountMint",
            type: "publicKey"
          },
          {
            name: "signer",
            type: "publicKey"
          },
          {
            name: "srmVault",
            type: "publicKey"
          },
          {
            name: "perpFeeStructure",
            type: {
              defined: "FeeStructure"
            }
          },
          {
            name: "spotFeeStructure",
            type: {
              defined: "FeeStructure"
            }
          },
          {
            name: "oracleGuardRails",
            type: {
              defined: "OracleGuardRails"
            }
          },
          {
            name: "numberOfAuthorities",
            type: "u64"
          },
          {
            name: "numberOfSubAccounts",
            type: "u64"
          },
          {
            name: "lpCooldownTime",
            type: "u64"
          },
          {
            name: "liquidationMarginBufferRatio",
            type: "u32"
          },
          {
            name: "settlementDuration",
            type: "u16"
          },
          {
            name: "numberOfMarkets",
            type: "u16"
          },
          {
            name: "numberOfSpotMarkets",
            type: "u16"
          },
          {
            name: "signerNonce",
            type: "u8"
          },
          {
            name: "minPerpAuctionDuration",
            type: "u8"
          },
          {
            name: "defaultMarketOrderTimeInForce",
            type: "u8"
          },
          {
            name: "defaultSpotAuctionDuration",
            type: "u8"
          },
          {
            name: "exchangeStatus",
            type: "u8"
          },
          {
            name: "liquidationDuration",
            type: "u8"
          },
          {
            name: "initialPctToLiquidate",
            type: "u16"
          },
          {
            name: "maxNumberOfSubAccounts",
            type: "u16"
          },
          {
            name: "maxInitializeUserFee",
            type: "u16"
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                10
              ]
            }
          }
        ]
      }
    },
    {
      name: "SwiftUserOrders",
      docs: [
        "* This struct is a duplicate of SwiftUserOrdersZeroCopy\n * It is used to give anchor an struct to generate the idl for clients\n * The struct SwiftUserOrdersZeroCopy is used to load the data in efficiently"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "userPubkey",
            type: "publicKey"
          },
          {
            name: "padding",
            type: "u32"
          },
          {
            name: "swiftOrderData",
            type: {
              vec: {
                defined: "SwiftOrderId"
              }
            }
          }
        ]
      }
    },
    {
      name: "User",
      type: {
        kind: "struct",
        fields: [
          {
            name: "authority",
            docs: [
              "The owner/authority of the account"
            ],
            type: "publicKey"
          },
          {
            name: "delegate",
            docs: [
              "An addresses that can control the account on the authority's behalf. Has limited power, cant withdraw"
            ],
            type: "publicKey"
          },
          {
            name: "name",
            docs: [
              'Encoded display name e.g. "toly"'
            ],
            type: {
              array: [
                "u8",
                32
              ]
            }
          },
          {
            name: "spotPositions",
            docs: [
              "The user's spot positions"
            ],
            type: {
              array: [
                {
                  defined: "SpotPosition"
                },
                8
              ]
            }
          },
          {
            name: "perpPositions",
            docs: [
              "The user's perp positions"
            ],
            type: {
              array: [
                {
                  defined: "PerpPosition"
                },
                8
              ]
            }
          },
          {
            name: "orders",
            docs: [
              "The user's orders"
            ],
            type: {
              array: [
                {
                  defined: "Order"
                },
                32
              ]
            }
          },
          {
            name: "lastAddPerpLpSharesTs",
            docs: [
              "The last time the user added perp lp positions"
            ],
            type: "i64"
          },
          {
            name: "totalDeposits",
            docs: [
              "The total values of deposits the user has made",
              "precision: QUOTE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "totalWithdraws",
            docs: [
              "The total values of withdrawals the user has made",
              "precision: QUOTE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "totalSocialLoss",
            docs: [
              "The total socialized loss the users has incurred upon the protocol",
              "precision: QUOTE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "settledPerpPnl",
            docs: [
              "Fees (taker fees, maker rebate, referrer reward, filler reward) and pnl for perps",
              "precision: QUOTE_PRECISION"
            ],
            type: "i64"
          },
          {
            name: "cumulativeSpotFees",
            docs: [
              "Fees (taker fees, maker rebate, filler reward) for spot",
              "precision: QUOTE_PRECISION"
            ],
            type: "i64"
          },
          {
            name: "cumulativePerpFunding",
            docs: [
              "Cumulative funding paid/received for perps",
              "precision: QUOTE_PRECISION"
            ],
            type: "i64"
          },
          {
            name: "liquidationMarginFreed",
            docs: [
              "The amount of margin freed during liquidation. Used to force the liquidation to occur over a period of time",
              "Defaults to zero when not being liquidated",
              "precision: QUOTE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "lastActiveSlot",
            docs: [
              "The last slot a user was active. Used to determine if a user is idle"
            ],
            type: "u64"
          },
          {
            name: "nextOrderId",
            docs: [
              "Every user order has an order id. This is the next order id to be used"
            ],
            type: "u32"
          },
          {
            name: "maxMarginRatio",
            docs: [
              "Custom max initial margin ratio for the user"
            ],
            type: "u32"
          },
          {
            name: "nextLiquidationId",
            docs: [
              "The next liquidation id to be used for user"
            ],
            type: "u16"
          },
          {
            name: "subAccountId",
            docs: [
              "The sub account id for this user"
            ],
            type: "u16"
          },
          {
            name: "status",
            docs: [
              "Whether the user is active, being liquidated or bankrupt"
            ],
            type: "u8"
          },
          {
            name: "isMarginTradingEnabled",
            docs: [
              "Whether the user has enabled margin trading"
            ],
            type: "bool"
          },
          {
            name: "idle",
            docs: [
              "User is idle if they haven't interacted with the protocol in 1 week and they have no orders, perp positions or borrows",
              "Off-chain keeper bots can ignore users that are idle"
            ],
            type: "bool"
          },
          {
            name: "openOrders",
            docs: [
              "number of open orders"
            ],
            type: "u8"
          },
          {
            name: "hasOpenOrder",
            docs: [
              "Whether or not user has open order"
            ],
            type: "bool"
          },
          {
            name: "openAuctions",
            docs: [
              "number of open orders with auction"
            ],
            type: "u8"
          },
          {
            name: "hasOpenAuction",
            docs: [
              "Whether or not user has open order with auction"
            ],
            type: "bool"
          },
          {
            name: "marginMode",
            type: {
              defined: "MarginMode"
            }
          },
          {
            name: "poolId",
            type: "u8"
          },
          {
            name: "padding1",
            type: {
              array: [
                "u8",
                3
              ]
            }
          },
          {
            name: "lastFuelBonusUpdateTs",
            type: "u32"
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                12
              ]
            }
          }
        ]
      }
    },
    {
      name: "UserStats",
      type: {
        kind: "struct",
        fields: [
          {
            name: "authority",
            docs: [
              "The authority for all of a users sub accounts"
            ],
            type: "publicKey"
          },
          {
            name: "referrer",
            docs: [
              "The address that referred this user"
            ],
            type: "publicKey"
          },
          {
            name: "fees",
            docs: [
              "Stats on the fees paid by the user"
            ],
            type: {
              defined: "UserFees"
            }
          },
          {
            name: "nextEpochTs",
            docs: [
              "The timestamp of the next epoch",
              "Epoch is used to limit referrer rewards earned in single epoch"
            ],
            type: "i64"
          },
          {
            name: "makerVolume30d",
            docs: [
              "Rolling 30day maker volume for user",
              "precision: QUOTE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "takerVolume30d",
            docs: [
              "Rolling 30day taker volume for user",
              "precision: QUOTE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "fillerVolume30d",
            docs: [
              "Rolling 30day filler volume for user",
              "precision: QUOTE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "lastMakerVolume30dTs",
            docs: [
              "last time the maker volume was updated"
            ],
            type: "i64"
          },
          {
            name: "lastTakerVolume30dTs",
            docs: [
              "last time the taker volume was updated"
            ],
            type: "i64"
          },
          {
            name: "lastFillerVolume30dTs",
            docs: [
              "last time the filler volume was updated"
            ],
            type: "i64"
          },
          {
            name: "ifStakedQuoteAssetAmount",
            docs: [
              "The amount of tokens staked in the quote spot markets if"
            ],
            type: "u64"
          },
          {
            name: "numberOfSubAccounts",
            docs: [
              "The current number of sub accounts"
            ],
            type: "u16"
          },
          {
            name: "numberOfSubAccountsCreated",
            docs: [
              "The number of sub accounts created. Can be greater than the number of sub accounts if user",
              "has deleted sub accounts"
            ],
            type: "u16"
          },
          {
            name: "referrerStatus",
            docs: [
              "Flags for referrer status:",
              "First bit (LSB): 1 if user is a referrer, 0 otherwise",
              "Second bit: 1 if user was referred, 0 otherwise"
            ],
            type: "u8"
          },
          {
            name: "disableUpdatePerpBidAskTwap",
            type: "bool"
          },
          {
            name: "padding1",
            type: {
              array: [
                "u8",
                2
              ]
            }
          },
          {
            name: "fuelInsurance",
            docs: [
              "accumulated fuel for token amounts of insurance"
            ],
            type: "u32"
          },
          {
            name: "fuelDeposits",
            docs: [
              "accumulated fuel for notional of deposits"
            ],
            type: "u32"
          },
          {
            name: "fuelBorrows",
            docs: [
              "accumulate fuel bonus for notional of borrows"
            ],
            type: "u32"
          },
          {
            name: "fuelPositions",
            docs: [
              "accumulated fuel for perp open interest"
            ],
            type: "u32"
          },
          {
            name: "fuelTaker",
            docs: [
              "accumulate fuel bonus for taker volume"
            ],
            type: "u32"
          },
          {
            name: "fuelMaker",
            docs: [
              "accumulate fuel bonus for maker volume"
            ],
            type: "u32"
          },
          {
            name: "ifStakedGovTokenAmount",
            docs: [
              "The amount of tokens staked in the governance spot markets if"
            ],
            type: "u64"
          },
          {
            name: "lastFuelIfBonusUpdateTs",
            docs: [
              "last unix ts user stats data was used to update if fuel (u32 to save space)"
            ],
            type: "u32"
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                12
              ]
            }
          }
        ]
      }
    },
    {
      name: "ReferrerName",
      type: {
        kind: "struct",
        fields: [
          {
            name: "authority",
            type: "publicKey"
          },
          {
            name: "user",
            type: "publicKey"
          },
          {
            name: "userStats",
            type: "publicKey"
          },
          {
            name: "name",
            type: {
              array: [
                "u8",
                32
              ]
            }
          }
        ]
      }
    }
  ],
  types: [
    {
      name: "UpdatePerpMarketSummaryStatsParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "quoteAssetAmountWithUnsettledLp",
            type: {
              option: "i64"
            }
          },
          {
            name: "netUnsettledFundingPnl",
            type: {
              option: "i64"
            }
          },
          {
            name: "updateAmmSummaryStats",
            type: {
              option: "bool"
            }
          }
        ]
      }
    },
    {
      name: "LiquidatePerpRecord",
      type: {
        kind: "struct",
        fields: [
          {
            name: "marketIndex",
            type: "u16"
          },
          {
            name: "oraclePrice",
            type: "i64"
          },
          {
            name: "baseAssetAmount",
            type: "i64"
          },
          {
            name: "quoteAssetAmount",
            type: "i64"
          },
          {
            name: "lpShares",
            docs: [
              "precision: AMM_RESERVE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "fillRecordId",
            type: "u64"
          },
          {
            name: "userOrderId",
            type: "u32"
          },
          {
            name: "liquidatorOrderId",
            type: "u32"
          },
          {
            name: "liquidatorFee",
            docs: [
              "precision: QUOTE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "ifFee",
            docs: [
              "precision: QUOTE_PRECISION"
            ],
            type: "u64"
          }
        ]
      }
    },
    {
      name: "LiquidateSpotRecord",
      type: {
        kind: "struct",
        fields: [
          {
            name: "assetMarketIndex",
            type: "u16"
          },
          {
            name: "assetPrice",
            type: "i64"
          },
          {
            name: "assetTransfer",
            type: "u128"
          },
          {
            name: "liabilityMarketIndex",
            type: "u16"
          },
          {
            name: "liabilityPrice",
            type: "i64"
          },
          {
            name: "liabilityTransfer",
            docs: [
              "precision: token mint precision"
            ],
            type: "u128"
          },
          {
            name: "ifFee",
            docs: [
              "precision: token mint precision"
            ],
            type: "u64"
          }
        ]
      }
    },
    {
      name: "LiquidateBorrowForPerpPnlRecord",
      type: {
        kind: "struct",
        fields: [
          {
            name: "perpMarketIndex",
            type: "u16"
          },
          {
            name: "marketOraclePrice",
            type: "i64"
          },
          {
            name: "pnlTransfer",
            type: "u128"
          },
          {
            name: "liabilityMarketIndex",
            type: "u16"
          },
          {
            name: "liabilityPrice",
            type: "i64"
          },
          {
            name: "liabilityTransfer",
            type: "u128"
          }
        ]
      }
    },
    {
      name: "LiquidatePerpPnlForDepositRecord",
      type: {
        kind: "struct",
        fields: [
          {
            name: "perpMarketIndex",
            type: "u16"
          },
          {
            name: "marketOraclePrice",
            type: "i64"
          },
          {
            name: "pnlTransfer",
            type: "u128"
          },
          {
            name: "assetMarketIndex",
            type: "u16"
          },
          {
            name: "assetPrice",
            type: "i64"
          },
          {
            name: "assetTransfer",
            type: "u128"
          }
        ]
      }
    },
    {
      name: "PerpBankruptcyRecord",
      type: {
        kind: "struct",
        fields: [
          {
            name: "marketIndex",
            type: "u16"
          },
          {
            name: "pnl",
            type: "i128"
          },
          {
            name: "ifPayment",
            type: "u128"
          },
          {
            name: "clawbackUser",
            type: {
              option: "publicKey"
            }
          },
          {
            name: "clawbackUserPayment",
            type: {
              option: "u128"
            }
          },
          {
            name: "cumulativeFundingRateDelta",
            type: "i128"
          }
        ]
      }
    },
    {
      name: "SpotBankruptcyRecord",
      type: {
        kind: "struct",
        fields: [
          {
            name: "marketIndex",
            type: "u16"
          },
          {
            name: "borrowAmount",
            type: "u128"
          },
          {
            name: "ifPayment",
            type: "u128"
          },
          {
            name: "cumulativeDepositInterestDelta",
            type: "u128"
          }
        ]
      }
    },
    {
      name: "MarketIdentifier",
      type: {
        kind: "struct",
        fields: [
          {
            name: "marketType",
            type: {
              defined: "MarketType"
            }
          },
          {
            name: "marketIndex",
            type: "u16"
          }
        ]
      }
    },
    {
      name: "HistoricalOracleData",
      type: {
        kind: "struct",
        fields: [
          {
            name: "lastOraclePrice",
            docs: [
              "precision: PRICE_PRECISION"
            ],
            type: "i64"
          },
          {
            name: "lastOracleConf",
            docs: [
              "precision: PRICE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "lastOracleDelay",
            docs: [
              "number of slots since last update"
            ],
            type: "i64"
          },
          {
            name: "lastOraclePriceTwap",
            docs: [
              "precision: PRICE_PRECISION"
            ],
            type: "i64"
          },
          {
            name: "lastOraclePriceTwap5min",
            docs: [
              "precision: PRICE_PRECISION"
            ],
            type: "i64"
          },
          {
            name: "lastOraclePriceTwapTs",
            docs: [
              "unix_timestamp of last snapshot"
            ],
            type: "i64"
          }
        ]
      }
    },
    {
      name: "HistoricalIndexData",
      type: {
        kind: "struct",
        fields: [
          {
            name: "lastIndexBidPrice",
            docs: [
              "precision: PRICE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "lastIndexAskPrice",
            docs: [
              "precision: PRICE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "lastIndexPriceTwap",
            docs: [
              "precision: PRICE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "lastIndexPriceTwap5min",
            docs: [
              "precision: PRICE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "lastIndexPriceTwapTs",
            docs: [
              "unix_timestamp of last snapshot"
            ],
            type: "i64"
          }
        ]
      }
    },
    {
      name: "PrelaunchOracleParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "perpMarketIndex",
            type: "u16"
          },
          {
            name: "price",
            type: {
              option: "i64"
            }
          },
          {
            name: "maxPrice",
            type: {
              option: "i64"
            }
          }
        ]
      }
    },
    {
      name: "OrderParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "orderType",
            type: {
              defined: "OrderType"
            }
          },
          {
            name: "marketType",
            type: {
              defined: "MarketType"
            }
          },
          {
            name: "direction",
            type: {
              defined: "PositionDirection"
            }
          },
          {
            name: "userOrderId",
            type: "u8"
          },
          {
            name: "baseAssetAmount",
            type: "u64"
          },
          {
            name: "price",
            type: "u64"
          },
          {
            name: "marketIndex",
            type: "u16"
          },
          {
            name: "reduceOnly",
            type: "bool"
          },
          {
            name: "postOnly",
            type: {
              defined: "PostOnlyParam"
            }
          },
          {
            name: "immediateOrCancel",
            type: "bool"
          },
          {
            name: "maxTs",
            type: {
              option: "i64"
            }
          },
          {
            name: "triggerPrice",
            type: {
              option: "u64"
            }
          },
          {
            name: "triggerCondition",
            type: {
              defined: "OrderTriggerCondition"
            }
          },
          {
            name: "oraclePriceOffset",
            type: {
              option: "i32"
            }
          },
          {
            name: "auctionDuration",
            type: {
              option: "u8"
            }
          },
          {
            name: "auctionStartPrice",
            type: {
              option: "i64"
            }
          },
          {
            name: "auctionEndPrice",
            type: {
              option: "i64"
            }
          }
        ]
      }
    },
    {
      name: "SwiftOrderParamsMessage",
      type: {
        kind: "struct",
        fields: [
          {
            name: "swiftOrderParams",
            type: {
              defined: "OrderParams"
            }
          },
          {
            name: "subAccountId",
            type: "u16"
          },
          {
            name: "slot",
            type: "u64"
          },
          {
            name: "uuid",
            type: {
              array: [
                "u8",
                8
              ]
            }
          },
          {
            name: "takeProfitOrderParams",
            type: {
              option: {
                defined: "SwiftTriggerOrderParams"
              }
            }
          },
          {
            name: "stopLossOrderParams",
            type: {
              option: {
                defined: "SwiftTriggerOrderParams"
              }
            }
          }
        ]
      }
    },
    {
      name: "SwiftTriggerOrderParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "triggerPrice",
            type: "u64"
          },
          {
            name: "baseAssetAmount",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "RFQMakerOrderParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "uuid",
            type: {
              array: [
                "u8",
                8
              ]
            }
          },
          {
            name: "authority",
            type: "publicKey"
          },
          {
            name: "subAccountId",
            type: "u16"
          },
          {
            name: "marketIndex",
            type: "u16"
          },
          {
            name: "marketType",
            type: {
              defined: "MarketType"
            }
          },
          {
            name: "baseAssetAmount",
            type: "u64"
          },
          {
            name: "price",
            type: "u64"
          },
          {
            name: "direction",
            type: {
              defined: "PositionDirection"
            }
          },
          {
            name: "maxTs",
            type: "i64"
          }
        ]
      }
    },
    {
      name: "RFQMakerMessage",
      type: {
        kind: "struct",
        fields: [
          {
            name: "orderParams",
            type: {
              defined: "RFQMakerOrderParams"
            }
          },
          {
            name: "signature",
            type: {
              array: [
                "u8",
                64
              ]
            }
          }
        ]
      }
    },
    {
      name: "RFQMatch",
      type: {
        kind: "struct",
        fields: [
          {
            name: "baseAssetAmount",
            type: "u64"
          },
          {
            name: "makerOrderParams",
            type: {
              defined: "RFQMakerOrderParams"
            }
          },
          {
            name: "makerSignature",
            type: {
              array: [
                "u8",
                64
              ]
            }
          }
        ]
      }
    },
    {
      name: "ModifyOrderParams",
      type: {
        kind: "struct",
        fields: [
          {
            name: "direction",
            type: {
              option: {
                defined: "PositionDirection"
              }
            }
          },
          {
            name: "baseAssetAmount",
            type: {
              option: "u64"
            }
          },
          {
            name: "price",
            type: {
              option: "u64"
            }
          },
          {
            name: "reduceOnly",
            type: {
              option: "bool"
            }
          },
          {
            name: "postOnly",
            type: {
              option: {
                defined: "PostOnlyParam"
              }
            }
          },
          {
            name: "immediateOrCancel",
            type: {
              option: "bool"
            }
          },
          {
            name: "maxTs",
            type: {
              option: "i64"
            }
          },
          {
            name: "triggerPrice",
            type: {
              option: "u64"
            }
          },
          {
            name: "triggerCondition",
            type: {
              option: {
                defined: "OrderTriggerCondition"
              }
            }
          },
          {
            name: "oraclePriceOffset",
            type: {
              option: "i32"
            }
          },
          {
            name: "auctionDuration",
            type: {
              option: "u8"
            }
          },
          {
            name: "auctionStartPrice",
            type: {
              option: "i64"
            }
          },
          {
            name: "auctionEndPrice",
            type: {
              option: "i64"
            }
          },
          {
            name: "policy",
            type: {
              option: "u8"
            }
          }
        ]
      }
    },
    {
      name: "InsuranceClaim",
      type: {
        kind: "struct",
        fields: [
          {
            name: "revenueWithdrawSinceLastSettle",
            docs: [
              "The amount of revenue last settled",
              "Positive if funds left the perp market,",
              "negative if funds were pulled into the perp market",
              "precision: QUOTE_PRECISION"
            ],
            type: "i64"
          },
          {
            name: "maxRevenueWithdrawPerPeriod",
            docs: [
              "The max amount of revenue that can be withdrawn per period",
              "precision: QUOTE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "quoteMaxInsurance",
            docs: [
              "The max amount of insurance that perp market can use to resolve bankruptcy and pnl deficits",
              "precision: QUOTE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "quoteSettledInsurance",
            docs: [
              "The amount of insurance that has been used to resolve bankruptcy and pnl deficits",
              "precision: QUOTE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "lastRevenueWithdrawTs",
            docs: [
              "The last time revenue was settled in/out of market"
            ],
            type: "i64"
          }
        ]
      }
    },
    {
      name: "PoolBalance",
      type: {
        kind: "struct",
        fields: [
          {
            name: "scaledBalance",
            docs: [
              "To get the pool's token amount, you must multiply the scaled balance by the market's cumulative",
              "deposit interest",
              "precision: SPOT_BALANCE_PRECISION"
            ],
            type: "u128"
          },
          {
            name: "marketIndex",
            docs: [
              "The spot market the pool is for"
            ],
            type: "u16"
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                6
              ]
            }
          }
        ]
      }
    },
    {
      name: "AMM",
      type: {
        kind: "struct",
        fields: [
          {
            name: "oracle",
            docs: [
              "oracle price data public key"
            ],
            type: "publicKey"
          },
          {
            name: "historicalOracleData",
            docs: [
              "stores historically witnessed oracle data"
            ],
            type: {
              defined: "HistoricalOracleData"
            }
          },
          {
            name: "baseAssetAmountPerLp",
            docs: [
              "accumulated base asset amount since inception per lp share",
              "precision: QUOTE_PRECISION"
            ],
            type: "i128"
          },
          {
            name: "quoteAssetAmountPerLp",
            docs: [
              "accumulated quote asset amount since inception per lp share",
              "precision: QUOTE_PRECISION"
            ],
            type: "i128"
          },
          {
            name: "feePool",
            docs: [
              "partition of fees from perp market trading moved from pnl settlements"
            ],
            type: {
              defined: "PoolBalance"
            }
          },
          {
            name: "baseAssetReserve",
            docs: [
              "`x` reserves for constant product mm formula (x * y = k)",
              "precision: AMM_RESERVE_PRECISION"
            ],
            type: "u128"
          },
          {
            name: "quoteAssetReserve",
            docs: [
              "`y` reserves for constant product mm formula (x * y = k)",
              "precision: AMM_RESERVE_PRECISION"
            ],
            type: "u128"
          },
          {
            name: "concentrationCoef",
            docs: [
              "determines how close the min/max base asset reserve sit vs base reserves",
              "allow for decreasing slippage without increasing liquidity and v.v.",
              "precision: PERCENTAGE_PRECISION"
            ],
            type: "u128"
          },
          {
            name: "minBaseAssetReserve",
            docs: [
              "minimum base_asset_reserve allowed before AMM is unavailable",
              "precision: AMM_RESERVE_PRECISION"
            ],
            type: "u128"
          },
          {
            name: "maxBaseAssetReserve",
            docs: [
              "maximum base_asset_reserve allowed before AMM is unavailable",
              "precision: AMM_RESERVE_PRECISION"
            ],
            type: "u128"
          },
          {
            name: "sqrtK",
            docs: [
              "`sqrt(k)` in constant product mm formula (x * y = k). stored to avoid drift caused by integer math issues",
              "precision: AMM_RESERVE_PRECISION"
            ],
            type: "u128"
          },
          {
            name: "pegMultiplier",
            docs: [
              "normalizing numerical factor for y, its use offers lowest slippage in cp-curve when market is balanced",
              "precision: PEG_PRECISION"
            ],
            type: "u128"
          },
          {
            name: "terminalQuoteAssetReserve",
            docs: [
              "y when market is balanced. stored to save computation",
              "precision: AMM_RESERVE_PRECISION"
            ],
            type: "u128"
          },
          {
            name: "baseAssetAmountLong",
            docs: [
              "always non-negative. tracks number of total longs in market (regardless of counterparty)",
              "precision: BASE_PRECISION"
            ],
            type: "i128"
          },
          {
            name: "baseAssetAmountShort",
            docs: [
              "always non-positive. tracks number of total shorts in market (regardless of counterparty)",
              "precision: BASE_PRECISION"
            ],
            type: "i128"
          },
          {
            name: "baseAssetAmountWithAmm",
            docs: [
              "tracks net position (longs-shorts) in market with AMM as counterparty",
              "precision: BASE_PRECISION"
            ],
            type: "i128"
          },
          {
            name: "baseAssetAmountWithUnsettledLp",
            docs: [
              "tracks net position (longs-shorts) in market with LPs as counterparty",
              "precision: BASE_PRECISION"
            ],
            type: "i128"
          },
          {
            name: "maxOpenInterest",
            docs: [
              "max allowed open interest, blocks trades that breach this value",
              "precision: BASE_PRECISION"
            ],
            type: "u128"
          },
          {
            name: "quoteAssetAmount",
            docs: [
              "sum of all user's perp quote_asset_amount in market",
              "precision: QUOTE_PRECISION"
            ],
            type: "i128"
          },
          {
            name: "quoteEntryAmountLong",
            docs: [
              "sum of all long user's quote_entry_amount in market",
              "precision: QUOTE_PRECISION"
            ],
            type: "i128"
          },
          {
            name: "quoteEntryAmountShort",
            docs: [
              "sum of all short user's quote_entry_amount in market",
              "precision: QUOTE_PRECISION"
            ],
            type: "i128"
          },
          {
            name: "quoteBreakEvenAmountLong",
            docs: [
              "sum of all long user's quote_break_even_amount in market",
              "precision: QUOTE_PRECISION"
            ],
            type: "i128"
          },
          {
            name: "quoteBreakEvenAmountShort",
            docs: [
              "sum of all short user's quote_break_even_amount in market",
              "precision: QUOTE_PRECISION"
            ],
            type: "i128"
          },
          {
            name: "userLpShares",
            docs: [
              "total user lp shares of sqrt_k (protocol owned liquidity = sqrt_k - last_funding_rate)",
              "precision: AMM_RESERVE_PRECISION"
            ],
            type: "u128"
          },
          {
            name: "lastFundingRate",
            docs: [
              "last funding rate in this perp market (unit is quote per base)",
              "precision: QUOTE_PRECISION"
            ],
            type: "i64"
          },
          {
            name: "lastFundingRateLong",
            docs: [
              "last funding rate for longs in this perp market (unit is quote per base)",
              "precision: QUOTE_PRECISION"
            ],
            type: "i64"
          },
          {
            name: "lastFundingRateShort",
            docs: [
              "last funding rate for shorts in this perp market (unit is quote per base)",
              "precision: QUOTE_PRECISION"
            ],
            type: "i64"
          },
          {
            name: "last24hAvgFundingRate",
            docs: [
              "estimate of last 24h of funding rate perp market (unit is quote per base)",
              "precision: QUOTE_PRECISION"
            ],
            type: "i64"
          },
          {
            name: "totalFee",
            docs: [
              "total fees collected by this perp market",
              "precision: QUOTE_PRECISION"
            ],
            type: "i128"
          },
          {
            name: "totalMmFee",
            docs: [
              "total fees collected by the vAMM's bid/ask spread",
              "precision: QUOTE_PRECISION"
            ],
            type: "i128"
          },
          {
            name: "totalExchangeFee",
            docs: [
              "total fees collected by exchange fee schedule",
              "precision: QUOTE_PRECISION"
            ],
            type: "u128"
          },
          {
            name: "totalFeeMinusDistributions",
            docs: [
              "total fees minus any recognized upnl and pool withdraws",
              "precision: QUOTE_PRECISION"
            ],
            type: "i128"
          },
          {
            name: "totalFeeWithdrawn",
            docs: [
              "sum of all fees from fee pool withdrawn to revenue pool",
              "precision: QUOTE_PRECISION"
            ],
            type: "u128"
          },
          {
            name: "totalLiquidationFee",
            docs: [
              "all fees collected by market for liquidations",
              "precision: QUOTE_PRECISION"
            ],
            type: "u128"
          },
          {
            name: "cumulativeFundingRateLong",
            docs: [
              "accumulated funding rate for longs since inception in market"
            ],
            type: "i128"
          },
          {
            name: "cumulativeFundingRateShort",
            docs: [
              "accumulated funding rate for shorts since inception in market"
            ],
            type: "i128"
          },
          {
            name: "totalSocialLoss",
            docs: [
              "accumulated social loss paid by users since inception in market"
            ],
            type: "u128"
          },
          {
            name: "askBaseAssetReserve",
            docs: [
              "transformed base_asset_reserve for users going long",
              "precision: AMM_RESERVE_PRECISION"
            ],
            type: "u128"
          },
          {
            name: "askQuoteAssetReserve",
            docs: [
              "transformed quote_asset_reserve for users going long",
              "precision: AMM_RESERVE_PRECISION"
            ],
            type: "u128"
          },
          {
            name: "bidBaseAssetReserve",
            docs: [
              "transformed base_asset_reserve for users going short",
              "precision: AMM_RESERVE_PRECISION"
            ],
            type: "u128"
          },
          {
            name: "bidQuoteAssetReserve",
            docs: [
              "transformed quote_asset_reserve for users going short",
              "precision: AMM_RESERVE_PRECISION"
            ],
            type: "u128"
          },
          {
            name: "lastOracleNormalisedPrice",
            docs: [
              "the last seen oracle price partially shrunk toward the amm reserve price",
              "precision: PRICE_PRECISION"
            ],
            type: "i64"
          },
          {
            name: "lastOracleReservePriceSpreadPct",
            docs: [
              "the gap between the oracle price and the reserve price = y * peg_multiplier / x"
            ],
            type: "i64"
          },
          {
            name: "lastBidPriceTwap",
            docs: [
              "average estimate of bid price over funding_period",
              "precision: PRICE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "lastAskPriceTwap",
            docs: [
              "average estimate of ask price over funding_period",
              "precision: PRICE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "lastMarkPriceTwap",
            docs: [
              "average estimate of (bid+ask)/2 price over funding_period",
              "precision: PRICE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "lastMarkPriceTwap5min",
            docs: [
              "average estimate of (bid+ask)/2 price over FIVE_MINUTES"
            ],
            type: "u64"
          },
          {
            name: "lastUpdateSlot",
            docs: [
              "the last blockchain slot the amm was updated"
            ],
            type: "u64"
          },
          {
            name: "lastOracleConfPct",
            docs: [
              "the pct size of the oracle confidence interval",
              "precision: PERCENTAGE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "netRevenueSinceLastFunding",
            docs: [
              "the total_fee_minus_distribution change since the last funding update",
              "precision: QUOTE_PRECISION"
            ],
            type: "i64"
          },
          {
            name: "lastFundingRateTs",
            docs: [
              "the last funding rate update unix_timestamp"
            ],
            type: "i64"
          },
          {
            name: "fundingPeriod",
            docs: [
              "the peridocity of the funding rate updates"
            ],
            type: "i64"
          },
          {
            name: "orderStepSize",
            docs: [
              "the base step size (increment) of orders",
              "precision: BASE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "orderTickSize",
            docs: [
              "the price tick size of orders",
              "precision: PRICE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "minOrderSize",
            docs: [
              "the minimum base size of an order",
              "precision: BASE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "maxPositionSize",
            docs: [
              "the max base size a single user can have",
              "precision: BASE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "volume24h",
            docs: [
              "estimated total of volume in market",
              "QUOTE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "longIntensityVolume",
            docs: [
              "the volume intensity of long fills against AMM"
            ],
            type: "u64"
          },
          {
            name: "shortIntensityVolume",
            docs: [
              "the volume intensity of short fills against AMM"
            ],
            type: "u64"
          },
          {
            name: "lastTradeTs",
            docs: [
              "the blockchain unix timestamp at the time of the last trade"
            ],
            type: "i64"
          },
          {
            name: "markStd",
            docs: [
              "estimate of standard deviation of the fill (mark) prices",
              "precision: PRICE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "oracleStd",
            docs: [
              "estimate of standard deviation of the oracle price at each update",
              "precision: PRICE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "lastMarkPriceTwapTs",
            docs: [
              "the last unix_timestamp the mark twap was updated"
            ],
            type: "i64"
          },
          {
            name: "baseSpread",
            docs: [
              "the minimum spread the AMM can quote. also used as step size for some spread logic increases."
            ],
            type: "u32"
          },
          {
            name: "maxSpread",
            docs: [
              "the maximum spread the AMM can quote"
            ],
            type: "u32"
          },
          {
            name: "longSpread",
            docs: [
              "the spread for asks vs the reserve price"
            ],
            type: "u32"
          },
          {
            name: "shortSpread",
            docs: [
              "the spread for bids vs the reserve price"
            ],
            type: "u32"
          },
          {
            name: "longIntensityCount",
            docs: [
              "the count intensity of long fills against AMM"
            ],
            type: "u32"
          },
          {
            name: "shortIntensityCount",
            docs: [
              "the count intensity of short fills against AMM"
            ],
            type: "u32"
          },
          {
            name: "maxFillReserveFraction",
            docs: [
              "the fraction of total available liquidity a single fill on the AMM can consume"
            ],
            type: "u16"
          },
          {
            name: "maxSlippageRatio",
            docs: [
              "the maximum slippage a single fill on the AMM can push"
            ],
            type: "u16"
          },
          {
            name: "curveUpdateIntensity",
            docs: [
              "the update intensity of AMM formulaic updates (adjusting k). 0-100"
            ],
            type: "u8"
          },
          {
            name: "ammJitIntensity",
            docs: [
              "the jit intensity of AMM. larger intensity means larger participation in jit. 0 means no jit participation.",
              "(0, 100] is intensity for protocol-owned AMM. (100, 200] is intensity for user LP-owned AMM."
            ],
            type: "u8"
          },
          {
            name: "oracleSource",
            docs: [
              "the oracle provider information. used to decode/scale the oracle public key"
            ],
            type: {
              defined: "OracleSource"
            }
          },
          {
            name: "lastOracleValid",
            docs: [
              "tracks whether the oracle was considered valid at the last AMM update"
            ],
            type: "bool"
          },
          {
            name: "targetBaseAssetAmountPerLp",
            docs: [
              "the target value for `base_asset_amount_per_lp`, used during AMM JIT with LP split",
              "precision: BASE_PRECISION"
            ],
            type: "i32"
          },
          {
            name: "perLpBase",
            docs: [
              "expo for unit of per_lp, base 10 (if per_lp_base=X, then per_lp unit is 10^X)"
            ],
            type: "i8"
          },
          {
            name: "padding1",
            type: "u8"
          },
          {
            name: "padding2",
            type: "u16"
          },
          {
            name: "totalFeeEarnedPerLp",
            type: "u64"
          },
          {
            name: "netUnsettledFundingPnl",
            type: "i64"
          },
          {
            name: "quoteAssetAmountWithUnsettledLp",
            type: "i64"
          },
          {
            name: "referencePriceOffset",
            type: "i32"
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                12
              ]
            }
          }
        ]
      }
    },
    {
      name: "RFQOrderId",
      type: {
        kind: "struct",
        fields: [
          {
            name: "uuid",
            type: {
              array: [
                "u8",
                8
              ]
            }
          },
          {
            name: "maxTs",
            type: "i64"
          }
        ]
      }
    },
    {
      name: "InsuranceFund",
      type: {
        kind: "struct",
        fields: [
          {
            name: "vault",
            type: "publicKey"
          },
          {
            name: "totalShares",
            type: "u128"
          },
          {
            name: "userShares",
            type: "u128"
          },
          {
            name: "sharesBase",
            type: "u128"
          },
          {
            name: "unstakingPeriod",
            type: "i64"
          },
          {
            name: "lastRevenueSettleTs",
            type: "i64"
          },
          {
            name: "revenueSettlePeriod",
            type: "i64"
          },
          {
            name: "totalFactor",
            type: "u32"
          },
          {
            name: "userFactor",
            type: "u32"
          }
        ]
      }
    },
    {
      name: "OracleGuardRails",
      type: {
        kind: "struct",
        fields: [
          {
            name: "priceDivergence",
            type: {
              defined: "PriceDivergenceGuardRails"
            }
          },
          {
            name: "validity",
            type: {
              defined: "ValidityGuardRails"
            }
          }
        ]
      }
    },
    {
      name: "PriceDivergenceGuardRails",
      type: {
        kind: "struct",
        fields: [
          {
            name: "markOraclePercentDivergence",
            type: "u64"
          },
          {
            name: "oracleTwap5minPercentDivergence",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "ValidityGuardRails",
      type: {
        kind: "struct",
        fields: [
          {
            name: "slotsBeforeStaleForAmm",
            type: "i64"
          },
          {
            name: "slotsBeforeStaleForMargin",
            type: "i64"
          },
          {
            name: "confidenceIntervalMaxSize",
            type: "u64"
          },
          {
            name: "tooVolatileRatio",
            type: "i64"
          }
        ]
      }
    },
    {
      name: "FeeStructure",
      type: {
        kind: "struct",
        fields: [
          {
            name: "feeTiers",
            type: {
              array: [
                {
                  defined: "FeeTier"
                },
                10
              ]
            }
          },
          {
            name: "fillerRewardStructure",
            type: {
              defined: "OrderFillerRewardStructure"
            }
          },
          {
            name: "referrerRewardEpochUpperBound",
            type: "u64"
          },
          {
            name: "flatFillerFee",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "FeeTier",
      type: {
        kind: "struct",
        fields: [
          {
            name: "feeNumerator",
            type: "u32"
          },
          {
            name: "feeDenominator",
            type: "u32"
          },
          {
            name: "makerRebateNumerator",
            type: "u32"
          },
          {
            name: "makerRebateDenominator",
            type: "u32"
          },
          {
            name: "referrerRewardNumerator",
            type: "u32"
          },
          {
            name: "referrerRewardDenominator",
            type: "u32"
          },
          {
            name: "refereeFeeNumerator",
            type: "u32"
          },
          {
            name: "refereeFeeDenominator",
            type: "u32"
          }
        ]
      }
    },
    {
      name: "OrderFillerRewardStructure",
      type: {
        kind: "struct",
        fields: [
          {
            name: "rewardNumerator",
            type: "u32"
          },
          {
            name: "rewardDenominator",
            type: "u32"
          },
          {
            name: "timeBasedRewardLowerBound",
            type: "u128"
          }
        ]
      }
    },
    {
      name: "SwiftOrderId",
      type: {
        kind: "struct",
        fields: [
          {
            name: "uuid",
            type: {
              array: [
                "u8",
                8
              ]
            }
          },
          {
            name: "maxSlot",
            type: "u64"
          },
          {
            name: "orderId",
            type: "u32"
          },
          {
            name: "padding",
            type: "u32"
          }
        ]
      }
    },
    {
      name: "SwiftUserOrdersFixed",
      type: {
        kind: "struct",
        fields: [
          {
            name: "userPubkey",
            type: "publicKey"
          },
          {
            name: "padding",
            type: "u32"
          },
          {
            name: "len",
            type: "u32"
          }
        ]
      }
    },
    {
      name: "UserFees",
      type: {
        kind: "struct",
        fields: [
          {
            name: "totalFeePaid",
            docs: [
              "Total taker fee paid",
              "precision: QUOTE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "totalFeeRebate",
            docs: [
              "Total maker fee rebate",
              "precision: QUOTE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "totalTokenDiscount",
            docs: [
              "Total discount from holding token",
              "precision: QUOTE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "totalRefereeDiscount",
            docs: [
              "Total discount from being referred",
              "precision: QUOTE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "totalReferrerReward",
            docs: [
              "Total reward to referrer",
              "precision: QUOTE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "currentEpochReferrerReward",
            docs: [
              "Total reward to referrer this epoch",
              "precision: QUOTE_PRECISION"
            ],
            type: "u64"
          }
        ]
      }
    },
    {
      name: "SpotPosition",
      type: {
        kind: "struct",
        fields: [
          {
            name: "scaledBalance",
            docs: [
              "The scaled balance of the position. To get the token amount, multiply by the cumulative deposit/borrow",
              "interest of corresponding market.",
              "precision: SPOT_BALANCE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "openBids",
            docs: [
              "How many spot bids the user has open",
              "precision: token mint precision"
            ],
            type: "i64"
          },
          {
            name: "openAsks",
            docs: [
              "How many spot asks the user has open",
              "precision: token mint precision"
            ],
            type: "i64"
          },
          {
            name: "cumulativeDeposits",
            docs: [
              "The cumulative deposits/borrows a user has made into a market",
              "precision: token mint precision"
            ],
            type: "i64"
          },
          {
            name: "marketIndex",
            docs: [
              "The market index of the corresponding spot market"
            ],
            type: "u16"
          },
          {
            name: "balanceType",
            docs: [
              "Whether the position is deposit or borrow"
            ],
            type: {
              defined: "SpotBalanceType"
            }
          },
          {
            name: "openOrders",
            docs: [
              "Number of open orders"
            ],
            type: "u8"
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                4
              ]
            }
          }
        ]
      }
    },
    {
      name: "PerpPosition",
      type: {
        kind: "struct",
        fields: [
          {
            name: "lastCumulativeFundingRate",
            docs: [
              "The perp market's last cumulative funding rate. Used to calculate the funding payment owed to user",
              "precision: FUNDING_RATE_PRECISION"
            ],
            type: "i64"
          },
          {
            name: "baseAssetAmount",
            docs: [
              "the size of the users perp position",
              "precision: BASE_PRECISION"
            ],
            type: "i64"
          },
          {
            name: "quoteAssetAmount",
            docs: [
              "Used to calculate the users pnl. Upon entry, is equal to base_asset_amount * avg entry price - fees",
              "Updated when the user open/closes position or settles pnl. Includes fees/funding",
              "precision: QUOTE_PRECISION"
            ],
            type: "i64"
          },
          {
            name: "quoteBreakEvenAmount",
            docs: [
              "The amount of quote the user would need to exit their position at to break even",
              "Updated when the user open/closes position or settles pnl. Includes fees/funding",
              "precision: QUOTE_PRECISION"
            ],
            type: "i64"
          },
          {
            name: "quoteEntryAmount",
            docs: [
              "The amount quote the user entered the position with. Equal to base asset amount * avg entry price",
              "Updated when the user open/closes position. Excludes fees/funding",
              "precision: QUOTE_PRECISION"
            ],
            type: "i64"
          },
          {
            name: "openBids",
            docs: [
              "The amount of open bids the user has in this perp market",
              "precision: BASE_PRECISION"
            ],
            type: "i64"
          },
          {
            name: "openAsks",
            docs: [
              "The amount of open asks the user has in this perp market",
              "precision: BASE_PRECISION"
            ],
            type: "i64"
          },
          {
            name: "settledPnl",
            docs: [
              "The amount of pnl settled in this market since opening the position",
              "precision: QUOTE_PRECISION"
            ],
            type: "i64"
          },
          {
            name: "lpShares",
            docs: [
              "The number of lp (liquidity provider) shares the user has in this perp market",
              "LP shares allow users to provide liquidity via the AMM",
              "precision: BASE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "lastBaseAssetAmountPerLp",
            docs: [
              "The last base asset amount per lp the amm had",
              "Used to settle the users lp position",
              "precision: BASE_PRECISION"
            ],
            type: "i64"
          },
          {
            name: "lastQuoteAssetAmountPerLp",
            docs: [
              "The last quote asset amount per lp the amm had",
              "Used to settle the users lp position",
              "precision: QUOTE_PRECISION"
            ],
            type: "i64"
          },
          {
            name: "remainderBaseAssetAmount",
            docs: [
              "Settling LP position can lead to a small amount of base asset being left over smaller than step size",
              "This records that remainder so it can be settled later on",
              "precision: BASE_PRECISION"
            ],
            type: "i32"
          },
          {
            name: "marketIndex",
            docs: [
              "The market index for the perp market"
            ],
            type: "u16"
          },
          {
            name: "openOrders",
            docs: [
              "The number of open orders"
            ],
            type: "u8"
          },
          {
            name: "perLpBase",
            type: "i8"
          }
        ]
      }
    },
    {
      name: "Order",
      type: {
        kind: "struct",
        fields: [
          {
            name: "slot",
            docs: [
              "The slot the order was placed"
            ],
            type: "u64"
          },
          {
            name: "price",
            docs: [
              "The limit price for the order (can be 0 for market orders)",
              "For orders with an auction, this price isn't used until the auction is complete",
              "precision: PRICE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "baseAssetAmount",
            docs: [
              "The size of the order",
              "precision for perps: BASE_PRECISION",
              "precision for spot: token mint precision"
            ],
            type: "u64"
          },
          {
            name: "baseAssetAmountFilled",
            docs: [
              "The amount of the order filled",
              "precision for perps: BASE_PRECISION",
              "precision for spot: token mint precision"
            ],
            type: "u64"
          },
          {
            name: "quoteAssetAmountFilled",
            docs: [
              "The amount of quote filled for the order",
              "precision: QUOTE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "triggerPrice",
            docs: [
              "At what price the order will be triggered. Only relevant for trigger orders",
              "precision: PRICE_PRECISION"
            ],
            type: "u64"
          },
          {
            name: "auctionStartPrice",
            docs: [
              "The start price for the auction. Only relevant for market/oracle orders",
              "precision: PRICE_PRECISION"
            ],
            type: "i64"
          },
          {
            name: "auctionEndPrice",
            docs: [
              "The end price for the auction. Only relevant for market/oracle orders",
              "precision: PRICE_PRECISION"
            ],
            type: "i64"
          },
          {
            name: "maxTs",
            docs: [
              "The time when the order will expire"
            ],
            type: "i64"
          },
          {
            name: "oraclePriceOffset",
            docs: [
              "If set, the order limit price is the oracle price + this offset",
              "precision: PRICE_PRECISION"
            ],
            type: "i32"
          },
          {
            name: "orderId",
            docs: [
              "The id for the order. Each users has their own order id space"
            ],
            type: "u32"
          },
          {
            name: "marketIndex",
            docs: [
              "The perp/spot market index"
            ],
            type: "u16"
          },
          {
            name: "status",
            docs: [
              "Whether the order is open or unused"
            ],
            type: {
              defined: "OrderStatus"
            }
          },
          {
            name: "orderType",
            docs: [
              "The type of order"
            ],
            type: {
              defined: "OrderType"
            }
          },
          {
            name: "marketType",
            docs: [
              "Whether market is spot or perp"
            ],
            type: {
              defined: "MarketType"
            }
          },
          {
            name: "userOrderId",
            docs: [
              "User generated order id. Can make it easier to place/cancel orders"
            ],
            type: "u8"
          },
          {
            name: "existingPositionDirection",
            docs: [
              "What the users position was when the order was placed"
            ],
            type: {
              defined: "PositionDirection"
            }
          },
          {
            name: "direction",
            docs: [
              "Whether the user is going long or short. LONG = bid, SHORT = ask"
            ],
            type: {
              defined: "PositionDirection"
            }
          },
          {
            name: "reduceOnly",
            docs: [
              "Whether the order is allowed to only reduce position size"
            ],
            type: "bool"
          },
          {
            name: "postOnly",
            docs: [
              "Whether the order must be a maker"
            ],
            type: "bool"
          },
          {
            name: "immediateOrCancel",
            docs: [
              "Whether the order must be canceled the same slot it is placed"
            ],
            type: "bool"
          },
          {
            name: "triggerCondition",
            docs: [
              "Whether the order is triggered above or below the trigger price. Only relevant for trigger orders"
            ],
            type: {
              defined: "OrderTriggerCondition"
            }
          },
          {
            name: "auctionDuration",
            docs: [
              "How many slots the auction lasts"
            ],
            type: "u8"
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                3
              ]
            }
          }
        ]
      }
    },
    {
      name: "SwapDirection",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Add"
          },
          {
            name: "Remove"
          }
        ]
      }
    },
    {
      name: "ModifyOrderId",
      type: {
        kind: "enum",
        variants: [
          {
            name: "UserOrderId",
            fields: [
              "u8"
            ]
          },
          {
            name: "OrderId",
            fields: [
              "u32"
            ]
          }
        ]
      }
    },
    {
      name: "PositionDirection",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Long"
          },
          {
            name: "Short"
          }
        ]
      }
    },
    {
      name: "SpotFulfillmentType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "SerumV3"
          },
          {
            name: "Match"
          },
          {
            name: "PhoenixV1"
          },
          {
            name: "OpenbookV2"
          }
        ]
      }
    },
    {
      name: "SwapReduceOnly",
      type: {
        kind: "enum",
        variants: [
          {
            name: "In"
          },
          {
            name: "Out"
          }
        ]
      }
    },
    {
      name: "TwapPeriod",
      type: {
        kind: "enum",
        variants: [
          {
            name: "FundingPeriod"
          },
          {
            name: "FiveMin"
          }
        ]
      }
    },
    {
      name: "LiquidationMultiplierType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Discount"
          },
          {
            name: "Premium"
          }
        ]
      }
    },
    {
      name: "MarginRequirementType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Initial"
          },
          {
            name: "Fill"
          },
          {
            name: "Maintenance"
          }
        ]
      }
    },
    {
      name: "OracleValidity",
      type: {
        kind: "enum",
        variants: [
          {
            name: "NonPositive"
          },
          {
            name: "TooVolatile"
          },
          {
            name: "TooUncertain"
          },
          {
            name: "StaleForMargin"
          },
          {
            name: "InsufficientDataPoints"
          },
          {
            name: "StaleForAMM"
          },
          {
            name: "Valid"
          }
        ]
      }
    },
    {
      name: "DriftAction",
      type: {
        kind: "enum",
        variants: [
          {
            name: "UpdateFunding"
          },
          {
            name: "SettlePnl"
          },
          {
            name: "TriggerOrder"
          },
          {
            name: "FillOrderMatch"
          },
          {
            name: "FillOrderAmm"
          },
          {
            name: "Liquidate"
          },
          {
            name: "MarginCalc"
          },
          {
            name: "UpdateTwap"
          },
          {
            name: "UpdateAMMCurve"
          },
          {
            name: "OracleOrderPrice"
          }
        ]
      }
    },
    {
      name: "PositionUpdateType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Open"
          },
          {
            name: "Increase"
          },
          {
            name: "Reduce"
          },
          {
            name: "Close"
          },
          {
            name: "Flip"
          }
        ]
      }
    },
    {
      name: "DepositExplanation",
      type: {
        kind: "enum",
        variants: [
          {
            name: "None"
          },
          {
            name: "Transfer"
          },
          {
            name: "Borrow"
          },
          {
            name: "RepayBorrow"
          }
        ]
      }
    },
    {
      name: "DepositDirection",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Deposit"
          },
          {
            name: "Withdraw"
          }
        ]
      }
    },
    {
      name: "OrderAction",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Place"
          },
          {
            name: "Cancel"
          },
          {
            name: "Fill"
          },
          {
            name: "Trigger"
          },
          {
            name: "Expire"
          }
        ]
      }
    },
    {
      name: "OrderActionExplanation",
      type: {
        kind: "enum",
        variants: [
          {
            name: "None"
          },
          {
            name: "InsufficientFreeCollateral"
          },
          {
            name: "OraclePriceBreachedLimitPrice"
          },
          {
            name: "MarketOrderFilledToLimitPrice"
          },
          {
            name: "OrderExpired"
          },
          {
            name: "Liquidation"
          },
          {
            name: "OrderFilledWithAMM"
          },
          {
            name: "OrderFilledWithAMMJit"
          },
          {
            name: "OrderFilledWithMatch"
          },
          {
            name: "OrderFilledWithMatchJit"
          },
          {
            name: "MarketExpired"
          },
          {
            name: "RiskingIncreasingOrder"
          },
          {
            name: "ReduceOnlyOrderIncreasedPosition"
          },
          {
            name: "OrderFillWithSerum"
          },
          {
            name: "NoBorrowLiquidity"
          },
          {
            name: "OrderFillWithPhoenix"
          },
          {
            name: "OrderFilledWithAMMJitLPSplit"
          },
          {
            name: "OrderFilledWithLPJit"
          },
          {
            name: "DeriskLp"
          },
          {
            name: "OrderFilledWithOpenbookV2"
          }
        ]
      }
    },
    {
      name: "LPAction",
      type: {
        kind: "enum",
        variants: [
          {
            name: "AddLiquidity"
          },
          {
            name: "RemoveLiquidity"
          },
          {
            name: "SettleLiquidity"
          },
          {
            name: "RemoveLiquidityDerisk"
          }
        ]
      }
    },
    {
      name: "LiquidationType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "LiquidatePerp"
          },
          {
            name: "LiquidateSpot"
          },
          {
            name: "LiquidateBorrowForPerpPnl"
          },
          {
            name: "LiquidatePerpPnlForDeposit"
          },
          {
            name: "PerpBankruptcy"
          },
          {
            name: "SpotBankruptcy"
          }
        ]
      }
    },
    {
      name: "SettlePnlExplanation",
      type: {
        kind: "enum",
        variants: [
          {
            name: "None"
          },
          {
            name: "ExpiredPosition"
          }
        ]
      }
    },
    {
      name: "StakeAction",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Stake"
          },
          {
            name: "UnstakeRequest"
          },
          {
            name: "UnstakeCancelRequest"
          },
          {
            name: "Unstake"
          },
          {
            name: "UnstakeTransfer"
          },
          {
            name: "StakeTransfer"
          }
        ]
      }
    },
    {
      name: "FillMode",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Fill"
          },
          {
            name: "PlaceAndMake"
          },
          {
            name: "PlaceAndTake",
            fields: [
              "bool",
              "u8"
            ]
          },
          {
            name: "Liquidation"
          },
          {
            name: "RFQ"
          }
        ]
      }
    },
    {
      name: "PerpFulfillmentMethod",
      type: {
        kind: "enum",
        variants: [
          {
            name: "AMM",
            fields: [
              {
                option: "u64"
              }
            ]
          },
          {
            name: "Match",
            fields: [
              "publicKey",
              "u16"
            ]
          }
        ]
      }
    },
    {
      name: "SpotFulfillmentMethod",
      type: {
        kind: "enum",
        variants: [
          {
            name: "ExternalMarket"
          },
          {
            name: "Match",
            fields: [
              "publicKey",
              "u16"
            ]
          }
        ]
      }
    },
    {
      name: "MarginCalculationMode",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Standard",
            fields: [
              {
                name: "trackOpenOrdersFraction",
                type: "bool"
              }
            ]
          },
          {
            name: "Liquidation",
            fields: [
              {
                name: "marketToTrackMarginRequirement",
                type: {
                  option: {
                    defined: "MarketIdentifier"
                  }
                }
              }
            ]
          }
        ]
      }
    },
    {
      name: "OracleSource",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Pyth"
          },
          {
            name: "Switchboard"
          },
          {
            name: "QuoteAsset"
          },
          {
            name: "Pyth1K"
          },
          {
            name: "Pyth1M"
          },
          {
            name: "PythStableCoin"
          },
          {
            name: "Prelaunch"
          },
          {
            name: "PythPull"
          },
          {
            name: "Pyth1KPull"
          },
          {
            name: "Pyth1MPull"
          },
          {
            name: "PythStableCoinPull"
          },
          {
            name: "SwitchboardOnDemand"
          },
          {
            name: "PythLazer"
          }
        ]
      }
    },
    {
      name: "PostOnlyParam",
      type: {
        kind: "enum",
        variants: [
          {
            name: "None"
          },
          {
            name: "MustPostOnly"
          },
          {
            name: "TryPostOnly"
          },
          {
            name: "Slide"
          }
        ]
      }
    },
    {
      name: "ModifyOrderPolicy",
      type: {
        kind: "enum",
        variants: [
          {
            name: "MustModify"
          },
          {
            name: "ExcludePreviousFill"
          }
        ]
      }
    },
    {
      name: "PlaceAndTakeOrderSuccessCondition",
      type: {
        kind: "enum",
        variants: [
          {
            name: "PartialFill"
          },
          {
            name: "FullFill"
          }
        ]
      }
    },
    {
      name: "PerpOperation",
      type: {
        kind: "enum",
        variants: [
          {
            name: "UpdateFunding"
          },
          {
            name: "AmmFill"
          },
          {
            name: "Fill"
          },
          {
            name: "SettlePnl"
          },
          {
            name: "SettlePnlWithPosition"
          },
          {
            name: "Liquidation"
          },
          {
            name: "AmmImmediateFill"
          }
        ]
      }
    },
    {
      name: "SpotOperation",
      type: {
        kind: "enum",
        variants: [
          {
            name: "UpdateCumulativeInterest"
          },
          {
            name: "Fill"
          },
          {
            name: "Deposit"
          },
          {
            name: "Withdraw"
          },
          {
            name: "Liquidation"
          }
        ]
      }
    },
    {
      name: "InsuranceFundOperation",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Init"
          },
          {
            name: "Add"
          },
          {
            name: "RequestRemove"
          },
          {
            name: "Remove"
          }
        ]
      }
    },
    {
      name: "MarketStatus",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Initialized"
          },
          {
            name: "Active"
          },
          {
            name: "FundingPaused"
          },
          {
            name: "AmmPaused"
          },
          {
            name: "FillPaused"
          },
          {
            name: "WithdrawPaused"
          },
          {
            name: "ReduceOnly"
          },
          {
            name: "Settlement"
          },
          {
            name: "Delisted"
          }
        ]
      }
    },
    {
      name: "ContractType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Perpetual"
          },
          {
            name: "Future"
          },
          {
            name: "Prediction"
          }
        ]
      }
    },
    {
      name: "ContractTier",
      type: {
        kind: "enum",
        variants: [
          {
            name: "A"
          },
          {
            name: "B"
          },
          {
            name: "C"
          },
          {
            name: "Speculative"
          },
          {
            name: "HighlySpeculative"
          },
          {
            name: "Isolated"
          }
        ]
      }
    },
    {
      name: "AMMLiquiditySplit",
      type: {
        kind: "enum",
        variants: [
          {
            name: "ProtocolOwned"
          },
          {
            name: "LPOwned"
          },
          {
            name: "Shared"
          }
        ]
      }
    },
    {
      name: "AMMAvailability",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Immediate"
          },
          {
            name: "AfterMinDuration"
          },
          {
            name: "Unavailable"
          }
        ]
      }
    },
    {
      name: "SettlePnlMode",
      type: {
        kind: "enum",
        variants: [
          {
            name: "MustSettle"
          },
          {
            name: "TrySettle"
          }
        ]
      }
    },
    {
      name: "SpotBalanceType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Deposit"
          },
          {
            name: "Borrow"
          }
        ]
      }
    },
    {
      name: "SpotFulfillmentConfigStatus",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Enabled"
          },
          {
            name: "Disabled"
          }
        ]
      }
    },
    {
      name: "AssetTier",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Collateral"
          },
          {
            name: "Protected"
          },
          {
            name: "Cross"
          },
          {
            name: "Isolated"
          },
          {
            name: "Unlisted"
          }
        ]
      }
    },
    {
      name: "ExchangeStatus",
      type: {
        kind: "enum",
        variants: [
          {
            name: "DepositPaused"
          },
          {
            name: "WithdrawPaused"
          },
          {
            name: "AmmPaused"
          },
          {
            name: "FillPaused"
          },
          {
            name: "LiqPaused"
          },
          {
            name: "FundingPaused"
          },
          {
            name: "SettlePnlPaused"
          },
          {
            name: "AmmImmediateFillPaused"
          }
        ]
      }
    },
    {
      name: "UserStatus",
      type: {
        kind: "enum",
        variants: [
          {
            name: "BeingLiquidated"
          },
          {
            name: "Bankrupt"
          },
          {
            name: "ReduceOnly"
          },
          {
            name: "AdvancedLp"
          },
          {
            name: "ProtectedMakerOrders"
          }
        ]
      }
    },
    {
      name: "AssetType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Base"
          },
          {
            name: "Quote"
          }
        ]
      }
    },
    {
      name: "OrderStatus",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Init"
          },
          {
            name: "Open"
          },
          {
            name: "Filled"
          },
          {
            name: "Canceled"
          }
        ]
      }
    },
    {
      name: "OrderType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Market"
          },
          {
            name: "Limit"
          },
          {
            name: "TriggerMarket"
          },
          {
            name: "TriggerLimit"
          },
          {
            name: "Oracle"
          }
        ]
      }
    },
    {
      name: "OrderTriggerCondition",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Above"
          },
          {
            name: "Below"
          },
          {
            name: "TriggeredAbove"
          },
          {
            name: "TriggeredBelow"
          }
        ]
      }
    },
    {
      name: "MarketType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Spot"
          },
          {
            name: "Perp"
          }
        ]
      }
    },
    {
      name: "ReferrerStatus",
      type: {
        kind: "enum",
        variants: [
          {
            name: "IsReferrer"
          },
          {
            name: "IsReferred"
          }
        ]
      }
    },
    {
      name: "MarginMode",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Default"
          },
          {
            name: "HighLeverage"
          }
        ]
      }
    },
    {
      name: "SignatureVerificationError",
      type: {
        kind: "enum",
        variants: [
          {
            name: "InvalidEd25519InstructionProgramId"
          },
          {
            name: "InvalidEd25519InstructionDataLength"
          },
          {
            name: "InvalidSignatureIndex"
          },
          {
            name: "InvalidSignatureOffset"
          },
          {
            name: "InvalidPublicKeyOffset"
          },
          {
            name: "InvalidMessageOffset"
          },
          {
            name: "InvalidMessageDataSize"
          },
          {
            name: "InvalidInstructionIndex"
          },
          {
            name: "MessageOffsetOverflow"
          },
          {
            name: "InvalidMessageHex"
          }
        ]
      }
    }
  ],
  events: [
    {
      name: "NewUserRecord",
      fields: [
        {
          name: "ts",
          type: "i64",
          index: false
        },
        {
          name: "userAuthority",
          type: "publicKey",
          index: false
        },
        {
          name: "user",
          type: "publicKey",
          index: false
        },
        {
          name: "subAccountId",
          type: "u16",
          index: false
        },
        {
          name: "name",
          type: {
            array: [
              "u8",
              32
            ]
          },
          index: false
        },
        {
          name: "referrer",
          type: "publicKey",
          index: false
        }
      ]
    },
    {
      name: "DepositRecord",
      fields: [
        {
          name: "ts",
          type: "i64",
          index: false
        },
        {
          name: "userAuthority",
          type: "publicKey",
          index: false
        },
        {
          name: "user",
          type: "publicKey",
          index: false
        },
        {
          name: "direction",
          type: {
            defined: "DepositDirection"
          },
          index: false
        },
        {
          name: "depositRecordId",
          type: "u64",
          index: false
        },
        {
          name: "amount",
          type: "u64",
          index: false
        },
        {
          name: "marketIndex",
          type: "u16",
          index: false
        },
        {
          name: "oraclePrice",
          type: "i64",
          index: false
        },
        {
          name: "marketDepositBalance",
          type: "u128",
          index: false
        },
        {
          name: "marketWithdrawBalance",
          type: "u128",
          index: false
        },
        {
          name: "marketCumulativeDepositInterest",
          type: "u128",
          index: false
        },
        {
          name: "marketCumulativeBorrowInterest",
          type: "u128",
          index: false
        },
        {
          name: "totalDepositsAfter",
          type: "u64",
          index: false
        },
        {
          name: "totalWithdrawsAfter",
          type: "u64",
          index: false
        },
        {
          name: "explanation",
          type: {
            defined: "DepositExplanation"
          },
          index: false
        },
        {
          name: "transferUser",
          type: {
            option: "publicKey"
          },
          index: false
        }
      ]
    },
    {
      name: "SpotInterestRecord",
      fields: [
        {
          name: "ts",
          type: "i64",
          index: false
        },
        {
          name: "marketIndex",
          type: "u16",
          index: false
        },
        {
          name: "depositBalance",
          type: "u128",
          index: false
        },
        {
          name: "cumulativeDepositInterest",
          type: "u128",
          index: false
        },
        {
          name: "borrowBalance",
          type: "u128",
          index: false
        },
        {
          name: "cumulativeBorrowInterest",
          type: "u128",
          index: false
        },
        {
          name: "optimalUtilization",
          type: "u32",
          index: false
        },
        {
          name: "optimalBorrowRate",
          type: "u32",
          index: false
        },
        {
          name: "maxBorrowRate",
          type: "u32",
          index: false
        }
      ]
    },
    {
      name: "FundingPaymentRecord",
      fields: [
        {
          name: "ts",
          type: "i64",
          index: false
        },
        {
          name: "userAuthority",
          type: "publicKey",
          index: false
        },
        {
          name: "user",
          type: "publicKey",
          index: false
        },
        {
          name: "marketIndex",
          type: "u16",
          index: false
        },
        {
          name: "fundingPayment",
          type: "i64",
          index: false
        },
        {
          name: "baseAssetAmount",
          type: "i64",
          index: false
        },
        {
          name: "userLastCumulativeFunding",
          type: "i64",
          index: false
        },
        {
          name: "ammCumulativeFundingLong",
          type: "i128",
          index: false
        },
        {
          name: "ammCumulativeFundingShort",
          type: "i128",
          index: false
        }
      ]
    },
    {
      name: "FundingRateRecord",
      fields: [
        {
          name: "ts",
          type: "i64",
          index: false
        },
        {
          name: "recordId",
          type: "u64",
          index: false
        },
        {
          name: "marketIndex",
          type: "u16",
          index: false
        },
        {
          name: "fundingRate",
          type: "i64",
          index: false
        },
        {
          name: "fundingRateLong",
          type: "i128",
          index: false
        },
        {
          name: "fundingRateShort",
          type: "i128",
          index: false
        },
        {
          name: "cumulativeFundingRateLong",
          type: "i128",
          index: false
        },
        {
          name: "cumulativeFundingRateShort",
          type: "i128",
          index: false
        },
        {
          name: "oraclePriceTwap",
          type: "i64",
          index: false
        },
        {
          name: "markPriceTwap",
          type: "u64",
          index: false
        },
        {
          name: "periodRevenue",
          type: "i64",
          index: false
        },
        {
          name: "baseAssetAmountWithAmm",
          type: "i128",
          index: false
        },
        {
          name: "baseAssetAmountWithUnsettledLp",
          type: "i128",
          index: false
        }
      ]
    },
    {
      name: "CurveRecord",
      fields: [
        {
          name: "ts",
          type: "i64",
          index: false
        },
        {
          name: "recordId",
          type: "u64",
          index: false
        },
        {
          name: "pegMultiplierBefore",
          type: "u128",
          index: false
        },
        {
          name: "baseAssetReserveBefore",
          type: "u128",
          index: false
        },
        {
          name: "quoteAssetReserveBefore",
          type: "u128",
          index: false
        },
        {
          name: "sqrtKBefore",
          type: "u128",
          index: false
        },
        {
          name: "pegMultiplierAfter",
          type: "u128",
          index: false
        },
        {
          name: "baseAssetReserveAfter",
          type: "u128",
          index: false
        },
        {
          name: "quoteAssetReserveAfter",
          type: "u128",
          index: false
        },
        {
          name: "sqrtKAfter",
          type: "u128",
          index: false
        },
        {
          name: "baseAssetAmountLong",
          type: "u128",
          index: false
        },
        {
          name: "baseAssetAmountShort",
          type: "u128",
          index: false
        },
        {
          name: "baseAssetAmountWithAmm",
          type: "i128",
          index: false
        },
        {
          name: "totalFee",
          type: "i128",
          index: false
        },
        {
          name: "totalFeeMinusDistributions",
          type: "i128",
          index: false
        },
        {
          name: "adjustmentCost",
          type: "i128",
          index: false
        },
        {
          name: "oraclePrice",
          type: "i64",
          index: false
        },
        {
          name: "fillRecord",
          type: "u128",
          index: false
        },
        {
          name: "numberOfUsers",
          type: "u32",
          index: false
        },
        {
          name: "marketIndex",
          type: "u16",
          index: false
        }
      ]
    },
    {
      name: "SwiftOrderRecord",
      fields: [
        {
          name: "user",
          type: "publicKey",
          index: false
        },
        {
          name: "hash",
          type: "string",
          index: false
        },
        {
          name: "matchingOrderParams",
          type: {
            defined: "OrderParams"
          },
          index: false
        },
        {
          name: "userOrderId",
          type: "u32",
          index: false
        },
        {
          name: "swiftOrderMaxSlot",
          type: "u64",
          index: false
        },
        {
          name: "swiftOrderUuid",
          type: {
            array: [
              "u8",
              8
            ]
          },
          index: false
        },
        {
          name: "ts",
          type: "i64",
          index: false
        }
      ]
    },
    {
      name: "OrderRecord",
      fields: [
        {
          name: "ts",
          type: "i64",
          index: false
        },
        {
          name: "user",
          type: "publicKey",
          index: false
        },
        {
          name: "order",
          type: {
            defined: "Order"
          },
          index: false
        }
      ]
    },
    {
      name: "OrderActionRecord",
      fields: [
        {
          name: "ts",
          type: "i64",
          index: false
        },
        {
          name: "action",
          type: {
            defined: "OrderAction"
          },
          index: false
        },
        {
          name: "actionExplanation",
          type: {
            defined: "OrderActionExplanation"
          },
          index: false
        },
        {
          name: "marketIndex",
          type: "u16",
          index: false
        },
        {
          name: "marketType",
          type: {
            defined: "MarketType"
          },
          index: false
        },
        {
          name: "filler",
          type: {
            option: "publicKey"
          },
          index: false
        },
        {
          name: "fillerReward",
          type: {
            option: "u64"
          },
          index: false
        },
        {
          name: "fillRecordId",
          type: {
            option: "u64"
          },
          index: false
        },
        {
          name: "baseAssetAmountFilled",
          type: {
            option: "u64"
          },
          index: false
        },
        {
          name: "quoteAssetAmountFilled",
          type: {
            option: "u64"
          },
          index: false
        },
        {
          name: "takerFee",
          type: {
            option: "u64"
          },
          index: false
        },
        {
          name: "makerFee",
          type: {
            option: "i64"
          },
          index: false
        },
        {
          name: "referrerReward",
          type: {
            option: "u32"
          },
          index: false
        },
        {
          name: "quoteAssetAmountSurplus",
          type: {
            option: "i64"
          },
          index: false
        },
        {
          name: "spotFulfillmentMethodFee",
          type: {
            option: "u64"
          },
          index: false
        },
        {
          name: "taker",
          type: {
            option: "publicKey"
          },
          index: false
        },
        {
          name: "takerOrderId",
          type: {
            option: "u32"
          },
          index: false
        },
        {
          name: "takerOrderDirection",
          type: {
            option: {
              defined: "PositionDirection"
            }
          },
          index: false
        },
        {
          name: "takerOrderBaseAssetAmount",
          type: {
            option: "u64"
          },
          index: false
        },
        {
          name: "takerOrderCumulativeBaseAssetAmountFilled",
          type: {
            option: "u64"
          },
          index: false
        },
        {
          name: "takerOrderCumulativeQuoteAssetAmountFilled",
          type: {
            option: "u64"
          },
          index: false
        },
        {
          name: "maker",
          type: {
            option: "publicKey"
          },
          index: false
        },
        {
          name: "makerOrderId",
          type: {
            option: "u32"
          },
          index: false
        },
        {
          name: "makerOrderDirection",
          type: {
            option: {
              defined: "PositionDirection"
            }
          },
          index: false
        },
        {
          name: "makerOrderBaseAssetAmount",
          type: {
            option: "u64"
          },
          index: false
        },
        {
          name: "makerOrderCumulativeBaseAssetAmountFilled",
          type: {
            option: "u64"
          },
          index: false
        },
        {
          name: "makerOrderCumulativeQuoteAssetAmountFilled",
          type: {
            option: "u64"
          },
          index: false
        },
        {
          name: "oraclePrice",
          type: "i64",
          index: false
        }
      ]
    },
    {
      name: "LPRecord",
      fields: [
        {
          name: "ts",
          type: "i64",
          index: false
        },
        {
          name: "user",
          type: "publicKey",
          index: false
        },
        {
          name: "action",
          type: {
            defined: "LPAction"
          },
          index: false
        },
        {
          name: "nShares",
          type: "u64",
          index: false
        },
        {
          name: "marketIndex",
          type: "u16",
          index: false
        },
        {
          name: "deltaBaseAssetAmount",
          type: "i64",
          index: false
        },
        {
          name: "deltaQuoteAssetAmount",
          type: "i64",
          index: false
        },
        {
          name: "pnl",
          type: "i64",
          index: false
        }
      ]
    },
    {
      name: "LiquidationRecord",
      fields: [
        {
          name: "ts",
          type: "i64",
          index: false
        },
        {
          name: "liquidationType",
          type: {
            defined: "LiquidationType"
          },
          index: false
        },
        {
          name: "user",
          type: "publicKey",
          index: false
        },
        {
          name: "liquidator",
          type: "publicKey",
          index: false
        },
        {
          name: "marginRequirement",
          type: "u128",
          index: false
        },
        {
          name: "totalCollateral",
          type: "i128",
          index: false
        },
        {
          name: "marginFreed",
          type: "u64",
          index: false
        },
        {
          name: "liquidationId",
          type: "u16",
          index: false
        },
        {
          name: "bankrupt",
          type: "bool",
          index: false
        },
        {
          name: "canceledOrderIds",
          type: {
            vec: "u32"
          },
          index: false
        },
        {
          name: "liquidatePerp",
          type: {
            defined: "LiquidatePerpRecord"
          },
          index: false
        },
        {
          name: "liquidateSpot",
          type: {
            defined: "LiquidateSpotRecord"
          },
          index: false
        },
        {
          name: "liquidateBorrowForPerpPnl",
          type: {
            defined: "LiquidateBorrowForPerpPnlRecord"
          },
          index: false
        },
        {
          name: "liquidatePerpPnlForDeposit",
          type: {
            defined: "LiquidatePerpPnlForDepositRecord"
          },
          index: false
        },
        {
          name: "perpBankruptcy",
          type: {
            defined: "PerpBankruptcyRecord"
          },
          index: false
        },
        {
          name: "spotBankruptcy",
          type: {
            defined: "SpotBankruptcyRecord"
          },
          index: false
        }
      ]
    },
    {
      name: "SettlePnlRecord",
      fields: [
        {
          name: "ts",
          type: "i64",
          index: false
        },
        {
          name: "user",
          type: "publicKey",
          index: false
        },
        {
          name: "marketIndex",
          type: "u16",
          index: false
        },
        {
          name: "pnl",
          type: "i128",
          index: false
        },
        {
          name: "baseAssetAmount",
          type: "i64",
          index: false
        },
        {
          name: "quoteAssetAmountAfter",
          type: "i64",
          index: false
        },
        {
          name: "quoteEntryAmount",
          type: "i64",
          index: false
        },
        {
          name: "settlePrice",
          type: "i64",
          index: false
        },
        {
          name: "explanation",
          type: {
            defined: "SettlePnlExplanation"
          },
          index: false
        }
      ]
    },
    {
      name: "InsuranceFundRecord",
      fields: [
        {
          name: "ts",
          type: "i64",
          index: false
        },
        {
          name: "spotMarketIndex",
          type: "u16",
          index: false
        },
        {
          name: "perpMarketIndex",
          type: "u16",
          index: false
        },
        {
          name: "userIfFactor",
          type: "u32",
          index: false
        },
        {
          name: "totalIfFactor",
          type: "u32",
          index: false
        },
        {
          name: "vaultAmountBefore",
          type: "u64",
          index: false
        },
        {
          name: "insuranceVaultAmountBefore",
          type: "u64",
          index: false
        },
        {
          name: "totalIfSharesBefore",
          type: "u128",
          index: false
        },
        {
          name: "totalIfSharesAfter",
          type: "u128",
          index: false
        },
        {
          name: "amount",
          type: "i64",
          index: false
        }
      ]
    },
    {
      name: "InsuranceFundStakeRecord",
      fields: [
        {
          name: "ts",
          type: "i64",
          index: false
        },
        {
          name: "userAuthority",
          type: "publicKey",
          index: false
        },
        {
          name: "action",
          type: {
            defined: "StakeAction"
          },
          index: false
        },
        {
          name: "amount",
          type: "u64",
          index: false
        },
        {
          name: "marketIndex",
          type: "u16",
          index: false
        },
        {
          name: "insuranceVaultAmountBefore",
          type: "u64",
          index: false
        },
        {
          name: "ifSharesBefore",
          type: "u128",
          index: false
        },
        {
          name: "userIfSharesBefore",
          type: "u128",
          index: false
        },
        {
          name: "totalIfSharesBefore",
          type: "u128",
          index: false
        },
        {
          name: "ifSharesAfter",
          type: "u128",
          index: false
        },
        {
          name: "userIfSharesAfter",
          type: "u128",
          index: false
        },
        {
          name: "totalIfSharesAfter",
          type: "u128",
          index: false
        }
      ]
    },
    {
      name: "SwapRecord",
      fields: [
        {
          name: "ts",
          type: "i64",
          index: false
        },
        {
          name: "user",
          type: "publicKey",
          index: false
        },
        {
          name: "amountOut",
          type: "u64",
          index: false
        },
        {
          name: "amountIn",
          type: "u64",
          index: false
        },
        {
          name: "outMarketIndex",
          type: "u16",
          index: false
        },
        {
          name: "inMarketIndex",
          type: "u16",
          index: false
        },
        {
          name: "outOraclePrice",
          type: "i64",
          index: false
        },
        {
          name: "inOraclePrice",
          type: "i64",
          index: false
        },
        {
          name: "fee",
          type: "u64",
          index: false
        }
      ]
    },
    {
      name: "SpotMarketVaultDepositRecord",
      fields: [
        {
          name: "ts",
          type: "i64",
          index: false
        },
        {
          name: "marketIndex",
          type: "u16",
          index: false
        },
        {
          name: "depositBalance",
          type: "u128",
          index: false
        },
        {
          name: "cumulativeDepositInterestBefore",
          type: "u128",
          index: false
        },
        {
          name: "cumulativeDepositInterestAfter",
          type: "u128",
          index: false
        },
        {
          name: "depositTokenAmountBefore",
          type: "u64",
          index: false
        },
        {
          name: "amount",
          type: "u64",
          index: false
        }
      ]
    },
    {
      name: "DeleteUserRecord",
      fields: [
        {
          name: "ts",
          type: "i64",
          index: false
        },
        {
          name: "userAuthority",
          type: "publicKey",
          index: false
        },
        {
          name: "user",
          type: "publicKey",
          index: false
        },
        {
          name: "subAccountId",
          type: "u16",
          index: false
        },
        {
          name: "keeper",
          type: {
            option: "publicKey"
          },
          index: false
        }
      ]
    }
  ],
  errors: [
    {
      code: 6e3,
      name: "InvalidSpotMarketAuthority",
      msg: "Invalid Spot Market Authority"
    },
    {
      code: 6001,
      name: "InvalidInsuranceFundAuthority",
      msg: "Clearing house not insurance fund authority"
    },
    {
      code: 6002,
      name: "InsufficientDeposit",
      msg: "Insufficient deposit"
    },
    {
      code: 6003,
      name: "InsufficientCollateral",
      msg: "Insufficient collateral"
    },
    {
      code: 6004,
      name: "SufficientCollateral",
      msg: "Sufficient collateral"
    },
    {
      code: 6005,
      name: "MaxNumberOfPositions",
      msg: "Max number of positions taken"
    },
    {
      code: 6006,
      name: "AdminControlsPricesDisabled",
      msg: "Admin Controls Prices Disabled"
    },
    {
      code: 6007,
      name: "MarketDelisted",
      msg: "Market Delisted"
    },
    {
      code: 6008,
      name: "MarketIndexAlreadyInitialized",
      msg: "Market Index Already Initialized"
    },
    {
      code: 6009,
      name: "UserAccountAndUserPositionsAccountMismatch",
      msg: "User Account And User Positions Account Mismatch"
    },
    {
      code: 6010,
      name: "UserHasNoPositionInMarket",
      msg: "User Has No Position In Market"
    },
    {
      code: 6011,
      name: "InvalidInitialPeg",
      msg: "Invalid Initial Peg"
    },
    {
      code: 6012,
      name: "InvalidRepegRedundant",
      msg: "AMM repeg already configured with amt given"
    },
    {
      code: 6013,
      name: "InvalidRepegDirection",
      msg: "AMM repeg incorrect repeg direction"
    },
    {
      code: 6014,
      name: "InvalidRepegProfitability",
      msg: "AMM repeg out of bounds pnl"
    },
    {
      code: 6015,
      name: "SlippageOutsideLimit",
      msg: "Slippage Outside Limit Price"
    },
    {
      code: 6016,
      name: "OrderSizeTooSmall",
      msg: "Order Size Too Small"
    },
    {
      code: 6017,
      name: "InvalidUpdateK",
      msg: "Price change too large when updating K"
    },
    {
      code: 6018,
      name: "AdminWithdrawTooLarge",
      msg: "Admin tried to withdraw amount larger than fees collected"
    },
    {
      code: 6019,
      name: "MathError",
      msg: "Math Error"
    },
    {
      code: 6020,
      name: "BnConversionError",
      msg: "Conversion to u128/u64 failed with an overflow or underflow"
    },
    {
      code: 6021,
      name: "ClockUnavailable",
      msg: "Clock unavailable"
    },
    {
      code: 6022,
      name: "UnableToLoadOracle",
      msg: "Unable To Load Oracles"
    },
    {
      code: 6023,
      name: "PriceBandsBreached",
      msg: "Price Bands Breached"
    },
    {
      code: 6024,
      name: "ExchangePaused",
      msg: "Exchange is paused"
    },
    {
      code: 6025,
      name: "InvalidWhitelistToken",
      msg: "Invalid whitelist token"
    },
    {
      code: 6026,
      name: "WhitelistTokenNotFound",
      msg: "Whitelist token not found"
    },
    {
      code: 6027,
      name: "InvalidDiscountToken",
      msg: "Invalid discount token"
    },
    {
      code: 6028,
      name: "DiscountTokenNotFound",
      msg: "Discount token not found"
    },
    {
      code: 6029,
      name: "ReferrerNotFound",
      msg: "Referrer not found"
    },
    {
      code: 6030,
      name: "ReferrerStatsNotFound",
      msg: "ReferrerNotFound"
    },
    {
      code: 6031,
      name: "ReferrerMustBeWritable",
      msg: "ReferrerMustBeWritable"
    },
    {
      code: 6032,
      name: "ReferrerStatsMustBeWritable",
      msg: "ReferrerMustBeWritable"
    },
    {
      code: 6033,
      name: "ReferrerAndReferrerStatsAuthorityUnequal",
      msg: "ReferrerAndReferrerStatsAuthorityUnequal"
    },
    {
      code: 6034,
      name: "InvalidReferrer",
      msg: "InvalidReferrer"
    },
    {
      code: 6035,
      name: "InvalidOracle",
      msg: "InvalidOracle"
    },
    {
      code: 6036,
      name: "OracleNotFound",
      msg: "OracleNotFound"
    },
    {
      code: 6037,
      name: "LiquidationsBlockedByOracle",
      msg: "Liquidations Blocked By Oracle"
    },
    {
      code: 6038,
      name: "MaxDeposit",
      msg: "Can not deposit more than max deposit"
    },
    {
      code: 6039,
      name: "CantDeleteUserWithCollateral",
      msg: "Can not delete user that still has collateral"
    },
    {
      code: 6040,
      name: "InvalidFundingProfitability",
      msg: "AMM funding out of bounds pnl"
    },
    {
      code: 6041,
      name: "CastingFailure",
      msg: "Casting Failure"
    },
    {
      code: 6042,
      name: "InvalidOrder",
      msg: "InvalidOrder"
    },
    {
      code: 6043,
      name: "InvalidOrderMaxTs",
      msg: "InvalidOrderMaxTs"
    },
    {
      code: 6044,
      name: "InvalidOrderMarketType",
      msg: "InvalidOrderMarketType"
    },
    {
      code: 6045,
      name: "InvalidOrderForInitialMarginReq",
      msg: "InvalidOrderForInitialMarginReq"
    },
    {
      code: 6046,
      name: "InvalidOrderNotRiskReducing",
      msg: "InvalidOrderNotRiskReducing"
    },
    {
      code: 6047,
      name: "InvalidOrderSizeTooSmall",
      msg: "InvalidOrderSizeTooSmall"
    },
    {
      code: 6048,
      name: "InvalidOrderNotStepSizeMultiple",
      msg: "InvalidOrderNotStepSizeMultiple"
    },
    {
      code: 6049,
      name: "InvalidOrderBaseQuoteAsset",
      msg: "InvalidOrderBaseQuoteAsset"
    },
    {
      code: 6050,
      name: "InvalidOrderIOC",
      msg: "InvalidOrderIOC"
    },
    {
      code: 6051,
      name: "InvalidOrderPostOnly",
      msg: "InvalidOrderPostOnly"
    },
    {
      code: 6052,
      name: "InvalidOrderIOCPostOnly",
      msg: "InvalidOrderIOCPostOnly"
    },
    {
      code: 6053,
      name: "InvalidOrderTrigger",
      msg: "InvalidOrderTrigger"
    },
    {
      code: 6054,
      name: "InvalidOrderAuction",
      msg: "InvalidOrderAuction"
    },
    {
      code: 6055,
      name: "InvalidOrderOracleOffset",
      msg: "InvalidOrderOracleOffset"
    },
    {
      code: 6056,
      name: "InvalidOrderMinOrderSize",
      msg: "InvalidOrderMinOrderSize"
    },
    {
      code: 6057,
      name: "PlacePostOnlyLimitFailure",
      msg: "Failed to Place Post-Only Limit Order"
    },
    {
      code: 6058,
      name: "UserHasNoOrder",
      msg: "User has no order"
    },
    {
      code: 6059,
      name: "OrderAmountTooSmall",
      msg: "Order Amount Too Small"
    },
    {
      code: 6060,
      name: "MaxNumberOfOrders",
      msg: "Max number of orders taken"
    },
    {
      code: 6061,
      name: "OrderDoesNotExist",
      msg: "Order does not exist"
    },
    {
      code: 6062,
      name: "OrderNotOpen",
      msg: "Order not open"
    },
    {
      code: 6063,
      name: "FillOrderDidNotUpdateState",
      msg: "FillOrderDidNotUpdateState"
    },
    {
      code: 6064,
      name: "ReduceOnlyOrderIncreasedRisk",
      msg: "Reduce only order increased risk"
    },
    {
      code: 6065,
      name: "UnableToLoadAccountLoader",
      msg: "Unable to load AccountLoader"
    },
    {
      code: 6066,
      name: "TradeSizeTooLarge",
      msg: "Trade Size Too Large"
    },
    {
      code: 6067,
      name: "UserCantReferThemselves",
      msg: "User cant refer themselves"
    },
    {
      code: 6068,
      name: "DidNotReceiveExpectedReferrer",
      msg: "Did not receive expected referrer"
    },
    {
      code: 6069,
      name: "CouldNotDeserializeReferrer",
      msg: "Could not deserialize referrer"
    },
    {
      code: 6070,
      name: "CouldNotDeserializeReferrerStats",
      msg: "Could not deserialize referrer stats"
    },
    {
      code: 6071,
      name: "UserOrderIdAlreadyInUse",
      msg: "User Order Id Already In Use"
    },
    {
      code: 6072,
      name: "NoPositionsLiquidatable",
      msg: "No positions liquidatable"
    },
    {
      code: 6073,
      name: "InvalidMarginRatio",
      msg: "Invalid Margin Ratio"
    },
    {
      code: 6074,
      name: "CantCancelPostOnlyOrder",
      msg: "Cant Cancel Post Only Order"
    },
    {
      code: 6075,
      name: "InvalidOracleOffset",
      msg: "InvalidOracleOffset"
    },
    {
      code: 6076,
      name: "CantExpireOrders",
      msg: "CantExpireOrders"
    },
    {
      code: 6077,
      name: "CouldNotLoadMarketData",
      msg: "CouldNotLoadMarketData"
    },
    {
      code: 6078,
      name: "PerpMarketNotFound",
      msg: "PerpMarketNotFound"
    },
    {
      code: 6079,
      name: "InvalidMarketAccount",
      msg: "InvalidMarketAccount"
    },
    {
      code: 6080,
      name: "UnableToLoadPerpMarketAccount",
      msg: "UnableToLoadMarketAccount"
    },
    {
      code: 6081,
      name: "MarketWrongMutability",
      msg: "MarketWrongMutability"
    },
    {
      code: 6082,
      name: "UnableToCastUnixTime",
      msg: "UnableToCastUnixTime"
    },
    {
      code: 6083,
      name: "CouldNotFindSpotPosition",
      msg: "CouldNotFindSpotPosition"
    },
    {
      code: 6084,
      name: "NoSpotPositionAvailable",
      msg: "NoSpotPositionAvailable"
    },
    {
      code: 6085,
      name: "InvalidSpotMarketInitialization",
      msg: "InvalidSpotMarketInitialization"
    },
    {
      code: 6086,
      name: "CouldNotLoadSpotMarketData",
      msg: "CouldNotLoadSpotMarketData"
    },
    {
      code: 6087,
      name: "SpotMarketNotFound",
      msg: "SpotMarketNotFound"
    },
    {
      code: 6088,
      name: "InvalidSpotMarketAccount",
      msg: "InvalidSpotMarketAccount"
    },
    {
      code: 6089,
      name: "UnableToLoadSpotMarketAccount",
      msg: "UnableToLoadSpotMarketAccount"
    },
    {
      code: 6090,
      name: "SpotMarketWrongMutability",
      msg: "SpotMarketWrongMutability"
    },
    {
      code: 6091,
      name: "SpotMarketInterestNotUpToDate",
      msg: "SpotInterestNotUpToDate"
    },
    {
      code: 6092,
      name: "SpotMarketInsufficientDeposits",
      msg: "SpotMarketInsufficientDeposits"
    },
    {
      code: 6093,
      name: "UserMustSettleTheirOwnPositiveUnsettledPNL",
      msg: "UserMustSettleTheirOwnPositiveUnsettledPNL"
    },
    {
      code: 6094,
      name: "CantUpdatePoolBalanceType",
      msg: "CantUpdatePoolBalanceType"
    },
    {
      code: 6095,
      name: "InsufficientCollateralForSettlingPNL",
      msg: "InsufficientCollateralForSettlingPNL"
    },
    {
      code: 6096,
      name: "AMMNotUpdatedInSameSlot",
      msg: "AMMNotUpdatedInSameSlot"
    },
    {
      code: 6097,
      name: "AuctionNotComplete",
      msg: "AuctionNotComplete"
    },
    {
      code: 6098,
      name: "MakerNotFound",
      msg: "MakerNotFound"
    },
    {
      code: 6099,
      name: "MakerStatsNotFound",
      msg: "MakerNotFound"
    },
    {
      code: 6100,
      name: "MakerMustBeWritable",
      msg: "MakerMustBeWritable"
    },
    {
      code: 6101,
      name: "MakerStatsMustBeWritable",
      msg: "MakerMustBeWritable"
    },
    {
      code: 6102,
      name: "MakerOrderNotFound",
      msg: "MakerOrderNotFound"
    },
    {
      code: 6103,
      name: "CouldNotDeserializeMaker",
      msg: "CouldNotDeserializeMaker"
    },
    {
      code: 6104,
      name: "CouldNotDeserializeMakerStats",
      msg: "CouldNotDeserializeMaker"
    },
    {
      code: 6105,
      name: "AuctionPriceDoesNotSatisfyMaker",
      msg: "AuctionPriceDoesNotSatisfyMaker"
    },
    {
      code: 6106,
      name: "MakerCantFulfillOwnOrder",
      msg: "MakerCantFulfillOwnOrder"
    },
    {
      code: 6107,
      name: "MakerOrderMustBePostOnly",
      msg: "MakerOrderMustBePostOnly"
    },
    {
      code: 6108,
      name: "CantMatchTwoPostOnlys",
      msg: "CantMatchTwoPostOnlys"
    },
    {
      code: 6109,
      name: "OrderBreachesOraclePriceLimits",
      msg: "OrderBreachesOraclePriceLimits"
    },
    {
      code: 6110,
      name: "OrderMustBeTriggeredFirst",
      msg: "OrderMustBeTriggeredFirst"
    },
    {
      code: 6111,
      name: "OrderNotTriggerable",
      msg: "OrderNotTriggerable"
    },
    {
      code: 6112,
      name: "OrderDidNotSatisfyTriggerCondition",
      msg: "OrderDidNotSatisfyTriggerCondition"
    },
    {
      code: 6113,
      name: "PositionAlreadyBeingLiquidated",
      msg: "PositionAlreadyBeingLiquidated"
    },
    {
      code: 6114,
      name: "PositionDoesntHaveOpenPositionOrOrders",
      msg: "PositionDoesntHaveOpenPositionOrOrders"
    },
    {
      code: 6115,
      name: "AllOrdersAreAlreadyLiquidations",
      msg: "AllOrdersAreAlreadyLiquidations"
    },
    {
      code: 6116,
      name: "CantCancelLiquidationOrder",
      msg: "CantCancelLiquidationOrder"
    },
    {
      code: 6117,
      name: "UserIsBeingLiquidated",
      msg: "UserIsBeingLiquidated"
    },
    {
      code: 6118,
      name: "LiquidationsOngoing",
      msg: "LiquidationsOngoing"
    },
    {
      code: 6119,
      name: "WrongSpotBalanceType",
      msg: "WrongSpotBalanceType"
    },
    {
      code: 6120,
      name: "UserCantLiquidateThemself",
      msg: "UserCantLiquidateThemself"
    },
    {
      code: 6121,
      name: "InvalidPerpPositionToLiquidate",
      msg: "InvalidPerpPositionToLiquidate"
    },
    {
      code: 6122,
      name: "InvalidBaseAssetAmountForLiquidatePerp",
      msg: "InvalidBaseAssetAmountForLiquidatePerp"
    },
    {
      code: 6123,
      name: "InvalidPositionLastFundingRate",
      msg: "InvalidPositionLastFundingRate"
    },
    {
      code: 6124,
      name: "InvalidPositionDelta",
      msg: "InvalidPositionDelta"
    },
    {
      code: 6125,
      name: "UserBankrupt",
      msg: "UserBankrupt"
    },
    {
      code: 6126,
      name: "UserNotBankrupt",
      msg: "UserNotBankrupt"
    },
    {
      code: 6127,
      name: "UserHasInvalidBorrow",
      msg: "UserHasInvalidBorrow"
    },
    {
      code: 6128,
      name: "DailyWithdrawLimit",
      msg: "DailyWithdrawLimit"
    },
    {
      code: 6129,
      name: "DefaultError",
      msg: "DefaultError"
    },
    {
      code: 6130,
      name: "InsufficientLPTokens",
      msg: "Insufficient LP tokens"
    },
    {
      code: 6131,
      name: "CantLPWithPerpPosition",
      msg: "Cant LP with a market position"
    },
    {
      code: 6132,
      name: "UnableToBurnLPTokens",
      msg: "Unable to burn LP tokens"
    },
    {
      code: 6133,
      name: "TryingToRemoveLiquidityTooFast",
      msg: "Trying to remove liqudity too fast after adding it"
    },
    {
      code: 6134,
      name: "InvalidSpotMarketVault",
      msg: "Invalid Spot Market Vault"
    },
    {
      code: 6135,
      name: "InvalidSpotMarketState",
      msg: "Invalid Spot Market State"
    },
    {
      code: 6136,
      name: "InvalidSerumProgram",
      msg: "InvalidSerumProgram"
    },
    {
      code: 6137,
      name: "InvalidSerumMarket",
      msg: "InvalidSerumMarket"
    },
    {
      code: 6138,
      name: "InvalidSerumBids",
      msg: "InvalidSerumBids"
    },
    {
      code: 6139,
      name: "InvalidSerumAsks",
      msg: "InvalidSerumAsks"
    },
    {
      code: 6140,
      name: "InvalidSerumOpenOrders",
      msg: "InvalidSerumOpenOrders"
    },
    {
      code: 6141,
      name: "FailedSerumCPI",
      msg: "FailedSerumCPI"
    },
    {
      code: 6142,
      name: "FailedToFillOnExternalMarket",
      msg: "FailedToFillOnExternalMarket"
    },
    {
      code: 6143,
      name: "InvalidFulfillmentConfig",
      msg: "InvalidFulfillmentConfig"
    },
    {
      code: 6144,
      name: "InvalidFeeStructure",
      msg: "InvalidFeeStructure"
    },
    {
      code: 6145,
      name: "InsufficientIFShares",
      msg: "Insufficient IF shares"
    },
    {
      code: 6146,
      name: "MarketActionPaused",
      msg: "the Market has paused this action"
    },
    {
      code: 6147,
      name: "MarketPlaceOrderPaused",
      msg: "the Market status doesnt allow placing orders"
    },
    {
      code: 6148,
      name: "MarketFillOrderPaused",
      msg: "the Market status doesnt allow filling orders"
    },
    {
      code: 6149,
      name: "MarketWithdrawPaused",
      msg: "the Market status doesnt allow withdraws"
    },
    {
      code: 6150,
      name: "ProtectedAssetTierViolation",
      msg: "Action violates the Protected Asset Tier rules"
    },
    {
      code: 6151,
      name: "IsolatedAssetTierViolation",
      msg: "Action violates the Isolated Asset Tier rules"
    },
    {
      code: 6152,
      name: "UserCantBeDeleted",
      msg: "User Cant Be Deleted"
    },
    {
      code: 6153,
      name: "ReduceOnlyWithdrawIncreasedRisk",
      msg: "Reduce Only Withdraw Increased Risk"
    },
    {
      code: 6154,
      name: "MaxOpenInterest",
      msg: "Max Open Interest"
    },
    {
      code: 6155,
      name: "CantResolvePerpBankruptcy",
      msg: "Cant Resolve Perp Bankruptcy"
    },
    {
      code: 6156,
      name: "LiquidationDoesntSatisfyLimitPrice",
      msg: "Liquidation Doesnt Satisfy Limit Price"
    },
    {
      code: 6157,
      name: "MarginTradingDisabled",
      msg: "Margin Trading Disabled"
    },
    {
      code: 6158,
      name: "InvalidMarketStatusToSettlePnl",
      msg: "Invalid Market Status to Settle Perp Pnl"
    },
    {
      code: 6159,
      name: "PerpMarketNotInSettlement",
      msg: "PerpMarketNotInSettlement"
    },
    {
      code: 6160,
      name: "PerpMarketNotInReduceOnly",
      msg: "PerpMarketNotInReduceOnly"
    },
    {
      code: 6161,
      name: "PerpMarketSettlementBufferNotReached",
      msg: "PerpMarketSettlementBufferNotReached"
    },
    {
      code: 6162,
      name: "PerpMarketSettlementUserHasOpenOrders",
      msg: "PerpMarketSettlementUserHasOpenOrders"
    },
    {
      code: 6163,
      name: "PerpMarketSettlementUserHasActiveLP",
      msg: "PerpMarketSettlementUserHasActiveLP"
    },
    {
      code: 6164,
      name: "UnableToSettleExpiredUserPosition",
      msg: "UnableToSettleExpiredUserPosition"
    },
    {
      code: 6165,
      name: "UnequalMarketIndexForSpotTransfer",
      msg: "UnequalMarketIndexForSpotTransfer"
    },
    {
      code: 6166,
      name: "InvalidPerpPositionDetected",
      msg: "InvalidPerpPositionDetected"
    },
    {
      code: 6167,
      name: "InvalidSpotPositionDetected",
      msg: "InvalidSpotPositionDetected"
    },
    {
      code: 6168,
      name: "InvalidAmmDetected",
      msg: "InvalidAmmDetected"
    },
    {
      code: 6169,
      name: "InvalidAmmForFillDetected",
      msg: "InvalidAmmForFillDetected"
    },
    {
      code: 6170,
      name: "InvalidAmmLimitPriceOverride",
      msg: "InvalidAmmLimitPriceOverride"
    },
    {
      code: 6171,
      name: "InvalidOrderFillPrice",
      msg: "InvalidOrderFillPrice"
    },
    {
      code: 6172,
      name: "SpotMarketBalanceInvariantViolated",
      msg: "SpotMarketBalanceInvariantViolated"
    },
    {
      code: 6173,
      name: "SpotMarketVaultInvariantViolated",
      msg: "SpotMarketVaultInvariantViolated"
    },
    {
      code: 6174,
      name: "InvalidPDA",
      msg: "InvalidPDA"
    },
    {
      code: 6175,
      name: "InvalidPDASigner",
      msg: "InvalidPDASigner"
    },
    {
      code: 6176,
      name: "RevenueSettingsCannotSettleToIF",
      msg: "RevenueSettingsCannotSettleToIF"
    },
    {
      code: 6177,
      name: "NoRevenueToSettleToIF",
      msg: "NoRevenueToSettleToIF"
    },
    {
      code: 6178,
      name: "NoAmmPerpPnlDeficit",
      msg: "NoAmmPerpPnlDeficit"
    },
    {
      code: 6179,
      name: "SufficientPerpPnlPool",
      msg: "SufficientPerpPnlPool"
    },
    {
      code: 6180,
      name: "InsufficientPerpPnlPool",
      msg: "InsufficientPerpPnlPool"
    },
    {
      code: 6181,
      name: "PerpPnlDeficitBelowThreshold",
      msg: "PerpPnlDeficitBelowThreshold"
    },
    {
      code: 6182,
      name: "MaxRevenueWithdrawPerPeriodReached",
      msg: "MaxRevenueWithdrawPerPeriodReached"
    },
    {
      code: 6183,
      name: "MaxIFWithdrawReached",
      msg: "InvalidSpotPositionDetected"
    },
    {
      code: 6184,
      name: "NoIFWithdrawAvailable",
      msg: "NoIFWithdrawAvailable"
    },
    {
      code: 6185,
      name: "InvalidIFUnstake",
      msg: "InvalidIFUnstake"
    },
    {
      code: 6186,
      name: "InvalidIFUnstakeSize",
      msg: "InvalidIFUnstakeSize"
    },
    {
      code: 6187,
      name: "InvalidIFUnstakeCancel",
      msg: "InvalidIFUnstakeCancel"
    },
    {
      code: 6188,
      name: "InvalidIFForNewStakes",
      msg: "InvalidIFForNewStakes"
    },
    {
      code: 6189,
      name: "InvalidIFRebase",
      msg: "InvalidIFRebase"
    },
    {
      code: 6190,
      name: "InvalidInsuranceUnstakeSize",
      msg: "InvalidInsuranceUnstakeSize"
    },
    {
      code: 6191,
      name: "InvalidOrderLimitPrice",
      msg: "InvalidOrderLimitPrice"
    },
    {
      code: 6192,
      name: "InvalidIFDetected",
      msg: "InvalidIFDetected"
    },
    {
      code: 6193,
      name: "InvalidAmmMaxSpreadDetected",
      msg: "InvalidAmmMaxSpreadDetected"
    },
    {
      code: 6194,
      name: "InvalidConcentrationCoef",
      msg: "InvalidConcentrationCoef"
    },
    {
      code: 6195,
      name: "InvalidSrmVault",
      msg: "InvalidSrmVault"
    },
    {
      code: 6196,
      name: "InvalidVaultOwner",
      msg: "InvalidVaultOwner"
    },
    {
      code: 6197,
      name: "InvalidMarketStatusForFills",
      msg: "InvalidMarketStatusForFills"
    },
    {
      code: 6198,
      name: "IFWithdrawRequestInProgress",
      msg: "IFWithdrawRequestInProgress"
    },
    {
      code: 6199,
      name: "NoIFWithdrawRequestInProgress",
      msg: "NoIFWithdrawRequestInProgress"
    },
    {
      code: 6200,
      name: "IFWithdrawRequestTooSmall",
      msg: "IFWithdrawRequestTooSmall"
    },
    {
      code: 6201,
      name: "IncorrectSpotMarketAccountPassed",
      msg: "IncorrectSpotMarketAccountPassed"
    },
    {
      code: 6202,
      name: "BlockchainClockInconsistency",
      msg: "BlockchainClockInconsistency"
    },
    {
      code: 6203,
      name: "InvalidIFSharesDetected",
      msg: "InvalidIFSharesDetected"
    },
    {
      code: 6204,
      name: "NewLPSizeTooSmall",
      msg: "NewLPSizeTooSmall"
    },
    {
      code: 6205,
      name: "MarketStatusInvalidForNewLP",
      msg: "MarketStatusInvalidForNewLP"
    },
    {
      code: 6206,
      name: "InvalidMarkTwapUpdateDetected",
      msg: "InvalidMarkTwapUpdateDetected"
    },
    {
      code: 6207,
      name: "MarketSettlementAttemptOnActiveMarket",
      msg: "MarketSettlementAttemptOnActiveMarket"
    },
    {
      code: 6208,
      name: "MarketSettlementRequiresSettledLP",
      msg: "MarketSettlementRequiresSettledLP"
    },
    {
      code: 6209,
      name: "MarketSettlementAttemptTooEarly",
      msg: "MarketSettlementAttemptTooEarly"
    },
    {
      code: 6210,
      name: "MarketSettlementTargetPriceInvalid",
      msg: "MarketSettlementTargetPriceInvalid"
    },
    {
      code: 6211,
      name: "UnsupportedSpotMarket",
      msg: "UnsupportedSpotMarket"
    },
    {
      code: 6212,
      name: "SpotOrdersDisabled",
      msg: "SpotOrdersDisabled"
    },
    {
      code: 6213,
      name: "MarketBeingInitialized",
      msg: "Market Being Initialized"
    },
    {
      code: 6214,
      name: "InvalidUserSubAccountId",
      msg: "Invalid Sub Account Id"
    },
    {
      code: 6215,
      name: "InvalidTriggerOrderCondition",
      msg: "Invalid Trigger Order Condition"
    },
    {
      code: 6216,
      name: "InvalidSpotPosition",
      msg: "Invalid Spot Position"
    },
    {
      code: 6217,
      name: "CantTransferBetweenSameUserAccount",
      msg: "Cant transfer between same user account"
    },
    {
      code: 6218,
      name: "InvalidPerpPosition",
      msg: "Invalid Perp Position"
    },
    {
      code: 6219,
      name: "UnableToGetLimitPrice",
      msg: "Unable To Get Limit Price"
    },
    {
      code: 6220,
      name: "InvalidLiquidation",
      msg: "Invalid Liquidation"
    },
    {
      code: 6221,
      name: "SpotFulfillmentConfigDisabled",
      msg: "Spot Fulfillment Config Disabled"
    },
    {
      code: 6222,
      name: "InvalidMaker",
      msg: "Invalid Maker"
    },
    {
      code: 6223,
      name: "FailedUnwrap",
      msg: "Failed Unwrap"
    },
    {
      code: 6224,
      name: "MaxNumberOfUsers",
      msg: "Max Number Of Users"
    },
    {
      code: 6225,
      name: "InvalidOracleForSettlePnl",
      msg: "InvalidOracleForSettlePnl"
    },
    {
      code: 6226,
      name: "MarginOrdersOpen",
      msg: "MarginOrdersOpen"
    },
    {
      code: 6227,
      name: "TierViolationLiquidatingPerpPnl",
      msg: "TierViolationLiquidatingPerpPnl"
    },
    {
      code: 6228,
      name: "CouldNotLoadUserData",
      msg: "CouldNotLoadUserData"
    },
    {
      code: 6229,
      name: "UserWrongMutability",
      msg: "UserWrongMutability"
    },
    {
      code: 6230,
      name: "InvalidUserAccount",
      msg: "InvalidUserAccount"
    },
    {
      code: 6231,
      name: "CouldNotLoadUserStatsData",
      msg: "CouldNotLoadUserData"
    },
    {
      code: 6232,
      name: "UserStatsWrongMutability",
      msg: "UserWrongMutability"
    },
    {
      code: 6233,
      name: "InvalidUserStatsAccount",
      msg: "InvalidUserAccount"
    },
    {
      code: 6234,
      name: "UserNotFound",
      msg: "UserNotFound"
    },
    {
      code: 6235,
      name: "UnableToLoadUserAccount",
      msg: "UnableToLoadUserAccount"
    },
    {
      code: 6236,
      name: "UserStatsNotFound",
      msg: "UserStatsNotFound"
    },
    {
      code: 6237,
      name: "UnableToLoadUserStatsAccount",
      msg: "UnableToLoadUserStatsAccount"
    },
    {
      code: 6238,
      name: "UserNotInactive",
      msg: "User Not Inactive"
    },
    {
      code: 6239,
      name: "RevertFill",
      msg: "RevertFill"
    },
    {
      code: 6240,
      name: "InvalidMarketAccountforDeletion",
      msg: "Invalid MarketAccount for Deletion"
    },
    {
      code: 6241,
      name: "InvalidSpotFulfillmentParams",
      msg: "Invalid Spot Fulfillment Params"
    },
    {
      code: 6242,
      name: "FailedToGetMint",
      msg: "Failed to Get Mint"
    },
    {
      code: 6243,
      name: "FailedPhoenixCPI",
      msg: "FailedPhoenixCPI"
    },
    {
      code: 6244,
      name: "FailedToDeserializePhoenixMarket",
      msg: "FailedToDeserializePhoenixMarket"
    },
    {
      code: 6245,
      name: "InvalidPricePrecision",
      msg: "InvalidPricePrecision"
    },
    {
      code: 6246,
      name: "InvalidPhoenixProgram",
      msg: "InvalidPhoenixProgram"
    },
    {
      code: 6247,
      name: "InvalidPhoenixMarket",
      msg: "InvalidPhoenixMarket"
    },
    {
      code: 6248,
      name: "InvalidSwap",
      msg: "InvalidSwap"
    },
    {
      code: 6249,
      name: "SwapLimitPriceBreached",
      msg: "SwapLimitPriceBreached"
    },
    {
      code: 6250,
      name: "SpotMarketReduceOnly",
      msg: "SpotMarketReduceOnly"
    },
    {
      code: 6251,
      name: "FundingWasNotUpdated",
      msg: "FundingWasNotUpdated"
    },
    {
      code: 6252,
      name: "ImpossibleFill",
      msg: "ImpossibleFill"
    },
    {
      code: 6253,
      name: "CantUpdatePerpBidAskTwap",
      msg: "CantUpdatePerpBidAskTwap"
    },
    {
      code: 6254,
      name: "UserReduceOnly",
      msg: "UserReduceOnly"
    },
    {
      code: 6255,
      name: "InvalidMarginCalculation",
      msg: "InvalidMarginCalculation"
    },
    {
      code: 6256,
      name: "CantPayUserInitFee",
      msg: "CantPayUserInitFee"
    },
    {
      code: 6257,
      name: "CantReclaimRent",
      msg: "CantReclaimRent"
    },
    {
      code: 6258,
      name: "InsuranceFundOperationPaused",
      msg: "InsuranceFundOperationPaused"
    },
    {
      code: 6259,
      name: "NoUnsettledPnl",
      msg: "NoUnsettledPnl"
    },
    {
      code: 6260,
      name: "PnlPoolCantSettleUser",
      msg: "PnlPoolCantSettleUser"
    },
    {
      code: 6261,
      name: "OracleNonPositive",
      msg: "OracleInvalid"
    },
    {
      code: 6262,
      name: "OracleTooVolatile",
      msg: "OracleTooVolatile"
    },
    {
      code: 6263,
      name: "OracleTooUncertain",
      msg: "OracleTooUncertain"
    },
    {
      code: 6264,
      name: "OracleStaleForMargin",
      msg: "OracleStaleForMargin"
    },
    {
      code: 6265,
      name: "OracleInsufficientDataPoints",
      msg: "OracleInsufficientDataPoints"
    },
    {
      code: 6266,
      name: "OracleStaleForAMM",
      msg: "OracleStaleForAMM"
    },
    {
      code: 6267,
      name: "UnableToParsePullOracleMessage",
      msg: "Unable to parse pull oracle message"
    },
    {
      code: 6268,
      name: "MaxBorrows",
      msg: "Can not borow more than max borrows"
    },
    {
      code: 6269,
      name: "OracleUpdatesNotMonotonic",
      msg: "Updates must be monotonically increasing"
    },
    {
      code: 6270,
      name: "OraclePriceFeedMessageMismatch",
      msg: "Trying to update price feed with the wrong feed id"
    },
    {
      code: 6271,
      name: "OracleUnsupportedMessageType",
      msg: "The message in the update must be a PriceFeedMessage"
    },
    {
      code: 6272,
      name: "OracleDeserializeMessageFailed",
      msg: "Could not deserialize the message in the update"
    },
    {
      code: 6273,
      name: "OracleWrongGuardianSetOwner",
      msg: "Wrong guardian set owner in update price atomic"
    },
    {
      code: 6274,
      name: "OracleWrongWriteAuthority",
      msg: "Oracle post update atomic price feed account must be drift program"
    },
    {
      code: 6275,
      name: "OracleWrongVaaOwner",
      msg: "Oracle vaa owner must be wormhole program"
    },
    {
      code: 6276,
      name: "OracleTooManyPriceAccountUpdates",
      msg: "Multi updates must have 2 or fewer accounts passed in remaining accounts"
    },
    {
      code: 6277,
      name: "OracleMismatchedVaaAndPriceUpdates",
      msg: "Don't have the same remaining accounts number and pyth updates left"
    },
    {
      code: 6278,
      name: "OracleBadRemainingAccountPublicKey",
      msg: "Remaining account passed does not match oracle update derived pda"
    },
    {
      code: 6279,
      name: "FailedOpenbookV2CPI",
      msg: "FailedOpenbookV2CPI"
    },
    {
      code: 6280,
      name: "InvalidOpenbookV2Program",
      msg: "InvalidOpenbookV2Program"
    },
    {
      code: 6281,
      name: "InvalidOpenbookV2Market",
      msg: "InvalidOpenbookV2Market"
    },
    {
      code: 6282,
      name: "NonZeroTransferFee",
      msg: "Non zero transfer fee"
    },
    {
      code: 6283,
      name: "LiquidationOrderFailedToFill",
      msg: "Liquidation order failed to fill"
    },
    {
      code: 6284,
      name: "InvalidPredictionMarketOrder",
      msg: "Invalid prediction market order"
    },
    {
      code: 6285,
      name: "InvalidVerificationIxIndex",
      msg: "Ed25519 Ix must be before place and make swift order ix"
    },
    {
      code: 6286,
      name: "SigVerificationFailed",
      msg: "Swift message verificaiton failed"
    },
    {
      code: 6287,
      name: "MismatchedSwiftOrderParamsMarketIndex",
      msg: "Market index mismatched b/w taker and maker swift order params"
    },
    {
      code: 6288,
      name: "InvalidSwiftOrderParam",
      msg: "Invalid swift order param"
    },
    {
      code: 6289,
      name: "PlaceAndTakeOrderSuccessConditionFailed",
      msg: "Place and take order success condition failed"
    },
    {
      code: 6290,
      name: "InvalidHighLeverageModeConfig",
      msg: "Invalid High Leverage Mode Config"
    },
    {
      code: 6291,
      name: "InvalidRFQUserAccount",
      msg: "Invalid RFQ User Account"
    },
    {
      code: 6292,
      name: "RFQUserAccountWrongMutability",
      msg: "RFQUserAccount should be mutable"
    },
    {
      code: 6293,
      name: "RFQUserAccountFull",
      msg: "RFQUserAccount has too many active RFQs"
    },
    {
      code: 6294,
      name: "RFQOrderNotFilled",
      msg: "RFQ order not filled as expected"
    },
    {
      code: 6295,
      name: "InvalidRFQOrder",
      msg: "RFQ orders must be jit makers"
    },
    {
      code: 6296,
      name: "InvalidRFQMatch",
      msg: "RFQ matches must be valid"
    },
    {
      code: 6297,
      name: "InvalidSwiftUserAccount",
      msg: "Invalid swift user account"
    },
    {
      code: 6298,
      name: "SwiftUserAccountWrongMutability",
      msg: "Swift account wrong mutability"
    },
    {
      code: 6299,
      name: "SwiftUserOrdersAccountFull",
      msg: "SwiftUserAccount has too many active orders"
    },
    {
      code: 6300,
      name: "SwiftOrderDoesNotExist",
      msg: "Order with swift uuid does not exist"
    },
    {
      code: 6301,
      name: "InvalidSwiftOrderId",
      msg: "Swift order id cannot be 0s"
    },
    {
      code: 6302,
      name: "InvalidPoolId",
      msg: "Invalid pool id"
    },
    {
      code: 6303,
      name: "InvalidProtectedMakerModeConfig",
      msg: "Invalid Protected Maker Mode Config"
    },
    {
      code: 6304,
      name: "InvalidPythLazerStorageOwner",
      msg: "Invalid pyth lazer storage owner"
    },
    {
      code: 6305,
      name: "UnverifiedPythLazerMessage",
      msg: "Verification of pyth lazer message failed"
    },
    {
      code: 6306,
      name: "InvalidPythLazerMessage",
      msg: "Invalid pyth lazer message"
    },
    {
      code: 6307,
      name: "PythLazerMessagePriceFeedMismatch",
      msg: "Pyth lazer message does not correspond to correct fed id"
    },
    {
      code: 6308,
      name: "InvalidLiquidateSpotWithSwap",
      msg: "InvalidLiquidateSpotWithSwap"
    }
  ]
};

// idl/ton-whales-holders.json
var ton_whales_holders_default = {
  accounts: [
    {
      discriminator: [166, 250, 46, 230, 152, 63, 140, 182],
      name: "Card"
    },
    {
      discriminator: [46, 159, 131, 37, 245, 84, 5, 9],
      name: "Root"
    }
  ],
  address: "6bES2dKy1ee13HQ4uW4ycw4Kw4od9ziZeWMyAxVySYEd",
  errors: [
    {
      code: 6e3,
      name: "IncorrectTzOffset"
    },
    {
      code: 6001,
      name: "IncorrectSeqno"
    },
    {
      code: 6002,
      name: "IncorrectTimestamp"
    },
    {
      code: 6003,
      name: "IncorrectWithdrawA"
    },
    {
      code: 6004,
      name: "IncorrectWithdrawB"
    },
    {
      code: 6005,
      name: "IncorrectTransferredA"
    },
    {
      code: 6006,
      name: "IncorrectTransferredB"
    },
    {
      code: 6007,
      name: "IncorrectBalanceA"
    },
    {
      code: 6008,
      name: "IncorrectBalanceB"
    },
    {
      code: 6009,
      name: "LimitReached"
    },
    {
      code: 6010,
      name: "IncosistentReservedBalance"
    },
    {
      code: 6011,
      name: "IncorrectBalance"
    },
    {
      code: 6012,
      name: "IncorrectNewLimits"
    },
    {
      code: 6013,
      name: "IncorrectNewSeqno"
    },
    {
      code: 6014,
      name: "TooManyPendingLimits"
    },
    {
      code: 6015,
      name: "GracefulPeriodInProgress"
    },
    {
      code: 6016,
      name: "InconsistentBalanceA"
    },
    {
      code: 6017,
      name: "InconsistentBalanceB"
    },
    {
      code: 6018,
      name: "NotWhitelisted"
    },
    {
      code: 6019,
      name: "AlreadyWhitelisted"
    },
    {
      code: 6020,
      name: "DepositAOverflow"
    },
    {
      code: 6021,
      name: "NewWithdrawnAOverflow"
    },
    {
      code: 6022,
      name: "NewWithdrawnBOverflow"
    },
    {
      code: 6023,
      name: "DepositBOverflow"
    },
    {
      code: 6024,
      name: "WithdrawnAOverflow"
    },
    {
      code: 6025,
      name: "WithdrawnBOverflow"
    },
    {
      code: 6026,
      name: "TransferredAUnderflow"
    }
  ],
  events: [
    {
      discriminator: [35, 103, 149, 246, 196, 123, 221, 99],
      name: "Refunded"
    },
    {
      discriminator: [213, 115, 105, 7, 254, 239, 150, 134],
      name: "UpdatedCard"
    }
  ],
  instructions: [
    {
      accounts: [
        {
          name: "owner",
          relations: ["root"],
          signer: true,
          writable: true
        },
        {
          name: "token_mint"
        },
        {
          name: "root",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [114, 111, 111, 116]
              },
              {
                kind: "arg",
                path: "root_seed"
              }
            ]
          },
          writable: true
        },
        {
          name: "recipient_token_account"
        },
        {
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
          name: "token_program"
        }
      ],
      args: [
        {
          name: "root_seed",
          type: {
            array: ["u8", 32]
          }
        }
      ],
      discriminator: [157, 211, 52, 54, 144, 81, 5, 55],
      name: "add_to_whitelist"
    },
    {
      accounts: [
        {
          name: "owner",
          relations: ["root"],
          signer: true,
          writable: true
        },
        {
          name: "treasure_authority"
        },
        {
          name: "root",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [114, 111, 111, 116]
              },
              {
                kind: "arg",
                path: "root_seed"
              }
            ]
          },
          writable: true
        }
      ],
      args: [
        {
          name: "root_seed",
          type: {
            array: ["u8", 32]
          }
        },
        {
          name: "treasure_authority",
          type: "pubkey"
        }
      ],
      discriminator: [165, 2, 203, 251, 150, 203, 101, 144],
      name: "assign_new_treasure_authority"
    },
    {
      accounts: [
        {
          name: "owner",
          relations: ["root"],
          signer: true,
          writable: true
        },
        {
          name: "controller"
        },
        {
          name: "root",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [114, 111, 111, 116]
              },
              {
                kind: "arg",
                path: "root_seed"
              }
            ]
          },
          writable: true
        }
      ],
      args: [
        {
          name: "root_seed",
          type: {
            array: ["u8", 32]
          }
        },
        {
          name: "controller",
          type: "pubkey"
        }
      ],
      discriminator: [191, 5, 46, 10, 82, 189, 89, 219],
      name: "change_controller"
    },
    {
      accounts: [
        {
          name: "owner",
          relations: ["root"],
          signer: true,
          writable: true
        },
        {
          name: "root",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [114, 111, 111, 116]
              },
              {
                kind: "arg",
                path: "root_seed"
              }
            ]
          },
          writable: true
        }
      ],
      args: [
        {
          name: "root_seed",
          type: {
            array: ["u8", 32]
          }
        },
        {
          name: "graceful_period",
          type: "i64"
        }
      ],
      discriminator: [145, 4, 98, 5, 20, 246, 158, 126],
      name: "change_graceful_period"
    },
    {
      accounts: [
        {
          name: "signer",
          signer: true,
          writable: true
        },
        {
          name: "authority",
          relations: ["card"],
          writable: true
        },
        {
          name: "root",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [114, 111, 111, 116]
              },
              {
                kind: "arg",
                path: "root_seed"
              }
            ]
          }
        },
        {
          name: "treasure_token_account",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  116,
                  114,
                  101,
                  97,
                  115,
                  117,
                  114,
                  101,
                  95,
                  116,
                  111,
                  107,
                  101,
                  110
                ]
              },
              {
                kind: "account",
                path: "root"
              }
            ]
          },
          writable: true
        },
        {
          name: "card",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [99, 97, 114, 100]
              },
              {
                kind: "account",
                path: "card_token_account"
              }
            ]
          },
          writable: true
        },
        {
          name: "card_token_account",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [99, 97, 114, 100, 95, 116, 111, 107, 101, 110]
              },
              {
                kind: "arg",
                path: "card_seed"
              },
              {
                kind: "account",
                path: "root"
              }
            ]
          },
          writable: true
        },
        {
          name: "token_mint"
        },
        {
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
          name: "token_program"
        }
      ],
      args: [
        {
          name: "root_seed",
          type: {
            array: ["u8", 32]
          }
        },
        {
          name: "card_seed",
          type: {
            array: ["u8", 32]
          }
        }
      ],
      discriminator: [142, 206, 170, 182, 227, 204, 185, 115],
      name: "close_card"
    },
    {
      accounts: [
        {
          name: "owner",
          signer: true,
          writable: true
        },
        {
          name: "controller",
          writable: true
        },
        {
          name: "authority",
          relations: ["card"],
          writable: true
        },
        {
          name: "root",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [114, 111, 111, 116]
              },
              {
                kind: "arg",
                path: "root_seed"
              }
            ]
          }
        },
        {
          name: "card",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [99, 97, 114, 100]
              },
              {
                kind: "account",
                path: "card_token_account"
              }
            ]
          },
          writable: true
        },
        {
          name: "card_token_account",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [99, 97, 114, 100, 95, 116, 111, 107, 101, 110]
              },
              {
                kind: "arg",
                path: "card_seed"
              },
              {
                kind: "account",
                path: "root"
              }
            ]
          },
          writable: true
        },
        {
          name: "token_mint"
        },
        {
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
          name: "token_program"
        }
      ],
      args: [
        {
          name: "root_seed",
          type: {
            array: ["u8", 32]
          }
        },
        {
          name: "card_seed",
          type: {
            array: ["u8", 32]
          }
        }
      ],
      discriminator: [199, 58, 181, 228, 23, 155, 200, 173],
      name: "delete_card"
    },
    {
      accounts: [
        {
          name: "signer",
          signer: true,
          writable: true
        },
        {
          name: "root",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [114, 111, 111, 116]
              },
              {
                kind: "arg",
                path: "root_seed"
              }
            ]
          }
        },
        {
          name: "token_mint"
        },
        {
          name: "sender_token_account",
          writable: true
        },
        {
          name: "card",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [99, 97, 114, 100]
              },
              {
                kind: "account",
                path: "card_token_account"
              }
            ]
          },
          writable: true
        },
        {
          name: "card_token_account",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [99, 97, 114, 100, 95, 116, 111, 107, 101, 110]
              },
              {
                kind: "arg",
                path: "card_seed"
              },
              {
                kind: "account",
                path: "root"
              }
            ]
          },
          writable: true
        },
        {
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
          name: "token_program"
        }
      ],
      args: [
        {
          name: "root_seed",
          type: {
            array: ["u8", 32]
          }
        },
        {
          name: "card_seed",
          type: {
            array: ["u8", 32]
          }
        },
        {
          name: "amount",
          type: "u64"
        }
      ],
      discriminator: [221, 131, 111, 52, 236, 215, 120, 228],
      name: "deposit_card"
    },
    {
      accounts: [
        {
          name: "support_authority",
          signer: true,
          writable: true
        },
        {
          name: "controller",
          relations: ["root"],
          writable: true
        },
        {
          name: "root",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [114, 111, 111, 116]
              },
              {
                kind: "arg",
                path: "root_seed"
              }
            ]
          }
        },
        {
          name: "token_mint"
        },
        {
          name: "card_token_account_from",
          writable: true
        },
        {
          name: "card_token_account_to",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [99, 97, 114, 100, 95, 116, 111, 107, 101, 110]
              },
              {
                kind: "arg",
                path: "card_seed"
              },
              {
                kind: "account",
                path: "root"
              }
            ]
          },
          writable: true
        },
        {
          name: "card",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [99, 97, 114, 100]
              },
              {
                kind: "account",
                path: "card_token_account_to"
              }
            ]
          },
          writable: true
        },
        {
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
          name: "token_program"
        }
      ],
      args: [
        {
          name: "root_seed",
          type: {
            array: ["u8", 32]
          }
        },
        {
          name: "card_seed",
          type: {
            array: ["u8", 32]
          }
        }
      ],
      discriminator: [158, 48, 134, 50, 85, 60, 29, 32],
      name: "fix_incorrect_deposit"
    },
    {
      accounts: [
        {
          name: "signer",
          signer: true,
          writable: true
        },
        {
          name: "token_mint"
        },
        {
          name: "root",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [114, 111, 111, 116]
              },
              {
                kind: "arg",
                path: "root_seed"
              }
            ]
          },
          writable: true
        },
        {
          name: "treasure_token_account",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  116,
                  114,
                  101,
                  97,
                  115,
                  117,
                  114,
                  101,
                  95,
                  116,
                  111,
                  107,
                  101,
                  110
                ]
              },
              {
                kind: "account",
                path: "root"
              }
            ]
          },
          writable: true
        },
        {
          address: "11111111111111111111111111111111",
          name: "system_program"
        },
        {
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
          name: "token_program"
        }
      ],
      args: [
        {
          name: "root_seed",
          type: {
            array: ["u8", 32]
          }
        },
        {
          name: "controller",
          type: "pubkey"
        },
        {
          name: "treasure_authority",
          type: "pubkey"
        },
        {
          name: "graceful_period",
          type: "i64"
        }
      ],
      discriminator: [175, 175, 109, 31, 13, 152, 155, 237],
      name: "initialize"
    },
    {
      accounts: [
        {
          name: "controller",
          relations: ["root"],
          signer: true,
          writable: true
        },
        {
          name: "root",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [114, 111, 111, 116]
              },
              {
                kind: "arg",
                path: "root_seed"
              }
            ]
          }
        },
        {
          name: "card",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [99, 97, 114, 100]
              },
              {
                kind: "account",
                path: "card_token_account"
              }
            ]
          },
          writable: true
        },
        {
          name: "token_mint"
        },
        {
          name: "authority_token_account"
        },
        {
          name: "card_token_account",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [99, 97, 114, 100, 95, 116, 111, 107, 101, 110]
              },
              {
                kind: "arg",
                path: "card_seed"
              },
              {
                kind: "account",
                path: "root"
              }
            ]
          },
          writable: true
        },
        {
          address: "11111111111111111111111111111111",
          name: "system_program"
        },
        {
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
          name: "token_program"
        }
      ],
      args: [
        {
          name: "root_seed",
          type: {
            array: ["u8", 32]
          }
        },
        {
          name: "card_seed",
          type: {
            array: ["u8", 32]
          }
        },
        {
          name: "tz_offset",
          type: "i32"
        }
      ],
      discriminator: [85, 225, 118, 108, 55, 196, 187, 32],
      name: "issue_card"
    },
    {
      accounts: [
        {
          name: "owner",
          relations: ["root"],
          signer: true,
          writable: true
        },
        {
          name: "root",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [114, 111, 111, 116]
              },
              {
                kind: "arg",
                path: "root_seed"
              }
            ]
          },
          writable: true
        },
        {
          address: "11111111111111111111111111111111",
          name: "system_program"
        }
      ],
      args: [
        {
          name: "root_seed",
          type: {
            array: ["u8", 32]
          }
        }
      ],
      discriminator: [8, 79, 38, 152, 201, 35, 176, 64],
      name: "migrate_to_add_support_authority"
    },
    {
      accounts: [
        {
          name: "treasure_authority",
          relations: ["root"],
          signer: true,
          writable: true
        },
        {
          name: "root",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [114, 111, 111, 116]
              },
              {
                kind: "arg",
                path: "root_seed"
              }
            ]
          }
        },
        {
          name: "token_mint"
        },
        {
          name: "treasure_token_account",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  116,
                  114,
                  101,
                  97,
                  115,
                  117,
                  114,
                  101,
                  95,
                  116,
                  111,
                  107,
                  101,
                  110
                ]
              },
              {
                kind: "account",
                path: "root"
              }
            ]
          },
          writable: true
        },
        {
          name: "card",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [99, 97, 114, 100]
              },
              {
                kind: "account",
                path: "card_token_account"
              }
            ]
          },
          writable: true
        },
        {
          name: "card_token_account",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [99, 97, 114, 100, 95, 116, 111, 107, 101, 110]
              },
              {
                kind: "arg",
                path: "card_seed"
              },
              {
                kind: "account",
                path: "root"
              }
            ]
          },
          writable: true
        },
        {
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
          name: "token_program"
        }
      ],
      args: [
        {
          name: "root_seed",
          type: {
            array: ["u8", 32]
          }
        },
        {
          name: "card_seed",
          type: {
            array: ["u8", 32]
          }
        },
        {
          name: "amount",
          type: "u64"
        },
        {
          name: "query_id",
          type: "u64"
        }
      ],
      discriminator: [2, 96, 183, 251, 63, 208, 46, 46],
      name: "refund"
    },
    {
      accounts: [
        {
          name: "owner",
          relations: ["root"],
          signer: true,
          writable: true
        },
        {
          name: "token_mint"
        },
        {
          name: "root",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [114, 111, 111, 116]
              },
              {
                kind: "arg",
                path: "root_seed"
              }
            ]
          },
          writable: true
        },
        {
          name: "recipient_token_account"
        },
        {
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
          name: "token_program"
        }
      ],
      args: [
        {
          name: "root_seed",
          type: {
            array: ["u8", 32]
          }
        }
      ],
      discriminator: [7, 144, 216, 239, 243, 236, 193, 235],
      name: "remove_from_whitelist"
    },
    {
      accounts: [
        {
          name: "owner",
          relations: ["root"],
          signer: true,
          writable: true
        },
        {
          name: "root",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [114, 111, 111, 116]
              },
              {
                kind: "arg",
                path: "root_seed"
              }
            ]
          }
        }
      ],
      args: [
        {
          name: "root_seed",
          type: {
            array: ["u8", 32]
          }
        }
      ],
      discriminator: [63, 65, 221, 162, 75, 79, 86, 174],
      name: "reset_whitelist"
    },
    {
      accounts: [
        {
          name: "owner",
          relations: ["root"],
          signer: true,
          writable: true
        },
        {
          name: "support_authority"
        },
        {
          name: "root",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [114, 111, 111, 116]
              },
              {
                kind: "arg",
                path: "root_seed"
              }
            ]
          },
          writable: true
        }
      ],
      args: [
        {
          name: "root_seed",
          type: {
            array: ["u8", 32]
          }
        }
      ],
      discriminator: [180, 237, 50, 89, 95, 203, 215, 156],
      name: "set_support_authority"
    },
    {
      accounts: [
        {
          name: "signer",
          signer: true,
          writable: true
        },
        {
          name: "root",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [114, 111, 111, 116]
              },
              {
                kind: "arg",
                path: "root_seed"
              }
            ]
          }
        },
        {
          name: "token_mint",
          writable: true
        },
        {
          name: "card",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [99, 97, 114, 100]
              },
              {
                kind: "account",
                path: "card_token_account"
              }
            ]
          },
          writable: true
        },
        {
          name: "card_token_account",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [99, 97, 114, 100, 95, 116, 111, 107, 101, 110]
              },
              {
                kind: "arg",
                path: "card_seed"
              },
              {
                kind: "account",
                path: "root"
              }
            ]
          }
        },
        {
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
          name: "token_program"
        }
      ],
      args: [
        {
          name: "root_seed",
          type: {
            array: ["u8", 32]
          }
        },
        {
          name: "card_seed",
          type: {
            array: ["u8", 32]
          }
        }
      ],
      discriminator: [29, 234, 106, 252, 50, 237, 78, 42],
      name: "sync_card_balance"
    },
    {
      accounts: [
        {
          name: "signer",
          signer: true,
          writable: true
        },
        {
          name: "root",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [114, 111, 111, 116]
              },
              {
                kind: "arg",
                path: "root_seed"
              }
            ]
          }
        },
        {
          name: "token_mint"
        },
        {
          name: "authority",
          relations: ["card"]
        },
        {
          name: "card",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [99, 97, 114, 100]
              },
              {
                kind: "account",
                path: "card_token_account"
              }
            ]
          },
          writable: true
        },
        {
          name: "card_token_account",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [99, 97, 114, 100, 95, 116, 111, 107, 101, 110]
              },
              {
                kind: "arg",
                path: "card_seed"
              },
              {
                kind: "account",
                path: "root"
              }
            ]
          },
          writable: true
        },
        {
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
          name: "token_program"
        }
      ],
      args: [
        {
          name: "root_seed",
          type: {
            array: ["u8", 32]
          }
        },
        {
          name: "card_seed",
          type: {
            array: ["u8", 32]
          }
        },
        {
          name: "new_onetime",
          type: "u64"
        },
        {
          name: "new_daily",
          type: "u64"
        },
        {
          name: "new_monthly",
          type: "u64"
        },
        {
          name: "new_seqno",
          type: "u32"
        }
      ],
      discriminator: [139, 136, 98, 120, 163, 16, 216, 197],
      name: "update_card_limits"
    },
    {
      accounts: [
        {
          name: "controller",
          relations: ["root"],
          signer: true,
          writable: true
        },
        {
          name: "root",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [114, 111, 111, 116]
              },
              {
                kind: "arg",
                path: "root_seed"
              }
            ]
          }
        },
        {
          name: "treasure_token_account",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  116,
                  114,
                  101,
                  97,
                  115,
                  117,
                  114,
                  101,
                  95,
                  116,
                  111,
                  107,
                  101,
                  110
                ]
              },
              {
                kind: "account",
                path: "root"
              }
            ]
          },
          writable: true
        },
        {
          name: "recipient_token_account",
          writable: true
        },
        {
          name: "card",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [99, 97, 114, 100]
              },
              {
                kind: "account",
                path: "card_token_account"
              }
            ]
          },
          writable: true
        },
        {
          name: "card_token_account",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [99, 97, 114, 100, 95, 116, 111, 107, 101, 110]
              },
              {
                kind: "arg",
                path: "card_seed"
              },
              {
                kind: "account",
                path: "root"
              }
            ]
          },
          writable: true
        },
        {
          name: "token_mint"
        },
        {
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
          name: "token_program"
        }
      ],
      args: [
        {
          name: "root_seed",
          type: {
            array: ["u8", 32]
          }
        },
        {
          name: "card_seed",
          type: {
            array: ["u8", 32]
          }
        },
        {
          name: "state",
          type: {
            defined: {
              name: "UpdateCardData"
            }
          }
        },
        {
          name: "limits_seqno",
          type: "u32"
        }
      ],
      discriminator: [143, 199, 250, 162, 184, 67, 241, 82],
      name: "update_card_state"
    },
    {
      accounts: [
        {
          name: "treasure_authority",
          relations: ["root"],
          signer: true,
          writable: true
        },
        {
          name: "root",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [114, 111, 111, 116]
              },
              {
                kind: "arg",
                path: "root_seed"
              }
            ]
          }
        },
        {
          name: "treasure_token_account",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  116,
                  114,
                  101,
                  97,
                  115,
                  117,
                  114,
                  101,
                  95,
                  116,
                  111,
                  107,
                  101,
                  110
                ]
              },
              {
                kind: "account",
                path: "root"
              }
            ]
          },
          writable: true
        },
        {
          name: "recipient_token_account",
          writable: true
        },
        {
          name: "token_mint"
        },
        {
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
          name: "token_program"
        }
      ],
      args: [
        {
          name: "root_seed",
          type: {
            array: ["u8", 32]
          }
        },
        {
          name: "amount",
          type: "u64"
        }
      ],
      discriminator: [223, 238, 204, 12, 224, 1, 29, 134],
      name: "withdraw_from_treasure"
    }
  ],
  metadata: {
    description: "Created with Anchor",
    name: "holders",
    spec: "0.1.0",
    version: "0.1.0"
  },
  types: [
    {
      name: "Card",
      type: {
        fields: [
          {
            name: "bump",
            type: "u8"
          },
          {
            name: "authority",
            type: "pubkey"
          },
          {
            name: "token_account",
            type: "pubkey"
          },
          {
            name: "seed",
            type: {
              array: ["u8", 32]
            }
          },
          {
            name: "seqno",
            type: "u32"
          },
          {
            name: "last_state_at",
            type: "i64"
          },
          {
            name: "transferred_a",
            type: "u64"
          },
          {
            name: "transferred_b",
            type: "u64"
          },
          {
            name: "deposited_a",
            type: "u64"
          },
          {
            name: "deposited_b",
            type: "u64"
          },
          {
            name: "withdrawn_a",
            type: "u64"
          },
          {
            name: "withdrawn_b",
            type: "u64"
          },
          {
            name: "status",
            type: {
              defined: {
                name: "CardStatus"
              }
            }
          },
          {
            name: "deadline",
            type: "i64"
          },
          {
            name: "tz_offset",
            type: {
              defined: {
                name: "TzOffset"
              }
            }
          },
          {
            name: "limits",
            type: {
              defined: {
                name: "Limits"
              }
            }
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "CardStatus",
      repr: {
        kind: "rust"
      },
      type: {
        kind: "enum",
        variants: [
          {
            name: "Active"
          },
          {
            name: "RequestCloseA"
          },
          {
            name: "Closed"
          }
        ]
      }
    },
    {
      name: "Limits",
      type: {
        fields: [
          {
            name: "onetime",
            type: "u64"
          },
          {
            name: "daily",
            type: "u64"
          },
          {
            name: "monthly",
            type: "u64"
          },
          {
            name: "spent_daily",
            type: "u64"
          },
          {
            name: "spent_monthly",
            type: "u64"
          },
          {
            name: "daily_deadline",
            type: "i64"
          },
          {
            name: "monthly_deadline",
            type: "i64"
          },
          {
            name: "seqno",
            type: "u32"
          },
          {
            name: "pending_limits_queue",
            type: {
              defined: {
                generics: [
                  {
                    kind: "const",
                    value: "5"
                  }
                ],
                name: "OrderedList"
              }
            }
          }
        ],
        kind: "struct"
      }
    },
    {
      generics: [
        {
          kind: "const",
          name: "L",
          type: "usize"
        }
      ],
      name: "OrderedList",
      type: {
        fields: [
          {
            name: "inner",
            type: {
              vec: {
                defined: {
                  name: "PendingLimits"
                }
              }
            }
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "PendingLimits",
      type: {
        fields: [
          {
            name: "onetime",
            type: "u64"
          },
          {
            name: "daily",
            type: "u64"
          },
          {
            name: "monthly",
            type: "u64"
          },
          {
            name: "seqno",
            type: "u32"
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "Refunded",
      type: {
        fields: [
          {
            name: "query_id",
            type: "u64"
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "Root",
      type: {
        fields: [
          {
            name: "bump",
            type: "u8"
          },
          {
            name: "seed",
            type: {
              array: ["u8", 32]
            }
          },
          {
            name: "owner",
            type: "pubkey"
          },
          {
            name: "controller",
            type: "pubkey"
          },
          {
            name: "token_mint",
            type: "pubkey"
          },
          {
            name: "graceful_period",
            type: "i64"
          },
          {
            name: "treasure_authority",
            type: "pubkey"
          },
          {
            name: "treasure_token_account",
            type: "pubkey"
          },
          {
            name: "whitelist",
            type: {
              vec: "pubkey"
            }
          },
          {
            name: "support_authority",
            type: {
              option: "pubkey"
            }
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "TzOffset",
      type: {
        fields: [
          {
            name: "value",
            type: "i32"
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "UpdateCardData",
      type: {
        fields: [
          {
            name: "seqno",
            type: "u32"
          },
          {
            name: "transferred_a",
            type: "u64"
          },
          {
            name: "transferred_b",
            type: "u64"
          },
          {
            name: "withdraw_a",
            type: "u64"
          },
          {
            name: "withdraw_b",
            type: "u64"
          },
          {
            name: "close",
            type: "bool"
          },
          {
            name: "timestamp",
            type: "i64"
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "UpdatedCard",
      type: {
        fields: [
          {
            name: "authority",
            type: "pubkey"
          },
          {
            name: "token_account",
            type: "pubkey"
          },
          {
            name: "seed",
            type: {
              array: ["u8", 32]
            }
          },
          {
            name: "seqno",
            type: "u32"
          },
          {
            name: "last_state_at",
            type: "i64"
          },
          {
            name: "transferred_a",
            type: "u64"
          },
          {
            name: "transferred_b",
            type: "u64"
          },
          {
            name: "deposited_a",
            type: "u64"
          },
          {
            name: "deposited_b",
            type: "u64"
          },
          {
            name: "withdrawn_a",
            type: "u64"
          },
          {
            name: "withdrawn_b",
            type: "u64"
          },
          {
            name: "status",
            type: {
              defined: {
                name: "CardStatus"
              }
            }
          },
          {
            name: "deadline",
            type: "i64"
          },
          {
            name: "tz_offset",
            type: {
              defined: {
                name: "TzOffset"
              }
            }
          },
          {
            name: "limits",
            type: {
              defined: {
                name: "Limits"
              }
            }
          }
        ],
        kind: "struct"
      }
    }
  ]
};

// idl/magic-eden-v2.json
var magic_eden_v2_default = {
  accounts: [
    {
      name: "BuyerTradeState",
      type: {
        fields: [
          {
            name: "auctionHouseKey",
            type: "publicKey"
          },
          {
            name: "buyer",
            type: "publicKey"
          },
          {
            name: "buyerReferral",
            type: "publicKey"
          },
          {
            name: "buyerPrice",
            type: "u64"
          },
          {
            name: "tokenMint",
            type: "publicKey"
          },
          {
            name: "tokenSize",
            type: "u64"
          },
          {
            name: "bump",
            type: "u8"
          },
          {
            name: "expiry",
            type: "i64"
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "SellerTradeState",
      type: {
        fields: [
          {
            name: "auctionHouseKey",
            type: "publicKey"
          },
          {
            name: "seller",
            type: "publicKey"
          },
          {
            name: "sellerReferral",
            type: "publicKey"
          },
          {
            name: "buyerPrice",
            type: "u64"
          },
          {
            name: "tokenMint",
            type: "publicKey"
          },
          {
            name: "tokenAccount",
            type: "publicKey"
          },
          {
            name: "tokenSize",
            type: "u64"
          },
          {
            name: "bump",
            type: "u8"
          },
          {
            name: "expiry",
            type: "i64"
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "SellerTradeStateV2",
      type: {
        fields: [
          {
            name: "auctionHouseKey",
            type: "publicKey"
          },
          {
            name: "seller",
            type: "publicKey"
          },
          {
            name: "sellerReferral",
            type: "publicKey"
          },
          {
            name: "buyerPrice",
            type: "u64"
          },
          {
            name: "tokenMint",
            type: "publicKey"
          },
          {
            name: "tokenAccount",
            type: "publicKey"
          },
          {
            name: "tokenSize",
            type: "u64"
          },
          {
            name: "bump",
            type: "u8"
          },
          {
            name: "expiry",
            type: "i64"
          },
          {
            name: "paymentMint",
            type: "publicKey"
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "AuctionHouse",
      type: {
        fields: [
          {
            name: "auctionHouseTreasury",
            type: "publicKey"
          },
          {
            name: "treasuryWithdrawalDestination",
            type: "publicKey"
          },
          {
            name: "authority",
            type: "publicKey"
          },
          {
            name: "creator",
            type: "publicKey"
          },
          {
            name: "notary",
            type: "publicKey"
          },
          {
            name: "bump",
            type: "u8"
          },
          {
            name: "treasuryBump",
            type: "u8"
          },
          {
            name: "sellerFeeBasisPoints",
            type: "u16"
          },
          {
            name: "buyerReferralBp",
            type: "u16"
          },
          {
            name: "sellerReferralBp",
            type: "u16"
          },
          {
            name: "requiresNotary",
            type: "bool"
          },
          {
            name: "nprob",
            type: "u8"
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "BuyerTradeStateV2",
      type: {
        fields: [
          {
            name: "auctionHouseKey",
            type: "publicKey"
          },
          {
            name: "buyer",
            type: "publicKey"
          },
          {
            name: "buyerReferral",
            type: "publicKey"
          },
          {
            name: "buyerPrice",
            type: "u64"
          },
          {
            name: "tokenMint",
            type: "publicKey"
          },
          {
            name: "tokenSize",
            type: "u64"
          },
          {
            name: "bump",
            type: "u8"
          },
          {
            name: "expiry",
            type: "i64"
          },
          {
            name: "buyerCreatorRoyaltyBp",
            type: "u16"
          },
          {
            name: "paymentMint",
            type: "publicKey"
          }
        ],
        kind: "struct"
      }
    }
  ],
  errors: [
    {
      code: 6e3,
      msg: "PublicKeyMismatch",
      name: "PublicKeyMismatch"
    },
    {
      code: 6001,
      msg: "InvalidMintAuthority",
      name: "InvalidMintAuthority"
    },
    {
      code: 6002,
      msg: "UninitializedAccount",
      name: "UninitializedAccount"
    },
    {
      code: 6003,
      msg: "IncorrectOwner",
      name: "IncorrectOwner"
    },
    {
      code: 6004,
      msg: "PublicKeysShouldBeUnique",
      name: "PublicKeysShouldBeUnique"
    },
    {
      code: 6005,
      msg: "StatementFalse",
      name: "StatementFalse"
    },
    {
      code: 6006,
      msg: "NotRentExempt",
      name: "NotRentExempt"
    },
    {
      code: 6007,
      msg: "NumericalOverflow",
      name: "NumericalOverflow"
    },
    {
      code: 6008,
      msg: "Expected a sol account but got an spl token account instead",
      name: "ExpectedSolAccount"
    },
    {
      code: 6009,
      msg: "Cannot exchange sol for sol",
      name: "CannotExchangeSOLForSol"
    },
    {
      code: 6010,
      msg: "If paying with sol, sol wallet must be signer",
      name: "SOLWalletMustSign"
    },
    {
      code: 6011,
      msg: "Cannot take this action without auction house signing too",
      name: "CannotTakeThisActionWithoutAuctionHouseSignOff"
    },
    {
      code: 6012,
      msg: "No payer present on this txn",
      name: "NoPayerPresent"
    },
    {
      code: 6013,
      msg: "Derived key invalid",
      name: "DerivedKeyInvalid"
    },
    {
      code: 6014,
      msg: "Metadata doesn't exist",
      name: "MetadataDoesntExist"
    },
    {
      code: 6015,
      msg: "Invalid token amount",
      name: "InvalidTokenAmount"
    },
    {
      code: 6016,
      msg: "Both parties need to agree to this sale",
      name: "BothPartiesNeedToAgreeToSale"
    },
    {
      code: 6017,
      msg: "Cannot match free sales unless the auction house or seller signs off",
      name: "CannotMatchFreeSalesWithoutAuctionHouseOrSellerSignoff"
    },
    {
      code: 6018,
      msg: "This sale requires a signer",
      name: "SaleRequiresSigner"
    },
    {
      code: 6019,
      msg: "Old seller not initialized",
      name: "OldSellerNotInitialized"
    },
    {
      code: 6020,
      msg: "Seller ata cannot have a delegate set",
      name: "SellerATACannotHaveDelegate"
    },
    {
      code: 6021,
      msg: "Buyer ata cannot have a delegate set",
      name: "BuyerATACannotHaveDelegate"
    },
    {
      code: 6022,
      msg: "No valid signer present",
      name: "NoValidSignerPresent"
    },
    {
      code: 6023,
      msg: "Invalid BP",
      name: "InvalidBasisPoints"
    },
    {
      code: 6024,
      msg: "Invalid notary",
      name: "InvalidNotary"
    },
    {
      code: 6025,
      msg: "Empty trade state",
      name: "EmptyTradeState"
    },
    {
      code: 6026,
      msg: "Invalid expiry",
      name: "InvalidExpiry"
    },
    {
      code: 6027,
      msg: "Invalid price",
      name: "InvalidPrice"
    },
    {
      code: 6028,
      msg: "Invalid remainning accounts without program_as_signer",
      name: "InvalidRemainingAccountsWithoutProgramAsSigner"
    },
    {
      code: 6029,
      msg: "Invalid bump",
      name: "InvalidBump"
    },
    {
      code: 6030,
      msg: "Invalid create auction house nonce",
      name: "InvalidCreateAuctionHouseNonce"
    },
    {
      code: 6031,
      msg: "Invalid account state",
      name: "InvalidAccountState"
    },
    {
      code: 6032,
      msg: "Invalid discriminator",
      name: "InvalidDiscriminator"
    },
    {
      code: 6033,
      msg: "Invalid platform fee bp",
      name: "InvalidPlatformFeeBp"
    },
    {
      code: 6034,
      msg: "Invalid token mint",
      name: "InvalidTokenMint"
    },
    {
      code: 6035,
      msg: "Invalid token standard",
      name: "InvalidTokenStandard"
    },
    {
      code: 6036,
      msg: "Deprecated",
      name: "Deprecated"
    },
    {
      code: 6037,
      msg: "Missing remaining account",
      name: "MissingRemainingAccount"
    },
    {
      code: 6038,
      msg: "Invalid trusted program or pda",
      name: "InvalidTrustedProgramOrPDA"
    },
    {
      code: 6039,
      msg: "Invalid token program",
      name: "InvalidTokenProgram"
    }
  ],
  instructions: [
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "treasuryWithdrawalDestination"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouseTreasury"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        }
      ],
      args: [
        {
          name: "amount",
          type: "u64"
        }
      ],
      name: "withdrawFromTreasury"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: true,
          name: "payer"
        },
        {
          isMut: false,
          isSigner: false,
          name: "notary"
        },
        {
          isMut: false,
          isSigner: true,
          name: "authority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "newAuthority"
        },
        {
          isMut: true,
          isSigner: false,
          name: "treasuryWithdrawalDestination"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        }
      ],
      args: [
        {
          name: "sellerFeeBasisPoints",
          type: {
            option: "u16"
          }
        },
        {
          name: "buyerReferralBp",
          type: {
            option: "u16"
          }
        },
        {
          name: "sellerReferralBp",
          type: {
            option: "u16"
          }
        },
        {
          name: "requiresNotary",
          type: {
            option: "bool"
          }
        },
        {
          name: "nprob",
          type: {
            option: "u8"
          }
        }
      ],
      name: "updateAuctionHouse"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: true,
          name: "payer"
        },
        {
          isMut: false,
          isSigner: false,
          name: "notary"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authority"
        },
        {
          isMut: true,
          isSigner: false,
          name: "treasuryWithdrawalDestination"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouseTreasury"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        }
      ],
      args: [
        {
          name: "bump",
          type: "u8"
        },
        {
          name: "treasuryBump",
          type: "u8"
        },
        {
          name: "sellerFeeBasisPoints",
          type: "u16"
        },
        {
          name: "buyerReferralBp",
          type: "u16"
        },
        {
          name: "sellerReferralBp",
          type: "u16"
        },
        {
          name: "requiresNotary",
          type: "bool"
        },
        {
          name: "createAuctionHouseNonce",
          type: "u64"
        }
      ],
      name: "createAuctionHouse"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "wallet"
        },
        {
          isMut: false,
          isSigner: false,
          name: "notary"
        },
        {
          isMut: true,
          isSigner: false,
          name: "escrowPaymentAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        }
      ],
      args: [
        {
          name: "escrowPaymentBump",
          type: "u8"
        },
        {
          name: "amount",
          type: "u64"
        }
      ],
      name: "withdraw"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "wallet"
        },
        {
          isMut: false,
          isSigner: false,
          name: "notary"
        },
        {
          isMut: true,
          isSigner: false,
          name: "escrowPaymentAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        }
      ],
      args: [
        {
          name: "escrowPaymentBump",
          type: "u8"
        },
        {
          name: "amount",
          type: "u64"
        }
      ],
      name: "deposit"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: true,
          name: "wallet"
        },
        {
          isMut: false,
          isSigner: false,
          name: "notary"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenAta"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMint"
        },
        {
          isMut: false,
          isSigner: false,
          name: "metadata"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "sellerTradeState"
        },
        {
          isMut: false,
          isSigner: false,
          name: "sellerReferral"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "ataProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "programAsSigner"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        }
      ],
      args: [
        {
          name: "sellerStateBump",
          type: "u8"
        },
        {
          name: "programAsSignerBump",
          type: "u8"
        },
        {
          name: "buyerPrice",
          type: "u64"
        },
        {
          name: "tokenSize",
          type: "u64"
        },
        {
          name: "sellerStateExpiry",
          type: "i64"
        }
      ],
      name: "sell"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "wallet"
        },
        {
          isMut: false,
          isSigner: false,
          name: "notary"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMint"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "sellerTradeState"
        },
        {
          isMut: false,
          isSigner: false,
          name: "sellerReferral"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        }
      ],
      args: [
        {
          name: "buyerPrice",
          type: "u64"
        },
        {
          name: "tokenSize",
          type: "u64"
        },
        {
          name: "sellerStateExpiry",
          type: "i64"
        }
      ],
      name: "cancelSell"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: true,
          name: "wallet"
        },
        {
          isMut: false,
          isSigner: false,
          name: "notary"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMint"
        },
        {
          isMut: false,
          isSigner: false,
          name: "metadata"
        },
        {
          isMut: true,
          isSigner: false,
          name: "escrowPaymentAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "buyerTradeState"
        },
        {
          isMut: false,
          isSigner: false,
          name: "buyerReferral"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        }
      ],
      args: [
        {
          name: "buyerStateBump",
          type: "u8"
        },
        {
          name: "escrowPaymentBump",
          type: "u8"
        },
        {
          name: "buyerPrice",
          type: "u64"
        },
        {
          name: "tokenSize",
          type: "u64"
        },
        {
          name: "buyerStateExpiry",
          type: "i64"
        }
      ],
      name: "buy"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: true,
          name: "wallet"
        },
        {
          isMut: false,
          isSigner: false,
          name: "notary"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMint"
        },
        {
          isMut: false,
          isSigner: false,
          name: "metadata"
        },
        {
          isMut: true,
          isSigner: false,
          name: "escrowPaymentAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "buyerTradeState"
        },
        {
          isMut: false,
          isSigner: false,
          name: "buyerReferral"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        }
      ],
      args: [
        {
          name: "buyerPrice",
          type: "u64"
        },
        {
          name: "tokenSize",
          type: "u64"
        },
        {
          name: "buyerStateExpiry",
          type: "i64"
        },
        {
          name: "buyerCreatorRoyaltyBp",
          type: "u16"
        },
        {
          name: "extraArgs",
          type: "bytes"
        }
      ],
      name: "buyV2"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "wallet"
        },
        {
          isMut: false,
          isSigner: false,
          name: "notary"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenMint"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "buyerTradeState"
        },
        {
          isMut: false,
          isSigner: false,
          name: "buyerReferral"
        }
      ],
      args: [
        {
          name: "buyerPrice",
          type: "u64"
        },
        {
          name: "tokenSize",
          type: "u64"
        },
        {
          name: "buyerStateExpiry",
          type: "i64"
        }
      ],
      name: "cancelBuy"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: true,
          name: "wallet"
        },
        {
          isMut: false,
          isSigner: false,
          name: "notary"
        },
        {
          isMut: false,
          isSigner: false,
          name: "programAsSigner"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenAta"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMint"
        },
        {
          isMut: false,
          isSigner: false,
          name: "metadata"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "sellerTradeState"
        },
        {
          isMut: false,
          isSigner: false,
          name: "sellerReferral"
        },
        {
          isMut: true,
          isSigner: false,
          name: "ocpMintState"
        },
        {
          isMut: false,
          isSigner: false,
          name: "ocpPolicy"
        },
        {
          isMut: false,
          isSigner: false,
          name: "ocpFreezeAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "ocpProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "cmtProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "instructions"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        }
      ],
      args: [
        {
          name: "args",
          type: {
            defined: "OCPSellArgs"
          }
        }
      ],
      name: "ocpSell"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "wallet"
        },
        {
          isMut: false,
          isSigner: true,
          name: "notary"
        },
        {
          isMut: false,
          isSigner: false,
          name: "programAsSigner"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenAta"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMint"
        },
        {
          isMut: false,
          isSigner: false,
          name: "metadata"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "sellerTradeState"
        },
        {
          isMut: true,
          isSigner: false,
          name: "ocpMintState"
        },
        {
          isMut: false,
          isSigner: false,
          name: "ocpPolicy"
        },
        {
          isMut: false,
          isSigner: false,
          name: "ocpFreezeAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "ocpProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "cmtProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "instructions"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        }
      ],
      args: [],
      name: "ocpCancelSell"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: true,
          name: "payer"
        },
        {
          isMut: true,
          isSigner: false,
          name: "buyer"
        },
        {
          isMut: true,
          isSigner: false,
          name: "seller"
        },
        {
          isMut: false,
          isSigner: false,
          name: "notary"
        },
        {
          isMut: false,
          isSigner: false,
          name: "programAsSigner"
        },
        {
          isMut: true,
          isSigner: false,
          name: "sellerTokenAta"
        },
        {
          isMut: true,
          isSigner: false,
          name: "buyerTokenAta"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMint"
        },
        {
          isMut: false,
          isSigner: false,
          name: "metadata"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouseTreasury"
        },
        {
          isMut: true,
          isSigner: false,
          name: "sellerTradeState"
        },
        {
          isMut: true,
          isSigner: false,
          name: "buyerTradeState"
        },
        {
          isMut: true,
          isSigner: false,
          name: "buyerEscrowPaymentAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "buyerReferral"
        },
        {
          isMut: true,
          isSigner: false,
          name: "sellerReferral"
        },
        {
          isMut: true,
          isSigner: false,
          name: "ocpMintState"
        },
        {
          isMut: false,
          isSigner: false,
          name: "ocpPolicy"
        },
        {
          isMut: false,
          isSigner: false,
          name: "ocpFreezeAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "ocpProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "cmtProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "instructions"
        },
        {
          isMut: false,
          isSigner: false,
          name: "associatedTokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        }
      ],
      args: [
        {
          name: "args",
          type: {
            defined: "OCPExecuteSaleV2Args"
          }
        }
      ],
      name: "ocpExecuteSaleV2"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "buyer"
        },
        {
          isMut: true,
          isSigner: false,
          name: "seller"
        },
        {
          isMut: false,
          isSigner: false,
          name: "notary"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMint"
        },
        {
          isMut: false,
          isSigner: false,
          name: "metadata"
        },
        {
          isMut: true,
          isSigner: false,
          name: "escrowPaymentAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "buyerReceiptTokenAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouseTreasury"
        },
        {
          isMut: true,
          isSigner: false,
          name: "buyerTradeState"
        },
        {
          isMut: true,
          isSigner: false,
          name: "buyerReferral"
        },
        {
          isMut: true,
          isSigner: false,
          name: "sellerTradeState"
        },
        {
          isMut: true,
          isSigner: false,
          name: "sellerReferral"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "ataProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "programAsSigner"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        }
      ],
      args: [
        {
          name: "escrowPaymentBump",
          type: "u8"
        },
        {
          name: "programAsSignerBump",
          type: "u8"
        },
        {
          name: "buyerPrice",
          type: "u64"
        },
        {
          name: "tokenSize",
          type: "u64"
        },
        {
          name: "buyerStateExpiry",
          type: "i64"
        },
        {
          name: "sellerStateExpiry",
          type: "i64"
        },
        {
          name: "makerFeeBp",
          type: "i16"
        },
        {
          name: "takerFeeBp",
          type: "u16"
        }
      ],
      name: "executeSaleV2"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: true,
          name: "wallet"
        },
        {
          isMut: false,
          isSigner: false,
          name: "notary"
        },
        {
          isMut: false,
          isSigner: false,
          name: "programAsSigner"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMint"
        },
        {
          isMut: true,
          isSigner: false,
          name: "metadata"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "sellerTradeState"
        },
        {
          isMut: true,
          isSigner: false,
          name: "migrationSellerTradeState"
        },
        {
          isMut: false,
          isSigner: false,
          name: "sellerReferral"
        },
        {
          docs: [
            "escrow mode for init sell:        we transfer from token_account to token_ata",
            "escrow mode for change price:     token_account is the same as token_ata",
            "migration mode for change price:  token_ata is not used, because we only need token_account which is owned by program_as_signer"
          ],
          isMut: true,
          isSigner: false,
          name: "tokenAta"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMetadataProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "edition"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authorizationRulesProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authorizationRules"
        },
        {
          isMut: false,
          isSigner: false,
          name: "instructions"
        },
        {
          isMut: true,
          isSigner: false,
          name: "ownerTokenRecord"
        },
        {
          isMut: true,
          isSigner: false,
          name: "destinationTokenRecord"
        },
        {
          isMut: false,
          isSigner: false,
          name: "associatedTokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        }
      ],
      args: [
        {
          name: "args",
          type: {
            defined: "MIP1SellArgs"
          }
        }
      ],
      name: "mip1Sell"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: true,
          name: "payer"
        },
        {
          isMut: true,
          isSigner: false,
          name: "buyer"
        },
        {
          isMut: true,
          isSigner: false,
          name: "seller"
        },
        {
          isMut: false,
          isSigner: false,
          name: "notary"
        },
        {
          isMut: false,
          isSigner: false,
          name: "programAsSigner"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "buyerReceiptTokenAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMint"
        },
        {
          isMut: true,
          isSigner: false,
          name: "metadata"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouseTreasury"
        },
        {
          isMut: true,
          isSigner: false,
          name: "sellerTradeState"
        },
        {
          isMut: true,
          isSigner: false,
          name: "buyerTradeState"
        },
        {
          isMut: true,
          isSigner: false,
          name: "buyerEscrowPaymentAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "buyerReferral"
        },
        {
          isMut: true,
          isSigner: false,
          name: "sellerReferral"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMetadataProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "edition"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authorizationRulesProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authorizationRules"
        },
        {
          isMut: true,
          isSigner: false,
          name: "ownerTokenRecord"
        },
        {
          isMut: true,
          isSigner: false,
          name: "destinationTokenRecord"
        },
        {
          isMut: false,
          isSigner: false,
          name: "instructions"
        },
        {
          isMut: false,
          isSigner: false,
          name: "associatedTokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        }
      ],
      args: [
        {
          name: "args",
          type: {
            defined: "MIP1ExecuteSaleV2Args"
          }
        }
      ],
      name: "mip1ExecuteSaleV2"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: true,
          name: "wallet"
        },
        {
          isMut: false,
          isSigner: true,
          name: "notary"
        },
        {
          isMut: false,
          isSigner: false,
          name: "programAsSigner"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenAta"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMint"
        },
        {
          isMut: true,
          isSigner: false,
          name: "metadata"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "sellerTradeState"
        },
        {
          docs: ["should always be ATA of (mint, wallet)"],
          isMut: true,
          isSigner: false,
          name: "tokenAccount"
        },
        {
          docs: ["should always be ATA of (mint, program_as_signer)"],
          isMut: true,
          isSigner: false,
          name: "tokenAccountTemp"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tempTokenRecord"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMetadataProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "edition"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authorizationRulesProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authorizationRules"
        },
        {
          isMut: true,
          isSigner: false,
          name: "ownerTokenRecord"
        },
        {
          isMut: true,
          isSigner: false,
          name: "destinationTokenRecord"
        },
        {
          isMut: false,
          isSigner: false,
          name: "instructions"
        },
        {
          isMut: false,
          isSigner: false,
          name: "associatedTokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        }
      ],
      args: [],
      name: "mip1CancelSell"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: true,
          name: "mmmPool"
        },
        {
          isMut: true,
          isSigner: false,
          name: "to"
        },
        {
          isMut: true,
          isSigner: false,
          name: "escrowPaymentAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        }
      ],
      args: [
        {
          name: "args",
          type: {
            defined: "WithdrawByMMMArgs"
          }
        }
      ],
      name: "withdrawByMmm"
    }
  ],
  name: "m2",
  types: [
    {
      name: "WithdrawByMMMArgs",
      type: {
        fields: [
          {
            name: "wallet",
            type: "publicKey"
          },
          {
            name: "auctionHouse",
            type: "publicKey"
          },
          {
            name: "amount",
            type: "u64"
          },
          {
            name: "mmmPoolUuid",
            type: "publicKey"
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "MIP1ExecuteSaleV2Args",
      type: {
        fields: [
          {
            name: "price",
            type: "u64"
          },
          {
            name: "makerFeeBp",
            type: "i16"
          },
          {
            name: "takerFeeBp",
            type: "u16"
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "MIP1SellArgs",
      type: {
        fields: [
          {
            name: "price",
            type: "u64"
          },
          {
            name: "expiry",
            type: "i64"
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "OCPExecuteSaleV2Args",
      type: {
        fields: [
          {
            name: "price",
            type: "u64"
          },
          {
            name: "makerFeeBp",
            type: "i16"
          },
          {
            name: "takerFeeBp",
            type: "u16"
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "OCPSellArgs",
      type: {
        fields: [
          {
            name: "price",
            type: "u64"
          },
          {
            name: "expiry",
            type: "i64"
          }
        ],
        kind: "struct"
      }
    }
  ],
  version: "0.1.0"
};

// idl/tensor.json
var tensor_default = {
  accounts: [
    {
      name: "MarginAccount",
      type: {
        fields: [
          {
            name: "owner",
            type: "publicKey"
          },
          {
            name: "name",
            type: {
              array: ["u8", 32]
            }
          },
          {
            name: "nr",
            type: "u16"
          },
          {
            name: "bump",
            type: {
              array: ["u8", 1]
            }
          },
          {
            name: "poolsAttached",
            type: "u32"
          },
          {
            name: "reserved",
            type: {
              array: ["u8", 64]
            }
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "TSwap",
      type: {
        fields: [
          {
            name: "version",
            type: "u8"
          },
          {
            name: "bump",
            type: {
              array: ["u8", 1]
            }
          },
          {
            docs: ["@DEPRECATED, use constant above instead"],
            name: "config",
            type: {
              defined: "TSwapConfig"
            }
          },
          {
            name: "owner",
            type: "publicKey"
          },
          {
            name: "feeVault",
            type: "publicKey"
          },
          {
            name: "cosigner",
            type: "publicKey"
          }
        ],
        kind: "struct"
      }
    }
  ],
  constants: [
    {
      name: "CURRENT_TSWAP_VERSION",
      type: "u8",
      value: "1"
    },
    {
      name: "MARGIN_SIZE",
      type: {
        defined: "usize"
      },
      value: "8 + 32 + 32 + 2 + 1 + 4 + 64"
    },
    {
      name: "TSWAP_SIZE",
      type: {
        defined: "usize"
      },
      value: "8 + 1 + 1 + 2 + 32 * 3"
    }
  ],
  errors: [
    {
      code: 6016,
      msg: "bad owner",
      name: "BadOwner"
    },
    {
      code: 6027,
      msg: "bad margin account passed",
      name: "BadMargin"
    }
  ],
  instructions: [
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "tswap"
        },
        {
          isMut: false,
          isSigner: false,
          name: "feeVault"
        },
        {
          docs: [
            "We ask also for a signature just to make sure this wallet can actually sign things"
          ],
          isMut: false,
          isSigner: true,
          name: "cosigner"
        },
        {
          isMut: true,
          isSigner: true,
          name: "owner"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: true,
          name: "newOwner"
        }
      ],
      args: [
        {
          name: "config",
          type: {
            defined: "TSwapConfig"
          }
        }
      ],
      name: "initUpdateTswap"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "tswap"
        },
        {
          isMut: true,
          isSigner: false,
          name: "marginAccount"
        },
        {
          isMut: true,
          isSigner: true,
          name: "owner"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        }
      ],
      args: [
        {
          name: "marginNr",
          type: "u16"
        },
        {
          name: "name",
          type: {
            array: ["u8", 32]
          }
        }
      ],
      name: "initMarginAccount"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "tswap"
        },
        {
          isMut: true,
          isSigner: false,
          name: "marginAccount"
        },
        {
          isMut: true,
          isSigner: true,
          name: "owner"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        }
      ],
      args: [],
      name: "closeMarginAccount"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "tswap"
        },
        {
          isMut: true,
          isSigner: false,
          name: "marginAccount"
        },
        {
          isMut: true,
          isSigner: true,
          name: "owner"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        }
      ],
      args: [
        {
          name: "lamports",
          type: "u64"
        }
      ],
      name: "depositMarginAccount"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "tswap"
        },
        {
          isMut: true,
          isSigner: false,
          name: "marginAccount"
        },
        {
          isMut: true,
          isSigner: true,
          name: "owner"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        }
      ],
      args: [
        {
          name: "lamports",
          type: "u64"
        }
      ],
      name: "withdrawMarginAccount"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "marginAccount"
        },
        {
          isMut: false,
          isSigner: true,
          name: "pool"
        },
        {
          isMut: false,
          isSigner: false,
          name: "owner"
        },
        {
          isMut: true,
          isSigner: false,
          name: "destination"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        }
      ],
      args: [
        {
          name: "bump",
          type: "u8"
        },
        {
          name: "poolId",
          type: {
            array: ["u8", 32]
          }
        },
        {
          name: "lamports",
          type: "u64"
        }
      ],
      name: "withdrawMarginAccountCpiTamm"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "marginAccount"
        },
        {
          isMut: false,
          isSigner: true,
          name: "bidState"
        },
        {
          isMut: false,
          isSigner: false,
          name: "owner"
        },
        {
          isMut: true,
          isSigner: false,
          name: "destination"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        }
      ],
      args: [
        {
          name: "bump",
          type: "u8"
        },
        {
          name: "bidId",
          type: "publicKey"
        },
        {
          name: "lamports",
          type: "u64"
        }
      ],
      name: "withdrawMarginAccountCpiTcomp"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "tswap"
        },
        {
          docs: [
            "We ask also for a signature just to make sure this wallet can actually sign things"
          ],
          isMut: false,
          isSigner: true,
          name: "cosigner"
        },
        {
          isMut: true,
          isSigner: true,
          name: "owner"
        },
        {
          isMut: true,
          isSigner: false,
          name: "destination"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        }
      ],
      args: [
        {
          name: "lamports",
          type: "u64"
        }
      ],
      name: "withdrawTswapFees"
    }
  ],
  name: "escrow_program",
  types: [
    {
      name: "TSwapConfig",
      type: {
        fields: [
          {
            name: "feeBps",
            type: "u16"
          }
        ],
        kind: "struct"
      }
    }
  ],
  version: "1.0.0-beta.1"
};

// idl/metaplex-auction-house.json
var metaplex_auction_house_default = {
  accounts: [
    {
      name: "BidReceipt",
      type: {
        fields: [
          {
            name: "tradeState",
            type: "publicKey"
          },
          {
            name: "bookkeeper",
            type: "publicKey"
          },
          {
            name: "auctionHouse",
            type: "publicKey"
          },
          {
            name: "buyer",
            type: "publicKey"
          },
          {
            name: "metadata",
            type: "publicKey"
          },
          {
            name: "tokenAccount",
            type: {
              option: "publicKey"
            }
          },
          {
            name: "purchaseReceipt",
            type: {
              option: "publicKey"
            }
          },
          {
            name: "price",
            type: "u64"
          },
          {
            name: "tokenSize",
            type: "u64"
          },
          {
            name: "bump",
            type: "u8"
          },
          {
            name: "tradeStateBump",
            type: "u8"
          },
          {
            name: "createdAt",
            type: "i64"
          },
          {
            name: "canceledAt",
            type: {
              option: "i64"
            }
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "ListingReceipt",
      type: {
        fields: [
          {
            name: "tradeState",
            type: "publicKey"
          },
          {
            name: "bookkeeper",
            type: "publicKey"
          },
          {
            name: "auctionHouse",
            type: "publicKey"
          },
          {
            name: "seller",
            type: "publicKey"
          },
          {
            name: "metadata",
            type: "publicKey"
          },
          {
            name: "purchaseReceipt",
            type: {
              option: "publicKey"
            }
          },
          {
            name: "price",
            type: "u64"
          },
          {
            name: "tokenSize",
            type: "u64"
          },
          {
            name: "bump",
            type: "u8"
          },
          {
            name: "tradeStateBump",
            type: "u8"
          },
          {
            name: "createdAt",
            type: "i64"
          },
          {
            name: "canceledAt",
            type: {
              option: "i64"
            }
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "PurchaseReceipt",
      type: {
        fields: [
          {
            name: "bookkeeper",
            type: "publicKey"
          },
          {
            name: "buyer",
            type: "publicKey"
          },
          {
            name: "seller",
            type: "publicKey"
          },
          {
            name: "auctionHouse",
            type: "publicKey"
          },
          {
            name: "metadata",
            type: "publicKey"
          },
          {
            name: "tokenSize",
            type: "u64"
          },
          {
            name: "price",
            type: "u64"
          },
          {
            name: "bump",
            type: "u8"
          },
          {
            name: "createdAt",
            type: "i64"
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "AuctionHouse",
      type: {
        fields: [
          {
            name: "auctionHouseFeeAccount",
            type: "publicKey"
          },
          {
            name: "auctionHouseTreasury",
            type: "publicKey"
          },
          {
            name: "treasuryWithdrawalDestination",
            type: "publicKey"
          },
          {
            name: "feeWithdrawalDestination",
            type: "publicKey"
          },
          {
            name: "treasuryMint",
            type: "publicKey"
          },
          {
            name: "authority",
            type: "publicKey"
          },
          {
            name: "creator",
            type: "publicKey"
          },
          {
            name: "bump",
            type: "u8"
          },
          {
            name: "treasuryBump",
            type: "u8"
          },
          {
            name: "feePayerBump",
            type: "u8"
          },
          {
            name: "sellerFeeBasisPoints",
            type: "u16"
          },
          {
            name: "requiresSignOff",
            type: "bool"
          },
          {
            name: "canChangeSalePrice",
            type: "bool"
          },
          {
            name: "escrowPaymentBump",
            type: "u8"
          },
          {
            name: "hasAuctioneer",
            type: "bool"
          },
          {
            name: "auctioneerAddress",
            type: "publicKey"
          },
          {
            name: "scopes",
            type: {
              array: ["bool", 7]
            }
          }
        ],
        kind: "struct"
      }
    },
    {
      name: "Auctioneer",
      type: {
        fields: [
          {
            name: "auctioneerAuthority",
            type: "publicKey"
          },
          {
            name: "auctionHouse",
            type: "publicKey"
          },
          {
            name: "bump",
            type: "u8"
          }
        ],
        kind: "struct"
      }
    }
  ],
  errors: [
    {
      code: 6e3,
      msg: "PublicKeyMismatch",
      name: "PublicKeyMismatch"
    },
    {
      code: 6001,
      msg: "InvalidMintAuthority",
      name: "InvalidMintAuthority"
    },
    {
      code: 6002,
      msg: "UninitializedAccount",
      name: "UninitializedAccount"
    },
    {
      code: 6003,
      msg: "IncorrectOwner",
      name: "IncorrectOwner"
    },
    {
      code: 6004,
      msg: "PublicKeysShouldBeUnique",
      name: "PublicKeysShouldBeUnique"
    },
    {
      code: 6005,
      msg: "StatementFalse",
      name: "StatementFalse"
    },
    {
      code: 6006,
      msg: "NotRentExempt",
      name: "NotRentExempt"
    },
    {
      code: 6007,
      msg: "NumericalOverflow",
      name: "NumericalOverflow"
    },
    {
      code: 6008,
      msg: "Expected a sol account but got an spl token account instead",
      name: "ExpectedSolAccount"
    },
    {
      code: 6009,
      msg: "Cannot exchange sol for sol",
      name: "CannotExchangeSOLForSol"
    },
    {
      code: 6010,
      msg: "If paying with sol, sol wallet must be signer",
      name: "SOLWalletMustSign"
    },
    {
      code: 6011,
      msg: "Cannot take this action without auction house signing too",
      name: "CannotTakeThisActionWithoutAuctionHouseSignOff"
    },
    {
      code: 6012,
      msg: "No payer present on this txn",
      name: "NoPayerPresent"
    },
    {
      code: 6013,
      msg: "Derived key invalid",
      name: "DerivedKeyInvalid"
    },
    {
      code: 6014,
      msg: "Metadata doesn't exist",
      name: "MetadataDoesntExist"
    },
    {
      code: 6015,
      msg: "Invalid token amount",
      name: "InvalidTokenAmount"
    },
    {
      code: 6016,
      msg: "Both parties need to agree to this sale",
      name: "BothPartiesNeedToAgreeToSale"
    },
    {
      code: 6017,
      msg: "Cannot match free sales unless the auction house or seller signs off",
      name: "CannotMatchFreeSalesWithoutAuctionHouseOrSellerSignoff"
    },
    {
      code: 6018,
      msg: "This sale requires a signer",
      name: "SaleRequiresSigner"
    },
    {
      code: 6019,
      msg: "Old seller not initialized",
      name: "OldSellerNotInitialized"
    },
    {
      code: 6020,
      msg: "Seller ata cannot have a delegate set",
      name: "SellerATACannotHaveDelegate"
    },
    {
      code: 6021,
      msg: "Buyer ata cannot have a delegate set",
      name: "BuyerATACannotHaveDelegate"
    },
    {
      code: 6022,
      msg: "No valid signer present",
      name: "NoValidSignerPresent"
    },
    {
      code: 6023,
      msg: "BP must be less than or equal to 10000",
      name: "InvalidBasisPoints"
    },
    {
      code: 6024,
      msg: "The trade state account does not exist",
      name: "TradeStateDoesntExist"
    },
    {
      code: 6025,
      msg: "The trade state is not empty",
      name: "TradeStateIsNotEmpty"
    },
    {
      code: 6026,
      msg: "The receipt is empty",
      name: "ReceiptIsEmpty"
    },
    {
      code: 6027,
      msg: "The instruction does not match",
      name: "InstructionMismatch"
    },
    {
      code: 6028,
      msg: "Invalid Auctioneer for this Auction House instance.",
      name: "InvalidAuctioneer"
    },
    {
      code: 6029,
      msg: "The Auctioneer does not have the correct scope for this action.",
      name: "MissingAuctioneerScope"
    },
    {
      code: 6030,
      msg: "Must use auctioneer handler.",
      name: "MustUseAuctioneerHandler"
    },
    {
      code: 6031,
      msg: "No Auctioneer program set.",
      name: "NoAuctioneerProgramSet"
    },
    {
      code: 6032,
      msg: "Too many scopes.",
      name: "TooManyScopes"
    },
    {
      code: 6033,
      msg: "Auction House not delegated.",
      name: "AuctionHouseNotDelegated"
    },
    {
      code: 6034,
      msg: "Bump seed not in hash map.",
      name: "BumpSeedNotInHashMap"
    },
    {
      code: 6035,
      msg: "The instruction would drain the escrow below rent exemption threshold",
      name: "EscrowUnderRentExemption"
    },
    {
      code: 6036,
      msg: "Invalid seeds or Auction House not delegated",
      name: "InvalidSeedsOrAuctionHouseNotDelegated"
    },
    {
      code: 6037,
      msg: "The buyer trade state was unable to be initialized.",
      name: "BuyerTradeStateNotValid"
    },
    {
      code: 6038,
      msg: "Partial order size and price must both be provided in a partial buy.",
      name: "MissingElementForPartialOrder"
    },
    {
      code: 6039,
      msg: "Amount of tokens available for purchase is less than the partial order amount.",
      name: "NotEnoughTokensAvailableForPurchase"
    },
    {
      code: 6040,
      msg: "Calculated partial price does not not partial price that was provided.",
      name: "PartialPriceMismatch"
    },
    {
      code: 6041,
      msg: "Auction House already delegated.",
      name: "AuctionHouseAlreadyDelegated"
    },
    {
      code: 6042,
      msg: "Auctioneer Authority Mismatch",
      name: "AuctioneerAuthorityMismatch"
    },
    {
      code: 6043,
      msg: "Insufficient funds in escrow account to purchase.",
      name: "InsufficientFunds"
    }
  ],
  instructions: [
    {
      accounts: [
        {
          isMut: false,
          isSigner: true,
          name: "authority"
        },
        {
          isMut: true,
          isSigner: false,
          name: "feeWithdrawalDestination"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouseFeeAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        }
      ],
      args: [
        {
          name: "amount",
          type: "u64"
        }
      ],
      name: "withdrawFromFee"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "treasuryMint"
        },
        {
          isMut: false,
          isSigner: true,
          name: "authority"
        },
        {
          isMut: true,
          isSigner: false,
          name: "treasuryWithdrawalDestination"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouseTreasury"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        }
      ],
      args: [
        {
          name: "amount",
          type: "u64"
        }
      ],
      name: "withdrawFromTreasury"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "treasuryMint"
        },
        {
          isMut: false,
          isSigner: true,
          name: "payer"
        },
        {
          isMut: false,
          isSigner: true,
          name: "authority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "newAuthority"
        },
        {
          isMut: true,
          isSigner: false,
          name: "feeWithdrawalDestination"
        },
        {
          isMut: true,
          isSigner: false,
          name: "treasuryWithdrawalDestination"
        },
        {
          isMut: false,
          isSigner: false,
          name: "treasuryWithdrawalDestinationOwner"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "ataProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        }
      ],
      args: [
        {
          name: "sellerFeeBasisPoints",
          type: {
            option: "u16"
          }
        },
        {
          name: "requiresSignOff",
          type: {
            option: "bool"
          }
        },
        {
          name: "canChangeSalePrice",
          type: {
            option: "bool"
          }
        }
      ],
      name: "updateAuctionHouse"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "treasuryMint"
        },
        {
          isMut: true,
          isSigner: true,
          name: "payer"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authority"
        },
        {
          isMut: true,
          isSigner: false,
          name: "feeWithdrawalDestination"
        },
        {
          isMut: true,
          isSigner: false,
          name: "treasuryWithdrawalDestination"
        },
        {
          isMut: false,
          isSigner: false,
          name: "treasuryWithdrawalDestinationOwner"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouseFeeAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouseTreasury"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "ataProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        }
      ],
      args: [
        {
          name: "bump",
          type: "u8"
        },
        {
          name: "feePayerBump",
          type: "u8"
        },
        {
          name: "treasuryBump",
          type: "u8"
        },
        {
          name: "sellerFeeBasisPoints",
          type: "u16"
        },
        {
          name: "requiresSignOff",
          type: "bool"
        },
        {
          name: "canChangeSalePrice",
          type: "bool"
        }
      ],
      name: "createAuctionHouse"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: true,
          name: "wallet"
        },
        {
          isMut: true,
          isSigner: false,
          name: "paymentAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "transferAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "treasuryMint"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "metadata"
        },
        {
          isMut: true,
          isSigner: false,
          name: "escrowPaymentAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouseFeeAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "buyerTradeState"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        }
      ],
      args: [
        {
          name: "tradeStateBump",
          type: "u8"
        },
        {
          name: "escrowPaymentBump",
          type: "u8"
        },
        {
          name: "buyerPrice",
          type: "u64"
        },
        {
          name: "tokenSize",
          type: "u64"
        }
      ],
      name: "buy"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: true,
          name: "wallet"
        },
        {
          isMut: true,
          isSigner: false,
          name: "paymentAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "transferAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "treasuryMint"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "metadata"
        },
        {
          isMut: true,
          isSigner: false,
          name: "escrowPaymentAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authority"
        },
        {
          isMut: false,
          isSigner: true,
          name: "auctioneerAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouseFeeAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "buyerTradeState"
        },
        {
          isMut: false,
          isSigner: false,
          name: "ahAuctioneerPda"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        }
      ],
      args: [
        {
          name: "tradeStateBump",
          type: "u8"
        },
        {
          name: "escrowPaymentBump",
          type: "u8"
        },
        {
          name: "buyerPrice",
          type: "u64"
        },
        {
          name: "tokenSize",
          type: "u64"
        }
      ],
      name: "auctioneerBuy"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: true,
          name: "wallet"
        },
        {
          isMut: true,
          isSigner: false,
          name: "paymentAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "transferAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "treasuryMint"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "metadata"
        },
        {
          isMut: true,
          isSigner: false,
          name: "escrowPaymentAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouseFeeAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "buyerTradeState"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        }
      ],
      args: [
        {
          name: "tradeStateBump",
          type: "u8"
        },
        {
          name: "escrowPaymentBump",
          type: "u8"
        },
        {
          name: "buyerPrice",
          type: "u64"
        },
        {
          name: "tokenSize",
          type: "u64"
        }
      ],
      name: "publicBuy"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: true,
          name: "wallet"
        },
        {
          isMut: true,
          isSigner: false,
          name: "paymentAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "transferAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "treasuryMint"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "metadata"
        },
        {
          isMut: true,
          isSigner: false,
          name: "escrowPaymentAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authority"
        },
        {
          isMut: false,
          isSigner: true,
          name: "auctioneerAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouseFeeAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "buyerTradeState"
        },
        {
          isMut: false,
          isSigner: false,
          name: "ahAuctioneerPda"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        }
      ],
      args: [
        {
          name: "tradeStateBump",
          type: "u8"
        },
        {
          name: "escrowPaymentBump",
          type: "u8"
        },
        {
          name: "buyerPrice",
          type: "u64"
        },
        {
          name: "tokenSize",
          type: "u64"
        }
      ],
      name: "auctioneerPublicBuy"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "wallet"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMint"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouseFeeAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tradeState"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        }
      ],
      args: [
        {
          name: "buyerPrice",
          type: "u64"
        },
        {
          name: "tokenSize",
          type: "u64"
        }
      ],
      name: "cancel"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "wallet"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMint"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authority"
        },
        {
          isMut: false,
          isSigner: true,
          name: "auctioneerAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouseFeeAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tradeState"
        },
        {
          isMut: false,
          isSigner: false,
          name: "ahAuctioneerPda"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        }
      ],
      args: [
        {
          name: "buyerPrice",
          type: "u64"
        },
        {
          name: "tokenSize",
          type: "u64"
        }
      ],
      name: "auctioneerCancel"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: true,
          name: "wallet"
        },
        {
          isMut: true,
          isSigner: false,
          name: "paymentAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "transferAuthority"
        },
        {
          isMut: true,
          isSigner: false,
          name: "escrowPaymentAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "treasuryMint"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouseFeeAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        }
      ],
      args: [
        {
          name: "escrowPaymentBump",
          type: "u8"
        },
        {
          name: "amount",
          type: "u64"
        }
      ],
      name: "deposit"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: true,
          name: "wallet"
        },
        {
          isMut: true,
          isSigner: false,
          name: "paymentAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "transferAuthority"
        },
        {
          isMut: true,
          isSigner: false,
          name: "escrowPaymentAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "treasuryMint"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authority"
        },
        {
          isMut: false,
          isSigner: true,
          name: "auctioneerAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouseFeeAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "ahAuctioneerPda"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        }
      ],
      args: [
        {
          name: "escrowPaymentBump",
          type: "u8"
        },
        {
          name: "amount",
          type: "u64"
        }
      ],
      name: "auctioneerDeposit"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "buyer"
        },
        {
          isMut: true,
          isSigner: false,
          name: "seller"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMint"
        },
        {
          isMut: false,
          isSigner: false,
          name: "metadata"
        },
        {
          isMut: false,
          isSigner: false,
          name: "treasuryMint"
        },
        {
          isMut: true,
          isSigner: false,
          name: "escrowPaymentAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "sellerPaymentReceiptAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "buyerReceiptTokenAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouseFeeAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouseTreasury"
        },
        {
          isMut: true,
          isSigner: false,
          name: "buyerTradeState"
        },
        {
          isMut: true,
          isSigner: false,
          name: "sellerTradeState"
        },
        {
          isMut: true,
          isSigner: false,
          name: "freeTradeState"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "ataProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "programAsSigner"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        }
      ],
      args: [
        {
          name: "escrowPaymentBump",
          type: "u8"
        },
        {
          name: "freeTradeStateBump",
          type: "u8"
        },
        {
          name: "programAsSignerBump",
          type: "u8"
        },
        {
          name: "buyerPrice",
          type: "u64"
        },
        {
          name: "tokenSize",
          type: "u64"
        }
      ],
      name: "executeSale"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "buyer"
        },
        {
          isMut: true,
          isSigner: false,
          name: "seller"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMint"
        },
        {
          isMut: false,
          isSigner: false,
          name: "metadata"
        },
        {
          isMut: false,
          isSigner: false,
          name: "treasuryMint"
        },
        {
          isMut: true,
          isSigner: false,
          name: "escrowPaymentAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "sellerPaymentReceiptAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "buyerReceiptTokenAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouseFeeAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouseTreasury"
        },
        {
          isMut: true,
          isSigner: false,
          name: "buyerTradeState"
        },
        {
          isMut: true,
          isSigner: false,
          name: "sellerTradeState"
        },
        {
          isMut: true,
          isSigner: false,
          name: "freeTradeState"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "ataProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "programAsSigner"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        }
      ],
      args: [
        {
          name: "escrowPaymentBump",
          type: "u8"
        },
        {
          name: "freeTradeStateBump",
          type: "u8"
        },
        {
          name: "programAsSignerBump",
          type: "u8"
        },
        {
          name: "buyerPrice",
          type: "u64"
        },
        {
          name: "tokenSize",
          type: "u64"
        },
        {
          name: "partialOrderSize",
          type: {
            option: "u64"
          }
        },
        {
          name: "partialOrderPrice",
          type: {
            option: "u64"
          }
        }
      ],
      name: "executePartialSale"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "buyer"
        },
        {
          isMut: true,
          isSigner: false,
          name: "seller"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMint"
        },
        {
          isMut: false,
          isSigner: false,
          name: "metadata"
        },
        {
          isMut: false,
          isSigner: false,
          name: "treasuryMint"
        },
        {
          isMut: true,
          isSigner: false,
          name: "escrowPaymentAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "sellerPaymentReceiptAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "buyerReceiptTokenAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authority"
        },
        {
          isMut: false,
          isSigner: true,
          name: "auctioneerAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouseFeeAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouseTreasury"
        },
        {
          isMut: true,
          isSigner: false,
          name: "buyerTradeState"
        },
        {
          isMut: true,
          isSigner: false,
          name: "sellerTradeState"
        },
        {
          isMut: true,
          isSigner: false,
          name: "freeTradeState"
        },
        {
          isMut: false,
          isSigner: false,
          name: "ahAuctioneerPda"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "ataProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "programAsSigner"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        }
      ],
      args: [
        {
          name: "escrowPaymentBump",
          type: "u8"
        },
        {
          name: "freeTradeStateBump",
          type: "u8"
        },
        {
          name: "programAsSignerBump",
          type: "u8"
        },
        {
          name: "buyerPrice",
          type: "u64"
        },
        {
          name: "tokenSize",
          type: "u64"
        }
      ],
      name: "auctioneerExecuteSale"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "buyer"
        },
        {
          isMut: true,
          isSigner: false,
          name: "seller"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenMint"
        },
        {
          isMut: false,
          isSigner: false,
          name: "metadata"
        },
        {
          isMut: false,
          isSigner: false,
          name: "treasuryMint"
        },
        {
          isMut: true,
          isSigner: false,
          name: "escrowPaymentAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "sellerPaymentReceiptAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "buyerReceiptTokenAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authority"
        },
        {
          isMut: false,
          isSigner: true,
          name: "auctioneerAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouseFeeAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouseTreasury"
        },
        {
          isMut: true,
          isSigner: false,
          name: "buyerTradeState"
        },
        {
          isMut: true,
          isSigner: false,
          name: "sellerTradeState"
        },
        {
          isMut: true,
          isSigner: false,
          name: "freeTradeState"
        },
        {
          isMut: false,
          isSigner: false,
          name: "ahAuctioneerPda"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "ataProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "programAsSigner"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        }
      ],
      args: [
        {
          name: "escrowPaymentBump",
          type: "u8"
        },
        {
          name: "freeTradeStateBump",
          type: "u8"
        },
        {
          name: "programAsSignerBump",
          type: "u8"
        },
        {
          name: "buyerPrice",
          type: "u64"
        },
        {
          name: "tokenSize",
          type: "u64"
        },
        {
          name: "partialOrderSize",
          type: {
            option: "u64"
          }
        },
        {
          name: "partialOrderPrice",
          type: {
            option: "u64"
          }
        }
      ],
      name: "auctioneerExecutePartialSale"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "wallet"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "metadata"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouseFeeAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "sellerTradeState"
        },
        {
          isMut: true,
          isSigner: false,
          name: "freeSellerTradeState"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "programAsSigner"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        }
      ],
      args: [
        {
          name: "tradeStateBump",
          type: "u8"
        },
        {
          name: "freeTradeStateBump",
          type: "u8"
        },
        {
          name: "programAsSignerBump",
          type: "u8"
        },
        {
          name: "buyerPrice",
          type: "u64"
        },
        {
          name: "tokenSize",
          type: "u64"
        }
      ],
      name: "sell"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "wallet"
        },
        {
          isMut: true,
          isSigner: false,
          name: "tokenAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "metadata"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authority"
        },
        {
          isMut: false,
          isSigner: true,
          name: "auctioneerAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouseFeeAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "sellerTradeState"
        },
        {
          isMut: true,
          isSigner: false,
          name: "freeSellerTradeState"
        },
        {
          isMut: false,
          isSigner: false,
          name: "ahAuctioneerPda"
        },
        {
          isMut: false,
          isSigner: false,
          name: "programAsSigner"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        }
      ],
      args: [
        {
          name: "tradeStateBump",
          type: "u8"
        },
        {
          name: "freeTradeStateBump",
          type: "u8"
        },
        {
          name: "programAsSignerBump",
          type: "u8"
        },
        {
          name: "tokenSize",
          type: "u64"
        }
      ],
      name: "auctioneerSell"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "wallet"
        },
        {
          isMut: true,
          isSigner: false,
          name: "receiptAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "escrowPaymentAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "treasuryMint"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouseFeeAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "ataProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        }
      ],
      args: [
        {
          name: "escrowPaymentBump",
          type: "u8"
        },
        {
          name: "amount",
          type: "u64"
        }
      ],
      name: "withdraw"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: false,
          name: "wallet"
        },
        {
          isMut: true,
          isSigner: false,
          name: "receiptAccount"
        },
        {
          isMut: true,
          isSigner: false,
          name: "escrowPaymentAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "treasuryMint"
        },
        {
          isMut: false,
          isSigner: false,
          name: "authority"
        },
        {
          isMut: false,
          isSigner: true,
          name: "auctioneerAuthority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouseFeeAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "ahAuctioneerPda"
        },
        {
          isMut: false,
          isSigner: false,
          name: "tokenProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "ataProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        }
      ],
      args: [
        {
          name: "escrowPaymentBump",
          type: "u8"
        },
        {
          name: "amount",
          type: "u64"
        }
      ],
      name: "auctioneerWithdraw"
    },
    {
      accounts: [
        {
          isMut: false,
          isSigner: true,
          name: "wallet"
        },
        {
          isMut: true,
          isSigner: false,
          name: "escrowPaymentAccount"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        }
      ],
      args: [
        {
          name: "escrowPaymentBump",
          type: "u8"
        }
      ],
      name: "closeEscrowAccount"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: true,
          name: "authority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctioneerAuthority"
        },
        {
          isMut: true,
          isSigner: false,
          name: "ahAuctioneerPda"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        }
      ],
      args: [
        {
          name: "scopes",
          type: {
            vec: {
              defined: "AuthorityScope"
            }
          }
        }
      ],
      name: "delegateAuctioneer"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "auctionHouse"
        },
        {
          isMut: true,
          isSigner: true,
          name: "authority"
        },
        {
          isMut: false,
          isSigner: false,
          name: "auctioneerAuthority"
        },
        {
          isMut: true,
          isSigner: false,
          name: "ahAuctioneerPda"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        }
      ],
      args: [
        {
          name: "scopes",
          type: {
            vec: {
              defined: "AuthorityScope"
            }
          }
        }
      ],
      name: "updateAuctioneer"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "receipt"
        },
        {
          isMut: true,
          isSigner: true,
          name: "bookkeeper"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        },
        {
          isMut: false,
          isSigner: false,
          name: "instruction"
        }
      ],
      args: [
        {
          name: "receiptBump",
          type: "u8"
        }
      ],
      name: "printListingReceipt"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "receipt"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "instruction"
        }
      ],
      args: [],
      name: "cancelListingReceipt"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "receipt"
        },
        {
          isMut: true,
          isSigner: true,
          name: "bookkeeper"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        },
        {
          isMut: false,
          isSigner: false,
          name: "instruction"
        }
      ],
      args: [
        {
          name: "receiptBump",
          type: "u8"
        }
      ],
      name: "printBidReceipt"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "receipt"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "instruction"
        }
      ],
      args: [],
      name: "cancelBidReceipt"
    },
    {
      accounts: [
        {
          isMut: true,
          isSigner: false,
          name: "purchaseReceipt"
        },
        {
          isMut: true,
          isSigner: false,
          name: "listingReceipt"
        },
        {
          isMut: true,
          isSigner: false,
          name: "bidReceipt"
        },
        {
          isMut: true,
          isSigner: true,
          name: "bookkeeper"
        },
        {
          isMut: false,
          isSigner: false,
          name: "systemProgram"
        },
        {
          isMut: false,
          isSigner: false,
          name: "rent"
        },
        {
          isMut: false,
          isSigner: false,
          name: "instruction"
        }
      ],
      args: [
        {
          name: "purchaseReceiptBump",
          type: "u8"
        }
      ],
      name: "printPurchaseReceipt"
    }
  ],
  name: "auction_house",
  types: [
    {
      name: "AuthorityScope",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Deposit"
          },
          {
            name: "Buy"
          },
          {
            name: "PublicBuy"
          },
          {
            name: "ExecuteSale"
          },
          {
            name: "Sell"
          },
          {
            name: "Cancel"
          },
          {
            name: "Withdraw"
          }
        ]
      }
    },
    {
      name: "BidType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "PublicSale"
          },
          {
            name: "PrivateSale"
          },
          {
            name: "AuctioneerPublicSale"
          },
          {
            name: "AuctioneerPrivateSale"
          }
        ]
      }
    },
    {
      name: "ListingType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Sell"
          },
          {
            name: "AuctioneerSell"
          }
        ]
      }
    },
    {
      name: "PurchaseType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "ExecuteSale"
          },
          {
            name: "AuctioneerExecuteSale"
          }
        ]
      }
    },
    {
      name: "CancelType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Cancel"
          },
          {
            name: "AuctioneerCancel"
          }
        ]
      }
    }
  ],
  version: "1.4.1"
};

// idl/metaplex-token-metadata.json
var metaplex_token_metadata_default = {
  version: "1.14.0",
  name: "token_metadata",
  instructions: [
    {
      name: "CreateMetadataAccount",
      accounts: [
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata key (pda of ['metadata', program id, mint id])"
          ]
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false,
          docs: [
            "Mint of token asset"
          ]
        },
        {
          name: "mintAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "Mint authority"
          ]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: [
            "payer"
          ]
        },
        {
          name: "updateAuthority",
          isMut: false,
          isSigner: false,
          docs: [
            "update authority info"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false,
          docs: [
            "Rent info"
          ]
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 0
      }
    },
    {
      name: "UpdateMetadataAccount",
      accounts: [
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata account"
          ]
        },
        {
          name: "updateAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "Update authority key"
          ]
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 1
      }
    },
    {
      name: "DeprecatedCreateMasterEdition",
      accounts: [
        {
          name: "edition",
          isMut: true,
          isSigner: false,
          docs: [
            "Unallocated edition V1 account with address as pda of ['metadata', program id, mint, 'edition']"
          ]
        },
        {
          name: "mint",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata mint"
          ]
        },
        {
          name: "printingMint",
          isMut: true,
          isSigner: false,
          docs: [
            "Printing mint - A mint you control that can mint tokens that can be exchanged for limited editions of your master edition via the MintNewEditionFromMasterEditionViaToken endpoint"
          ]
        },
        {
          name: "oneTimePrintingAuthorizationMint",
          isMut: true,
          isSigner: false,
          docs: [
            "One time authorization printing mint - A mint you control that prints tokens that gives the bearer permission to mint any number of tokens from the printing mint one time via an endpoint with the token-metadata program for your metadata. Also burns the token."
          ]
        },
        {
          name: "updateAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "Current Update authority key"
          ]
        },
        {
          name: "printingMintAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "Printing mint authority - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY."
          ]
        },
        {
          name: "mintAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "Mint authority on the metadata's mint - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY"
          ]
        },
        {
          name: "metadata",
          isMut: false,
          isSigner: false,
          docs: [
            "Metadata account"
          ]
        },
        {
          name: "payer",
          isMut: false,
          isSigner: true,
          docs: [
            "payer"
          ]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Token program"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false,
          docs: [
            "Rent info"
          ]
        },
        {
          name: "oneTimePrintingAuthorizationMintAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "One time authorization printing mint authority - must be provided if using max supply. THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY."
          ]
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 2
      }
    },
    {
      name: "DeprecatedMintNewEditionFromMasterEditionViaPrintingToken",
      accounts: [
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "New Metadata key (pda of ['metadata', program id, mint id])"
          ]
        },
        {
          name: "edition",
          isMut: true,
          isSigner: false,
          docs: [
            "New Edition V1 (pda of ['metadata', program id, mint id, 'edition'])"
          ]
        },
        {
          name: "masterEdition",
          isMut: true,
          isSigner: false,
          docs: [
            "Master Record Edition V1 (pda of ['metadata', program id, master metadata mint id, 'edition'])"
          ]
        },
        {
          name: "mint",
          isMut: true,
          isSigner: false,
          docs: [
            "Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY"
          ]
        },
        {
          name: "mintAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "Mint authority of new mint"
          ]
        },
        {
          name: "printingMint",
          isMut: true,
          isSigner: false,
          docs: [
            "Printing Mint of master record edition"
          ]
        },
        {
          name: "masterTokenAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "Token account containing Printing mint token to be transferred"
          ]
        },
        {
          name: "editionMarker",
          isMut: true,
          isSigner: false,
          docs: [
            "Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master mint id, edition_number])"
          ]
        },
        {
          name: "burnAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "Burn authority for this token"
          ]
        },
        {
          name: "payer",
          isMut: false,
          isSigner: true,
          docs: [
            "payer"
          ]
        },
        {
          name: "masterUpdateAuthority",
          isMut: false,
          isSigner: false,
          docs: [
            "update authority info for new metadata account"
          ]
        },
        {
          name: "masterMetadata",
          isMut: false,
          isSigner: false,
          docs: [
            "Master record metadata account"
          ]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Token program"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false,
          docs: [
            "Rent info"
          ]
        },
        {
          name: "reservationList",
          isMut: true,
          isSigner: false,
          isOptional: true,
          docs: [
            "Reservation List - If present, and you are on this list, you can get an edition number given by your position on the list."
          ]
        }
      ],
      args: [],
      legacyOptionalAccountsStrategy: true,
      discriminant: {
        type: "u8",
        value: 3
      }
    },
    {
      name: "UpdatePrimarySaleHappenedViaToken",
      accounts: [
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata key (pda of ['metadata', program id, mint id])"
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true,
          docs: [
            "Owner on the token account"
          ]
        },
        {
          name: "token",
          isMut: false,
          isSigner: false,
          docs: [
            "Account containing tokens from the metadata's mint"
          ]
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 4
      }
    },
    {
      name: "DeprecatedSetReservationList",
      accounts: [
        {
          name: "masterEdition",
          isMut: true,
          isSigner: false,
          docs: [
            "Master Edition V1 key (pda of ['metadata', program id, mint id, 'edition'])"
          ]
        },
        {
          name: "reservationList",
          isMut: true,
          isSigner: false,
          docs: [
            "PDA for ReservationList of ['metadata', program id, master edition key, 'reservation', resource-key]"
          ]
        },
        {
          name: "resource",
          isMut: false,
          isSigner: true,
          docs: [
            "The resource you tied the reservation list too"
          ]
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 5
      }
    },
    {
      name: "DeprecatedCreateReservationList",
      accounts: [
        {
          name: "reservationList",
          isMut: true,
          isSigner: false,
          docs: [
            "PDA for ReservationList of ['metadata', program id, master edition key, 'reservation', resource-key]"
          ]
        },
        {
          name: "payer",
          isMut: false,
          isSigner: true,
          docs: [
            "Payer"
          ]
        },
        {
          name: "updateAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "Update authority"
          ]
        },
        {
          name: "masterEdition",
          isMut: false,
          isSigner: false,
          docs: [
            " Master Edition V1 key (pda of ['metadata', program id, mint id, 'edition'])"
          ]
        },
        {
          name: "resource",
          isMut: false,
          isSigner: false,
          docs: [
            "A resource you wish to tie the reservation list to. This is so your later visitors who come to redeem can derive your reservation list PDA with something they can easily get at. You choose what this should be."
          ]
        },
        {
          name: "metadata",
          isMut: false,
          isSigner: false,
          docs: [
            "Metadata key (pda of ['metadata', program id, mint id])"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false,
          docs: [
            "Rent info"
          ]
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 6
      }
    },
    {
      name: "SignMetadata",
      accounts: [
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata (pda of ['metadata', program id, mint id])"
          ]
        },
        {
          name: "creator",
          isMut: false,
          isSigner: true,
          docs: [
            "Creator"
          ]
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 7
      }
    },
    {
      name: "DeprecatedMintPrintingTokensViaToken",
      accounts: [
        {
          name: "destination",
          isMut: true,
          isSigner: false,
          docs: [
            "Destination account"
          ]
        },
        {
          name: "token",
          isMut: true,
          isSigner: false,
          docs: [
            "Token account containing one time authorization token"
          ]
        },
        {
          name: "oneTimePrintingAuthorizationMint",
          isMut: true,
          isSigner: false,
          docs: [
            "One time authorization mint"
          ]
        },
        {
          name: "printingMint",
          isMut: true,
          isSigner: false,
          docs: [
            "Printing mint"
          ]
        },
        {
          name: "burnAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "Burn authority"
          ]
        },
        {
          name: "metadata",
          isMut: false,
          isSigner: false,
          docs: [
            "Metadata key (pda of ['metadata', program id, mint id])"
          ]
        },
        {
          name: "masterEdition",
          isMut: false,
          isSigner: false,
          docs: [
            "Master Edition V1 key (pda of ['metadata', program id, mint id, 'edition'])"
          ]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Token program"
          ]
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false,
          docs: [
            "Rent"
          ]
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 8
      }
    },
    {
      name: "DeprecatedMintPrintingTokens",
      accounts: [
        {
          name: "destination",
          isMut: true,
          isSigner: false,
          docs: [
            "Destination account"
          ]
        },
        {
          name: "printingMint",
          isMut: true,
          isSigner: false,
          docs: [
            "Printing mint"
          ]
        },
        {
          name: "updateAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "Update authority"
          ]
        },
        {
          name: "metadata",
          isMut: false,
          isSigner: false,
          docs: [
            "Metadata key (pda of ['metadata', program id, mint id])"
          ]
        },
        {
          name: "masterEdition",
          isMut: false,
          isSigner: false,
          docs: [
            "Master Edition V1 key (pda of ['metadata', program id, mint id, 'edition'])"
          ]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Token program"
          ]
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false,
          docs: [
            "Rent"
          ]
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 9
      }
    },
    {
      name: "CreateMasterEdition",
      accounts: [
        {
          name: "edition",
          isMut: true,
          isSigner: false,
          docs: [
            "Unallocated edition V2 account with address as pda of ['metadata', program id, mint, 'edition']"
          ]
        },
        {
          name: "mint",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata mint"
          ]
        },
        {
          name: "updateAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "Update authority"
          ]
        },
        {
          name: "mintAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "Mint authority on the metadata's mint - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY"
          ]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: [
            "payer"
          ]
        },
        {
          name: "metadata",
          isMut: false,
          isSigner: false,
          docs: [
            "Metadata account"
          ]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Token program"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false,
          docs: [
            "Rent info"
          ]
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 10
      }
    },
    {
      name: "MintNewEditionFromMasterEditionViaToken",
      accounts: [
        {
          name: "newMetadata",
          isMut: true,
          isSigner: false,
          docs: [
            "New Metadata key (pda of ['metadata', program id, mint id])"
          ]
        },
        {
          name: "newEdition",
          isMut: true,
          isSigner: false,
          docs: [
            "New Edition (pda of ['metadata', program id, mint id, 'edition'])"
          ]
        },
        {
          name: "masterEdition",
          isMut: true,
          isSigner: false,
          docs: [
            "Master Record Edition V2 (pda of ['metadata', program id, master metadata mint id, 'edition'])"
          ]
        },
        {
          name: "newMint",
          isMut: true,
          isSigner: false,
          docs: [
            "Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY"
          ]
        },
        {
          name: "editionMarkPda",
          isMut: true,
          isSigner: false,
          docs: [
            "Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master metadata mint id, 'edition', edition_number]) where edition_number is NOT the edition number you pass in args but actually edition_number = floor(edition/EDITION_MARKER_BIT_SIZE)."
          ]
        },
        {
          name: "newMintAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "Mint authority of new mint"
          ]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: [
            "payer"
          ]
        },
        {
          name: "tokenAccountOwner",
          isMut: false,
          isSigner: true,
          docs: [
            "owner of token account containing master token (#8)"
          ]
        },
        {
          name: "tokenAccount",
          isMut: false,
          isSigner: false,
          docs: [
            "token account containing token from master metadata mint"
          ]
        },
        {
          name: "newMetadataUpdateAuthority",
          isMut: false,
          isSigner: false,
          docs: [
            "Update authority info for new metadata"
          ]
        },
        {
          name: "metadata",
          isMut: false,
          isSigner: false,
          docs: [
            "Master record metadata account"
          ]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Token program"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Rent info"
          ]
        }
      ],
      args: [
        {
          name: "mintNewEditionFromMasterEditionViaTokenArgs",
          type: {
            defined: "MintNewEditionFromMasterEditionViaTokenArgs"
          }
        }
      ],
      legacyOptionalAccountsStrategy: true,
      discriminant: {
        type: "u8",
        value: 11
      }
    },
    {
      name: "ConvertMasterEditionV1ToV2",
      accounts: [
        {
          name: "masterEdition",
          isMut: true,
          isSigner: false,
          docs: [
            "Master Record Edition V1 (pda of ['metadata', program id, master metadata mint id, 'edition'])"
          ]
        },
        {
          name: "oneTimeAuth",
          isMut: true,
          isSigner: false,
          docs: [
            "One time authorization mint"
          ]
        },
        {
          name: "printingMint",
          isMut: true,
          isSigner: false,
          docs: [
            "Printing mint"
          ]
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 12
      }
    },
    {
      name: "MintNewEditionFromMasterEditionViaVaultProxy",
      accounts: [
        {
          name: "newMetadata",
          isMut: true,
          isSigner: false,
          docs: [
            "New Metadata key (pda of ['metadata', program id, mint id])"
          ]
        },
        {
          name: "newEdition",
          isMut: true,
          isSigner: false,
          docs: [
            "New Edition (pda of ['metadata', program id, mint id, 'edition'])"
          ]
        },
        {
          name: "masterEdition",
          isMut: true,
          isSigner: false,
          docs: [
            "Master Record Edition V2 (pda of ['metadata', program id, master metadata mint id, 'edition']"
          ]
        },
        {
          name: "newMint",
          isMut: true,
          isSigner: false,
          docs: [
            "Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY"
          ]
        },
        {
          name: "editionMarkPda",
          isMut: true,
          isSigner: false,
          docs: [
            "Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master metadata mint id, 'edition', edition_number]) where edition_number is NOT the edition number you pass in args but actually edition_number = floor(edition/EDITION_MARKER_BIT_SIZE)."
          ]
        },
        {
          name: "newMintAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "Mint authority of new mint"
          ]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: [
            "payer"
          ]
        },
        {
          name: "vaultAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "Vault authority"
          ]
        },
        {
          name: "safetyDepositStore",
          isMut: false,
          isSigner: false,
          docs: [
            "Safety deposit token store account"
          ]
        },
        {
          name: "safetyDepositBox",
          isMut: false,
          isSigner: false,
          docs: [
            "Safety deposit box"
          ]
        },
        {
          name: "vault",
          isMut: false,
          isSigner: false,
          docs: [
            "Vault"
          ]
        },
        {
          name: "newMetadataUpdateAuthority",
          isMut: false,
          isSigner: false,
          docs: [
            "Update authority info for new metadata"
          ]
        },
        {
          name: "metadata",
          isMut: false,
          isSigner: false,
          docs: [
            "Master record metadata account"
          ]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Token program"
          ]
        },
        {
          name: "tokenVaultProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Token vault program"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Rent info"
          ]
        }
      ],
      args: [
        {
          name: "mintNewEditionFromMasterEditionViaTokenArgs",
          type: {
            defined: "MintNewEditionFromMasterEditionViaTokenArgs"
          }
        }
      ],
      legacyOptionalAccountsStrategy: true,
      discriminant: {
        type: "u8",
        value: 13
      }
    },
    {
      name: "PuffMetadata",
      accounts: [
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata account"
          ]
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 14
      }
    },
    {
      name: "UpdateMetadataAccountV2",
      accounts: [
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata account"
          ]
        },
        {
          name: "updateAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "Update authority key"
          ]
        }
      ],
      args: [
        {
          name: "updateMetadataAccountArgsV2",
          type: {
            defined: "UpdateMetadataAccountArgsV2"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 15
      }
    },
    {
      name: "CreateMetadataAccountV2",
      accounts: [
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata key (pda of ['metadata', program id, mint id])"
          ]
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false,
          docs: [
            "Mint of token asset"
          ]
        },
        {
          name: "mintAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "Mint authority"
          ]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: [
            "payer"
          ]
        },
        {
          name: "updateAuthority",
          isMut: false,
          isSigner: false,
          docs: [
            "update authority info"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Rent info"
          ]
        }
      ],
      args: [],
      legacyOptionalAccountsStrategy: true,
      discriminant: {
        type: "u8",
        value: 16
      }
    },
    {
      name: "CreateMasterEditionV3",
      accounts: [
        {
          name: "edition",
          isMut: true,
          isSigner: false,
          docs: [
            "Unallocated edition V2 account with address as pda of ['metadata', program id, mint, 'edition']"
          ]
        },
        {
          name: "mint",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata mint"
          ]
        },
        {
          name: "updateAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "Update authority"
          ]
        },
        {
          name: "mintAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "Mint authority on the metadata's mint - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY"
          ]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: [
            "payer"
          ]
        },
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata account"
          ]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Token program"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Rent info"
          ]
        }
      ],
      args: [
        {
          name: "createMasterEditionArgs",
          type: {
            defined: "CreateMasterEditionArgs"
          }
        }
      ],
      legacyOptionalAccountsStrategy: true,
      discriminant: {
        type: "u8",
        value: 17
      }
    },
    {
      name: "VerifyCollection",
      accounts: [
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata account"
          ]
        },
        {
          name: "collectionAuthority",
          isMut: true,
          isSigner: true,
          docs: [
            "Collection Update authority"
          ]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: [
            "payer"
          ]
        },
        {
          name: "collectionMint",
          isMut: false,
          isSigner: false,
          docs: [
            "Mint of the Collection"
          ]
        },
        {
          name: "collection",
          isMut: false,
          isSigner: false,
          docs: [
            "Metadata Account of the Collection"
          ]
        },
        {
          name: "collectionMasterEditionAccount",
          isMut: false,
          isSigner: false,
          docs: [
            "MasterEdition2 Account of the Collection Token"
          ]
        },
        {
          name: "collectionAuthorityRecord",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Collection Authority Record PDA"
          ]
        }
      ],
      args: [],
      legacyOptionalAccountsStrategy: true,
      discriminant: {
        type: "u8",
        value: 18
      }
    },
    {
      name: "Utilize",
      accounts: [
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata account"
          ]
        },
        {
          name: "tokenAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "Token Account Of NFT"
          ]
        },
        {
          name: "mint",
          isMut: true,
          isSigner: false,
          docs: [
            "Mint of the Metadata"
          ]
        },
        {
          name: "useAuthority",
          isMut: true,
          isSigner: true,
          docs: [
            "A Use Authority / Can be the current Owner of the NFT"
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: false,
          docs: [
            "Owner"
          ]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Token program"
          ]
        },
        {
          name: "ataProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Associated Token program"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false,
          docs: [
            "Rent info"
          ]
        },
        {
          name: "useAuthorityRecord",
          isMut: true,
          isSigner: false,
          isOptional: true,
          docs: [
            "Use Authority Record PDA If present the program Assumes a delegated use authority"
          ]
        },
        {
          name: "burner",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Program As Signer (Burner)"
          ]
        }
      ],
      args: [
        {
          name: "utilizeArgs",
          type: {
            defined: "UtilizeArgs"
          }
        }
      ],
      legacyOptionalAccountsStrategy: true,
      discriminant: {
        type: "u8",
        value: 19
      }
    },
    {
      name: "ApproveUseAuthority",
      accounts: [
        {
          name: "useAuthorityRecord",
          isMut: true,
          isSigner: false,
          docs: [
            "Use Authority Record PDA"
          ]
        },
        {
          name: "owner",
          isMut: true,
          isSigner: true,
          docs: [
            "Owner"
          ]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: [
            "Payer"
          ]
        },
        {
          name: "user",
          isMut: false,
          isSigner: false,
          docs: [
            "A Use Authority"
          ]
        },
        {
          name: "ownerTokenAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "Owned Token Account Of Mint"
          ]
        },
        {
          name: "metadata",
          isMut: false,
          isSigner: false,
          docs: [
            "Metadata account"
          ]
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false,
          docs: [
            "Mint of Metadata"
          ]
        },
        {
          name: "burner",
          isMut: false,
          isSigner: false,
          docs: [
            "Program As Signer (Burner)"
          ]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Token program"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Rent info"
          ]
        }
      ],
      args: [
        {
          name: "approveUseAuthorityArgs",
          type: {
            defined: "ApproveUseAuthorityArgs"
          }
        }
      ],
      legacyOptionalAccountsStrategy: true,
      discriminant: {
        type: "u8",
        value: 20
      }
    },
    {
      name: "RevokeUseAuthority",
      accounts: [
        {
          name: "useAuthorityRecord",
          isMut: true,
          isSigner: false,
          docs: [
            "Use Authority Record PDA"
          ]
        },
        {
          name: "owner",
          isMut: true,
          isSigner: true,
          docs: [
            "Owner"
          ]
        },
        {
          name: "user",
          isMut: false,
          isSigner: false,
          docs: [
            "A Use Authority"
          ]
        },
        {
          name: "ownerTokenAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "Owned Token Account Of Mint"
          ]
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false,
          docs: [
            "Mint of Metadata"
          ]
        },
        {
          name: "metadata",
          isMut: false,
          isSigner: false,
          docs: [
            "Metadata account"
          ]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Token program"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Rent info"
          ]
        }
      ],
      args: [],
      legacyOptionalAccountsStrategy: true,
      discriminant: {
        type: "u8",
        value: 21
      }
    },
    {
      name: "UnverifyCollection",
      accounts: [
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata account"
          ]
        },
        {
          name: "collectionAuthority",
          isMut: true,
          isSigner: true,
          docs: [
            "Collection Authority"
          ]
        },
        {
          name: "collectionMint",
          isMut: false,
          isSigner: false,
          docs: [
            "Mint of the Collection"
          ]
        },
        {
          name: "collection",
          isMut: false,
          isSigner: false,
          docs: [
            "Metadata Account of the Collection"
          ]
        },
        {
          name: "collectionMasterEditionAccount",
          isMut: false,
          isSigner: false,
          docs: [
            "MasterEdition2 Account of the Collection Token"
          ]
        },
        {
          name: "collectionAuthorityRecord",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Collection Authority Record PDA"
          ]
        }
      ],
      args: [],
      legacyOptionalAccountsStrategy: true,
      discriminant: {
        type: "u8",
        value: 22
      }
    },
    {
      name: "ApproveCollectionAuthority",
      accounts: [
        {
          name: "collectionAuthorityRecord",
          isMut: true,
          isSigner: false,
          docs: [
            "Collection Authority Record PDA"
          ]
        },
        {
          name: "newCollectionAuthority",
          isMut: false,
          isSigner: false,
          docs: [
            "A Collection Authority"
          ]
        },
        {
          name: "updateAuthority",
          isMut: true,
          isSigner: true,
          docs: [
            "Update Authority of Collection NFT"
          ]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: [
            "Payer"
          ]
        },
        {
          name: "metadata",
          isMut: false,
          isSigner: false,
          docs: [
            "Collection Metadata account"
          ]
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false,
          docs: [
            "Mint of Collection Metadata"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Rent info"
          ]
        }
      ],
      args: [],
      legacyOptionalAccountsStrategy: true,
      discriminant: {
        type: "u8",
        value: 23
      }
    },
    {
      name: "RevokeCollectionAuthority",
      accounts: [
        {
          name: "collectionAuthorityRecord",
          isMut: true,
          isSigner: false,
          docs: [
            "Collection Authority Record PDA"
          ]
        },
        {
          name: "delegateAuthority",
          isMut: true,
          isSigner: false,
          docs: [
            "Delegated Collection Authority"
          ]
        },
        {
          name: "revokeAuthority",
          isMut: true,
          isSigner: true,
          docs: [
            "Update Authority, or Delegated Authority, of Collection NFT"
          ]
        },
        {
          name: "metadata",
          isMut: false,
          isSigner: false,
          docs: [
            "Metadata account"
          ]
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false,
          docs: [
            "Mint of Metadata"
          ]
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 24
      }
    },
    {
      name: "SetAndVerifyCollection",
      accounts: [
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata account"
          ]
        },
        {
          name: "collectionAuthority",
          isMut: true,
          isSigner: true,
          docs: [
            "Collection Update authority"
          ]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: [
            "Payer"
          ]
        },
        {
          name: "updateAuthority",
          isMut: false,
          isSigner: false,
          docs: [
            "Update Authority of Collection NFT and NFT"
          ]
        },
        {
          name: "collectionMint",
          isMut: false,
          isSigner: false,
          docs: [
            "Mint of the Collection"
          ]
        },
        {
          name: "collection",
          isMut: false,
          isSigner: false,
          docs: [
            "Metadata Account of the Collection"
          ]
        },
        {
          name: "collectionMasterEditionAccount",
          isMut: false,
          isSigner: false,
          docs: [
            "MasterEdition2 Account of the Collection Token"
          ]
        },
        {
          name: "collectionAuthorityRecord",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Collection Authority Record PDA"
          ]
        }
      ],
      args: [],
      legacyOptionalAccountsStrategy: true,
      discriminant: {
        type: "u8",
        value: 25
      }
    },
    {
      name: "FreezeDelegatedAccount",
      accounts: [
        {
          name: "delegate",
          isMut: true,
          isSigner: true,
          docs: [
            "Delegate"
          ]
        },
        {
          name: "tokenAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "Token account to freeze"
          ]
        },
        {
          name: "edition",
          isMut: false,
          isSigner: false,
          docs: [
            "Edition"
          ]
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false,
          docs: [
            "Token mint"
          ]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Token Program"
          ]
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 26
      }
    },
    {
      name: "ThawDelegatedAccount",
      accounts: [
        {
          name: "delegate",
          isMut: true,
          isSigner: true,
          docs: [
            "Delegate"
          ]
        },
        {
          name: "tokenAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "Token account to thaw"
          ]
        },
        {
          name: "edition",
          isMut: false,
          isSigner: false,
          docs: [
            "Edition"
          ]
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false,
          docs: [
            "Token mint"
          ]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Token Program"
          ]
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 27
      }
    },
    {
      name: "RemoveCreatorVerification",
      accounts: [
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata (pda of ['metadata', program id, mint id])"
          ]
        },
        {
          name: "creator",
          isMut: false,
          isSigner: true,
          docs: [
            "Creator"
          ]
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 28
      }
    },
    {
      name: "BurnNft",
      accounts: [
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata (pda of ['metadata', program id, mint id])"
          ]
        },
        {
          name: "owner",
          isMut: true,
          isSigner: true,
          docs: [
            "NFT owner"
          ]
        },
        {
          name: "mint",
          isMut: true,
          isSigner: false,
          docs: [
            "Mint of the NFT"
          ]
        },
        {
          name: "tokenAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "Token account to close"
          ]
        },
        {
          name: "masterEditionAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "MasterEdition2 of the NFT"
          ]
        },
        {
          name: "splTokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "SPL Token Program"
          ]
        },
        {
          name: "collectionMetadata",
          isMut: true,
          isSigner: false,
          isOptional: true,
          docs: [
            "Metadata of the Collection"
          ]
        }
      ],
      args: [],
      legacyOptionalAccountsStrategy: true,
      discriminant: {
        type: "u8",
        value: 29
      }
    },
    {
      name: "VerifySizedCollectionItem",
      accounts: [
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata account"
          ]
        },
        {
          name: "collectionAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "Collection Update authority"
          ]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: [
            "payer"
          ]
        },
        {
          name: "collectionMint",
          isMut: false,
          isSigner: false,
          docs: [
            "Mint of the Collection"
          ]
        },
        {
          name: "collection",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata Account of the Collection"
          ]
        },
        {
          name: "collectionMasterEditionAccount",
          isMut: false,
          isSigner: false,
          docs: [
            "MasterEdition2 Account of the Collection Token"
          ]
        },
        {
          name: "collectionAuthorityRecord",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Collection Authority Record PDA"
          ]
        }
      ],
      args: [],
      legacyOptionalAccountsStrategy: true,
      discriminant: {
        type: "u8",
        value: 30
      }
    },
    {
      name: "UnverifySizedCollectionItem",
      accounts: [
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata account"
          ]
        },
        {
          name: "collectionAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "Collection Authority"
          ]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: [
            "payer"
          ]
        },
        {
          name: "collectionMint",
          isMut: false,
          isSigner: false,
          docs: [
            "Mint of the Collection"
          ]
        },
        {
          name: "collection",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata Account of the Collection"
          ]
        },
        {
          name: "collectionMasterEditionAccount",
          isMut: false,
          isSigner: false,
          docs: [
            "MasterEdition2 Account of the Collection Token"
          ]
        },
        {
          name: "collectionAuthorityRecord",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Collection Authority Record PDA"
          ]
        }
      ],
      args: [],
      legacyOptionalAccountsStrategy: true,
      discriminant: {
        type: "u8",
        value: 31
      }
    },
    {
      name: "SetAndVerifySizedCollectionItem",
      accounts: [
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata account"
          ]
        },
        {
          name: "collectionAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "Collection Update authority"
          ]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: [
            "payer"
          ]
        },
        {
          name: "updateAuthority",
          isMut: false,
          isSigner: false,
          docs: [
            "Update Authority of Collection NFT and NFT"
          ]
        },
        {
          name: "collectionMint",
          isMut: false,
          isSigner: false,
          docs: [
            "Mint of the Collection"
          ]
        },
        {
          name: "collection",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata Account of the Collection"
          ]
        },
        {
          name: "collectionMasterEditionAccount",
          isMut: false,
          isSigner: false,
          docs: [
            "MasterEdition2 Account of the Collection Token"
          ]
        },
        {
          name: "collectionAuthorityRecord",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Collection Authority Record PDA"
          ]
        }
      ],
      args: [],
      legacyOptionalAccountsStrategy: true,
      discriminant: {
        type: "u8",
        value: 32
      }
    },
    {
      name: "CreateMetadataAccountV3",
      accounts: [
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata key (pda of ['metadata', program id, mint id])"
          ]
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false,
          docs: [
            "Mint of token asset"
          ]
        },
        {
          name: "mintAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "Mint authority"
          ]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: [
            "payer"
          ]
        },
        {
          name: "updateAuthority",
          isMut: false,
          isSigner: false,
          isOptionalSigner: true,
          docs: [
            "update authority info"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Rent info"
          ]
        }
      ],
      args: [
        {
          name: "createMetadataAccountArgsV3",
          type: {
            defined: "CreateMetadataAccountArgsV3"
          }
        }
      ],
      legacyOptionalAccountsStrategy: true,
      discriminant: {
        type: "u8",
        value: 33
      }
    },
    {
      name: "SetCollectionSize",
      accounts: [
        {
          name: "collectionMetadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Collection Metadata account"
          ]
        },
        {
          name: "collectionAuthority",
          isMut: true,
          isSigner: true,
          docs: [
            "Collection Update authority"
          ]
        },
        {
          name: "collectionMint",
          isMut: false,
          isSigner: false,
          docs: [
            "Mint of the Collection"
          ]
        },
        {
          name: "collectionAuthorityRecord",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Collection Authority Record PDA"
          ]
        }
      ],
      args: [
        {
          name: "setCollectionSizeArgs",
          type: {
            defined: "SetCollectionSizeArgs"
          }
        }
      ],
      legacyOptionalAccountsStrategy: true,
      discriminant: {
        type: "u8",
        value: 34
      }
    },
    {
      name: "SetTokenStandard",
      accounts: [
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata account"
          ]
        },
        {
          name: "updateAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "Metadata update authority"
          ]
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false,
          docs: [
            "Mint account"
          ]
        },
        {
          name: "edition",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Edition account"
          ]
        }
      ],
      args: [],
      legacyOptionalAccountsStrategy: true,
      discriminant: {
        type: "u8",
        value: 35
      }
    },
    {
      name: "BubblegumSetCollectionSize",
      accounts: [
        {
          name: "collectionMetadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Collection Metadata account"
          ]
        },
        {
          name: "collectionAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "Collection Update authority"
          ]
        },
        {
          name: "collectionMint",
          isMut: false,
          isSigner: false,
          docs: [
            "Mint of the Collection"
          ]
        },
        {
          name: "bubblegumSigner",
          isMut: false,
          isSigner: true,
          docs: [
            "Signing PDA of Bubblegum program"
          ]
        },
        {
          name: "collectionAuthorityRecord",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Collection Authority Record PDA"
          ]
        }
      ],
      args: [
        {
          name: "setCollectionSizeArgs",
          type: {
            defined: "SetCollectionSizeArgs"
          }
        }
      ],
      legacyOptionalAccountsStrategy: true,
      discriminant: {
        type: "u8",
        value: 36
      }
    },
    {
      name: "BurnEditionNft",
      accounts: [
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata (pda of ['metadata', program id, mint id])"
          ]
        },
        {
          name: "owner",
          isMut: true,
          isSigner: true,
          docs: [
            "NFT owner"
          ]
        },
        {
          name: "printEditionMint",
          isMut: true,
          isSigner: false,
          docs: [
            "Mint of the print edition NFT"
          ]
        },
        {
          name: "masterEditionMint",
          isMut: false,
          isSigner: false,
          docs: [
            "Mint of the original/master NFT"
          ]
        },
        {
          name: "printEditionTokenAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "Token account the print edition NFT is in"
          ]
        },
        {
          name: "masterEditionTokenAccount",
          isMut: false,
          isSigner: false,
          docs: [
            "Token account the Master Edition NFT is in"
          ]
        },
        {
          name: "masterEditionAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "MasterEdition2 of the original NFT"
          ]
        },
        {
          name: "printEditionAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "Print Edition account of the NFT"
          ]
        },
        {
          name: "editionMarkerAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "Edition Marker PDA of the NFT"
          ]
        },
        {
          name: "splTokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "SPL Token Program"
          ]
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 37
      }
    },
    {
      name: "CreateEscrowAccount",
      accounts: [
        {
          name: "escrow",
          isMut: true,
          isSigner: false,
          docs: [
            "Escrow account"
          ]
        },
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata account"
          ]
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false,
          docs: [
            "Mint account"
          ]
        },
        {
          name: "tokenAccount",
          isMut: false,
          isSigner: false,
          docs: [
            "Token account of the token"
          ]
        },
        {
          name: "edition",
          isMut: false,
          isSigner: false,
          docs: [
            "Edition account"
          ]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: [
            "Wallet paying for the transaction and new account"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "sysvarInstructions",
          isMut: false,
          isSigner: false,
          docs: [
            "Instructions sysvar account"
          ]
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true,
          isOptional: true,
          docs: [
            "Authority/creator of the escrow account"
          ]
        }
      ],
      args: [],
      legacyOptionalAccountsStrategy: true,
      discriminant: {
        type: "u8",
        value: 38
      }
    },
    {
      name: "CloseEscrowAccount",
      accounts: [
        {
          name: "escrow",
          isMut: true,
          isSigner: false,
          docs: [
            "Escrow account"
          ]
        },
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata account"
          ]
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false,
          docs: [
            "Mint account"
          ]
        },
        {
          name: "tokenAccount",
          isMut: false,
          isSigner: false,
          docs: [
            "Token account"
          ]
        },
        {
          name: "edition",
          isMut: false,
          isSigner: false,
          docs: [
            "Edition account"
          ]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: [
            "Wallet paying for the transaction and new account"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "sysvarInstructions",
          isMut: false,
          isSigner: false,
          docs: [
            "Instructions sysvar account"
          ]
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 39
      }
    },
    {
      name: "TransferOutOfEscrow",
      accounts: [
        {
          name: "escrow",
          isMut: false,
          isSigner: false,
          docs: [
            "Escrow account"
          ]
        },
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata account"
          ]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: [
            "Wallet paying for the transaction and new account"
          ]
        },
        {
          name: "attributeMint",
          isMut: false,
          isSigner: false,
          docs: [
            "Mint account for the new attribute"
          ]
        },
        {
          name: "attributeSrc",
          isMut: true,
          isSigner: false,
          docs: [
            "Token account source for the new attribute"
          ]
        },
        {
          name: "attributeDst",
          isMut: true,
          isSigner: false,
          docs: [
            "Token account, owned by TM, destination for the new attribute"
          ]
        },
        {
          name: "escrowMint",
          isMut: false,
          isSigner: false,
          docs: [
            "Mint account that the escrow is attached"
          ]
        },
        {
          name: "escrowAccount",
          isMut: false,
          isSigner: false,
          docs: [
            "Token account that holds the token the escrow is attached to"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "ataProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Associated Token program"
          ]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Token program"
          ]
        },
        {
          name: "sysvarInstructions",
          isMut: false,
          isSigner: false,
          docs: [
            "Instructions sysvar account"
          ]
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true,
          isOptional: true,
          docs: [
            "Authority/creator of the escrow account"
          ]
        }
      ],
      args: [
        {
          name: "transferOutOfEscrowArgs",
          type: {
            defined: "TransferOutOfEscrowArgs"
          }
        }
      ],
      legacyOptionalAccountsStrategy: true,
      discriminant: {
        type: "u8",
        value: 40
      }
    },
    {
      name: "Burn",
      accounts: [
        {
          name: "authority",
          isMut: true,
          isSigner: true,
          docs: [
            "Asset owner or Utility delegate"
          ]
        },
        {
          name: "collectionMetadata",
          isMut: true,
          isSigner: false,
          isOptional: true,
          docs: [
            "Metadata of the Collection"
          ]
        },
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata (pda of ['metadata', program id, mint id])"
          ]
        },
        {
          name: "edition",
          isMut: true,
          isSigner: false,
          isOptional: true,
          docs: [
            "Edition of the asset"
          ]
        },
        {
          name: "mint",
          isMut: true,
          isSigner: false,
          docs: [
            "Mint of token asset"
          ]
        },
        {
          name: "token",
          isMut: true,
          isSigner: false,
          docs: [
            "Token account to close"
          ]
        },
        {
          name: "masterEdition",
          isMut: true,
          isSigner: false,
          isOptional: true,
          docs: [
            "Master edition account"
          ]
        },
        {
          name: "masterEditionMint",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Master edition mint of the asset"
          ]
        },
        {
          name: "masterEditionToken",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Master edition token account"
          ]
        },
        {
          name: "editionMarker",
          isMut: true,
          isSigner: false,
          isOptional: true,
          docs: [
            "Edition marker account"
          ]
        },
        {
          name: "tokenRecord",
          isMut: true,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token record account"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "sysvarInstructions",
          isMut: false,
          isSigner: false,
          docs: [
            "Instructions sysvar account"
          ]
        },
        {
          name: "splTokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "SPL Token Program"
          ]
        }
      ],
      args: [
        {
          name: "burnArgs",
          type: {
            defined: "BurnArgs"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 41
      }
    },
    {
      name: "Create",
      accounts: [
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Unallocated metadata account with address as pda of ['metadata', program id, mint id]"
          ]
        },
        {
          name: "masterEdition",
          isMut: true,
          isSigner: false,
          isOptional: true,
          docs: [
            "Unallocated edition account with address as pda of ['metadata', program id, mint, 'edition']"
          ]
        },
        {
          name: "mint",
          isMut: true,
          isSigner: false,
          docs: [
            "Mint of token asset"
          ]
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true,
          docs: [
            "Mint authority"
          ]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: [
            "Payer"
          ]
        },
        {
          name: "updateAuthority",
          isMut: false,
          isSigner: false,
          docs: [
            "Update authority for the metadata account"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "sysvarInstructions",
          isMut: false,
          isSigner: false,
          docs: [
            "Instructions sysvar account"
          ]
        },
        {
          name: "splTokenProgram",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "SPL Token program"
          ]
        }
      ],
      args: [
        {
          name: "createArgs",
          type: {
            defined: "CreateArgs"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 42
      }
    },
    {
      name: "Mint",
      accounts: [
        {
          name: "token",
          isMut: true,
          isSigner: false,
          docs: [
            "Token or Associated Token account"
          ]
        },
        {
          name: "tokenOwner",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Owner of the token account"
          ]
        },
        {
          name: "metadata",
          isMut: false,
          isSigner: false,
          docs: [
            "Metadata account (pda of ['metadata', program id, mint id])"
          ]
        },
        {
          name: "masterEdition",
          isMut: true,
          isSigner: false,
          isOptional: true,
          docs: [
            "Master Edition account"
          ]
        },
        {
          name: "tokenRecord",
          isMut: true,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token record account"
          ]
        },
        {
          name: "mint",
          isMut: true,
          isSigner: false,
          docs: [
            "Mint of token asset"
          ]
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true,
          docs: [
            "(Mint or Update) authority"
          ]
        },
        {
          name: "delegateRecord",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Metadata delegate record"
          ]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: [
            "Payer"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "sysvarInstructions",
          isMut: false,
          isSigner: false,
          docs: [
            "Instructions sysvar account"
          ]
        },
        {
          name: "splTokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "SPL Token program"
          ]
        },
        {
          name: "splAtaProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "SPL Associated Token Account program"
          ]
        },
        {
          name: "authorizationRulesProgram",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token Authorization Rules program"
          ]
        },
        {
          name: "authorizationRules",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token Authorization Rules account"
          ]
        }
      ],
      args: [
        {
          name: "mintArgs",
          type: {
            defined: "MintArgs"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 43
      }
    },
    {
      name: "Delegate",
      accounts: [
        {
          name: "delegateRecord",
          isMut: true,
          isSigner: false,
          isOptional: true,
          docs: [
            "Delegate record account"
          ]
        },
        {
          name: "delegate",
          isMut: false,
          isSigner: false,
          docs: [
            "Owner of the delegated account"
          ]
        },
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata account"
          ]
        },
        {
          name: "masterEdition",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Master Edition account"
          ]
        },
        {
          name: "tokenRecord",
          isMut: true,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token record account"
          ]
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false,
          docs: [
            "Mint of metadata"
          ]
        },
        {
          name: "token",
          isMut: true,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token account of mint"
          ]
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true,
          docs: [
            "Update authority or token owner"
          ]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: [
            "Payer"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System Program"
          ]
        },
        {
          name: "sysvarInstructions",
          isMut: false,
          isSigner: false,
          docs: [
            "Instructions sysvar account"
          ]
        },
        {
          name: "splTokenProgram",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "SPL Token Program"
          ]
        },
        {
          name: "authorizationRulesProgram",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token Authorization Rules Program"
          ]
        },
        {
          name: "authorizationRules",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token Authorization Rules account"
          ]
        }
      ],
      args: [
        {
          name: "delegateArgs",
          type: {
            defined: "DelegateArgs"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 44
      }
    },
    {
      name: "Revoke",
      accounts: [
        {
          name: "delegateRecord",
          isMut: true,
          isSigner: false,
          isOptional: true,
          docs: [
            "Delegate record account"
          ]
        },
        {
          name: "delegate",
          isMut: false,
          isSigner: false,
          docs: [
            "Owner of the delegated account"
          ]
        },
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata account"
          ]
        },
        {
          name: "masterEdition",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Master Edition account"
          ]
        },
        {
          name: "tokenRecord",
          isMut: true,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token record account"
          ]
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false,
          docs: [
            "Mint of metadata"
          ]
        },
        {
          name: "token",
          isMut: true,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token account of mint"
          ]
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true,
          docs: [
            "Update authority or token owner"
          ]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: [
            "Payer"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System Program"
          ]
        },
        {
          name: "sysvarInstructions",
          isMut: false,
          isSigner: false,
          docs: [
            "Instructions sysvar account"
          ]
        },
        {
          name: "splTokenProgram",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "SPL Token Program"
          ]
        },
        {
          name: "authorizationRulesProgram",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token Authorization Rules Program"
          ]
        },
        {
          name: "authorizationRules",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token Authorization Rules account"
          ]
        }
      ],
      args: [
        {
          name: "revokeArgs",
          type: {
            defined: "RevokeArgs"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 45
      }
    },
    {
      name: "Lock",
      accounts: [
        {
          name: "authority",
          isMut: false,
          isSigner: true,
          docs: [
            "Delegate or freeze authority"
          ]
        },
        {
          name: "tokenOwner",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token owner account"
          ]
        },
        {
          name: "token",
          isMut: true,
          isSigner: false,
          docs: [
            "Token account"
          ]
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false,
          docs: [
            "Mint account"
          ]
        },
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata account"
          ]
        },
        {
          name: "edition",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Edition account"
          ]
        },
        {
          name: "tokenRecord",
          isMut: true,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token record account"
          ]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: [
            "Payer"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "sysvarInstructions",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "splTokenProgram",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "SPL Token Program"
          ]
        },
        {
          name: "authorizationRulesProgram",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token Authorization Rules Program"
          ]
        },
        {
          name: "authorizationRules",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token Authorization Rules account"
          ]
        }
      ],
      args: [
        {
          name: "lockArgs",
          type: {
            defined: "LockArgs"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 46
      }
    },
    {
      name: "Unlock",
      accounts: [
        {
          name: "authority",
          isMut: false,
          isSigner: true,
          docs: [
            "Delegate or freeze authority"
          ]
        },
        {
          name: "tokenOwner",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token owner account"
          ]
        },
        {
          name: "token",
          isMut: true,
          isSigner: false,
          docs: [
            "Token account"
          ]
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false,
          docs: [
            "Mint account"
          ]
        },
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata account"
          ]
        },
        {
          name: "edition",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Edition account"
          ]
        },
        {
          name: "tokenRecord",
          isMut: true,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token record account"
          ]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: [
            "Payer"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "sysvarInstructions",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "splTokenProgram",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "SPL Token Program"
          ]
        },
        {
          name: "authorizationRulesProgram",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token Authorization Rules Program"
          ]
        },
        {
          name: "authorizationRules",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token Authorization Rules account"
          ]
        }
      ],
      args: [
        {
          name: "unlockArgs",
          type: {
            defined: "UnlockArgs"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 47
      }
    },
    {
      name: "Migrate",
      accounts: [
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata account"
          ]
        },
        {
          name: "edition",
          isMut: true,
          isSigner: false,
          docs: [
            "Edition account"
          ]
        },
        {
          name: "token",
          isMut: true,
          isSigner: false,
          docs: [
            "Token account"
          ]
        },
        {
          name: "tokenOwner",
          isMut: false,
          isSigner: false,
          docs: [
            "Token account owner"
          ]
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false,
          docs: [
            "Mint account"
          ]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: [
            "Payer"
          ]
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true,
          docs: [
            "Update authority"
          ]
        },
        {
          name: "collectionMetadata",
          isMut: false,
          isSigner: false,
          docs: [
            "Collection metadata account"
          ]
        },
        {
          name: "delegateRecord",
          isMut: false,
          isSigner: false,
          docs: [
            "Delegate record account"
          ]
        },
        {
          name: "tokenRecord",
          isMut: true,
          isSigner: false,
          docs: [
            "Token record account"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "sysvarInstructions",
          isMut: false,
          isSigner: false,
          docs: [
            "Instruction sysvar account"
          ]
        },
        {
          name: "splTokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "SPL Token Program"
          ]
        },
        {
          name: "authorizationRulesProgram",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token Authorization Rules Program"
          ]
        },
        {
          name: "authorizationRules",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token Authorization Rules account"
          ]
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 48
      }
    },
    {
      name: "Transfer",
      accounts: [
        {
          name: "token",
          isMut: true,
          isSigner: false,
          docs: [
            "Token account"
          ]
        },
        {
          name: "tokenOwner",
          isMut: false,
          isSigner: false,
          docs: [
            "Token account owner"
          ]
        },
        {
          name: "destination",
          isMut: true,
          isSigner: false,
          docs: [
            "Destination token account"
          ]
        },
        {
          name: "destinationOwner",
          isMut: false,
          isSigner: false,
          docs: [
            "Destination token account owner"
          ]
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false,
          docs: [
            "Mint of token asset"
          ]
        },
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata (pda of ['metadata', program id, mint id])"
          ]
        },
        {
          name: "edition",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Edition of token asset"
          ]
        },
        {
          name: "ownerTokenRecord",
          isMut: true,
          isSigner: false,
          isOptional: true,
          docs: [
            "Owner token record account"
          ]
        },
        {
          name: "destinationTokenRecord",
          isMut: true,
          isSigner: false,
          isOptional: true,
          docs: [
            "Destination token record account"
          ]
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true,
          docs: [
            "Transfer authority (token owner or delegate)"
          ]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: [
            "Payer"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System Program"
          ]
        },
        {
          name: "sysvarInstructions",
          isMut: false,
          isSigner: false,
          docs: [
            "Instructions sysvar account"
          ]
        },
        {
          name: "splTokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "SPL Token Program"
          ]
        },
        {
          name: "splAtaProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "SPL Associated Token Account program"
          ]
        },
        {
          name: "authorizationRulesProgram",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token Authorization Rules Program"
          ]
        },
        {
          name: "authorizationRules",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token Authorization Rules account"
          ]
        }
      ],
      args: [
        {
          name: "transferArgs",
          type: {
            defined: "TransferArgs"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 49
      }
    },
    {
      name: "Update",
      accounts: [
        {
          name: "authority",
          isMut: false,
          isSigner: true,
          docs: [
            "Update authority or delegate"
          ]
        },
        {
          name: "delegateRecord",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Delegate record PDA"
          ]
        },
        {
          name: "token",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token account"
          ]
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false,
          docs: [
            "Mint account"
          ]
        },
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata account"
          ]
        },
        {
          name: "edition",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Edition account"
          ]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: [
            "Payer"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "sysvarInstructions",
          isMut: false,
          isSigner: false,
          docs: [
            "Instructions sysvar account"
          ]
        },
        {
          name: "authorizationRulesProgram",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token Authorization Rules Program"
          ]
        },
        {
          name: "authorizationRules",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token Authorization Rules account"
          ]
        }
      ],
      args: [
        {
          name: "updateArgs",
          type: {
            defined: "UpdateArgs"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 50
      }
    },
    {
      name: "Use",
      accounts: [
        {
          name: "authority",
          isMut: false,
          isSigner: true,
          docs: [
            "Token owner or delegate"
          ]
        },
        {
          name: "delegateRecord",
          isMut: true,
          isSigner: false,
          isOptional: true,
          docs: [
            "Delegate record PDA"
          ]
        },
        {
          name: "token",
          isMut: true,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token account"
          ]
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false,
          docs: [
            "Mint account"
          ]
        },
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata account"
          ]
        },
        {
          name: "edition",
          isMut: true,
          isSigner: false,
          isOptional: true,
          docs: [
            "Edition account"
          ]
        },
        {
          name: "payer",
          isMut: false,
          isSigner: true,
          docs: [
            "Payer"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "sysvarInstructions",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "splTokenProgram",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "SPL Token Program"
          ]
        },
        {
          name: "authorizationRulesProgram",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token Authorization Rules Program"
          ]
        },
        {
          name: "authorizationRules",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token Authorization Rules account"
          ]
        }
      ],
      args: [
        {
          name: "useArgs",
          type: {
            defined: "UseArgs"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 51
      }
    },
    {
      name: "Verify",
      accounts: [
        {
          name: "authority",
          isMut: false,
          isSigner: true,
          docs: [
            "Creator to verify, collection update authority or delegate"
          ]
        },
        {
          name: "delegateRecord",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Delegate record PDA"
          ]
        },
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata account"
          ]
        },
        {
          name: "collectionMint",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Mint of the Collection"
          ]
        },
        {
          name: "collectionMetadata",
          isMut: true,
          isSigner: false,
          isOptional: true,
          docs: [
            "Metadata Account of the Collection"
          ]
        },
        {
          name: "collectionMasterEdition",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Master Edition Account of the Collection Token"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "sysvarInstructions",
          isMut: false,
          isSigner: false,
          docs: [
            "Instructions sysvar account"
          ]
        }
      ],
      args: [
        {
          name: "verificationArgs",
          type: {
            defined: "VerificationArgs"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 52
      }
    },
    {
      name: "Unverify",
      accounts: [
        {
          name: "authority",
          isMut: false,
          isSigner: true,
          docs: [
            "Creator to verify, collection (or metadata if parent burned) update authority or delegate"
          ]
        },
        {
          name: "delegateRecord",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Delegate record PDA"
          ]
        },
        {
          name: "metadata",
          isMut: true,
          isSigner: false,
          docs: [
            "Metadata account"
          ]
        },
        {
          name: "collectionMint",
          isMut: false,
          isSigner: false,
          isOptional: true,
          docs: [
            "Mint of the Collection"
          ]
        },
        {
          name: "collectionMetadata",
          isMut: true,
          isSigner: false,
          isOptional: true,
          docs: [
            "Metadata Account of the Collection"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        },
        {
          name: "sysvarInstructions",
          isMut: false,
          isSigner: false,
          docs: [
            "Instructions sysvar account"
          ]
        }
      ],
      args: [
        {
          name: "verificationArgs",
          type: {
            defined: "VerificationArgs"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 53
      }
    },
    {
      name: "Collect",
      accounts: [
        {
          name: "authority",
          isMut: false,
          isSigner: true,
          docs: [
            "Authority to collect fees"
          ]
        },
        {
          name: "recipient",
          isMut: false,
          isSigner: false,
          docs: [
            "The account to transfer collected fees to"
          ]
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 54
      }
    },
    {
      name: "Print",
      accounts: [
        {
          name: "editionMetadata",
          isMut: true,
          isSigner: false,
          docs: [
            "New Metadata key (pda of ['metadata', program id, mint id])"
          ]
        },
        {
          name: "edition",
          isMut: true,
          isSigner: false,
          docs: [
            "New Edition (pda of ['metadata', program id, mint id, 'edition'])"
          ]
        },
        {
          name: "editionMint",
          isMut: true,
          isSigner: false,
          docs: [
            "Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY"
          ]
        },
        {
          name: "editionTokenAccountOwner",
          isMut: false,
          isSigner: false,
          docs: [
            "Owner of the token account of new token"
          ]
        },
        {
          name: "editionTokenAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "Token account of new token"
          ]
        },
        {
          name: "editionMintAuthority",
          isMut: false,
          isSigner: true,
          docs: [
            "Mint authority of new mint"
          ]
        },
        {
          name: "editionTokenRecord",
          isMut: true,
          isSigner: false,
          isOptional: true,
          docs: [
            "Token record account"
          ]
        },
        {
          name: "masterEdition",
          isMut: true,
          isSigner: false,
          docs: [
            "Master Record Edition V2 (pda of ['metadata', program id, master metadata mint id, 'edition'])"
          ]
        },
        {
          name: "editionMarkerPda",
          isMut: true,
          isSigner: false,
          docs: [
            "Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master metadata mint id, 'edition', edition_number]) where edition_number is NOT the edition number you pass in args but actually edition_number = floor(edition/EDITION_MARKER_BIT_SIZE)."
          ]
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true,
          docs: [
            "payer"
          ]
        },
        {
          name: "masterTokenAccountOwner",
          isMut: false,
          isSigner: false,
          isOptionalSigner: true,
          docs: [
            "owner of token account containing master token"
          ]
        },
        {
          name: "masterTokenAccount",
          isMut: false,
          isSigner: false,
          docs: [
            "token account containing token from master metadata mint"
          ]
        },
        {
          name: "masterMetadata",
          isMut: false,
          isSigner: false,
          docs: [
            "Master record metadata account"
          ]
        },
        {
          name: "updateAuthority",
          isMut: false,
          isSigner: false,
          docs: [
            "The update authority of the master edition."
          ]
        },
        {
          name: "splTokenProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Token program"
          ]
        },
        {
          name: "splAtaProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "SPL Associated Token Account program"
          ]
        },
        {
          name: "sysvarInstructions",
          isMut: false,
          isSigner: false,
          docs: [
            "Instructions sysvar account"
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "System program"
          ]
        }
      ],
      args: [
        {
          name: "printArgs",
          type: {
            defined: "PrintArgs"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 55
      }
    }
  ],
  accounts: [
    {
      name: "CollectionAuthorityRecord",
      type: {
        kind: "struct",
        fields: [
          {
            name: "key",
            type: {
              defined: "Key"
            }
          },
          {
            name: "bump",
            type: "u8"
          },
          {
            name: "updateAuthority",
            type: {
              option: "publicKey"
            }
          }
        ]
      }
    },
    {
      name: "MetadataDelegateRecord",
      type: {
        kind: "struct",
        fields: [
          {
            name: "key",
            type: {
              defined: "Key"
            }
          },
          {
            name: "bump",
            type: "u8"
          },
          {
            name: "mint",
            type: "publicKey"
          },
          {
            name: "delegate",
            type: "publicKey"
          },
          {
            name: "updateAuthority",
            type: "publicKey"
          }
        ]
      }
    },
    {
      name: "HolderDelegateRecord",
      type: {
        kind: "struct",
        fields: [
          {
            name: "key",
            type: {
              defined: "Key"
            }
          },
          {
            name: "bump",
            type: "u8"
          },
          {
            name: "mint",
            type: "publicKey"
          },
          {
            name: "delegate",
            type: "publicKey"
          },
          {
            name: "updateAuthority",
            type: "publicKey"
          }
        ]
      }
    },
    {
      name: "Edition",
      type: {
        kind: "struct",
        fields: [
          {
            name: "key",
            type: {
              defined: "Key"
            }
          },
          {
            name: "parent",
            type: "publicKey"
          },
          {
            name: "edition",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "EditionMarker",
      type: {
        kind: "struct",
        fields: [
          {
            name: "key",
            type: {
              defined: "Key"
            }
          },
          {
            name: "ledger",
            type: {
              array: [
                "u8",
                31
              ]
            }
          }
        ]
      }
    },
    {
      name: "EditionMarkerV2",
      type: {
        kind: "struct",
        fields: [
          {
            name: "key",
            type: {
              defined: "Key"
            }
          },
          {
            name: "ledger",
            type: "bytes"
          }
        ]
      }
    },
    {
      name: "TokenOwnedEscrow",
      type: {
        kind: "struct",
        fields: [
          {
            name: "key",
            type: {
              defined: "Key"
            }
          },
          {
            name: "baseToken",
            type: "publicKey"
          },
          {
            name: "authority",
            type: {
              defined: "EscrowAuthority"
            }
          },
          {
            name: "bump",
            type: "u8"
          }
        ]
      }
    },
    {
      name: "MasterEditionV2",
      type: {
        kind: "struct",
        fields: [
          {
            name: "key",
            type: {
              defined: "Key"
            }
          },
          {
            name: "supply",
            type: "u64"
          },
          {
            name: "maxSupply",
            type: {
              option: "u64"
            }
          }
        ]
      }
    },
    {
      name: "MasterEditionV1",
      type: {
        kind: "struct",
        fields: [
          {
            name: "key",
            type: {
              defined: "Key"
            }
          },
          {
            name: "supply",
            type: "u64"
          },
          {
            name: "maxSupply",
            type: {
              option: "u64"
            }
          },
          {
            name: "printingMint",
            type: "publicKey"
          },
          {
            name: "oneTimePrintingAuthorizationMint",
            type: "publicKey"
          }
        ]
      }
    },
    {
      name: "Metadata",
      type: {
        kind: "struct",
        fields: [
          {
            name: "key",
            type: {
              defined: "Key"
            }
          },
          {
            name: "updateAuthority",
            type: "publicKey"
          },
          {
            name: "mint",
            type: "publicKey"
          },
          {
            name: "data",
            type: {
              defined: "Data"
            }
          },
          {
            name: "primarySaleHappened",
            type: "bool"
          },
          {
            name: "isMutable",
            type: "bool"
          },
          {
            name: "editionNonce",
            type: {
              option: "u8"
            }
          },
          {
            name: "tokenStandard",
            type: {
              option: {
                defined: "TokenStandard"
              }
            }
          },
          {
            name: "collection",
            type: {
              option: {
                defined: "Collection"
              }
            }
          },
          {
            name: "uses",
            type: {
              option: {
                defined: "Uses"
              }
            }
          },
          {
            name: "collectionDetails",
            type: {
              option: {
                defined: "CollectionDetails"
              }
            }
          },
          {
            name: "programmableConfig",
            type: {
              option: {
                defined: "ProgrammableConfig"
              }
            }
          }
        ]
      }
    },
    {
      name: "TokenRecord",
      type: {
        kind: "struct",
        fields: [
          {
            name: "key",
            type: {
              defined: "Key"
            }
          },
          {
            name: "bump",
            type: "u8"
          },
          {
            name: "state",
            type: {
              defined: "TokenState"
            }
          },
          {
            name: "ruleSetRevision",
            type: {
              option: "u64"
            }
          },
          {
            name: "delegate",
            type: {
              option: "publicKey"
            }
          },
          {
            name: "delegateRole",
            type: {
              option: {
                defined: "TokenDelegateRole"
              }
            }
          },
          {
            name: "lockedTransfer",
            type: {
              option: "publicKey"
            }
          }
        ]
      }
    },
    {
      name: "ReservationListV2",
      type: {
        kind: "struct",
        fields: [
          {
            name: "key",
            type: {
              defined: "Key"
            }
          },
          {
            name: "masterEdition",
            type: "publicKey"
          },
          {
            name: "supplySnapshot",
            type: {
              option: "u64"
            }
          },
          {
            name: "reservations",
            type: {
              vec: {
                defined: "Reservation"
              }
            }
          },
          {
            name: "totalReservationSpots",
            type: "u64"
          },
          {
            name: "currentReservationSpots",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "ReservationListV1",
      type: {
        kind: "struct",
        fields: [
          {
            name: "key",
            type: {
              defined: "Key"
            }
          },
          {
            name: "masterEdition",
            type: "publicKey"
          },
          {
            name: "supplySnapshot",
            type: {
              option: "u64"
            }
          },
          {
            name: "reservations",
            type: {
              vec: {
                defined: "ReservationV1"
              }
            }
          }
        ]
      }
    },
    {
      name: "UseAuthorityRecord",
      type: {
        kind: "struct",
        fields: [
          {
            name: "key",
            type: {
              defined: "Key"
            }
          },
          {
            name: "allowedUses",
            type: "u64"
          },
          {
            name: "bump",
            type: "u8"
          }
        ]
      }
    }
  ],
  types: [
    {
      name: "SetCollectionSizeArgs",
      type: {
        kind: "struct",
        fields: [
          {
            name: "size",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "CreateMasterEditionArgs",
      type: {
        kind: "struct",
        fields: [
          {
            name: "maxSupply",
            type: {
              option: "u64"
            }
          }
        ]
      }
    },
    {
      name: "MintNewEditionFromMasterEditionViaTokenArgs",
      type: {
        kind: "struct",
        fields: [
          {
            name: "edition",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "TransferOutOfEscrowArgs",
      type: {
        kind: "struct",
        fields: [
          {
            name: "amount",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "CreateMetadataAccountArgsV3",
      type: {
        kind: "struct",
        fields: [
          {
            name: "data",
            type: {
              defined: "DataV2"
            }
          },
          {
            name: "isMutable",
            type: "bool"
          },
          {
            name: "collectionDetails",
            type: {
              option: {
                defined: "CollectionDetails"
              }
            }
          }
        ]
      }
    },
    {
      name: "UpdateMetadataAccountArgsV2",
      type: {
        kind: "struct",
        fields: [
          {
            name: "data",
            type: {
              option: {
                defined: "DataV2"
              }
            }
          },
          {
            name: "updateAuthority",
            type: {
              option: "publicKey"
            }
          },
          {
            name: "primarySaleHappened",
            type: {
              option: "bool"
            }
          },
          {
            name: "isMutable",
            type: {
              option: "bool"
            }
          }
        ]
      }
    },
    {
      name: "ApproveUseAuthorityArgs",
      type: {
        kind: "struct",
        fields: [
          {
            name: "numberOfUses",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "UtilizeArgs",
      type: {
        kind: "struct",
        fields: [
          {
            name: "numberOfUses",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "AuthorizationData",
      type: {
        kind: "struct",
        fields: [
          {
            name: "payload",
            type: {
              defined: "Payload"
            }
          }
        ]
      }
    },
    {
      name: "AssetData",
      type: {
        kind: "struct",
        fields: [
          {
            name: "name",
            type: "string"
          },
          {
            name: "symbol",
            type: "string"
          },
          {
            name: "uri",
            type: "string"
          },
          {
            name: "sellerFeeBasisPoints",
            type: "u16"
          },
          {
            name: "creators",
            type: {
              option: {
                vec: {
                  defined: "Creator"
                }
              }
            }
          },
          {
            name: "primarySaleHappened",
            type: "bool"
          },
          {
            name: "isMutable",
            type: "bool"
          },
          {
            name: "tokenStandard",
            type: {
              defined: "TokenStandard"
            }
          },
          {
            name: "collection",
            type: {
              option: {
                defined: "Collection"
              }
            }
          },
          {
            name: "uses",
            type: {
              option: {
                defined: "Uses"
              }
            }
          },
          {
            name: "collectionDetails",
            type: {
              option: {
                defined: "CollectionDetails"
              }
            }
          },
          {
            name: "ruleSet",
            type: {
              option: "publicKey"
            }
          }
        ]
      }
    },
    {
      name: "Collection",
      type: {
        kind: "struct",
        fields: [
          {
            name: "verified",
            type: "bool"
          },
          {
            name: "key",
            type: "publicKey"
          }
        ]
      }
    },
    {
      name: "Creator",
      type: {
        kind: "struct",
        fields: [
          {
            name: "address",
            type: "publicKey"
          },
          {
            name: "verified",
            type: "bool"
          },
          {
            name: "share",
            type: "u8"
          }
        ]
      }
    },
    {
      name: "Data",
      type: {
        kind: "struct",
        fields: [
          {
            name: "name",
            type: "string"
          },
          {
            name: "symbol",
            type: "string"
          },
          {
            name: "uri",
            type: "string"
          },
          {
            name: "sellerFeeBasisPoints",
            type: "u16"
          },
          {
            name: "creators",
            type: {
              option: {
                vec: {
                  defined: "Creator"
                }
              }
            }
          }
        ]
      }
    },
    {
      name: "DataV2",
      type: {
        kind: "struct",
        fields: [
          {
            name: "name",
            type: "string"
          },
          {
            name: "symbol",
            type: "string"
          },
          {
            name: "uri",
            type: "string"
          },
          {
            name: "sellerFeeBasisPoints",
            type: "u16"
          },
          {
            name: "creators",
            type: {
              option: {
                vec: {
                  defined: "Creator"
                }
              }
            }
          },
          {
            name: "collection",
            type: {
              option: {
                defined: "Collection"
              }
            }
          },
          {
            name: "uses",
            type: {
              option: {
                defined: "Uses"
              }
            }
          }
        ]
      }
    },
    {
      name: "Reservation",
      type: {
        kind: "struct",
        fields: [
          {
            name: "address",
            type: "publicKey"
          },
          {
            name: "spotsRemaining",
            type: "u64"
          },
          {
            name: "totalSpots",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "ReservationV1",
      type: {
        kind: "struct",
        fields: [
          {
            name: "address",
            type: "publicKey"
          },
          {
            name: "spotsRemaining",
            type: "u8"
          },
          {
            name: "totalSpots",
            type: "u8"
          }
        ]
      }
    },
    {
      name: "SeedsVec",
      type: {
        kind: "struct",
        fields: [
          {
            name: "seeds",
            type: {
              vec: "bytes"
            }
          }
        ]
      }
    },
    {
      name: "ProofInfo",
      type: {
        kind: "struct",
        fields: [
          {
            name: "proof",
            type: {
              vec: {
                array: [
                  "u8",
                  32
                ]
              }
            }
          }
        ]
      }
    },
    {
      name: "Payload",
      type: {
        kind: "struct",
        fields: [
          {
            name: "map",
            type: {
              hashMap: [
                "string",
                {
                  defined: "PayloadType"
                }
              ]
            }
          }
        ]
      }
    },
    {
      name: "Uses",
      type: {
        kind: "struct",
        fields: [
          {
            name: "useMethod",
            type: {
              defined: "UseMethod"
            }
          },
          {
            name: "remaining",
            type: "u64"
          },
          {
            name: "total",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "BurnArgs",
      type: {
        kind: "enum",
        variants: [
          {
            name: "V1",
            fields: [
              {
                name: "amount",
                type: "u64"
              }
            ]
          }
        ]
      }
    },
    {
      name: "DelegateArgs",
      type: {
        kind: "enum",
        variants: [
          {
            name: "CollectionV1",
            fields: [
              {
                name: "authorization_data",
                type: {
                  option: {
                    defined: "AuthorizationData"
                  }
                }
              }
            ]
          },
          {
            name: "SaleV1",
            fields: [
              {
                name: "amount",
                type: "u64"
              },
              {
                name: "authorization_data",
                type: {
                  option: {
                    defined: "AuthorizationData"
                  }
                }
              }
            ]
          },
          {
            name: "TransferV1",
            fields: [
              {
                name: "amount",
                type: "u64"
              },
              {
                name: "authorization_data",
                type: {
                  option: {
                    defined: "AuthorizationData"
                  }
                }
              }
            ]
          },
          {
            name: "DataV1",
            fields: [
              {
                name: "authorization_data",
                type: {
                  option: {
                    defined: "AuthorizationData"
                  }
                }
              }
            ]
          },
          {
            name: "UtilityV1",
            fields: [
              {
                name: "amount",
                type: "u64"
              },
              {
                name: "authorization_data",
                type: {
                  option: {
                    defined: "AuthorizationData"
                  }
                }
              }
            ]
          },
          {
            name: "StakingV1",
            fields: [
              {
                name: "amount",
                type: "u64"
              },
              {
                name: "authorization_data",
                type: {
                  option: {
                    defined: "AuthorizationData"
                  }
                }
              }
            ]
          },
          {
            name: "StandardV1",
            fields: [
              {
                name: "amount",
                type: "u64"
              }
            ]
          },
          {
            name: "LockedTransferV1",
            fields: [
              {
                name: "amount",
                type: "u64"
              },
              {
                name: "locked_address",
                type: "publicKey"
              },
              {
                name: "authorization_data",
                type: {
                  option: {
                    defined: "AuthorizationData"
                  }
                }
              }
            ]
          },
          {
            name: "ProgrammableConfigV1",
            fields: [
              {
                name: "authorization_data",
                type: {
                  option: {
                    defined: "AuthorizationData"
                  }
                }
              }
            ]
          },
          {
            name: "AuthorityItemV1",
            fields: [
              {
                name: "authorization_data",
                type: {
                  option: {
                    defined: "AuthorizationData"
                  }
                }
              }
            ]
          },
          {
            name: "DataItemV1",
            fields: [
              {
                name: "authorization_data",
                type: {
                  option: {
                    defined: "AuthorizationData"
                  }
                }
              }
            ]
          },
          {
            name: "CollectionItemV1",
            fields: [
              {
                name: "authorization_data",
                type: {
                  option: {
                    defined: "AuthorizationData"
                  }
                }
              }
            ]
          },
          {
            name: "ProgrammableConfigItemV1",
            fields: [
              {
                name: "authorization_data",
                type: {
                  option: {
                    defined: "AuthorizationData"
                  }
                }
              }
            ]
          },
          {
            name: "PrintDelegateV1",
            fields: [
              {
                name: "authorization_data",
                type: {
                  option: {
                    defined: "AuthorizationData"
                  }
                }
              }
            ]
          }
        ]
      }
    },
    {
      name: "RevokeArgs",
      type: {
        kind: "enum",
        variants: [
          {
            name: "CollectionV1"
          },
          {
            name: "SaleV1"
          },
          {
            name: "TransferV1"
          },
          {
            name: "DataV1"
          },
          {
            name: "UtilityV1"
          },
          {
            name: "StakingV1"
          },
          {
            name: "StandardV1"
          },
          {
            name: "LockedTransferV1"
          },
          {
            name: "ProgrammableConfigV1"
          },
          {
            name: "MigrationV1"
          },
          {
            name: "AuthorityItemV1"
          },
          {
            name: "DataItemV1"
          },
          {
            name: "CollectionItemV1"
          },
          {
            name: "ProgrammableConfigItemV1"
          },
          {
            name: "PrintDelegateV1"
          }
        ]
      }
    },
    {
      name: "MetadataDelegateRole",
      type: {
        kind: "enum",
        variants: [
          {
            name: "AuthorityItem"
          },
          {
            name: "Collection"
          },
          {
            name: "Use"
          },
          {
            name: "Data"
          },
          {
            name: "ProgrammableConfig"
          },
          {
            name: "DataItem"
          },
          {
            name: "CollectionItem"
          },
          {
            name: "ProgrammableConfigItem"
          }
        ]
      }
    },
    {
      name: "HolderDelegateRole",
      type: {
        kind: "enum",
        variants: [
          {
            name: "PrintDelegate"
          }
        ]
      }
    },
    {
      name: "CreateArgs",
      type: {
        kind: "enum",
        variants: [
          {
            name: "V1",
            fields: [
              {
                name: "asset_data",
                type: {
                  defined: "AssetData"
                }
              },
              {
                name: "decimals",
                type: {
                  option: "u8"
                }
              },
              {
                name: "print_supply",
                type: {
                  option: {
                    defined: "PrintSupply"
                  }
                }
              }
            ]
          }
        ]
      }
    },
    {
      name: "MintArgs",
      type: {
        kind: "enum",
        variants: [
          {
            name: "V1",
            fields: [
              {
                name: "amount",
                type: "u64"
              },
              {
                name: "authorization_data",
                type: {
                  option: {
                    defined: "AuthorizationData"
                  }
                }
              }
            ]
          }
        ]
      }
    },
    {
      name: "TransferArgs",
      type: {
        kind: "enum",
        variants: [
          {
            name: "V1",
            fields: [
              {
                name: "amount",
                type: "u64"
              },
              {
                name: "authorization_data",
                type: {
                  option: {
                    defined: "AuthorizationData"
                  }
                }
              }
            ]
          }
        ]
      }
    },
    {
      name: "UpdateArgs",
      type: {
        kind: "enum",
        variants: [
          {
            name: "V1",
            fields: [
              {
                name: "new_update_authority",
                type: {
                  option: "publicKey"
                }
              },
              {
                name: "data",
                type: {
                  option: {
                    defined: "Data"
                  }
                }
              },
              {
                name: "primary_sale_happened",
                type: {
                  option: "bool"
                }
              },
              {
                name: "is_mutable",
                type: {
                  option: "bool"
                }
              },
              {
                name: "collection",
                type: {
                  defined: "CollectionToggle"
                }
              },
              {
                name: "collection_details",
                type: {
                  defined: "CollectionDetailsToggle"
                }
              },
              {
                name: "uses",
                type: {
                  defined: "UsesToggle"
                }
              },
              {
                name: "rule_set",
                type: {
                  defined: "RuleSetToggle"
                }
              },
              {
                name: "authorization_data",
                type: {
                  option: {
                    defined: "AuthorizationData"
                  }
                }
              }
            ]
          },
          {
            name: "AsUpdateAuthorityV2",
            fields: [
              {
                name: "new_update_authority",
                type: {
                  option: "publicKey"
                }
              },
              {
                name: "data",
                type: {
                  option: {
                    defined: "Data"
                  }
                }
              },
              {
                name: "primary_sale_happened",
                type: {
                  option: "bool"
                }
              },
              {
                name: "is_mutable",
                type: {
                  option: "bool"
                }
              },
              {
                name: "collection",
                type: {
                  defined: "CollectionToggle"
                }
              },
              {
                name: "collection_details",
                type: {
                  defined: "CollectionDetailsToggle"
                }
              },
              {
                name: "uses",
                type: {
                  defined: "UsesToggle"
                }
              },
              {
                name: "rule_set",
                type: {
                  defined: "RuleSetToggle"
                }
              },
              {
                name: "token_standard",
                type: {
                  option: {
                    defined: "TokenStandard"
                  }
                }
              },
              {
                name: "authorization_data",
                type: {
                  option: {
                    defined: "AuthorizationData"
                  }
                }
              }
            ]
          },
          {
            name: "AsAuthorityItemDelegateV2",
            fields: [
              {
                name: "new_update_authority",
                type: {
                  option: "publicKey"
                }
              },
              {
                name: "primary_sale_happened",
                type: {
                  option: "bool"
                }
              },
              {
                name: "is_mutable",
                type: {
                  option: "bool"
                }
              },
              {
                name: "token_standard",
                type: {
                  option: {
                    defined: "TokenStandard"
                  }
                }
              },
              {
                name: "authorization_data",
                type: {
                  option: {
                    defined: "AuthorizationData"
                  }
                }
              }
            ]
          },
          {
            name: "AsCollectionDelegateV2",
            fields: [
              {
                name: "collection",
                type: {
                  defined: "CollectionToggle"
                }
              },
              {
                name: "authorization_data",
                type: {
                  option: {
                    defined: "AuthorizationData"
                  }
                }
              }
            ]
          },
          {
            name: "AsDataDelegateV2",
            fields: [
              {
                name: "data",
                type: {
                  option: {
                    defined: "Data"
                  }
                }
              },
              {
                name: "authorization_data",
                type: {
                  option: {
                    defined: "AuthorizationData"
                  }
                }
              }
            ]
          },
          {
            name: "AsProgrammableConfigDelegateV2",
            fields: [
              {
                name: "rule_set",
                type: {
                  defined: "RuleSetToggle"
                }
              },
              {
                name: "authorization_data",
                type: {
                  option: {
                    defined: "AuthorizationData"
                  }
                }
              }
            ]
          },
          {
            name: "AsDataItemDelegateV2",
            fields: [
              {
                name: "data",
                type: {
                  option: {
                    defined: "Data"
                  }
                }
              },
              {
                name: "authorization_data",
                type: {
                  option: {
                    defined: "AuthorizationData"
                  }
                }
              }
            ]
          },
          {
            name: "AsCollectionItemDelegateV2",
            fields: [
              {
                name: "collection",
                type: {
                  defined: "CollectionToggle"
                }
              },
              {
                name: "authorization_data",
                type: {
                  option: {
                    defined: "AuthorizationData"
                  }
                }
              }
            ]
          },
          {
            name: "AsProgrammableConfigItemDelegateV2",
            fields: [
              {
                name: "rule_set",
                type: {
                  defined: "RuleSetToggle"
                }
              },
              {
                name: "authorization_data",
                type: {
                  option: {
                    defined: "AuthorizationData"
                  }
                }
              }
            ]
          }
        ]
      }
    },
    {
      name: "CollectionToggle",
      type: {
        kind: "enum",
        variants: [
          {
            name: "None"
          },
          {
            name: "Clear"
          },
          {
            name: "Set",
            fields: [
              {
                defined: "Collection"
              }
            ]
          }
        ]
      }
    },
    {
      name: "UsesToggle",
      type: {
        kind: "enum",
        variants: [
          {
            name: "None"
          },
          {
            name: "Clear"
          },
          {
            name: "Set",
            fields: [
              {
                defined: "Uses"
              }
            ]
          }
        ]
      }
    },
    {
      name: "CollectionDetailsToggle",
      type: {
        kind: "enum",
        variants: [
          {
            name: "None"
          },
          {
            name: "Clear"
          },
          {
            name: "Set",
            fields: [
              {
                defined: "CollectionDetails"
              }
            ]
          }
        ]
      }
    },
    {
      name: "RuleSetToggle",
      type: {
        kind: "enum",
        variants: [
          {
            name: "None"
          },
          {
            name: "Clear"
          },
          {
            name: "Set",
            fields: [
              "publicKey"
            ]
          }
        ]
      }
    },
    {
      name: "PrintArgs",
      type: {
        kind: "enum",
        variants: [
          {
            name: "V1",
            fields: [
              {
                name: "edition",
                type: "u64"
              }
            ]
          },
          {
            name: "V2",
            fields: [
              {
                name: "edition",
                type: "u64"
              }
            ]
          }
        ]
      }
    },
    {
      name: "LockArgs",
      type: {
        kind: "enum",
        variants: [
          {
            name: "V1",
            fields: [
              {
                name: "authorization_data",
                type: {
                  option: {
                    defined: "AuthorizationData"
                  }
                }
              }
            ]
          }
        ]
      }
    },
    {
      name: "UnlockArgs",
      type: {
        kind: "enum",
        variants: [
          {
            name: "V1",
            fields: [
              {
                name: "authorization_data",
                type: {
                  option: {
                    defined: "AuthorizationData"
                  }
                }
              }
            ]
          }
        ]
      }
    },
    {
      name: "UseArgs",
      type: {
        kind: "enum",
        variants: [
          {
            name: "V1",
            fields: [
              {
                name: "authorization_data",
                type: {
                  option: {
                    defined: "AuthorizationData"
                  }
                }
              }
            ]
          }
        ]
      }
    },
    {
      name: "VerificationArgs",
      type: {
        kind: "enum",
        variants: [
          {
            name: "CreatorV1"
          },
          {
            name: "CollectionV1"
          }
        ]
      }
    },
    {
      name: "TokenStandard",
      type: {
        kind: "enum",
        variants: [
          {
            name: "NonFungible"
          },
          {
            name: "FungibleAsset"
          },
          {
            name: "Fungible"
          },
          {
            name: "NonFungibleEdition"
          },
          {
            name: "ProgrammableNonFungible"
          },
          {
            name: "ProgrammableNonFungibleEdition"
          }
        ]
      }
    },
    {
      name: "Key",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Uninitialized"
          },
          {
            name: "EditionV1"
          },
          {
            name: "MasterEditionV1"
          },
          {
            name: "ReservationListV1"
          },
          {
            name: "MetadataV1"
          },
          {
            name: "ReservationListV2"
          },
          {
            name: "MasterEditionV2"
          },
          {
            name: "EditionMarker"
          },
          {
            name: "UseAuthorityRecord"
          },
          {
            name: "CollectionAuthorityRecord"
          },
          {
            name: "TokenOwnedEscrow"
          },
          {
            name: "TokenRecord"
          },
          {
            name: "MetadataDelegate"
          },
          {
            name: "EditionMarkerV2"
          },
          {
            name: "HolderDelegate"
          }
        ]
      }
    },
    {
      name: "CollectionDetails",
      type: {
        kind: "enum",
        variants: [
          {
            name: "V1",
            fields: [
              {
                name: "size",
                type: "u64"
              }
            ]
          },
          {
            name: "V2",
            fields: [
              {
                name: "padding",
                type: {
                  array: [
                    "u8",
                    8
                  ]
                }
              }
            ]
          }
        ]
      }
    },
    {
      name: "EscrowAuthority",
      type: {
        kind: "enum",
        variants: [
          {
            name: "TokenOwner"
          },
          {
            name: "Creator",
            fields: [
              "publicKey"
            ]
          }
        ]
      }
    },
    {
      name: "PrintSupply",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Zero"
          },
          {
            name: "Limited",
            fields: [
              "u64"
            ]
          },
          {
            name: "Unlimited"
          }
        ]
      }
    },
    {
      name: "ProgrammableConfig",
      type: {
        kind: "enum",
        variants: [
          {
            name: "V1",
            fields: [
              {
                name: "rule_set",
                type: {
                  option: "publicKey"
                }
              }
            ]
          }
        ]
      }
    },
    {
      name: "MigrationType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "CollectionV1"
          },
          {
            name: "ProgrammableV1"
          }
        ]
      }
    },
    {
      name: "TokenState",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Unlocked"
          },
          {
            name: "Locked"
          },
          {
            name: "Listed"
          }
        ]
      }
    },
    {
      name: "TokenDelegateRole",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Sale"
          },
          {
            name: "Transfer"
          },
          {
            name: "Utility"
          },
          {
            name: "Staking"
          },
          {
            name: "Standard"
          },
          {
            name: "LockedTransfer"
          },
          {
            name: "Migration"
          }
        ]
      }
    },
    {
      name: "AuthorityType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "None"
          },
          {
            name: "Metadata"
          },
          {
            name: "Holder"
          },
          {
            name: "MetadataDelegate"
          },
          {
            name: "TokenDelegate"
          }
        ]
      }
    },
    {
      name: "PayloadKey",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Amount"
          },
          {
            name: "Authority"
          },
          {
            name: "AuthoritySeeds"
          },
          {
            name: "Delegate"
          },
          {
            name: "DelegateSeeds"
          },
          {
            name: "Destination"
          },
          {
            name: "DestinationSeeds"
          },
          {
            name: "Holder"
          },
          {
            name: "Source"
          },
          {
            name: "SourceSeeds"
          }
        ]
      }
    },
    {
      name: "PayloadType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Pubkey",
            fields: [
              "publicKey"
            ]
          },
          {
            name: "Seeds",
            fields: [
              {
                defined: "SeedsVec"
              }
            ]
          },
          {
            name: "MerkleProof",
            fields: [
              {
                defined: "ProofInfo"
              }
            ]
          },
          {
            name: "Number",
            fields: [
              "u64"
            ]
          }
        ]
      }
    },
    {
      name: "UseMethod",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Burn"
          },
          {
            name: "Multiple"
          },
          {
            name: "Single"
          }
        ]
      }
    }
  ],
  errors: [
    {
      code: 0,
      name: "InstructionUnpackError",
      msg: ""
    },
    {
      code: 1,
      name: "InstructionPackError",
      msg: ""
    },
    {
      code: 2,
      name: "NotRentExempt",
      msg: "Lamport balance below rent-exempt threshold"
    },
    {
      code: 3,
      name: "AlreadyInitialized",
      msg: "Already initialized"
    },
    {
      code: 4,
      name: "Uninitialized",
      msg: "Uninitialized"
    },
    {
      code: 5,
      name: "InvalidMetadataKey",
      msg: " Metadata's key must match seed of ['metadata', program id, mint] provided"
    },
    {
      code: 6,
      name: "InvalidEditionKey",
      msg: "Edition's key must match seed of ['metadata', program id, name, 'edition'] provided"
    },
    {
      code: 7,
      name: "UpdateAuthorityIncorrect",
      msg: "Update Authority given does not match"
    },
    {
      code: 8,
      name: "UpdateAuthorityIsNotSigner",
      msg: "Update Authority needs to be signer to update metadata"
    },
    {
      code: 9,
      name: "NotMintAuthority",
      msg: "You must be the mint authority and signer on this transaction"
    },
    {
      code: 10,
      name: "InvalidMintAuthority",
      msg: "Mint authority provided does not match the authority on the mint"
    },
    {
      code: 11,
      name: "NameTooLong",
      msg: "Name too long"
    },
    {
      code: 12,
      name: "SymbolTooLong",
      msg: "Symbol too long"
    },
    {
      code: 13,
      name: "UriTooLong",
      msg: "URI too long"
    },
    {
      code: 14,
      name: "UpdateAuthorityMustBeEqualToMetadataAuthorityAndSigner",
      msg: ""
    },
    {
      code: 15,
      name: "MintMismatch",
      msg: "Mint given does not match mint on Metadata"
    },
    {
      code: 16,
      name: "EditionsMustHaveExactlyOneToken",
      msg: "Editions must have exactly one token"
    },
    {
      code: 17,
      name: "MaxEditionsMintedAlready",
      msg: ""
    },
    {
      code: 18,
      name: "TokenMintToFailed",
      msg: ""
    },
    {
      code: 19,
      name: "MasterRecordMismatch",
      msg: ""
    },
    {
      code: 20,
      name: "DestinationMintMismatch",
      msg: ""
    },
    {
      code: 21,
      name: "EditionAlreadyMinted",
      msg: ""
    },
    {
      code: 22,
      name: "PrintingMintDecimalsShouldBeZero",
      msg: ""
    },
    {
      code: 23,
      name: "OneTimePrintingAuthorizationMintDecimalsShouldBeZero",
      msg: ""
    },
    {
      code: 24,
      name: "EditionMintDecimalsShouldBeZero",
      msg: "EditionMintDecimalsShouldBeZero"
    },
    {
      code: 25,
      name: "TokenBurnFailed",
      msg: ""
    },
    {
      code: 26,
      name: "TokenAccountOneTimeAuthMintMismatch",
      msg: ""
    },
    {
      code: 27,
      name: "DerivedKeyInvalid",
      msg: "Derived key invalid"
    },
    {
      code: 28,
      name: "PrintingMintMismatch",
      msg: "The Printing mint does not match that on the master edition!"
    },
    {
      code: 29,
      name: "OneTimePrintingAuthMintMismatch",
      msg: "The One Time Printing Auth mint does not match that on the master edition!"
    },
    {
      code: 30,
      name: "TokenAccountMintMismatch",
      msg: "The mint of the token account does not match the Printing mint!"
    },
    {
      code: 31,
      name: "TokenAccountMintMismatchV2",
      msg: "The mint of the token account does not match the master metadata mint!"
    },
    {
      code: 32,
      name: "NotEnoughTokens",
      msg: "Not enough tokens to mint a limited edition"
    },
    {
      code: 33,
      name: "PrintingMintAuthorizationAccountMismatch",
      msg: ""
    },
    {
      code: 34,
      name: "AuthorizationTokenAccountOwnerMismatch",
      msg: ""
    },
    {
      code: 35,
      name: "Disabled",
      msg: ""
    },
    {
      code: 36,
      name: "CreatorsTooLong",
      msg: "Creators list too long"
    },
    {
      code: 37,
      name: "CreatorsMustBeAtleastOne",
      msg: "Creators must be at least one if set"
    },
    {
      code: 38,
      name: "MustBeOneOfCreators",
      msg: ""
    },
    {
      code: 39,
      name: "NoCreatorsPresentOnMetadata",
      msg: "This metadata does not have creators"
    },
    {
      code: 40,
      name: "CreatorNotFound",
      msg: "This creator address was not found"
    },
    {
      code: 41,
      name: "InvalidBasisPoints",
      msg: "Basis points cannot be more than 10000"
    },
    {
      code: 42,
      name: "PrimarySaleCanOnlyBeFlippedToTrue",
      msg: "Primary sale can only be flipped to true and is immutable"
    },
    {
      code: 43,
      name: "OwnerMismatch",
      msg: "Owner does not match that on the account given"
    },
    {
      code: 44,
      name: "NoBalanceInAccountForAuthorization",
      msg: "This account has no tokens to be used for authorization"
    },
    {
      code: 45,
      name: "ShareTotalMustBe100",
      msg: "Share total must equal 100 for creator array"
    },
    {
      code: 46,
      name: "ReservationExists",
      msg: ""
    },
    {
      code: 47,
      name: "ReservationDoesNotExist",
      msg: ""
    },
    {
      code: 48,
      name: "ReservationNotSet",
      msg: ""
    },
    {
      code: 49,
      name: "ReservationAlreadyMade",
      msg: ""
    },
    {
      code: 50,
      name: "BeyondMaxAddressSize",
      msg: ""
    },
    {
      code: 51,
      name: "NumericalOverflowError",
      msg: "NumericalOverflowError"
    },
    {
      code: 52,
      name: "ReservationBreachesMaximumSupply",
      msg: ""
    },
    {
      code: 53,
      name: "AddressNotInReservation",
      msg: ""
    },
    {
      code: 54,
      name: "CannotVerifyAnotherCreator",
      msg: "You cannot unilaterally verify another creator, they must sign"
    },
    {
      code: 55,
      name: "CannotUnverifyAnotherCreator",
      msg: "You cannot unilaterally unverify another creator"
    },
    {
      code: 56,
      name: "SpotMismatch",
      msg: ""
    },
    {
      code: 57,
      name: "IncorrectOwner",
      msg: "Incorrect account owner"
    },
    {
      code: 58,
      name: "PrintingWouldBreachMaximumSupply",
      msg: ""
    },
    {
      code: 59,
      name: "DataIsImmutable",
      msg: "Data is immutable"
    },
    {
      code: 60,
      name: "DuplicateCreatorAddress",
      msg: "No duplicate creator addresses"
    },
    {
      code: 61,
      name: "ReservationSpotsRemainingShouldMatchTotalSpotsAtStart",
      msg: ""
    },
    {
      code: 62,
      name: "InvalidTokenProgram",
      msg: "Invalid token program"
    },
    {
      code: 63,
      name: "DataTypeMismatch",
      msg: "Data type mismatch"
    },
    {
      code: 64,
      name: "BeyondAlottedAddressSize",
      msg: ""
    },
    {
      code: 65,
      name: "ReservationNotComplete",
      msg: ""
    },
    {
      code: 66,
      name: "TriedToReplaceAnExistingReservation",
      msg: ""
    },
    {
      code: 67,
      name: "InvalidOperation",
      msg: "Invalid operation"
    },
    {
      code: 68,
      name: "InvalidOwner",
      msg: "Invalid Owner"
    },
    {
      code: 69,
      name: "PrintingMintSupplyMustBeZeroForConversion",
      msg: "Printing mint supply must be zero for conversion"
    },
    {
      code: 70,
      name: "OneTimeAuthMintSupplyMustBeZeroForConversion",
      msg: "One Time Auth mint supply must be zero for conversion"
    },
    {
      code: 71,
      name: "InvalidEditionIndex",
      msg: "You tried to insert one edition too many into an edition mark pda"
    },
    {
      code: 72,
      name: "ReservationArrayShouldBeSizeOne",
      msg: ""
    },
    {
      code: 73,
      name: "IsMutableCanOnlyBeFlippedToFalse",
      msg: "Is Mutable can only be flipped to false"
    },
    {
      code: 74,
      name: "CollectionCannotBeVerifiedInThisInstruction",
      msg: "Collection cannot be verified in this instruction"
    },
    {
      code: 75,
      name: "Removed",
      msg: "This instruction was deprecated in a previous release and is now removed"
    },
    {
      code: 76,
      name: "MustBeBurned",
      msg: ""
    },
    {
      code: 77,
      name: "InvalidUseMethod",
      msg: "This use method is invalid"
    },
    {
      code: 78,
      name: "CannotChangeUseMethodAfterFirstUse",
      msg: "Cannot Change Use Method after the first use"
    },
    {
      code: 79,
      name: "CannotChangeUsesAfterFirstUse",
      msg: "Cannot Change Remaining or Available uses after the first use"
    },
    {
      code: 80,
      name: "CollectionNotFound",
      msg: "Collection Not Found on Metadata"
    },
    {
      code: 81,
      name: "InvalidCollectionUpdateAuthority",
      msg: "Collection Update Authority is invalid"
    },
    {
      code: 82,
      name: "CollectionMustBeAUniqueMasterEdition",
      msg: "Collection Must Be a Unique Master Edition v2"
    },
    {
      code: 83,
      name: "UseAuthorityRecordAlreadyExists",
      msg: "The Use Authority Record Already Exists, to modify it Revoke, then Approve"
    },
    {
      code: 84,
      name: "UseAuthorityRecordAlreadyRevoked",
      msg: "The Use Authority Record is empty or already revoked"
    },
    {
      code: 85,
      name: "Unusable",
      msg: "This token has no uses"
    },
    {
      code: 86,
      name: "NotEnoughUses",
      msg: "There are not enough Uses left on this token."
    },
    {
      code: 87,
      name: "CollectionAuthorityRecordAlreadyExists",
      msg: "This Collection Authority Record Already Exists."
    },
    {
      code: 88,
      name: "CollectionAuthorityDoesNotExist",
      msg: "This Collection Authority Record Does Not Exist."
    },
    {
      code: 89,
      name: "InvalidUseAuthorityRecord",
      msg: "This Use Authority Record is invalid."
    },
    {
      code: 90,
      name: "InvalidCollectionAuthorityRecord",
      msg: ""
    },
    {
      code: 91,
      name: "InvalidFreezeAuthority",
      msg: "Metadata does not match the freeze authority on the mint"
    },
    {
      code: 92,
      name: "InvalidDelegate",
      msg: "All tokens in this account have not been delegated to this user."
    },
    {
      code: 93,
      name: "CannotAdjustVerifiedCreator",
      msg: ""
    },
    {
      code: 94,
      name: "CannotRemoveVerifiedCreator",
      msg: "Verified creators cannot be removed."
    },
    {
      code: 95,
      name: "CannotWipeVerifiedCreators",
      msg: ""
    },
    {
      code: 96,
      name: "NotAllowedToChangeSellerFeeBasisPoints",
      msg: ""
    },
    {
      code: 97,
      name: "EditionOverrideCannotBeZero",
      msg: "Edition override cannot be zero"
    },
    {
      code: 98,
      name: "InvalidUser",
      msg: "Invalid User"
    },
    {
      code: 99,
      name: "RevokeCollectionAuthoritySignerIncorrect",
      msg: "Revoke Collection Authority signer is incorrect"
    },
    {
      code: 100,
      name: "TokenCloseFailed",
      msg: ""
    },
    {
      code: 101,
      name: "UnsizedCollection",
      msg: "Can't use this function on unsized collection"
    },
    {
      code: 102,
      name: "SizedCollection",
      msg: "Can't use this function on a sized collection"
    },
    {
      code: 103,
      name: "MissingCollectionMetadata",
      msg: "Missing collection metadata account"
    },
    {
      code: 104,
      name: "NotAMemberOfCollection",
      msg: "This NFT is not a member of the specified collection."
    },
    {
      code: 105,
      name: "NotVerifiedMemberOfCollection",
      msg: "This NFT is not a verified member of the specified collection."
    },
    {
      code: 106,
      name: "NotACollectionParent",
      msg: "This NFT is not a collection parent NFT."
    },
    {
      code: 107,
      name: "CouldNotDetermineTokenStandard",
      msg: "Could not determine a TokenStandard type."
    },
    {
      code: 108,
      name: "MissingEditionAccount",
      msg: "This mint account has an edition but none was provided."
    },
    {
      code: 109,
      name: "NotAMasterEdition",
      msg: "This edition is not a Master Edition"
    },
    {
      code: 110,
      name: "MasterEditionHasPrints",
      msg: "This Master Edition has existing prints"
    },
    {
      code: 111,
      name: "BorshDeserializationError",
      msg: ""
    },
    {
      code: 112,
      name: "CannotUpdateVerifiedCollection",
      msg: "Cannot update a verified collection in this command"
    },
    {
      code: 113,
      name: "CollectionMasterEditionAccountInvalid",
      msg: "Edition account doesnt match collection "
    },
    {
      code: 114,
      name: "AlreadyVerified",
      msg: "Item is already verified."
    },
    {
      code: 115,
      name: "AlreadyUnverified",
      msg: ""
    },
    {
      code: 116,
      name: "NotAPrintEdition",
      msg: "This edition is not a Print Edition"
    },
    {
      code: 117,
      name: "InvalidMasterEdition",
      msg: "Invalid Master Edition"
    },
    {
      code: 118,
      name: "InvalidPrintEdition",
      msg: "Invalid Print Edition"
    },
    {
      code: 119,
      name: "InvalidEditionMarker",
      msg: "Invalid Edition Marker"
    },
    {
      code: 120,
      name: "ReservationListDeprecated",
      msg: "Reservation List is Deprecated"
    },
    {
      code: 121,
      name: "PrintEditionDoesNotMatchMasterEdition",
      msg: "Print Edition does not match Master Edition"
    },
    {
      code: 122,
      name: "EditionNumberGreaterThanMaxSupply",
      msg: "Edition Number greater than max supply"
    },
    {
      code: 123,
      name: "MustUnverify",
      msg: "Must unverify before migrating collections."
    },
    {
      code: 124,
      name: "InvalidEscrowBumpSeed",
      msg: "Invalid Escrow Account Bump Seed"
    },
    {
      code: 125,
      name: "MustBeEscrowAuthority",
      msg: "Must Escrow Authority"
    },
    {
      code: 126,
      name: "InvalidSystemProgram",
      msg: "Invalid System Program"
    },
    {
      code: 127,
      name: "MustBeNonFungible",
      msg: "Must be a Non Fungible Token"
    },
    {
      code: 128,
      name: "InsufficientTokens",
      msg: "Insufficient tokens for transfer"
    },
    {
      code: 129,
      name: "BorshSerializationError",
      msg: "Borsh Serialization Error"
    },
    {
      code: 130,
      name: "NoFreezeAuthoritySet",
      msg: "Cannot create NFT with no Freeze Authority."
    },
    {
      code: 131,
      name: "InvalidCollectionSizeChange",
      msg: "Invalid collection size change"
    },
    {
      code: 132,
      name: "InvalidBubblegumSigner",
      msg: "Invalid bubblegum signer"
    },
    {
      code: 133,
      name: "EscrowParentHasDelegate",
      msg: "Escrow parent cannot have a delegate"
    },
    {
      code: 134,
      name: "MintIsNotSigner",
      msg: "Mint needs to be signer to initialize the account"
    },
    {
      code: 135,
      name: "InvalidTokenStandard",
      msg: "Invalid token standard"
    },
    {
      code: 136,
      name: "InvalidMintForTokenStandard",
      msg: "Invalid mint account for specified token standard"
    },
    {
      code: 137,
      name: "InvalidAuthorizationRules",
      msg: "Invalid authorization rules account"
    },
    {
      code: 138,
      name: "MissingAuthorizationRules",
      msg: "Missing authorization rules account"
    },
    {
      code: 139,
      name: "MissingProgrammableConfig",
      msg: "Missing programmable configuration"
    },
    {
      code: 140,
      name: "InvalidProgrammableConfig",
      msg: "Invalid programmable configuration"
    },
    {
      code: 141,
      name: "DelegateAlreadyExists",
      msg: "Delegate already exists"
    },
    {
      code: 142,
      name: "DelegateNotFound",
      msg: "Delegate not found"
    },
    {
      code: 143,
      name: "MissingAccountInBuilder",
      msg: "Required account not set in instruction builder"
    },
    {
      code: 144,
      name: "MissingArgumentInBuilder",
      msg: "Required argument not set in instruction builder"
    },
    {
      code: 145,
      name: "FeatureNotSupported",
      msg: "Feature not supported currently"
    },
    {
      code: 146,
      name: "InvalidSystemWallet",
      msg: "Invalid system wallet"
    },
    {
      code: 147,
      name: "OnlySaleDelegateCanTransfer",
      msg: "Only the sale delegate can transfer while its set"
    },
    {
      code: 148,
      name: "MissingTokenAccount",
      msg: "Missing token account"
    },
    {
      code: 149,
      name: "MissingSplTokenProgram",
      msg: "Missing SPL token program"
    },
    {
      code: 150,
      name: "MissingAuthorizationRulesProgram",
      msg: "Missing authorization rules program"
    },
    {
      code: 151,
      name: "InvalidDelegateRoleForTransfer",
      msg: "Invalid delegate role for transfer"
    },
    {
      code: 152,
      name: "InvalidTransferAuthority",
      msg: "Invalid transfer authority"
    },
    {
      code: 153,
      name: "InstructionNotSupported",
      msg: "Instruction not supported for ProgrammableNonFungible assets"
    },
    {
      code: 154,
      name: "KeyMismatch",
      msg: "Public key does not match expected value"
    },
    {
      code: 155,
      name: "LockedToken",
      msg: "Token is locked"
    },
    {
      code: 156,
      name: "UnlockedToken",
      msg: "Token is unlocked"
    },
    {
      code: 157,
      name: "MissingDelegateRole",
      msg: "Missing delegate role"
    },
    {
      code: 158,
      name: "InvalidAuthorityType",
      msg: "Invalid authority type"
    },
    {
      code: 159,
      name: "MissingTokenRecord",
      msg: "Missing token record account"
    },
    {
      code: 160,
      name: "MintSupplyMustBeZero",
      msg: "Mint supply must be zero for programmable assets"
    },
    {
      code: 161,
      name: "DataIsEmptyOrZeroed",
      msg: "Data is empty or zeroed"
    },
    {
      code: 162,
      name: "MissingTokenOwnerAccount",
      msg: "Missing token owner"
    },
    {
      code: 163,
      name: "InvalidMasterEditionAccountLength",
      msg: "Master edition account has an invalid length"
    },
    {
      code: 164,
      name: "IncorrectTokenState",
      msg: "Incorrect token state"
    },
    {
      code: 165,
      name: "InvalidDelegateRole",
      msg: "Invalid delegate role"
    },
    {
      code: 166,
      name: "MissingPrintSupply",
      msg: "Print supply is required for non-fungibles"
    },
    {
      code: 167,
      name: "MissingMasterEditionAccount",
      msg: "Missing master edition account"
    },
    {
      code: 168,
      name: "AmountMustBeGreaterThanZero",
      msg: "Amount must be greater than zero"
    },
    {
      code: 169,
      name: "InvalidDelegateArgs",
      msg: "Invalid delegate args"
    },
    {
      code: 170,
      name: "MissingLockedTransferAddress",
      msg: "Missing address for locked transfer"
    },
    {
      code: 171,
      name: "InvalidLockedTransferAddress",
      msg: "Invalid destination address for locked transfer"
    },
    {
      code: 172,
      name: "DataIncrementLimitExceeded",
      msg: "Exceeded account realloc increase limit"
    },
    {
      code: 173,
      name: "CannotUpdateAssetWithDelegate",
      msg: "Cannot update the rule set of a programmable asset that has a delegate"
    },
    {
      code: 174,
      name: "InvalidAmount",
      msg: "Invalid token amount for this operation or token standard"
    },
    {
      code: 175,
      name: "MissingMasterEditionMintAccount",
      msg: "Missing master edition mint account"
    },
    {
      code: 176,
      name: "MissingMasterEditionTokenAccount",
      msg: "Missing master edition token account"
    },
    {
      code: 177,
      name: "MissingEditionMarkerAccount",
      msg: "Missing edition marker account"
    },
    {
      code: 178,
      name: "CannotBurnWithDelegate",
      msg: "Cannot burn while persistent delegate is set"
    },
    {
      code: 179,
      name: "MissingEdition",
      msg: "Missing edition account"
    },
    {
      code: 180,
      name: "InvalidAssociatedTokenAccountProgram",
      msg: "Invalid Associated Token Account Program"
    },
    {
      code: 181,
      name: "InvalidInstructionsSysvar",
      msg: "Invalid InstructionsSysvar"
    },
    {
      code: 182,
      name: "InvalidParentAccounts",
      msg: "Invalid or Unneeded parent accounts"
    },
    {
      code: 183,
      name: "InvalidUpdateArgs",
      msg: "Authority cannot apply all update args"
    },
    {
      code: 184,
      name: "InsufficientTokenBalance",
      msg: "Token account does not have enough tokens"
    },
    {
      code: 185,
      name: "MissingCollectionMint",
      msg: "Missing collection account"
    },
    {
      code: 186,
      name: "MissingCollectionMasterEdition",
      msg: "Missing collection master edition account"
    },
    {
      code: 187,
      name: "InvalidTokenRecord",
      msg: "Invalid token record account"
    },
    {
      code: 188,
      name: "InvalidCloseAuthority",
      msg: "The close authority needs to be revoked by the Utility Delegate"
    },
    {
      code: 189,
      name: "InvalidInstruction",
      msg: "Invalid or removed instruction"
    },
    {
      code: 190,
      name: "MissingDelegateRecord",
      msg: "Missing delegate record"
    },
    {
      code: 191,
      name: "InvalidFeeAccount",
      msg: ""
    },
    {
      code: 192,
      name: "InvalidMetadataFlags",
      msg: ""
    },
    {
      code: 193,
      name: "CannotChangeUpdateAuthorityWithDelegate",
      msg: "Cannot change the update authority with a delegate"
    },
    {
      code: 194,
      name: "InvalidMintExtensionType",
      msg: "Invalid mint extension type"
    },
    {
      code: 195,
      name: "InvalidMintCloseAuthority",
      msg: "Invalid mint close authority"
    },
    {
      code: 196,
      name: "InvalidMetadataPointer",
      msg: "Invalid metadata pointer"
    },
    {
      code: 197,
      name: "InvalidTokenExtensionType",
      msg: "Invalid token extension type"
    },
    {
      code: 198,
      name: "MissingImmutableOwnerExtension",
      msg: "Missing immutable owner extension"
    },
    {
      code: 199,
      name: "ExpectedUninitializedAccount",
      msg: "Expected account to be uninitialized"
    },
    {
      code: 200,
      name: "InvalidEditionAccountLength",
      msg: "Edition account has an invalid length"
    }
  ],
  metadata: {
    origin: "shank",
    address: "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s",
    binaryVersion: "0.3.0",
    libVersion: "0.3.0"
  }
};

// idl/metaplex-bubblegum.json
var metaplex_bubblegum_default = {
  version: "0.12.0",
  name: "bubblegum",
  instructions: [
    {
      name: "burn",
      accounts: [
        {
          name: "treeAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "leafOwner",
          isMut: false,
          isSigner: false
        },
        {
          name: "leafDelegate",
          isMut: false,
          isSigner: false
        },
        {
          name: "merkleTree",
          isMut: true,
          isSigner: false
        },
        {
          name: "logWrapper",
          isMut: false,
          isSigner: false
        },
        {
          name: "compressionProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "root",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "dataHash",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "creatorHash",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "nonce",
          type: "u64"
        },
        {
          name: "index",
          type: "u32"
        }
      ]
    },
    {
      name: "cancelRedeem",
      accounts: [
        {
          name: "treeAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "leafOwner",
          isMut: true,
          isSigner: true
        },
        {
          name: "merkleTree",
          isMut: true,
          isSigner: false
        },
        {
          name: "voucher",
          isMut: true,
          isSigner: false
        },
        {
          name: "logWrapper",
          isMut: false,
          isSigner: false
        },
        {
          name: "compressionProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "root",
          type: {
            array: [
              "u8",
              32
            ]
          }
        }
      ]
    },
    {
      name: "createTree",
      accounts: [
        {
          name: "treeAuthority",
          isMut: true,
          isSigner: false
        },
        {
          name: "merkleTree",
          isMut: true,
          isSigner: false
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true
        },
        {
          name: "treeCreator",
          isMut: false,
          isSigner: true
        },
        {
          name: "logWrapper",
          isMut: false,
          isSigner: false
        },
        {
          name: "compressionProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "maxDepth",
          type: "u32"
        },
        {
          name: "maxBufferSize",
          type: "u32"
        },
        {
          name: "public",
          type: {
            option: "bool"
          }
        }
      ]
    },
    {
      name: "decompressV1",
      accounts: [
        {
          name: "voucher",
          isMut: true,
          isSigner: false
        },
        {
          name: "leafOwner",
          isMut: true,
          isSigner: true
        },
        {
          name: "tokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "mint",
          isMut: true,
          isSigner: false
        },
        {
          name: "mintAuthority",
          isMut: true,
          isSigner: false
        },
        {
          name: "metadata",
          isMut: true,
          isSigner: false
        },
        {
          name: "masterEdition",
          isMut: true,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "sysvarRent",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenMetadataProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "logWrapper",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "metadata",
          type: {
            defined: "MetadataArgs"
          }
        }
      ]
    },
    {
      name: "delegate",
      accounts: [
        {
          name: "treeAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "leafOwner",
          isMut: false,
          isSigner: true
        },
        {
          name: "previousLeafDelegate",
          isMut: false,
          isSigner: false
        },
        {
          name: "newLeafDelegate",
          isMut: false,
          isSigner: false
        },
        {
          name: "merkleTree",
          isMut: true,
          isSigner: false
        },
        {
          name: "logWrapper",
          isMut: false,
          isSigner: false
        },
        {
          name: "compressionProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "root",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "dataHash",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "creatorHash",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "nonce",
          type: "u64"
        },
        {
          name: "index",
          type: "u32"
        }
      ]
    },
    {
      name: "mintToCollectionV1",
      accounts: [
        {
          name: "treeAuthority",
          isMut: true,
          isSigner: false
        },
        {
          name: "leafOwner",
          isMut: false,
          isSigner: false
        },
        {
          name: "leafDelegate",
          isMut: false,
          isSigner: false
        },
        {
          name: "merkleTree",
          isMut: true,
          isSigner: false
        },
        {
          name: "payer",
          isMut: false,
          isSigner: true
        },
        {
          name: "treeDelegate",
          isMut: false,
          isSigner: true
        },
        {
          name: "collectionAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "collectionAuthorityRecordPda",
          isMut: false,
          isSigner: false
        },
        {
          name: "collectionMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "collectionMetadata",
          isMut: true,
          isSigner: false
        },
        {
          name: "editionAccount",
          isMut: false,
          isSigner: false
        },
        {
          name: "bubblegumSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "logWrapper",
          isMut: false,
          isSigner: false
        },
        {
          name: "compressionProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenMetadataProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "metadataArgs",
          type: {
            defined: "MetadataArgs"
          }
        }
      ]
    },
    {
      name: "mintV1",
      accounts: [
        {
          name: "treeAuthority",
          isMut: true,
          isSigner: false
        },
        {
          name: "leafOwner",
          isMut: false,
          isSigner: false
        },
        {
          name: "leafDelegate",
          isMut: false,
          isSigner: false
        },
        {
          name: "merkleTree",
          isMut: true,
          isSigner: false
        },
        {
          name: "payer",
          isMut: false,
          isSigner: true
        },
        {
          name: "treeDelegate",
          isMut: false,
          isSigner: true
        },
        {
          name: "logWrapper",
          isMut: false,
          isSigner: false
        },
        {
          name: "compressionProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "message",
          type: {
            defined: "MetadataArgs"
          }
        }
      ]
    },
    {
      name: "redeem",
      accounts: [
        {
          name: "treeAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "leafOwner",
          isMut: true,
          isSigner: true
        },
        {
          name: "leafDelegate",
          isMut: false,
          isSigner: false
        },
        {
          name: "merkleTree",
          isMut: true,
          isSigner: false
        },
        {
          name: "voucher",
          isMut: true,
          isSigner: false
        },
        {
          name: "logWrapper",
          isMut: false,
          isSigner: false
        },
        {
          name: "compressionProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "root",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "dataHash",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "creatorHash",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "nonce",
          type: "u64"
        },
        {
          name: "index",
          type: "u32"
        }
      ]
    },
    {
      name: "setAndVerifyCollection",
      accounts: [
        {
          name: "treeAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "leafOwner",
          isMut: false,
          isSigner: false
        },
        {
          name: "leafDelegate",
          isMut: false,
          isSigner: false
        },
        {
          name: "merkleTree",
          isMut: true,
          isSigner: false
        },
        {
          name: "payer",
          isMut: false,
          isSigner: true
        },
        {
          name: "treeDelegate",
          isMut: false,
          isSigner: false
        },
        {
          name: "collectionAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "collectionAuthorityRecordPda",
          isMut: false,
          isSigner: false
        },
        {
          name: "collectionMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "collectionMetadata",
          isMut: true,
          isSigner: false
        },
        {
          name: "editionAccount",
          isMut: false,
          isSigner: false
        },
        {
          name: "bubblegumSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "logWrapper",
          isMut: false,
          isSigner: false
        },
        {
          name: "compressionProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenMetadataProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "root",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "dataHash",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "creatorHash",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "nonce",
          type: "u64"
        },
        {
          name: "index",
          type: "u32"
        },
        {
          name: "message",
          type: {
            defined: "MetadataArgs"
          }
        },
        {
          name: "collection",
          type: "publicKey"
        }
      ]
    },
    {
      name: "setDecompressibleState",
      accounts: [
        {
          name: "treeAuthority",
          isMut: true,
          isSigner: false
        },
        {
          name: "treeCreator",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "decompressableState",
          type: {
            defined: "DecompressibleState"
          }
        }
      ]
    },
    {
      name: "setTreeDelegate",
      accounts: [
        {
          name: "treeAuthority",
          isMut: true,
          isSigner: false
        },
        {
          name: "treeCreator",
          isMut: false,
          isSigner: true
        },
        {
          name: "newTreeDelegate",
          isMut: false,
          isSigner: false
        },
        {
          name: "merkleTree",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "transfer",
      accounts: [
        {
          name: "treeAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "leafOwner",
          isMut: false,
          isSigner: false
        },
        {
          name: "leafDelegate",
          isMut: false,
          isSigner: false
        },
        {
          name: "newLeafOwner",
          isMut: false,
          isSigner: false
        },
        {
          name: "merkleTree",
          isMut: true,
          isSigner: false
        },
        {
          name: "logWrapper",
          isMut: false,
          isSigner: false
        },
        {
          name: "compressionProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "root",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "dataHash",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "creatorHash",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "nonce",
          type: "u64"
        },
        {
          name: "index",
          type: "u32"
        }
      ]
    },
    {
      name: "unverifyCollection",
      accounts: [
        {
          name: "treeAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "leafOwner",
          isMut: false,
          isSigner: false
        },
        {
          name: "leafDelegate",
          isMut: false,
          isSigner: false
        },
        {
          name: "merkleTree",
          isMut: true,
          isSigner: false
        },
        {
          name: "payer",
          isMut: false,
          isSigner: true
        },
        {
          name: "treeDelegate",
          isMut: false,
          isSigner: false
        },
        {
          name: "collectionAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "collectionAuthorityRecordPda",
          isMut: false,
          isSigner: false
        },
        {
          name: "collectionMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "collectionMetadata",
          isMut: true,
          isSigner: false
        },
        {
          name: "editionAccount",
          isMut: false,
          isSigner: false
        },
        {
          name: "bubblegumSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "logWrapper",
          isMut: false,
          isSigner: false
        },
        {
          name: "compressionProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenMetadataProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "root",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "dataHash",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "creatorHash",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "nonce",
          type: "u64"
        },
        {
          name: "index",
          type: "u32"
        },
        {
          name: "message",
          type: {
            defined: "MetadataArgs"
          }
        }
      ]
    },
    {
      name: "unverifyCreator",
      accounts: [
        {
          name: "treeAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "leafOwner",
          isMut: false,
          isSigner: false
        },
        {
          name: "leafDelegate",
          isMut: false,
          isSigner: false
        },
        {
          name: "merkleTree",
          isMut: true,
          isSigner: false
        },
        {
          name: "payer",
          isMut: false,
          isSigner: true
        },
        {
          name: "creator",
          isMut: false,
          isSigner: true
        },
        {
          name: "logWrapper",
          isMut: false,
          isSigner: false
        },
        {
          name: "compressionProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "root",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "dataHash",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "creatorHash",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "nonce",
          type: "u64"
        },
        {
          name: "index",
          type: "u32"
        },
        {
          name: "message",
          type: {
            defined: "MetadataArgs"
          }
        }
      ]
    },
    {
      name: "verifyCollection",
      accounts: [
        {
          name: "treeAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "leafOwner",
          isMut: false,
          isSigner: false
        },
        {
          name: "leafDelegate",
          isMut: false,
          isSigner: false
        },
        {
          name: "merkleTree",
          isMut: true,
          isSigner: false
        },
        {
          name: "payer",
          isMut: false,
          isSigner: true
        },
        {
          name: "treeDelegate",
          isMut: false,
          isSigner: false
        },
        {
          name: "collectionAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "collectionAuthorityRecordPda",
          isMut: false,
          isSigner: false
        },
        {
          name: "collectionMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "collectionMetadata",
          isMut: true,
          isSigner: false
        },
        {
          name: "editionAccount",
          isMut: false,
          isSigner: false
        },
        {
          name: "bubblegumSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "logWrapper",
          isMut: false,
          isSigner: false
        },
        {
          name: "compressionProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenMetadataProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "root",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "dataHash",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "creatorHash",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "nonce",
          type: "u64"
        },
        {
          name: "index",
          type: "u32"
        },
        {
          name: "message",
          type: {
            defined: "MetadataArgs"
          }
        }
      ]
    },
    {
      name: "verifyCreator",
      accounts: [
        {
          name: "treeAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "leafOwner",
          isMut: false,
          isSigner: false
        },
        {
          name: "leafDelegate",
          isMut: false,
          isSigner: false
        },
        {
          name: "merkleTree",
          isMut: true,
          isSigner: false
        },
        {
          name: "payer",
          isMut: false,
          isSigner: true
        },
        {
          name: "creator",
          isMut: false,
          isSigner: true
        },
        {
          name: "logWrapper",
          isMut: false,
          isSigner: false
        },
        {
          name: "compressionProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "root",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "dataHash",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "creatorHash",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "nonce",
          type: "u64"
        },
        {
          name: "index",
          type: "u32"
        },
        {
          name: "message",
          type: {
            defined: "MetadataArgs"
          }
        }
      ]
    },
    {
      name: "updateMetadata",
      accounts: [
        {
          name: "treeAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "collectionMint",
          isMut: false,
          isSigner: false,
          isOptional: true
        },
        {
          name: "collectionMetadata",
          isMut: false,
          isSigner: false,
          isOptional: true
        },
        {
          name: "collectionAuthorityRecordPda",
          isMut: false,
          isSigner: false,
          isOptional: true
        },
        {
          name: "leafOwner",
          isMut: false,
          isSigner: false
        },
        {
          name: "leafDelegate",
          isMut: false,
          isSigner: false
        },
        {
          name: "payer",
          isMut: false,
          isSigner: true
        },
        {
          name: "merkleTree",
          isMut: true,
          isSigner: false
        },
        {
          name: "logWrapper",
          isMut: false,
          isSigner: false
        },
        {
          name: "compressionProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenMetadataProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "root",
          type: {
            array: [
              "u8",
              32
            ]
          }
        },
        {
          name: "nonce",
          type: "u64"
        },
        {
          name: "index",
          type: "u32"
        },
        {
          name: "currentMetadata",
          type: {
            defined: "MetadataArgs"
          }
        },
        {
          name: "updateArgs",
          type: {
            defined: "UpdateArgs"
          }
        }
      ]
    }
  ],
  accounts: [
    {
      name: "TreeConfig",
      type: {
        kind: "struct",
        fields: [
          {
            name: "treeCreator",
            type: "publicKey"
          },
          {
            name: "treeDelegate",
            type: "publicKey"
          },
          {
            name: "totalMintCapacity",
            type: "u64"
          },
          {
            name: "numMinted",
            type: "u64"
          },
          {
            name: "isPublic",
            type: "bool"
          },
          {
            name: "isDecompressible",
            type: {
              defined: "DecompressibleState"
            }
          }
        ]
      }
    },
    {
      name: "Voucher",
      type: {
        kind: "struct",
        fields: [
          {
            name: "leafSchema",
            type: {
              defined: "LeafSchema"
            }
          },
          {
            name: "index",
            type: "u32"
          },
          {
            name: "merkleTree",
            type: "publicKey"
          }
        ]
      }
    }
  ],
  types: [
    {
      name: "Creator",
      type: {
        kind: "struct",
        fields: [
          {
            name: "address",
            type: "publicKey"
          },
          {
            name: "verified",
            type: "bool"
          },
          {
            name: "share",
            type: "u8"
          }
        ]
      }
    },
    {
      name: "Uses",
      type: {
        kind: "struct",
        fields: [
          {
            name: "useMethod",
            type: {
              defined: "UseMethod"
            }
          },
          {
            name: "remaining",
            type: "u64"
          },
          {
            name: "total",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "Collection",
      type: {
        kind: "struct",
        fields: [
          {
            name: "verified",
            type: "bool"
          },
          {
            name: "key",
            type: "publicKey"
          }
        ]
      }
    },
    {
      name: "MetadataArgs",
      type: {
        kind: "struct",
        fields: [
          {
            name: "name",
            type: "string"
          },
          {
            name: "symbol",
            type: "string"
          },
          {
            name: "uri",
            type: "string"
          },
          {
            name: "sellerFeeBasisPoints",
            type: "u16"
          },
          {
            name: "primarySaleHappened",
            type: "bool"
          },
          {
            name: "isMutable",
            type: "bool"
          },
          {
            name: "editionNonce",
            type: {
              option: "u8"
            }
          },
          {
            name: "tokenStandard",
            type: {
              option: {
                defined: "TokenStandard"
              }
            }
          },
          {
            name: "collection",
            type: {
              option: {
                defined: "Collection"
              }
            }
          },
          {
            name: "uses",
            type: {
              option: {
                defined: "Uses"
              }
            }
          },
          {
            name: "tokenProgramVersion",
            type: {
              defined: "TokenProgramVersion"
            }
          },
          {
            name: "creators",
            type: {
              vec: {
                defined: "Creator"
              }
            }
          }
        ]
      }
    },
    {
      name: "UpdateArgs",
      type: {
        kind: "struct",
        fields: [
          {
            name: "name",
            type: {
              option: "string"
            }
          },
          {
            name: "symbol",
            type: {
              option: "string"
            }
          },
          {
            name: "uri",
            type: {
              option: "string"
            }
          },
          {
            name: "creators",
            type: {
              option: {
                vec: {
                  defined: "Creator"
                }
              }
            }
          },
          {
            name: "sellerFeeBasisPoints",
            type: {
              option: "u16"
            }
          },
          {
            name: "primarySaleHappened",
            type: {
              option: "bool"
            }
          },
          {
            name: "isMutable",
            type: {
              option: "bool"
            }
          }
        ]
      }
    },
    {
      name: "Version",
      type: {
        kind: "enum",
        variants: [
          {
            name: "V1"
          }
        ]
      }
    },
    {
      name: "LeafSchema",
      type: {
        kind: "enum",
        variants: [
          {
            name: "V1",
            fields: [
              {
                name: "id",
                type: "publicKey"
              },
              {
                name: "owner",
                type: "publicKey"
              },
              {
                name: "delegate",
                type: "publicKey"
              },
              {
                name: "nonce",
                type: "u64"
              },
              {
                name: "data_hash",
                type: {
                  array: [
                    "u8",
                    32
                  ]
                }
              },
              {
                name: "creator_hash",
                type: {
                  array: [
                    "u8",
                    32
                  ]
                }
              }
            ]
          }
        ]
      }
    },
    {
      name: "TokenProgramVersion",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Original"
          },
          {
            name: "Token2022"
          }
        ]
      }
    },
    {
      name: "TokenStandard",
      type: {
        kind: "enum",
        variants: [
          {
            name: "NonFungible"
          },
          {
            name: "FungibleAsset"
          },
          {
            name: "Fungible"
          },
          {
            name: "NonFungibleEdition"
          }
        ]
      }
    },
    {
      name: "UseMethod",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Burn"
          },
          {
            name: "Multiple"
          },
          {
            name: "Single"
          }
        ]
      }
    },
    {
      name: "BubblegumEventType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Uninitialized"
          },
          {
            name: "LeafSchemaEvent"
          }
        ]
      }
    },
    {
      name: "DecompressibleState",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Enabled"
          },
          {
            name: "Disabled"
          }
        ]
      }
    }
  ],
  errors: [
    {
      code: 6e3,
      name: "AssetOwnerMismatch",
      msg: ""
    },
    {
      code: 6001,
      name: "PublicKeyMismatch",
      msg: ""
    },
    {
      code: 6002,
      name: "HashingMismatch",
      msg: ""
    },
    {
      code: 6003,
      name: "UnsupportedSchemaVersion",
      msg: ""
    },
    {
      code: 6004,
      name: "CreatorShareTotalMustBe100",
      msg: ""
    },
    {
      code: 6005,
      name: "DuplicateCreatorAddress",
      msg: ""
    },
    {
      code: 6006,
      name: "CreatorDidNotVerify",
      msg: "Creator did not verify the metadata"
    },
    {
      code: 6007,
      name: "CreatorNotFound",
      msg: ""
    },
    {
      code: 6008,
      name: "NoCreatorsPresent",
      msg: "No creators in creator Vec"
    },
    {
      code: 6009,
      name: "CreatorHashMismatch",
      msg: "Provided creator Vec must result in provided creator hash"
    },
    {
      code: 6010,
      name: "DataHashMismatch",
      msg: "Provided metadata must result in provided data hash"
    },
    {
      code: 6011,
      name: "CreatorsTooLong",
      msg: "Creators list too long"
    },
    {
      code: 6012,
      name: "MetadataNameTooLong",
      msg: ""
    },
    {
      code: 6013,
      name: "MetadataSymbolTooLong",
      msg: ""
    },
    {
      code: 6014,
      name: "MetadataUriTooLong",
      msg: ""
    },
    {
      code: 6015,
      name: "MetadataBasisPointsTooHigh",
      msg: "Basis points cannot exceed 10000"
    },
    {
      code: 6016,
      name: "TreeAuthorityIncorrect",
      msg: "Tree creator or tree delegate must sign."
    },
    {
      code: 6017,
      name: "InsufficientMintCapacity",
      msg: "Not enough unapproved mints left"
    },
    {
      code: 6018,
      name: "NumericalOverflowError",
      msg: ""
    },
    {
      code: 6019,
      name: "IncorrectOwner",
      msg: "r"
    },
    {
      code: 6020,
      name: "CollectionCannotBeVerifiedInThisInstruction",
      msg: ""
    },
    {
      code: 6021,
      name: "CollectionNotFound",
      msg: "Collection Not Found on Metadata"
    },
    {
      code: 6022,
      name: "AlreadyVerified",
      msg: ""
    },
    {
      code: 6023,
      name: "AlreadyUnverified",
      msg: ""
    },
    {
      code: 6024,
      name: "UpdateAuthorityIncorrect",
      msg: "Incorrect leaf metadata update authority."
    },
    {
      code: 6025,
      name: "LeafAuthorityMustSign",
      msg: "Tx must be signed by leaf owner or leaf delegate"
    },
    {
      code: 6026,
      name: "CollectionMustBeSized",
      msg: ""
    },
    {
      code: 6027,
      name: "MetadataMintMismatch",
      msg: "Metadata mint does not match collection mint"
    },
    {
      code: 6028,
      name: "InvalidCollectionAuthority",
      msg: ""
    },
    {
      code: 6029,
      name: "InvalidDelegateRecord",
      msg: ""
    },
    {
      code: 6030,
      name: "CollectionMasterEditionAccountInvalid",
      msg: "Edition account doesnt match collection"
    },
    {
      code: 6031,
      name: "CollectionMustBeAUniqueMasterEdition",
      msg: "Collection Must Be a Unique Master Edition v2"
    },
    {
      code: 6032,
      name: "UnknownExternalError",
      msg: "Could not convert to BubblegumError"
    },
    {
      code: 6033,
      name: "DecompressionDisabled",
      msg: "Decompression disabled for this tree."
    },
    {
      code: 6034,
      name: "MissingCollectionMintAccount",
      msg: "Missing collection mint account"
    },
    {
      code: 6035,
      name: "MissingCollectionMetadataAccount",
      msg: "Missing collection metadata account"
    },
    {
      code: 6036,
      name: "CollectionMismatch",
      msg: "Collection mismatch"
    },
    {
      code: 6037,
      name: "MetadataImmutable",
      msg: "Metadata not mutable"
    },
    {
      code: 6038,
      name: "PrimarySaleCanOnlyBeFlippedToTrue",
      msg: "Can only update primary sale to true"
    },
    {
      code: 6039,
      name: "CreatorDidNotUnverify",
      msg: "Creator did not unverify the metadata"
    }
  ]
};

// idl/metaplex-candy-machine.json
var metaplex_candy_machine_default = {
  version: "4.6.0",
  name: "candy_machine",
  instructions: [
    {
      name: "initializeCandyMachine",
      accounts: [
        {
          name: "candyMachine",
          isMut: true,
          isSigner: false
        },
        {
          name: "wallet",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false
        },
        {
          name: "payer",
          isMut: false,
          isSigner: true
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "data",
          type: {
            defined: "CandyMachineData"
          }
        }
      ]
    },
    {
      name: "updateCandyMachine",
      accounts: [
        {
          name: "candyMachine",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "wallet",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "data",
          type: {
            defined: "CandyMachineData"
          }
        }
      ]
    },
    {
      name: "updateAuthority",
      accounts: [
        {
          name: "candyMachine",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "wallet",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "newAuthority",
          type: {
            option: "publicKey"
          }
        }
      ]
    },
    {
      name: "addConfigLines",
      accounts: [
        {
          name: "candyMachine",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "index",
          type: "u32"
        },
        {
          name: "configLines",
          type: {
            vec: {
              defined: "ConfigLine"
            }
          }
        }
      ]
    },
    {
      name: "setCollection",
      accounts: [
        {
          name: "candyMachine",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "collectionPda",
          isMut: true,
          isSigner: false
        },
        {
          name: "payer",
          isMut: false,
          isSigner: true
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "metadata",
          isMut: false,
          isSigner: false
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false
        },
        {
          name: "edition",
          isMut: false,
          isSigner: false
        },
        {
          name: "collectionAuthorityRecord",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenMetadataProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "removeCollection",
      accounts: [
        {
          name: "candyMachine",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "collectionPda",
          isMut: true,
          isSigner: false
        },
        {
          name: "metadata",
          isMut: false,
          isSigner: false
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false
        },
        {
          name: "collectionAuthorityRecord",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenMetadataProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "mintNft",
      accounts: [
        {
          name: "candyMachine",
          isMut: true,
          isSigner: false
        },
        {
          name: "candyMachineCreator",
          isMut: false,
          isSigner: false
        },
        {
          name: "payer",
          isMut: false,
          isSigner: true
        },
        {
          name: "wallet",
          isMut: true,
          isSigner: false
        },
        {
          name: "metadata",
          isMut: true,
          isSigner: false
        },
        {
          name: "mint",
          isMut: true,
          isSigner: false
        },
        {
          name: "mintAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "updateAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "masterEdition",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenMetadataProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "clock",
          isMut: false,
          isSigner: false,
          docs: [
            "Account not actually used."
          ]
        },
        {
          name: "recentBlockhashes",
          isMut: false,
          isSigner: false
        },
        {
          name: "instructionSysvarAccount",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "creatorBump",
          type: "u8"
        }
      ]
    },
    {
      name: "setCollectionDuringMint",
      accounts: [
        {
          name: "candyMachine",
          isMut: false,
          isSigner: false
        },
        {
          name: "metadata",
          isMut: false,
          isSigner: false
        },
        {
          name: "payer",
          isMut: false,
          isSigner: true
        },
        {
          name: "collectionPda",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenMetadataProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "instructions",
          isMut: false,
          isSigner: false
        },
        {
          name: "collectionMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "collectionMetadata",
          isMut: true,
          isSigner: false
        },
        {
          name: "collectionMasterEdition",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false
        },
        {
          name: "collectionAuthorityRecord",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "withdrawFunds",
      accounts: [
        {
          name: "candyMachine",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: true,
          isSigner: true
        }
      ],
      args: []
    },
    {
      name: "setFreeze",
      accounts: [
        {
          name: "candyMachine",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: true,
          isSigner: true
        },
        {
          name: "freezePda",
          isMut: true,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "freezeTime",
          type: "i64"
        }
      ]
    },
    {
      name: "removeFreeze",
      accounts: [
        {
          name: "candyMachine",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: true,
          isSigner: true
        },
        {
          name: "freezePda",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "thawNft",
      accounts: [
        {
          name: "freezePda",
          isMut: true,
          isSigner: false
        },
        {
          name: "candyMachine",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "owner",
          isMut: false,
          isSigner: false
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false
        },
        {
          name: "edition",
          isMut: false,
          isSigner: false
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenMetadataProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "unlockFunds",
      accounts: [
        {
          name: "candyMachine",
          isMut: true,
          isSigner: false
        },
        {
          name: "wallet",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: true,
          isSigner: true
        },
        {
          name: "freezePda",
          isMut: true,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    }
  ],
  accounts: [
    {
      name: "CandyMachine",
      docs: [
        "Candy machine state and config data."
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "authority",
            type: "publicKey"
          },
          {
            name: "wallet",
            type: "publicKey"
          },
          {
            name: "tokenMint",
            type: {
              option: "publicKey"
            }
          },
          {
            name: "itemsRedeemed",
            type: "u64"
          },
          {
            name: "data",
            type: {
              defined: "CandyMachineData"
            }
          }
        ]
      }
    },
    {
      name: "CollectionPDA",
      docs: [
        "Collection PDA account"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "mint",
            type: "publicKey"
          },
          {
            name: "candyMachine",
            type: "publicKey"
          }
        ]
      }
    },
    {
      name: "FreezePDA",
      docs: [
        "Collection PDA account"
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "candyMachine",
            type: "publicKey"
          },
          {
            name: "allowThaw",
            type: "bool"
          },
          {
            name: "frozenCount",
            type: "u64"
          },
          {
            name: "mintStart",
            type: {
              option: "i64"
            }
          },
          {
            name: "freezeTime",
            type: "i64"
          },
          {
            name: "freezeFee",
            type: "u64"
          }
        ]
      }
    }
  ],
  types: [
    {
      name: "CandyMachineData",
      docs: [
        "Candy machine settings data."
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "uuid",
            type: "string"
          },
          {
            name: "price",
            type: "u64"
          },
          {
            name: "symbol",
            docs: [
              "The symbol for the asset"
            ],
            type: "string"
          },
          {
            name: "sellerFeeBasisPoints",
            docs: [
              "Royalty basis points that goes to creators in secondary sales (0-10000)"
            ],
            type: "u16"
          },
          {
            name: "maxSupply",
            type: "u64"
          },
          {
            name: "isMutable",
            type: "bool"
          },
          {
            name: "retainAuthority",
            type: "bool"
          },
          {
            name: "goLiveDate",
            type: {
              option: "i64"
            }
          },
          {
            name: "endSettings",
            type: {
              option: {
                defined: "EndSettings"
              }
            }
          },
          {
            name: "creators",
            type: {
              vec: {
                defined: "Creator"
              }
            }
          },
          {
            name: "hiddenSettings",
            type: {
              option: {
                defined: "HiddenSettings"
              }
            }
          },
          {
            name: "whitelistMintSettings",
            type: {
              option: {
                defined: "WhitelistMintSettings"
              }
            }
          },
          {
            name: "itemsAvailable",
            type: "u64"
          },
          {
            name: "gatekeeper",
            docs: [
              "If [`Some`] requires gateway tokens on mint"
            ],
            type: {
              option: {
                defined: "GatekeeperConfig"
              }
            }
          }
        ]
      }
    },
    {
      name: "ConfigLine",
      docs: [
        "Individual config line for storing NFT data pre-mint."
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "name",
            type: "string"
          },
          {
            name: "uri",
            docs: [
              "URI pointing to JSON representing the asset"
            ],
            type: "string"
          }
        ]
      }
    },
    {
      name: "EndSettings",
      type: {
        kind: "struct",
        fields: [
          {
            name: "endSettingType",
            type: {
              defined: "EndSettingType"
            }
          },
          {
            name: "number",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "Creator",
      type: {
        kind: "struct",
        fields: [
          {
            name: "address",
            type: "publicKey"
          },
          {
            name: "verified",
            type: "bool"
          },
          {
            name: "share",
            type: "u8"
          }
        ]
      }
    },
    {
      name: "HiddenSettings",
      docs: [
        "Hidden Settings for large mints used with offline data."
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "name",
            type: "string"
          },
          {
            name: "uri",
            type: "string"
          },
          {
            name: "hash",
            type: {
              array: [
                "u8",
                32
              ]
            }
          }
        ]
      }
    },
    {
      name: "WhitelistMintSettings",
      type: {
        kind: "struct",
        fields: [
          {
            name: "mode",
            type: {
              defined: "WhitelistMintMode"
            }
          },
          {
            name: "mint",
            type: "publicKey"
          },
          {
            name: "presale",
            type: "bool"
          },
          {
            name: "discountPrice",
            type: {
              option: "u64"
            }
          }
        ]
      }
    },
    {
      name: "GatekeeperConfig",
      docs: [
        "Configurations options for the gatekeeper."
      ],
      type: {
        kind: "struct",
        fields: [
          {
            name: "gatekeeperNetwork",
            docs: [
              "The network for the gateway token required"
            ],
            type: "publicKey"
          },
          {
            name: "expireOnUse",
            docs: [
              "Whether or not the token should expire after minting.",
              "The gatekeeper network must support this if true."
            ],
            type: "bool"
          }
        ]
      }
    },
    {
      name: "EndSettingType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Date"
          },
          {
            name: "Amount"
          }
        ]
      }
    },
    {
      name: "WhitelistMintMode",
      type: {
        kind: "enum",
        variants: [
          {
            name: "BurnEveryTime"
          },
          {
            name: "NeverBurn"
          }
        ]
      }
    }
  ],
  errors: [
    {
      code: 6e3,
      name: "IncorrectOwner",
      msg: "Account does not have correct owner!"
    },
    {
      code: 6001,
      name: "Uninitialized",
      msg: "Account is not initialized!"
    },
    {
      code: 6002,
      name: "MintMismatch",
      msg: "Mint Mismatch!"
    },
    {
      code: 6003,
      name: "IndexGreaterThanLength",
      msg: "Index greater than length!"
    },
    {
      code: 6004,
      name: "NumericalOverflowError",
      msg: "Numerical overflow error!"
    },
    {
      code: 6005,
      name: "TooManyCreators",
      msg: "Can only provide up to 4 creators to candy machine (because candy machine is one)!"
    },
    {
      code: 6006,
      name: "UuidMustBeExactly6Length",
      msg: "Uuid must be exactly of 6 length"
    },
    {
      code: 6007,
      name: "NotEnoughTokens",
      msg: "Not enough tokens to pay for this minting"
    },
    {
      code: 6008,
      name: "NotEnoughSOL",
      msg: "Not enough SOL to pay for this minting"
    },
    {
      code: 6009,
      name: "TokenTransferFailed",
      msg: "Token transfer failed"
    },
    {
      code: 6010,
      name: "CandyMachineEmpty",
      msg: "Candy machine is empty!"
    },
    {
      code: 6011,
      name: "CandyMachineNotLive",
      msg: "Candy machine is not live!"
    },
    {
      code: 6012,
      name: "HiddenSettingsConfigsDoNotHaveConfigLines",
      msg: "Configs that are using hidden uris do not have config lines, they have a single hash representing hashed order"
    },
    {
      code: 6013,
      name: "CannotChangeNumberOfLines",
      msg: "Cannot change number of lines unless is a hidden config"
    },
    {
      code: 6014,
      name: "DerivedKeyInvalid",
      msg: "Derived key invalid"
    },
    {
      code: 6015,
      name: "PublicKeyMismatch",
      msg: "Public key mismatch"
    },
    {
      code: 6016,
      name: "NoWhitelistToken",
      msg: "No whitelist token present"
    },
    {
      code: 6017,
      name: "TokenBurnFailed",
      msg: "Token burn failed"
    },
    {
      code: 6018,
      name: "GatewayAppMissing",
      msg: "Missing gateway app when required"
    },
    {
      code: 6019,
      name: "GatewayTokenMissing",
      msg: "Missing gateway token when required"
    },
    {
      code: 6020,
      name: "GatewayTokenExpireTimeInvalid",
      msg: "Invalid gateway token expire time"
    },
    {
      code: 6021,
      name: "NetworkExpireFeatureMissing",
      msg: "Missing gateway network expire feature when required"
    },
    {
      code: 6022,
      name: "CannotFindUsableConfigLine",
      msg: "Unable to find an unused config line near your random number index"
    },
    {
      code: 6023,
      name: "InvalidString",
      msg: "Invalid string"
    },
    {
      code: 6024,
      name: "SuspiciousTransaction",
      msg: "Suspicious transaction detected"
    },
    {
      code: 6025,
      name: "CannotSwitchToHiddenSettings",
      msg: "Cannot Switch to Hidden Settings after items available is greater than 0"
    },
    {
      code: 6026,
      name: "IncorrectSlotHashesPubkey",
      msg: "Incorrect SlotHashes PubKey"
    },
    {
      code: 6027,
      name: "IncorrectCollectionAuthority",
      msg: "Incorrect collection NFT authority"
    },
    {
      code: 6028,
      name: "MismatchedCollectionPDA",
      msg: "Collection PDA address is invalid"
    },
    {
      code: 6029,
      name: "MismatchedCollectionMint",
      msg: "Provided mint account doesn't match collection PDA mint"
    },
    {
      code: 6030,
      name: "SlotHashesEmpty",
      msg: "Slot hashes Sysvar is empty"
    },
    {
      code: 6031,
      name: "MetadataAccountMustBeEmpty",
      msg: "The metadata account has data in it, and this must be empty to mint a new NFT"
    },
    {
      code: 6032,
      name: "MissingSetCollectionDuringMint",
      msg: "Missing set collection during mint IX for Candy Machine with collection set"
    },
    {
      code: 6033,
      name: "NoChangingCollectionDuringMint",
      msg: "Can't change collection settings after items have begun to be minted"
    },
    {
      code: 6034,
      name: "CandyCollectionRequiresRetainAuthority",
      msg: "Retain authority must be true for Candy Machines with a collection set"
    },
    {
      code: 6035,
      name: "GatewayProgramError",
      msg: "Error within Gateway program"
    },
    {
      code: 6036,
      name: "NoChangingFreezeDuringMint",
      msg: "Can't change freeze settings after items have begun to be minted. You can only disable."
    },
    {
      code: 6037,
      name: "NoChangingAuthorityWithCollection",
      msg: "Can't change authority while collection is enabled. Disable collection first."
    },
    {
      code: 6038,
      name: "NoChangingTokenWithFreeze",
      msg: "Can't change token while freeze is enabled. Disable freeze first."
    },
    {
      code: 6039,
      name: "InvalidThawNft",
      msg: "Cannot thaw NFT unless all NFTs are minted or Candy Machine authority enables thawing"
    },
    {
      code: 6040,
      name: "IncorrectRemainingAccountsLen",
      msg: "The number of remaining accounts passed in doesn't match the Candy Machine settings"
    },
    {
      code: 6041,
      name: "MissingFreezeAta",
      msg: "FreezePDA ATA needs to be passed in if token mint is enabled."
    },
    {
      code: 6042,
      name: "IncorrectFreezeAta",
      msg: "Incorrect freeze ATA address."
    },
    {
      code: 6043,
      name: "FreezePDAMismatch",
      msg: "FreezePDA doesn't belong to this Candy Machine."
    },
    {
      code: 6044,
      name: "EnteredFreezeIsMoreThanMaxFreeze",
      msg: "Freeze time can't be longer than MAX_FREEZE_TIME."
    },
    {
      code: 6045,
      name: "NoWithdrawWithFreeze",
      msg: "Can't withdraw Candy Machine while freeze is active. Disable freeze first."
    },
    {
      code: 6046,
      name: "NoWithdrawWithFrozenFunds",
      msg: "Can't withdraw Candy Machine while frozen funds need to be redeemed. Unlock funds first."
    },
    {
      code: 6047,
      name: "MissingRemoveFreezeTokenAccounts",
      msg: "Missing required remaining accounts for remove_freeze with token mint."
    },
    {
      code: 6048,
      name: "InvalidFreezeWithdrawTokenAddress",
      msg: "Can't withdraw SPL Token from freeze PDA into itself"
    },
    {
      code: 6049,
      name: "NoUnlockWithNFTsStillFrozen",
      msg: "Can't unlock funds while NFTs are still frozen. Run thaw on all NFTs first."
    },
    {
      code: 6050,
      name: "SizedCollectionMetadataMustBeMutable",
      msg: "Setting a sized collection requires the collection metadata to be mutable."
    },
    {
      code: 6051,
      name: "CannotSwitchFromHiddenSettings",
      msg: "Cannot remove Hidden Settings."
    }
  ],
  metadata: {
    address: "cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ",
    origin: "anchor",
    binaryVersion: "0.26.0",
    libVersion: "0.26.0"
  }
};

// idl/metaplex-fixed-price-sale.json
var metaplex_fixed_price_sale_default = {
  version: "0.4.0",
  name: "fixed_price_sale",
  instructions: [
    {
      name: "initSellingResource",
      accounts: [
        {
          name: "store",
          isMut: false,
          isSigner: false,
          relations: [
            "admin"
          ]
        },
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "sellingResource",
          isMut: true,
          isSigner: true
        },
        {
          name: "sellingResourceOwner",
          isMut: false,
          isSigner: false
        },
        {
          name: "resourceMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "masterEdition",
          isMut: false,
          isSigner: false
        },
        {
          name: "metadata",
          isMut: false,
          isSigner: false
        },
        {
          name: "vault",
          isMut: true,
          isSigner: false,
          relations: [
            "owner"
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "mt_vault"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Mint",
                path: "resource_mint"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Store",
                path: "store"
              }
            ]
          }
        },
        {
          name: "resourceToken",
          isMut: true,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "masterEditionBump",
          type: "u8"
        },
        {
          name: "vaultOwnerBump",
          type: "u8"
        },
        {
          name: "maxSupply",
          type: {
            option: "u64"
          }
        }
      ]
    },
    {
      name: "createStore",
      accounts: [
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "store",
          isMut: true,
          isSigner: true
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "name",
          type: "string"
        },
        {
          name: "description",
          type: "string"
        }
      ]
    },
    {
      name: "buy",
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: false,
          relations: [
            "treasury_holder",
            "selling_resource"
          ]
        },
        {
          name: "sellingResource",
          isMut: true,
          isSigner: false
        },
        {
          name: "userTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userWallet",
          isMut: true,
          isSigner: true
        },
        {
          name: "tradeHistory",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "history"
              },
              {
                kind: "account",
                type: "publicKey",
                path: "user_wallet"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Market",
                path: "market"
              }
            ]
          }
        },
        {
          name: "treasuryHolder",
          isMut: true,
          isSigner: false
        },
        {
          name: "newMetadata",
          isMut: true,
          isSigner: false
        },
        {
          name: "newEdition",
          isMut: true,
          isSigner: false
        },
        {
          name: "masterEdition",
          isMut: true,
          isSigner: false
        },
        {
          name: "newMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "editionMarker",
          isMut: true,
          isSigner: false
        },
        {
          name: "vault",
          isMut: true,
          isSigner: false,
          relations: [
            "owner"
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "mt_vault"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "SellingResource",
                path: "selling_resource.resource"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "SellingResource",
                path: "selling_resource.store"
              }
            ]
          }
        },
        {
          name: "newTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "masterEditionMetadata",
          isMut: true,
          isSigner: false
        },
        {
          name: "clock",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenMetadataProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "tradeHistoryBump",
          type: "u8"
        },
        {
          name: "vaultOwnerBump",
          type: "u8"
        }
      ]
    },
    {
      name: "buyV2",
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: false,
          relations: [
            "treasury_holder",
            "selling_resource"
          ]
        },
        {
          name: "sellingResource",
          isMut: true,
          isSigner: false
        },
        {
          name: "userTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "userWallet",
          isMut: true,
          isSigner: true
        },
        {
          name: "tradeHistory",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "history"
              },
              {
                kind: "account",
                type: "publicKey",
                path: "user_wallet"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Market",
                path: "market"
              }
            ]
          }
        },
        {
          name: "treasuryHolder",
          isMut: true,
          isSigner: false
        },
        {
          name: "newMetadata",
          isMut: true,
          isSigner: false
        },
        {
          name: "newEdition",
          isMut: true,
          isSigner: false
        },
        {
          name: "masterEdition",
          isMut: true,
          isSigner: false
        },
        {
          name: "newMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "editionMarker",
          isMut: true,
          isSigner: false
        },
        {
          name: "vault",
          isMut: true,
          isSigner: false,
          relations: [
            "owner"
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "mt_vault"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "SellingResource",
                path: "selling_resource.resource"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "SellingResource",
                path: "selling_resource.store"
              }
            ]
          }
        },
        {
          name: "newTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "masterEditionMetadata",
          isMut: true,
          isSigner: false
        },
        {
          name: "clock",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenMetadataProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "tradeHistoryBump",
          type: "u8"
        },
        {
          name: "vaultOwnerBump",
          type: "u8"
        },
        {
          name: "editionMarkerNumber",
          type: "u64"
        }
      ]
    },
    {
      name: "closeMarket",
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: false,
          relations: [
            "owner"
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true
        },
        {
          name: "clock",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "suspendMarket",
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: false,
          relations: [
            "owner"
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true
        },
        {
          name: "clock",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "changeMarket",
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: false,
          relations: [
            "owner"
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true
        },
        {
          name: "clock",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "newName",
          type: {
            option: "string"
          }
        },
        {
          name: "newDescription",
          type: {
            option: "string"
          }
        },
        {
          name: "mutable",
          type: {
            option: "bool"
          }
        },
        {
          name: "newPrice",
          type: {
            option: "u64"
          }
        },
        {
          name: "newPiecesInOneWallet",
          type: {
            option: "u64"
          }
        }
      ]
    },
    {
      name: "resumeMarket",
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: false,
          relations: [
            "owner"
          ]
        },
        {
          name: "owner",
          isMut: false,
          isSigner: true
        },
        {
          name: "clock",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "withdraw",
      accounts: [
        {
          name: "market",
          isMut: false,
          isSigner: false,
          relations: [
            "treasury_holder",
            "selling_resource",
            "treasury_mint"
          ]
        },
        {
          name: "sellingResource",
          isMut: false,
          isSigner: false
        },
        {
          name: "metadata",
          isMut: false,
          isSigner: false
        },
        {
          name: "treasuryHolder",
          isMut: true,
          isSigner: false
        },
        {
          name: "treasuryMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "owner",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "holder"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Market",
                path: "market.treasury_mint"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Market",
                path: "market.selling_resource"
              }
            ]
          }
        },
        {
          name: "destination",
          isMut: true,
          isSigner: false
        },
        {
          name: "funder",
          isMut: false,
          isSigner: false
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true
        },
        {
          name: "payoutTicket",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "payout_ticket"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "Market",
                path: "market"
              },
              {
                kind: "account",
                type: "publicKey",
                path: "funder"
              }
            ]
          }
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "clock",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "associatedTokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "treasuryOwnerBump",
          type: "u8"
        },
        {
          name: "payoutTicketBump",
          type: "u8"
        }
      ]
    },
    {
      name: "createMarket",
      accounts: [
        {
          name: "market",
          isMut: true,
          isSigner: true
        },
        {
          name: "store",
          isMut: false,
          isSigner: false
        },
        {
          name: "sellingResourceOwner",
          isMut: true,
          isSigner: true
        },
        {
          name: "sellingResource",
          isMut: true,
          isSigner: false,
          relations: [
            "store"
          ]
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false
        },
        {
          name: "treasuryHolder",
          isMut: true,
          isSigner: false
        },
        {
          name: "owner",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "holder"
              },
              {
                kind: "account",
                type: "publicKey",
                path: "mint"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "SellingResource",
                path: "selling_resource"
              }
            ]
          }
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "treasuryOwnerBump",
          type: "u8"
        },
        {
          name: "name",
          type: "string"
        },
        {
          name: "description",
          type: "string"
        },
        {
          name: "mutable",
          type: "bool"
        },
        {
          name: "price",
          type: "u64"
        },
        {
          name: "piecesInOneWallet",
          type: {
            option: "u64"
          }
        },
        {
          name: "startDate",
          type: "u64"
        },
        {
          name: "endDate",
          type: {
            option: "u64"
          }
        },
        {
          name: "gatingConfig",
          type: {
            option: {
              defined: "GatingConfig"
            }
          }
        }
      ]
    },
    {
      name: "claimResource",
      accounts: [
        {
          name: "market",
          isMut: false,
          isSigner: false,
          relations: [
            "selling_resource",
            "treasury_holder"
          ]
        },
        {
          name: "treasuryHolder",
          isMut: false,
          isSigner: false
        },
        {
          name: "sellingResource",
          isMut: false,
          isSigner: false,
          relations: [
            "vault"
          ]
        },
        {
          name: "sellingResourceOwner",
          isMut: false,
          isSigner: true
        },
        {
          name: "vault",
          isMut: true,
          isSigner: false,
          relations: [
            "owner"
          ]
        },
        {
          name: "metadata",
          isMut: true,
          isSigner: false
        },
        {
          name: "owner",
          isMut: false,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "mt_vault"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "SellingResource",
                path: "selling_resource.resource"
              },
              {
                kind: "account",
                type: "publicKey",
                account: "SellingResource",
                path: "selling_resource.store"
              }
            ]
          }
        },
        {
          name: "destination",
          isMut: true,
          isSigner: false
        },
        {
          name: "clock",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenMetadataProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "vaultOwnerBump",
          type: "u8"
        }
      ]
    },
    {
      name: "savePrimaryMetadataCreators",
      accounts: [
        {
          name: "admin",
          isMut: true,
          isSigner: true
        },
        {
          name: "metadata",
          isMut: true,
          isSigner: false
        },
        {
          name: "primaryMetadataCreators",
          isMut: true,
          isSigner: false,
          pda: {
            seeds: [
              {
                kind: "const",
                type: "string",
                value: "primary_creators"
              },
              {
                kind: "account",
                type: "publicKey",
                path: "metadata"
              }
            ]
          }
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "primaryMetadataCreatorsBump",
          type: "u8"
        },
        {
          name: "creators",
          type: {
            vec: {
              defined: "Creator"
            }
          }
        }
      ]
    }
  ],
  accounts: [
    {
      name: "Store",
      type: {
        kind: "struct",
        fields: [
          {
            name: "admin",
            type: "publicKey"
          },
          {
            name: "name",
            type: "string"
          },
          {
            name: "description",
            type: "string"
          }
        ]
      }
    },
    {
      name: "SellingResource",
      type: {
        kind: "struct",
        fields: [
          {
            name: "store",
            type: "publicKey"
          },
          {
            name: "owner",
            type: "publicKey"
          },
          {
            name: "resource",
            type: "publicKey"
          },
          {
            name: "vault",
            type: "publicKey"
          },
          {
            name: "vaultOwner",
            type: "publicKey"
          },
          {
            name: "supply",
            type: "u64"
          },
          {
            name: "maxSupply",
            type: {
              option: "u64"
            }
          },
          {
            name: "state",
            type: {
              defined: "SellingResourceState"
            }
          }
        ]
      }
    },
    {
      name: "Market",
      type: {
        kind: "struct",
        fields: [
          {
            name: "store",
            type: "publicKey"
          },
          {
            name: "sellingResource",
            type: "publicKey"
          },
          {
            name: "treasuryMint",
            type: "publicKey"
          },
          {
            name: "treasuryHolder",
            type: "publicKey"
          },
          {
            name: "treasuryOwner",
            type: "publicKey"
          },
          {
            name: "owner",
            type: "publicKey"
          },
          {
            name: "name",
            type: "string"
          },
          {
            name: "description",
            type: "string"
          },
          {
            name: "mutable",
            type: "bool"
          },
          {
            name: "price",
            type: "u64"
          },
          {
            name: "piecesInOneWallet",
            type: {
              option: "u64"
            }
          },
          {
            name: "startDate",
            type: "u64"
          },
          {
            name: "endDate",
            type: {
              option: "u64"
            }
          },
          {
            name: "state",
            type: {
              defined: "MarketState"
            }
          },
          {
            name: "fundsCollected",
            type: "u64"
          },
          {
            name: "gatekeeper",
            type: {
              option: {
                defined: "GatingConfig"
              }
            }
          }
        ]
      }
    },
    {
      name: "TradeHistory",
      type: {
        kind: "struct",
        fields: [
          {
            name: "market",
            type: "publicKey"
          },
          {
            name: "wallet",
            type: "publicKey"
          },
          {
            name: "alreadyBought",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "PrimaryMetadataCreators",
      type: {
        kind: "struct",
        fields: [
          {
            name: "creators",
            type: {
              vec: {
                defined: "Creator"
              }
            }
          }
        ]
      }
    },
    {
      name: "PayoutTicket",
      type: {
        kind: "struct",
        fields: [
          {
            name: "used",
            type: "bool"
          }
        ]
      }
    }
  ],
  types: [
    {
      name: "GatingConfig",
      type: {
        kind: "struct",
        fields: [
          {
            name: "collection",
            type: "publicKey"
          },
          {
            name: "expireOnUse",
            docs: [
              "whether program will burn token or just check availability"
            ],
            type: "bool"
          },
          {
            name: "gatingTime",
            type: {
              option: "u64"
            }
          }
        ]
      }
    },
    {
      name: "Creator",
      type: {
        kind: "struct",
        fields: [
          {
            name: "address",
            type: "publicKey"
          },
          {
            name: "verified",
            type: "bool"
          },
          {
            name: "share",
            type: "u8"
          }
        ]
      }
    },
    {
      name: "SellingResourceState",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Uninitialized"
          },
          {
            name: "Created"
          },
          {
            name: "InUse"
          },
          {
            name: "Exhausted"
          },
          {
            name: "Stopped"
          }
        ]
      }
    },
    {
      name: "MarketState",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Uninitialized"
          },
          {
            name: "Created"
          },
          {
            name: "Suspended"
          },
          {
            name: "Active"
          },
          {
            name: "Ended"
          }
        ]
      }
    }
  ],
  errors: [
    {
      code: 6e3,
      name: "NoValidSignerPresent",
      msg: "No valid signer present"
    },
    {
      code: 6001,
      name: "StringIsTooLong",
      msg: "Some string variable is longer than allowed"
    },
    {
      code: 6002,
      name: "NameIsTooLong",
      msg: "Name string variable is longer than allowed"
    },
    {
      code: 6003,
      name: "DescriptionIsTooLong",
      msg: "Description string variable is longer than allowed"
    },
    {
      code: 6004,
      name: "SupplyIsGtThanAvailable",
      msg: "Provided supply is gt than available"
    },
    {
      code: 6005,
      name: "SupplyIsNotProvided",
      msg: "Supply is not provided"
    },
    {
      code: 6006,
      name: "DerivedKeyInvalid",
      msg: "Derived key invalid"
    },
    {
      code: 6007,
      name: "SellingResourceOwnerInvalid",
      msg: "Invalid selling resource owner provided"
    },
    {
      code: 6008,
      name: "PublicKeyMismatch",
      msg: "PublicKeyMismatch"
    },
    {
      code: 6009,
      name: "PiecesInOneWalletIsTooMuch",
      msg: "Pieces in one wallet cannot be greater than Max Supply value"
    },
    {
      code: 6010,
      name: "StartDateIsInPast",
      msg: "StartDate cannot be in the past"
    },
    {
      code: 6011,
      name: "EndDateIsEarlierThanBeginDate",
      msg: "EndDate should not be earlier than StartDate"
    },
    {
      code: 6012,
      name: "IncorrectOwner",
      msg: "Incorrect account owner"
    },
    {
      code: 6013,
      name: "MarketIsNotStarted",
      msg: "Market is not started"
    },
    {
      code: 6014,
      name: "MarketIsEnded",
      msg: "Market is ended"
    },
    {
      code: 6015,
      name: "UserReachBuyLimit",
      msg: "User reach buy limit"
    },
    {
      code: 6016,
      name: "MathOverflow",
      msg: "Math overflow"
    },
    {
      code: 6017,
      name: "SupplyIsGtThanMaxSupply",
      msg: "Supply is gt than max supply"
    },
    {
      code: 6018,
      name: "MarketDurationIsNotUnlimited",
      msg: "Market duration is not unlimited"
    },
    {
      code: 6019,
      name: "MarketIsSuspended",
      msg: "Market is suspended"
    },
    {
      code: 6020,
      name: "MarketIsImmutable",
      msg: "Market is immutable"
    },
    {
      code: 6021,
      name: "MarketInInvalidState",
      msg: "Market in invalid state"
    },
    {
      code: 6022,
      name: "PriceIsZero",
      msg: "Price is zero"
    },
    {
      code: 6023,
      name: "FunderIsInvalid",
      msg: "Funder is invalid"
    },
    {
      code: 6024,
      name: "PayoutTicketExists",
      msg: "Payout ticket exists"
    },
    {
      code: 6025,
      name: "InvalidFunderDestination",
      msg: "Funder provide invalid destination"
    },
    {
      code: 6026,
      name: "TreasuryIsNotEmpty",
      msg: "Treasury is not empty"
    },
    {
      code: 6027,
      name: "SellingResourceAlreadyTaken",
      msg: "Selling resource already taken by other market"
    },
    {
      code: 6028,
      name: "MetadataCreatorsIsEmpty",
      msg: "Metadata creators is empty"
    },
    {
      code: 6029,
      name: "UserWalletMustMatchUserTokenAccount",
      msg: "User wallet must match user token account"
    },
    {
      code: 6030,
      name: "MetadataShouldBeMutable",
      msg: "Metadata should be mutable"
    },
    {
      code: 6031,
      name: "PrimarySaleIsNotAllowed",
      msg: "Primary sale is not allowed"
    },
    {
      code: 6032,
      name: "CreatorsIsGtThanAvailable",
      msg: "Creators is gt than allowed"
    },
    {
      code: 6033,
      name: "CreatorsIsEmpty",
      msg: "Creators is empty"
    },
    {
      code: 6034,
      name: "MarketOwnerDoesntHaveShares",
      msg: "Market owner doesn't receive shares at primary sale"
    },
    {
      code: 6035,
      name: "PrimaryMetadataCreatorsNotProvided",
      msg: "PrimaryMetadataCreatorsNotProvided"
    },
    {
      code: 6036,
      name: "GatingTokenMissing",
      msg: "Gating token is missing"
    },
    {
      code: 6037,
      name: "InvalidOwnerForGatingToken",
      msg: "Invalid program owner for the gating token account"
    },
    {
      code: 6038,
      name: "WrongGatingMetadataAccount",
      msg: "Wrong Metadata account for the gating token"
    },
    {
      code: 6039,
      name: "WrongOwnerInTokenGatingAcc",
      msg: "Wrong owner in token gating account"
    },
    {
      code: 6040,
      name: "WrongGatingDate",
      msg: "Wrong gating date send"
    },
    {
      code: 6041,
      name: "CollectionMintMissing",
      msg: "Collection mint is missing"
    },
    {
      code: 6042,
      name: "WrongCollectionMintKey",
      msg: "Wrong collection mint key"
    },
    {
      code: 6043,
      name: "WrongGatingToken",
      msg: "Wrong gating token"
    },
    {
      code: 6044,
      name: "EditionMarkerFull",
      msg: "No available editions in edition marker"
    },
    {
      code: 6045,
      name: "InvalidEditionMarkerAccount",
      msg: "Invalid edition marker"
    }
  ],
  metadata: {
    address: "SaLeTjyUa5wXHnGuewUSyJ5JWZaHwz3TxqUntCE9czo",
    origin: "anchor",
    binaryVersion: "0.26.0",
    libVersion: "0.26.0"
  }
};

// idl/metaplex-nft-packs.json
var metaplex_nft_packs_default = {
  version: "0.1.0",
  name: "mpl_nft_packs",
  instructions: [
    {
      name: "InitPack",
      accounts: [
        {
          name: "packSet",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "store",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false,
          desc: "Rent account"
        },
        {
          name: "clock",
          isMut: false,
          isSigner: false,
          desc: "Clock account"
        },
        {
          name: "whitelistedCreator",
          isMut: false,
          isSigner: false,
          optional: true
        }
      ],
      args: [
        {
          name: "initPackSetArgs",
          type: {
            defined: "InitPackSetArgs"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 0
      }
    },
    {
      name: "AddCardToPack",
      accounts: [
        {
          name: "packSet",
          isMut: true,
          isSigner: false
        },
        {
          name: "packConfig",
          isMut: true,
          isSigner: false,
          desc: "PDA, ['config', pack]"
        },
        {
          name: "packCard",
          isMut: true,
          isSigner: false,
          desc: "PDA, ['card', pack, index]"
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "masterEdition",
          isMut: false,
          isSigner: false
        },
        {
          name: "masterMetadata",
          isMut: false,
          isSigner: false
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false
        },
        {
          name: "source",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenAccount",
          isMut: true,
          isSigner: false,
          desc: "program account to hold MasterEdition token"
        },
        {
          name: "programAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "store",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false,
          desc: "Rent"
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          desc: "System Program"
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          desc: "SPL Token program"
        }
      ],
      args: [
        {
          name: "addCardToPackArgs",
          type: {
            defined: "AddCardToPackArgs"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 1
      }
    },
    {
      name: "AddVoucherToPack",
      accounts: [
        {
          name: "packSet",
          isMut: true,
          isSigner: false
        },
        {
          name: "packVoucher",
          isMut: true,
          isSigner: false,
          desc: "PDA, ['voucher', pack, index]"
        },
        {
          name: "authority",
          isMut: true,
          isSigner: true
        },
        {
          name: "voucherOwner",
          isMut: false,
          isSigner: true
        },
        {
          name: "masterEdition",
          isMut: false,
          isSigner: false
        },
        {
          name: "masterMetadata",
          isMut: false,
          isSigner: false
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false
        },
        {
          name: "source",
          isMut: true,
          isSigner: false
        },
        {
          name: "store",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false,
          desc: "Rent"
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          desc: "System Program"
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          desc: "SPL Token program"
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 2
      }
    },
    {
      name: "Activate",
      accounts: [
        {
          name: "packSet",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 3
      }
    },
    {
      name: "Deactivate",
      accounts: [
        {
          name: "packSet",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 4
      }
    },
    {
      name: "ClosePack",
      accounts: [
        {
          name: "packSet",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "clock",
          isMut: false,
          isSigner: false,
          desc: "Solana Clock"
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 5
      }
    },
    {
      name: "ClaimPack",
      accounts: [
        {
          name: "packSet",
          isMut: false,
          isSigner: false
        },
        {
          name: "provingProcess",
          isMut: true,
          isSigner: false,
          desc: "PDA, ['proving', pack, user_wallet]"
        },
        {
          name: "userWallet",
          isMut: false,
          isSigner: true
        },
        {
          name: "packCard",
          isMut: true,
          isSigner: false,
          desc: "PDA, ['card', pack, index]"
        },
        {
          name: "userToken",
          isMut: true,
          isSigner: false,
          desc: "User token account to hold new minted edition"
        },
        {
          name: "newMetadata",
          isMut: false,
          isSigner: false
        },
        {
          name: "newEdition",
          isMut: false,
          isSigner: false
        },
        {
          name: "masterEdition",
          isMut: false,
          isSigner: false
        },
        {
          name: "newMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "newMintAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "metadata",
          isMut: false,
          isSigner: false
        },
        {
          name: "metadataMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "editionMarker",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false,
          desc: "Rent"
        },
        {
          name: "tokenMetadataProgram",
          isMut: false,
          isSigner: false,
          desc: "Metaplex Token Metadata Program"
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          desc: "SPL Token program"
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          desc: "System Program"
        }
      ],
      args: [
        {
          name: "claimPackArgs",
          type: {
            defined: "ClaimPackArgs"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 6
      }
    },
    {
      name: "TransferPackAuthority",
      accounts: [
        {
          name: "packSet",
          isMut: true,
          isSigner: false
        },
        {
          name: "currentAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "newAuthority",
          isMut: false,
          isSigner: false
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 7
      }
    },
    {
      name: "DeletePack",
      accounts: [
        {
          name: "packSet",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "refunder",
          isMut: true,
          isSigner: false
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 8
      }
    },
    {
      name: "DeletePackCard",
      accounts: [
        {
          name: "packSet",
          isMut: true,
          isSigner: false
        },
        {
          name: "packCard",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "refunder",
          isMut: true,
          isSigner: false
        },
        {
          name: "newMasterEditionOwner",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "programAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false,
          desc: "Rent"
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false,
          desc: "SPL Token program"
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 9
      }
    },
    {
      name: "DeletePackVoucher",
      accounts: [
        {
          name: "packSet",
          isMut: true,
          isSigner: false
        },
        {
          name: "packVoucher",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "refunder",
          isMut: true,
          isSigner: false
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 10
      }
    },
    {
      name: "EditPack",
      accounts: [
        {
          name: "packSet",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "editPackSetArgs",
          type: {
            defined: "EditPackSetArgs"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 11
      }
    },
    {
      name: "RequestCardForRedeem",
      accounts: [
        {
          name: "packSet",
          isMut: false,
          isSigner: false
        },
        {
          name: "packConfig",
          isMut: true,
          isSigner: false,
          desc: "PDA, ['config', pack]"
        },
        {
          name: "store",
          isMut: false,
          isSigner: false
        },
        {
          name: "edition",
          isMut: false,
          isSigner: false
        },
        {
          name: "editionMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "packVoucher",
          isMut: false,
          isSigner: false
        },
        {
          name: "provingProcess",
          isMut: true,
          isSigner: false,
          desc: "PDA, ['proving', pack, user_wallet]"
        },
        {
          name: "userWallet",
          isMut: false,
          isSigner: true
        },
        {
          name: "recentSlothashes",
          isMut: false,
          isSigner: false,
          desc: "Solana Slot Hashes"
        },
        {
          name: "clock",
          isMut: false,
          isSigner: false,
          desc: "Solana Clock"
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false,
          desc: "Rent"
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false,
          desc: "System Program"
        },
        {
          name: "userToken",
          isMut: false,
          isSigner: false,
          optional: true
        }
      ],
      args: [
        {
          name: "requestCardToRedeemArgs",
          type: {
            defined: "RequestCardToRedeemArgs"
          }
        }
      ],
      discriminant: {
        type: "u8",
        value: 12
      }
    },
    {
      name: "CleanUp",
      accounts: [
        {
          name: "packSet",
          isMut: false,
          isSigner: false
        },
        {
          name: "packConfig",
          isMut: true,
          isSigner: false,
          desc: "PDA, ['config', pack]"
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 13
      }
    },
    {
      name: "DeletePackConfig",
      accounts: [
        {
          name: "packSet",
          isMut: false,
          isSigner: false
        },
        {
          name: "packConfig",
          isMut: true,
          isSigner: false,
          desc: "PDA, ['config', pack]"
        },
        {
          name: "refunder",
          isMut: true,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: true
        }
      ],
      args: [],
      discriminant: {
        type: "u8",
        value: 14
      }
    }
  ],
  accounts: [
    {
      name: "PackCard",
      type: {
        kind: "struct",
        fields: [
          {
            name: "accountType",
            type: {
              defined: "AccountType"
            }
          },
          {
            name: "packSet",
            type: "publicKey"
          },
          {
            name: "master",
            type: "publicKey"
          },
          {
            name: "metadata",
            type: "publicKey"
          },
          {
            name: "tokenAccount",
            type: "publicKey"
          },
          {
            name: "maxSupply",
            type: "u32"
          },
          {
            name: "weight",
            type: "u16"
          }
        ]
      }
    },
    {
      name: "PackConfig",
      type: {
        kind: "struct",
        fields: [
          {
            name: "accountType",
            type: {
              defined: "AccountType"
            }
          },
          {
            name: "weights",
            type: {
              vec: {
                tuple: [
                  "u32",
                  "u32",
                  "u32"
                ]
              }
            }
          },
          {
            name: "actionToDo",
            type: {
              defined: "CleanUpActions"
            }
          }
        ]
      }
    },
    {
      name: "PackSet",
      type: {
        kind: "struct",
        fields: [
          {
            name: "accountType",
            type: {
              defined: "AccountType"
            }
          },
          {
            name: "store",
            type: "publicKey"
          },
          {
            name: "authority",
            type: "publicKey"
          },
          {
            name: "description",
            type: "string"
          },
          {
            name: "uri",
            type: "string"
          },
          {
            name: "name",
            type: {
              array: [
                "u8",
                32
              ]
            }
          },
          {
            name: "packCards",
            type: "u32"
          },
          {
            name: "packVouchers",
            type: "u32"
          },
          {
            name: "totalWeight",
            type: "u64"
          },
          {
            name: "totalEditions",
            type: "u64"
          },
          {
            name: "mutable",
            type: "bool"
          },
          {
            name: "packState",
            type: {
              defined: "PackSetState"
            }
          },
          {
            name: "distributionType",
            type: {
              defined: "PackDistributionType"
            }
          },
          {
            name: "allowedAmountToRedeem",
            type: "u32"
          },
          {
            name: "redeemStartDate",
            type: "u64"
          },
          {
            name: "redeemEndDate",
            type: {
              option: "u64"
            }
          }
        ]
      }
    },
    {
      name: "PackVoucher",
      type: {
        kind: "struct",
        fields: [
          {
            name: "accountType",
            type: {
              defined: "AccountType"
            }
          },
          {
            name: "packSet",
            type: "publicKey"
          },
          {
            name: "master",
            type: "publicKey"
          },
          {
            name: "metadata",
            type: "publicKey"
          }
        ]
      }
    },
    {
      name: "ProvingProcess",
      type: {
        kind: "struct",
        fields: [
          {
            name: "accountType",
            type: {
              defined: "AccountType"
            }
          },
          {
            name: "walletKey",
            type: "publicKey"
          },
          {
            name: "isExhausted",
            type: "bool"
          },
          {
            name: "voucherMint",
            type: "publicKey"
          },
          {
            name: "packSet",
            type: "publicKey"
          },
          {
            name: "cardsRedeemed",
            type: "u32"
          },
          {
            name: "cardsToRedeem",
            type: {
              bTreeMap: [
                "u32",
                "u32"
              ]
            }
          }
        ]
      }
    }
  ],
  types: [
    {
      name: "AddCardToPackArgs",
      type: {
        kind: "struct",
        fields: [
          {
            name: "maxSupply",
            type: "u32"
          },
          {
            name: "weight",
            type: "u16"
          },
          {
            name: "index",
            type: "u32"
          }
        ]
      }
    },
    {
      name: "InitPackSetArgs",
      type: {
        kind: "struct",
        fields: [
          {
            name: "name",
            type: {
              array: [
                "u8",
                32
              ]
            }
          },
          {
            name: "description",
            type: "string"
          },
          {
            name: "uri",
            type: "string"
          },
          {
            name: "mutable",
            type: "bool"
          },
          {
            name: "distributionType",
            type: {
              defined: "PackDistributionType"
            }
          },
          {
            name: "allowedAmountToRedeem",
            type: "u32"
          },
          {
            name: "redeemStartDate",
            type: {
              option: "u64"
            }
          },
          {
            name: "redeemEndDate",
            type: {
              option: "u64"
            }
          }
        ]
      }
    },
    {
      name: "EditPackSetArgs",
      type: {
        kind: "struct",
        fields: [
          {
            name: "name",
            type: {
              option: {
                array: [
                  "u8",
                  32
                ]
              }
            }
          },
          {
            name: "description",
            type: {
              option: "string"
            }
          },
          {
            name: "uri",
            type: {
              option: "string"
            }
          },
          {
            name: "mutable",
            type: {
              option: "bool"
            }
          }
        ]
      }
    },
    {
      name: "ClaimPackArgs",
      type: {
        kind: "struct",
        fields: [
          {
            name: "index",
            type: "u32"
          }
        ]
      }
    },
    {
      name: "RequestCardToRedeemArgs",
      type: {
        kind: "struct",
        fields: [
          {
            name: "index",
            type: "u32"
          }
        ]
      }
    },
    {
      name: "CleanUpActions",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Change",
            fields: [
              "u32",
              "u32"
            ]
          },
          {
            name: "Sort"
          },
          {
            name: "None"
          }
        ]
      }
    },
    {
      name: "PackSetState",
      type: {
        kind: "enum",
        variants: [
          {
            name: "NotActivated"
          },
          {
            name: "Activated"
          },
          {
            name: "Deactivated"
          },
          {
            name: "Ended"
          }
        ]
      }
    },
    {
      name: "PackDistributionType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "MaxSupply"
          },
          {
            name: "Fixed"
          },
          {
            name: "Unlimited"
          }
        ]
      }
    },
    {
      name: "AccountType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Uninitialized"
          },
          {
            name: "PackSet"
          },
          {
            name: "PackCard"
          },
          {
            name: "PackVoucher"
          },
          {
            name: "ProvingProcess"
          },
          {
            name: "PackConfig"
          }
        ]
      }
    }
  ],
  errors: [
    {
      code: 0,
      name: "WrongAllowedAmountToRedeem",
      msg: "Allowed amount to redeem should be more then 0"
    },
    {
      code: 1,
      name: "WrongRedeemDate",
      msg: "Wrong redeem date"
    },
    {
      code: 2,
      name: "CardProbabilityMissing",
      msg: "Card probability is missing"
    },
    {
      code: 3,
      name: "WrongCardProbability",
      msg: "Wrong card probability value"
    },
    {
      code: 4,
      name: "CardShouldntHaveProbabilityValue",
      msg: "Cards for this pack shouldn't have probability value"
    },
    {
      code: 5,
      name: "ProvedVouchersMismatchPackVouchers",
      msg: "Proved vouchers mismatch pack vouchers"
    },
    {
      code: 6,
      name: "PackIsAlreadyEnded",
      msg: "Pack is already ended"
    },
    {
      code: 7,
      name: "PackSetNotConfigured",
      msg: "NFT pack set not fully configured"
    },
    {
      code: 8,
      name: "CantActivatePack",
      msg: "Can't activate NFT pack in current state"
    },
    {
      code: 9,
      name: "PackSetNotActivated",
      msg: "Pack set should be activated"
    },
    {
      code: 10,
      name: "ProvingPackProcessCompleted",
      msg: "Proving process for this pack is completed"
    },
    {
      code: 11,
      name: "ProvingVoucherProcessCompleted",
      msg: "Proving process for this voucher is completed"
    },
    {
      code: 12,
      name: "WrongEdition",
      msg: "Received edition from wrong master"
    },
    {
      code: 13,
      name: "WrongEditionMint",
      msg: "Received wrong edition mint"
    },
    {
      code: 14,
      name: "Overflow",
      msg: "Overflow"
    },
    {
      code: 15,
      name: "Underflow",
      msg: "Underflow"
    },
    {
      code: 16,
      name: "NotEmptyPackSet",
      msg: "Pack set should be empty to delete it"
    },
    {
      code: 17,
      name: "WrongPackState",
      msg: "Wrong pack state to change data"
    },
    {
      code: 18,
      name: "ImmutablePackSet",
      msg: "Pack set is immutable"
    },
    {
      code: 19,
      name: "CantSetTheSameValue",
      msg: "Can't set the same value"
    },
    {
      code: 20,
      name: "WrongMaxSupply",
      msg: "Wrong max supply value"
    },
    {
      code: 21,
      name: "WrongVoucherSupply",
      msg: "Voucher should have supply greater then 0"
    },
    {
      code: 22,
      name: "CardDoesntHaveEditions",
      msg: "Card ran out of editions"
    },
    {
      code: 23,
      name: "UserRedeemedAllCards",
      msg: "User redeemed all allowed cards"
    },
    {
      code: 24,
      name: "UriTooLong",
      msg: "URI too long"
    },
    {
      code: 25,
      name: "CardDoesntHaveMaxSupply",
      msg: "Card doesn't have max supply"
    },
    {
      code: 26,
      name: "WrongMasterSupply",
      msg: "Master edition should have unlimited supply"
    },
    {
      code: 27,
      name: "MissingEditionsInPack",
      msg: "Pack set doesn't have total editions"
    },
    {
      code: 28,
      name: "AlreadySetNextCardToRedeem",
      msg: "User already got next card to redeem"
    },
    {
      code: 29,
      name: "EndDateNotArrived",
      msg: "Can't close the pack before end date"
    },
    {
      code: 30,
      name: "DescriptionTooLong",
      msg: "Pack description too long"
    },
    {
      code: 31,
      name: "WhitelistedCreatorInactive",
      msg: "Whitelisted creator inactive"
    },
    {
      code: 32,
      name: "WrongWhitelistedCreator",
      msg: "Wrong whitelisted creator address"
    },
    {
      code: 33,
      name: "WrongVoucherOwner",
      msg: "Voucher owner mismatch"
    },
    {
      code: 34,
      name: "CardShouldntHaveSupplyValue",
      msg: "Cards for this pack shouldn't have supply value"
    },
    {
      code: 35,
      name: "PackIsFullWithCards",
      msg: "Pack is already full of cards"
    },
    {
      code: 36,
      name: "WeightsNotCleanedUp",
      msg: "Card weights should be cleaned up"
    },
    {
      code: 37,
      name: "CardAlreadyRedeemed",
      msg: "User already redeemed this card"
    },
    {
      code: 38,
      name: "UserCantRedeemThisCard",
      msg: "User can't redeem this card"
    },
    {
      code: 39,
      name: "InvalidWeightPosition",
      msg: "Invalid weight position"
    }
  ],
  metadata: {
    origin: "shank",
    address: "packFeFNZzMfD9aVWL7QbGz1WcU7R9zpf6pvNsw2BLu",
    binaryVersion: "0.0.7",
    libVersion: "~0.0.7"
  }
};

// idl/metaplex-hydra.json
var metaplex_hydra_default = {
  version: "0.3.0",
  name: "hydra",
  instructions: [
    {
      name: "processInit",
      accounts: [
        {
          name: "authority",
          isMut: true,
          isSigner: true
        },
        {
          name: "fanout",
          isMut: true,
          isSigner: false
        },
        {
          name: "holdingAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "membershipMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "args",
          type: {
            defined: "InitializeFanoutArgs"
          }
        },
        {
          name: "model",
          type: {
            defined: "MembershipModel"
          }
        }
      ]
    },
    {
      name: "processInitForMint",
      accounts: [
        {
          name: "authority",
          isMut: true,
          isSigner: true
        },
        {
          name: "fanout",
          isMut: true,
          isSigner: false
        },
        {
          name: "fanoutForMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "mintHoldingAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "bumpSeed",
          type: "u8"
        }
      ]
    },
    {
      name: "processAddMemberWallet",
      accounts: [
        {
          name: "authority",
          isMut: true,
          isSigner: true
        },
        {
          name: "member",
          isMut: false,
          isSigner: false
        },
        {
          name: "fanout",
          isMut: true,
          isSigner: false
        },
        {
          name: "membershipAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "args",
          type: {
            defined: "AddMemberArgs"
          }
        }
      ]
    },
    {
      name: "processAddMemberNft",
      accounts: [
        {
          name: "authority",
          isMut: true,
          isSigner: true
        },
        {
          name: "fanout",
          isMut: true,
          isSigner: false
        },
        {
          name: "membershipAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "mint",
          isMut: false,
          isSigner: false
        },
        {
          name: "metadata",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "args",
          type: {
            defined: "AddMemberArgs"
          }
        }
      ]
    },
    {
      name: "processSetTokenMemberStake",
      accounts: [
        {
          name: "member",
          isMut: true,
          isSigner: true
        },
        {
          name: "fanout",
          isMut: true,
          isSigner: false
        },
        {
          name: "membershipVoucher",
          isMut: true,
          isSigner: false
        },
        {
          name: "membershipMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "membershipMintTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "memberStakeAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "shares",
          type: "u64"
        }
      ]
    },
    {
      name: "processSetForTokenMemberStake",
      accounts: [
        {
          name: "authority",
          isMut: true,
          isSigner: true
        },
        {
          name: "member",
          isMut: false,
          isSigner: false
        },
        {
          name: "fanout",
          isMut: true,
          isSigner: false
        },
        {
          name: "membershipVoucher",
          isMut: true,
          isSigner: false
        },
        {
          name: "membershipMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "membershipMintTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "memberStakeAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "shares",
          type: "u64"
        }
      ]
    },
    {
      name: "processDistributeNft",
      accounts: [
        {
          name: "payer",
          isMut: false,
          isSigner: true
        },
        {
          name: "member",
          isMut: true,
          isSigner: false
        },
        {
          name: "membershipMintTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "membershipKey",
          isMut: false,
          isSigner: false
        },
        {
          name: "membershipVoucher",
          isMut: true,
          isSigner: false
        },
        {
          name: "fanout",
          isMut: true,
          isSigner: false
        },
        {
          name: "holdingAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "fanoutForMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "fanoutForMintMembershipVoucher",
          isMut: true,
          isSigner: false
        },
        {
          name: "fanoutMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "fanoutMintMemberTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "distributeForMint",
          type: "bool"
        }
      ]
    },
    {
      name: "processDistributeWallet",
      accounts: [
        {
          name: "payer",
          isMut: false,
          isSigner: true
        },
        {
          name: "member",
          isMut: true,
          isSigner: false
        },
        {
          name: "membershipVoucher",
          isMut: true,
          isSigner: false
        },
        {
          name: "fanout",
          isMut: true,
          isSigner: false
        },
        {
          name: "holdingAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "fanoutForMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "fanoutForMintMembershipVoucher",
          isMut: true,
          isSigner: false
        },
        {
          name: "fanoutMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "fanoutMintMemberTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "distributeForMint",
          type: "bool"
        }
      ]
    },
    {
      name: "processDistributeToken",
      accounts: [
        {
          name: "payer",
          isMut: false,
          isSigner: true
        },
        {
          name: "member",
          isMut: true,
          isSigner: false
        },
        {
          name: "membershipMintTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "membershipVoucher",
          isMut: true,
          isSigner: false
        },
        {
          name: "fanout",
          isMut: true,
          isSigner: false
        },
        {
          name: "holdingAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "fanoutForMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "fanoutForMintMembershipVoucher",
          isMut: true,
          isSigner: false
        },
        {
          name: "fanoutMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "fanoutMintMemberTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "membershipMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "memberStakeAccount",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "distributeForMint",
          type: "bool"
        }
      ]
    },
    {
      name: "processSignMetadata",
      accounts: [
        {
          name: "authority",
          isMut: true,
          isSigner: true
        },
        {
          name: "fanout",
          isMut: false,
          isSigner: false
        },
        {
          name: "holdingAccount",
          isMut: false,
          isSigner: false
        },
        {
          name: "metadata",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenMetadataProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "processTransferShares",
      accounts: [
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "fromMember",
          isMut: false,
          isSigner: false
        },
        {
          name: "toMember",
          isMut: false,
          isSigner: false
        },
        {
          name: "fanout",
          isMut: true,
          isSigner: false
        },
        {
          name: "fromMembershipAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "toMembershipAccount",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "shares",
          type: "u64"
        }
      ]
    },
    {
      name: "processUnstake",
      accounts: [
        {
          name: "member",
          isMut: true,
          isSigner: true
        },
        {
          name: "fanout",
          isMut: true,
          isSigner: false
        },
        {
          name: "membershipVoucher",
          isMut: true,
          isSigner: false
        },
        {
          name: "membershipMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "membershipMintTokenAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "memberStakeAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "instructions",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "processRemoveMember",
      accounts: [
        {
          name: "authority",
          isMut: true,
          isSigner: true
        },
        {
          name: "member",
          isMut: false,
          isSigner: false
        },
        {
          name: "fanout",
          isMut: true,
          isSigner: false
        },
        {
          name: "membershipAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "destination",
          isMut: true,
          isSigner: false
        }
      ],
      args: []
    }
  ],
  accounts: [
    {
      name: "Fanout",
      type: {
        kind: "struct",
        fields: [
          {
            name: "authority",
            type: "publicKey"
          },
          {
            name: "name",
            type: "string"
          },
          {
            name: "accountKey",
            type: "publicKey"
          },
          {
            name: "totalShares",
            type: "u64"
          },
          {
            name: "totalMembers",
            type: "u64"
          },
          {
            name: "totalInflow",
            type: "u64"
          },
          {
            name: "lastSnapshotAmount",
            type: "u64"
          },
          {
            name: "bumpSeed",
            type: "u8"
          },
          {
            name: "accountOwnerBumpSeed",
            type: "u8"
          },
          {
            name: "totalAvailableShares",
            type: "u64"
          },
          {
            name: "membershipModel",
            type: {
              defined: "MembershipModel"
            }
          },
          {
            name: "membershipMint",
            type: {
              option: "publicKey"
            }
          },
          {
            name: "totalStakedShares",
            type: {
              option: "u64"
            }
          }
        ]
      }
    },
    {
      name: "FanoutMint",
      type: {
        kind: "struct",
        fields: [
          {
            name: "mint",
            type: "publicKey"
          },
          {
            name: "fanout",
            type: "publicKey"
          },
          {
            name: "tokenAccount",
            type: "publicKey"
          },
          {
            name: "totalInflow",
            type: "u64"
          },
          {
            name: "lastSnapshotAmount",
            type: "u64"
          },
          {
            name: "bumpSeed",
            type: "u8"
          }
        ]
      }
    },
    {
      name: "FanoutMembershipVoucher",
      type: {
        kind: "struct",
        fields: [
          {
            name: "fanout",
            type: "publicKey"
          },
          {
            name: "totalInflow",
            type: "u64"
          },
          {
            name: "lastInflow",
            type: "u64"
          },
          {
            name: "bumpSeed",
            type: "u8"
          },
          {
            name: "membershipKey",
            type: "publicKey"
          },
          {
            name: "shares",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "FanoutMembershipMintVoucher",
      type: {
        kind: "struct",
        fields: [
          {
            name: "fanout",
            type: "publicKey"
          },
          {
            name: "fanoutMint",
            type: "publicKey"
          },
          {
            name: "lastInflow",
            type: "u64"
          },
          {
            name: "bumpSeed",
            type: "u8"
          }
        ]
      }
    }
  ],
  types: [
    {
      name: "AddMemberArgs",
      type: {
        kind: "struct",
        fields: [
          {
            name: "shares",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "InitializeFanoutArgs",
      type: {
        kind: "struct",
        fields: [
          {
            name: "bumpSeed",
            type: "u8"
          },
          {
            name: "nativeAccountBumpSeed",
            type: "u8"
          },
          {
            name: "name",
            type: "string"
          },
          {
            name: "totalShares",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "MembershipModel",
      type: {
        kind: "enum",
        variants: [
          {
            name: "Wallet"
          },
          {
            name: "Token"
          },
          {
            name: "NFT"
          }
        ]
      }
    }
  ],
  errors: [
    {
      code: 6e3,
      name: "BadArtithmetic",
      msg: "Encountered an arithmetic error"
    },
    {
      code: 6001,
      name: "InvalidAuthority",
      msg: "Invalid authority"
    },
    {
      code: 6002,
      name: "InsufficientShares",
      msg: "Not Enough Available Shares"
    },
    {
      code: 6003,
      name: "SharesArentAtMax",
      msg: "All available shares must be assigned to a member"
    },
    {
      code: 6004,
      name: "NewMintAccountRequired",
      msg: "A New mint account must be provided"
    },
    {
      code: 6005,
      name: "MintAccountRequired",
      msg: "A Token type Fanout requires a Membership Mint"
    },
    {
      code: 6006,
      name: "InvalidMembershipModel",
      msg: "Invalid Membership Model"
    },
    {
      code: 6007,
      name: "InvalidMembershipVoucher",
      msg: "Invalid Membership Voucher"
    },
    {
      code: 6008,
      name: "MintDoesNotMatch",
      msg: "Invalid Mint for the config"
    },
    {
      code: 6009,
      name: "InvalidHoldingAccount",
      msg: "Holding account does not match the config"
    },
    {
      code: 6010,
      name: "HoldingAccountMustBeAnATA",
      msg: "A Mint holding account must be an ata for the mint owned by the config"
    },
    {
      code: 6011,
      name: "DerivedKeyInvalid"
    },
    {
      code: 6012,
      name: "IncorrectOwner"
    },
    {
      code: 6013,
      name: "WalletDoesNotOwnMembershipToken",
      msg: "Wallet Does not Own Membership Token"
    },
    {
      code: 6014,
      name: "InvalidMetadata",
      msg: "The Metadata specified is not valid Token Metadata"
    },
    {
      code: 6015,
      name: "NumericalOverflow"
    },
    {
      code: 6016,
      name: "InsufficientBalanceToDistribute",
      msg: "Not enough new balance to distribute"
    },
    {
      code: 6017,
      name: "InvalidFanoutForMint"
    },
    {
      code: 6018,
      name: "MustDistribute",
      msg: "This operation must be the instruction right after a distrobution on the same accounts."
    },
    {
      code: 6019,
      name: "InvalidStakeAta"
    },
    {
      code: 6020,
      name: "CannotTransferToSelf"
    },
    {
      code: 6021,
      name: "TransferNotSupported",
      msg: "Transfer is not supported on this membership model"
    },
    {
      code: 6022,
      name: "RemoveNotSupported",
      msg: "Remove is not supported on this membership model"
    },
    {
      code: 6023,
      name: "RemoveSharesMustBeZero",
      msg: "Before you remove a wallet or NFT member please transfer the shares to another member"
    },
    {
      code: 6024,
      name: "InvalidCloseAccountDestination",
      msg: "Sending Sol to a SPL token destination will render the sol unusable"
    }
  ],
  metadata: {
    address: "hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg",
    origin: "anchor",
    binaryVersion: "0.24.2",
    libVersion: "0.24.2"
  }
};

// idl/metaplex-token-entangler.json
var metaplex_token_entangler_default = {
  version: "0.2.0",
  name: "token_entangler",
  instructions: [
    {
      name: "createEntangledPair",
      accounts: [
        {
          name: "treasuryMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "payer",
          isMut: true,
          isSigner: true
        },
        {
          name: "transferAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false
        },
        {
          name: "mintA",
          isMut: false,
          isSigner: false
        },
        {
          name: "metadataA",
          isMut: false,
          isSigner: false
        },
        {
          name: "editionA",
          isMut: false,
          isSigner: false
        },
        {
          name: "mintB",
          isMut: false,
          isSigner: false
        },
        {
          name: "metadataB",
          isMut: false,
          isSigner: false
        },
        {
          name: "editionB",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenB",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenAEscrow",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenBEscrow",
          isMut: true,
          isSigner: false
        },
        {
          name: "entangledPair",
          isMut: true,
          isSigner: false
        },
        {
          name: "reverseEntangledPair",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "bump",
          type: "u8"
        },
        {
          name: "reverseBump",
          type: "u8"
        },
        {
          name: "tokenAEscrowBump",
          type: "u8"
        },
        {
          name: "tokenBEscrowBump",
          type: "u8"
        },
        {
          name: "price",
          type: "u64"
        },
        {
          name: "paysEveryTime",
          type: "bool"
        }
      ]
    },
    {
      name: "updateEntangledPair",
      accounts: [
        {
          name: "authority",
          isMut: false,
          isSigner: true
        },
        {
          name: "newAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "entangledPair",
          isMut: true,
          isSigner: false
        }
      ],
      args: [
        {
          name: "price",
          type: "u64"
        },
        {
          name: "paysEveryTime",
          type: "bool"
        }
      ]
    },
    {
      name: "swap",
      accounts: [
        {
          name: "treasuryMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "payer",
          isMut: false,
          isSigner: true
        },
        {
          name: "paymentAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "paymentTransferAuthority",
          isMut: false,
          isSigner: false
        },
        {
          name: "token",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "replacementTokenMetadata",
          isMut: false,
          isSigner: false
        },
        {
          name: "replacementTokenMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "replacementToken",
          isMut: true,
          isSigner: false
        },
        {
          name: "transferAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "tokenAEscrow",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenBEscrow",
          isMut: true,
          isSigner: false
        },
        {
          name: "entangledPair",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "ataProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    }
  ],
  accounts: [
    {
      name: "EntangledPair",
      type: {
        kind: "struct",
        fields: [
          {
            name: "treasuryMint",
            type: "publicKey"
          },
          {
            name: "mintA",
            type: "publicKey"
          },
          {
            name: "mintB",
            type: "publicKey"
          },
          {
            name: "tokenAEscrow",
            type: "publicKey"
          },
          {
            name: "tokenBEscrow",
            type: "publicKey"
          },
          {
            name: "authority",
            type: "publicKey"
          },
          {
            name: "bump",
            type: "u8"
          },
          {
            name: "tokenAEscrowBump",
            type: "u8"
          },
          {
            name: "tokenBEscrowBump",
            type: "u8"
          },
          {
            name: "price",
            type: "u64"
          },
          {
            name: "paid",
            type: "bool"
          },
          {
            name: "paysEveryTime",
            type: "bool"
          }
        ]
      }
    }
  ],
  errors: [
    {
      code: 6e3,
      name: "PublicKeyMismatch",
      msg: "PublicKeyMismatch"
    },
    {
      code: 6001,
      name: "InvalidMintAuthority",
      msg: "InvalidMintAuthority"
    },
    {
      code: 6002,
      name: "UninitializedAccount",
      msg: "UninitializedAccount"
    },
    {
      code: 6003,
      name: "IncorrectOwner",
      msg: "IncorrectOwner"
    },
    {
      code: 6004,
      name: "PublicKeysShouldBeUnique",
      msg: "PublicKeysShouldBeUnique"
    },
    {
      code: 6005,
      name: "StatementFalse",
      msg: "StatementFalse"
    },
    {
      code: 6006,
      name: "NotRentExempt",
      msg: "NotRentExempt"
    },
    {
      code: 6007,
      name: "NumericalOverflow",
      msg: "NumericalOverflow"
    },
    {
      code: 6008,
      name: "DerivedKeyInvalid",
      msg: "Derived key invalid"
    },
    {
      code: 6009,
      name: "MetadataDoesntExist",
      msg: "Metadata doesn't exist"
    },
    {
      code: 6010,
      name: "EditionDoesntExist",
      msg: "Edition doesn't exist"
    },
    {
      code: 6011,
      name: "InvalidTokenAmount",
      msg: "Invalid token amount"
    },
    {
      code: 6012,
      name: "InvalidMint",
      msg: "This token is not a valid mint for this entangled pair"
    },
    {
      code: 6013,
      name: "EntangledPairExists",
      msg: "This pair already exists as it's reverse"
    },
    {
      code: 6014,
      name: "MustHaveSupplyOne",
      msg: "Must have supply one!"
    },
    {
      code: 6015,
      name: "BumpSeedNotInHashMap",
      msg: "Bump seed not in hash map"
    }
  ],
  metadata: {
    address: "qntmGodpGkrM42mN68VCZHXnKqDCT8rdY23wFcXCLPd",
    origin: "anchor",
    binaryVersion: "0.26.0",
    libVersion: "0.26.0"
  }
};

// idl/metaplex-auctioneer.json
var metaplex_auctioneer_default = {
  version: "0.2.1",
  name: "auctioneer",
  instructions: [
    {
      name: "authorize",
      docs: [
        "Authorize the Auctioneer to manage an Auction House."
      ],
      accounts: [
        {
          name: "wallet",
          isMut: true,
          isSigner: true,
          docs: [
            "User wallet account."
          ]
        },
        {
          name: "auctionHouse",
          isMut: false,
          isSigner: false,
          docs: [
            "Auction House instance PDA account."
          ]
        },
        {
          name: "auctioneerAuthority",
          isMut: true,
          isSigner: false,
          docs: [
            "The auctioneer program PDA running this auction."
          ]
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "withdraw",
      docs: [
        "Withdraw `amount` from the escrow payment account for your specific wallet."
      ],
      accounts: [
        {
          name: "auctionHouseProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Auction House Program"
          ]
        },
        {
          name: "wallet",
          isMut: false,
          isSigner: false,
          docs: [
            "User wallet account."
          ]
        },
        {
          name: "receiptAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "SPL token account or native SOL account to transfer funds to. If the account is a native SOL account, this is the same as the wallet address."
          ]
        },
        {
          name: "escrowPaymentAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "Buyer escrow payment account PDA."
          ]
        },
        {
          name: "treasuryMint",
          isMut: false,
          isSigner: false,
          docs: [
            "Auction House instance treasury mint account."
          ]
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false,
          docs: [
            "Auction House instance authority account."
          ]
        },
        {
          name: "auctionHouse",
          isMut: false,
          isSigner: false,
          docs: [
            "Auction House instance PDA account."
          ]
        },
        {
          name: "auctionHouseFeeAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "Auction House instance fee account."
          ]
        },
        {
          name: "auctioneerAuthority",
          isMut: false,
          isSigner: false,
          docs: [
            "The auctioneer program PDA running this auction."
          ]
        },
        {
          name: "ahAuctioneerPda",
          isMut: false,
          isSigner: false,
          docs: [
            "The auctioneer PDA owned by Auction House storing scopes."
          ]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "ataProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "escrowPaymentBump",
          type: "u8"
        },
        {
          name: "auctioneerAuthorityBump",
          type: "u8"
        },
        {
          name: "amount",
          type: "u64"
        }
      ]
    },
    {
      name: "deposit",
      docs: [
        "Deposit `amount` into the escrow payment account for your specific wallet."
      ],
      accounts: [
        {
          name: "auctionHouseProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Auction House Program"
          ]
        },
        {
          name: "wallet",
          isMut: false,
          isSigner: true,
          docs: [
            "User wallet account."
          ]
        },
        {
          name: "paymentAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "User SOL or SPL account to transfer funds from."
          ]
        },
        {
          name: "transferAuthority",
          isMut: false,
          isSigner: false,
          docs: [
            "SPL token account transfer authority."
          ]
        },
        {
          name: "escrowPaymentAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "Buyer escrow payment account PDA."
          ]
        },
        {
          name: "treasuryMint",
          isMut: false,
          isSigner: false,
          docs: [
            "Auction House instance treasury mint account."
          ]
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false,
          docs: [
            "Auction House instance authority account."
          ]
        },
        {
          name: "auctionHouse",
          isMut: false,
          isSigner: false,
          docs: [
            "Auction House instance PDA account."
          ]
        },
        {
          name: "auctionHouseFeeAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "Auction House instance fee account."
          ]
        },
        {
          name: "auctioneerAuthority",
          isMut: false,
          isSigner: false,
          docs: [
            "The auctioneer program PDA running this auction."
          ]
        },
        {
          name: "ahAuctioneerPda",
          isMut: false,
          isSigner: false,
          docs: [
            "The auctioneer PDA owned by Auction House storing scopes."
          ]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "escrowPaymentBump",
          type: "u8"
        },
        {
          name: "auctioneerAuthorityBump",
          type: "u8"
        },
        {
          name: "amount",
          type: "u64"
        }
      ]
    },
    {
      name: "cancel",
      docs: [
        "Cancel a bid or ask by revoking the token delegate, transferring all lamports from the trade state account to the fee payer, and setting the trade state account data to zero so it can be garbage collected."
      ],
      accounts: [
        {
          name: "auctionHouseProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Auction House Program"
          ]
        },
        {
          name: "listingConfig",
          isMut: true,
          isSigner: false,
          docs: [
            "The Listing Config used for listing settings"
          ]
        },
        {
          name: "seller",
          isMut: false,
          isSigner: false,
          docs: [
            "The seller of the NFT"
          ]
        },
        {
          name: "wallet",
          isMut: true,
          isSigner: false,
          docs: [
            "User wallet account."
          ]
        },
        {
          name: "tokenAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "SPL token account containing the token of the sale to be canceled."
          ]
        },
        {
          name: "tokenMint",
          isMut: false,
          isSigner: false,
          docs: [
            "Token mint account of SPL token."
          ]
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false,
          docs: [
            "Auction House instance authority account."
          ]
        },
        {
          name: "auctionHouse",
          isMut: false,
          isSigner: false,
          docs: [
            "Auction House instance PDA account."
          ]
        },
        {
          name: "auctionHouseFeeAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "Auction House instance fee account."
          ]
        },
        {
          name: "tradeState",
          isMut: true,
          isSigner: false,
          docs: [
            "Trade state PDA account representing the bid or ask to be canceled."
          ]
        },
        {
          name: "auctioneerAuthority",
          isMut: false,
          isSigner: false,
          docs: [
            "The auctioneer program PDA running this auction."
          ]
        },
        {
          name: "ahAuctioneerPda",
          isMut: false,
          isSigner: false,
          docs: [
            "The auctioneer PDA owned by Auction House storing scopes."
          ]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "auctioneerAuthorityBump",
          type: "u8"
        },
        {
          name: "buyerPrice",
          type: "u64"
        },
        {
          name: "tokenSize",
          type: "u64"
        }
      ]
    },
    {
      name: "executeSale",
      docs: [
        "Execute sale between provided buyer and seller trade state accounts transferring funds to seller wallet and token to buyer wallet."
      ],
      accounts: [
        {
          name: "auctionHouseProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Auction House Program"
          ]
        },
        {
          name: "listingConfig",
          isMut: true,
          isSigner: false,
          docs: [
            "The Listing Config used for listing settings"
          ]
        },
        {
          name: "buyer",
          isMut: true,
          isSigner: false,
          docs: [
            "Buyer user wallet account."
          ]
        },
        {
          name: "seller",
          isMut: true,
          isSigner: false,
          docs: [
            "Seller user wallet account."
          ]
        },
        {
          name: "tokenAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "Token account where the SPL token is stored."
          ]
        },
        {
          name: "tokenMint",
          isMut: false,
          isSigner: false,
          docs: [
            "Token mint account for the SPL token."
          ]
        },
        {
          name: "metadata",
          isMut: false,
          isSigner: false,
          docs: [
            "Metaplex metadata account decorating SPL mint account."
          ]
        },
        {
          name: "treasuryMint",
          isMut: false,
          isSigner: false,
          docs: [
            "Auction House treasury mint account."
          ]
        },
        {
          name: "escrowPaymentAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "Buyer escrow payment account."
          ]
        },
        {
          name: "sellerPaymentReceiptAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "Seller SOL or SPL account to receive payment at."
          ]
        },
        {
          name: "buyerReceiptTokenAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "Buyer SPL token account to receive purchased item at."
          ]
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false,
          docs: [
            "Auction House instance authority."
          ]
        },
        {
          name: "auctionHouse",
          isMut: false,
          isSigner: false,
          docs: [
            "Auction House instance PDA account."
          ]
        },
        {
          name: "auctionHouseFeeAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "Auction House instance fee account."
          ]
        },
        {
          name: "auctionHouseTreasury",
          isMut: true,
          isSigner: false,
          docs: [
            "Auction House instance treasury account."
          ]
        },
        {
          name: "buyerTradeState",
          isMut: true,
          isSigner: false,
          docs: [
            "Buyer trade state PDA account encoding the buy order."
          ]
        },
        {
          name: "sellerTradeState",
          isMut: true,
          isSigner: false,
          docs: [
            "Seller trade state PDA account encoding the sell order."
          ]
        },
        {
          name: "freeTradeState",
          isMut: true,
          isSigner: false,
          docs: [
            "Free seller trade state PDA account encoding a free sell order."
          ]
        },
        {
          name: "auctioneerAuthority",
          isMut: false,
          isSigner: false,
          docs: [
            "The auctioneer program PDA running this auction."
          ]
        },
        {
          name: "ahAuctioneerPda",
          isMut: false,
          isSigner: false,
          docs: [
            "The auctioneer PDA owned by Auction House storing scopes."
          ]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "ataProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "programAsSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "escrowPaymentBump",
          type: "u8"
        },
        {
          name: "freeTradeStateBump",
          type: "u8"
        },
        {
          name: "programAsSignerBump",
          type: "u8"
        },
        {
          name: "auctioneerAuthorityBump",
          type: "u8"
        },
        {
          name: "buyerPrice",
          type: "u64"
        },
        {
          name: "tokenSize",
          type: "u64"
        }
      ]
    },
    {
      name: "sell",
      docs: [
        "Create a sell bid by creating a `seller_trade_state` account and approving the program as the token delegate."
      ],
      accounts: [
        {
          name: "auctionHouseProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Auction House Program used for CPI call"
          ]
        },
        {
          name: "listingConfig",
          isMut: true,
          isSigner: false,
          docs: [
            "The Listing Config used for listing settings"
          ]
        },
        {
          name: "wallet",
          isMut: true,
          isSigner: false,
          docs: [
            "User wallet account."
          ]
        },
        {
          name: "tokenAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "SPL token account containing token for sale."
          ]
        },
        {
          name: "metadata",
          isMut: false,
          isSigner: false,
          docs: [
            "Metaplex metadata account decorating SPL mint account."
          ]
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false,
          docs: [
            "Auction House authority account."
          ]
        },
        {
          name: "auctionHouse",
          isMut: false,
          isSigner: false,
          docs: [
            "Auction House instance PDA account."
          ]
        },
        {
          name: "auctionHouseFeeAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "Auction House instance fee account."
          ]
        },
        {
          name: "sellerTradeState",
          isMut: true,
          isSigner: false,
          docs: [
            "Seller trade state PDA account encoding the sell order."
          ]
        },
        {
          name: "freeSellerTradeState",
          isMut: true,
          isSigner: false,
          docs: [
            "Free seller trade state PDA account encoding a free sell order."
          ]
        },
        {
          name: "auctioneerAuthority",
          isMut: false,
          isSigner: false,
          docs: [
            "The auctioneer program PDA running this auction."
          ]
        },
        {
          name: "ahAuctioneerPda",
          isMut: false,
          isSigner: false,
          docs: [
            "The auctioneer PDA owned by Auction House storing scopes."
          ]
        },
        {
          name: "programAsSigner",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "tradeStateBump",
          type: "u8"
        },
        {
          name: "freeTradeStateBump",
          type: "u8"
        },
        {
          name: "programAsSignerBump",
          type: "u8"
        },
        {
          name: "auctioneerAuthorityBump",
          type: "u8"
        },
        {
          name: "tokenSize",
          type: "u64"
        },
        {
          name: "startTime",
          type: {
            defined: "UnixTimestamp"
          }
        },
        {
          name: "endTime",
          type: {
            defined: "UnixTimestamp"
          }
        },
        {
          name: "reservePrice",
          type: {
            option: "u64"
          }
        },
        {
          name: "minBidIncrement",
          type: {
            option: "u64"
          }
        },
        {
          name: "timeExtPeriod",
          type: {
            option: "u32"
          }
        },
        {
          name: "timeExtDelta",
          type: {
            option: "u32"
          }
        },
        {
          name: "allowHighBidCancel",
          type: {
            option: "bool"
          }
        }
      ]
    },
    {
      name: "buy",
      docs: [
        "Create a private buy bid by creating a `buyer_trade_state` account and an `escrow_payment` account and funding the escrow with the necessary SOL or SPL token amount."
      ],
      accounts: [
        {
          name: "auctionHouseProgram",
          isMut: false,
          isSigner: false,
          docs: [
            "Auction House Program"
          ]
        },
        {
          name: "listingConfig",
          isMut: true,
          isSigner: false,
          docs: [
            "The Listing Config used for listing settings"
          ]
        },
        {
          name: "seller",
          isMut: false,
          isSigner: false,
          docs: [
            "The seller of the NFT"
          ]
        },
        {
          name: "wallet",
          isMut: false,
          isSigner: true,
          docs: [
            "User wallet account."
          ]
        },
        {
          name: "paymentAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "User SOL or SPL account to transfer funds from."
          ]
        },
        {
          name: "transferAuthority",
          isMut: false,
          isSigner: false,
          docs: [
            "SPL token account transfer authority."
          ]
        },
        {
          name: "treasuryMint",
          isMut: false,
          isSigner: false,
          docs: [
            "Auction House instance treasury mint account."
          ]
        },
        {
          name: "tokenAccount",
          isMut: false,
          isSigner: false,
          docs: [
            "SPL token account."
          ]
        },
        {
          name: "metadata",
          isMut: false,
          isSigner: false,
          docs: [
            "SPL token account metadata."
          ]
        },
        {
          name: "escrowPaymentAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "Buyer escrow payment account PDA."
          ]
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false,
          docs: [
            "Auction House instance authority account."
          ]
        },
        {
          name: "auctionHouse",
          isMut: false,
          isSigner: false,
          docs: [
            "Auction House instance PDA account."
          ]
        },
        {
          name: "auctionHouseFeeAccount",
          isMut: true,
          isSigner: false,
          docs: [
            "Auction House instance fee account."
          ]
        },
        {
          name: "buyerTradeState",
          isMut: true,
          isSigner: false,
          docs: [
            "Buyer trade state PDA."
          ]
        },
        {
          name: "auctioneerAuthority",
          isMut: false,
          isSigner: false,
          docs: [
            "The auctioneer program PDA running this auction."
          ]
        },
        {
          name: "ahAuctioneerPda",
          isMut: false,
          isSigner: false,
          docs: [
            "The auctioneer PDA owned by Auction House storing scopes."
          ]
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "rent",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "tradeStateBump",
          type: "u8"
        },
        {
          name: "escrowPaymentBump",
          type: "u8"
        },
        {
          name: "auctioneerAuthorityBump",
          type: "u8"
        },
        {
          name: "buyerPrice",
          type: "u64"
        },
        {
          name: "tokenSize",
          type: "u64"
        }
      ]
    }
  ],
  accounts: [
    {
      name: "AuctioneerAuthority",
      type: {
        kind: "struct",
        fields: [
          {
            name: "bump",
            type: "u8"
          }
        ]
      }
    },
    {
      name: "ListingConfig",
      type: {
        kind: "struct",
        fields: [
          {
            name: "version",
            type: {
              defined: "ListingConfigVersion"
            }
          },
          {
            name: "startTime",
            type: {
              defined: "UnixTimestamp"
            }
          },
          {
            name: "endTime",
            type: {
              defined: "UnixTimestamp"
            }
          },
          {
            name: "highestBid",
            type: {
              defined: "Bid"
            }
          },
          {
            name: "bump",
            type: "u8"
          },
          {
            name: "reservePrice",
            type: "u64"
          },
          {
            name: "minBidIncrement",
            type: "u64"
          },
          {
            name: "timeExtPeriod",
            type: "u32"
          },
          {
            name: "timeExtDelta",
            type: "u32"
          },
          {
            name: "allowHighBidCancel",
            type: "bool"
          }
        ]
      }
    }
  ],
  types: [
    {
      name: "Bid",
      type: {
        kind: "struct",
        fields: [
          {
            name: "version",
            type: {
              defined: "ListingConfigVersion"
            }
          },
          {
            name: "amount",
            type: "u64"
          },
          {
            name: "buyerTradeState",
            type: "publicKey"
          }
        ]
      }
    },
    {
      name: "ListingConfigVersion",
      type: {
        kind: "enum",
        variants: [
          {
            name: "V0"
          }
        ]
      }
    }
  ],
  errors: [
    {
      code: 6e3,
      name: "BumpSeedNotInHashMap",
      msg: "Bump seed not in hash map"
    },
    {
      code: 6001,
      name: "AuctionNotStarted",
      msg: "Auction has not started yet"
    },
    {
      code: 6002,
      name: "AuctionEnded",
      msg: "Auction has ended"
    },
    {
      code: 6003,
      name: "AuctionActive",
      msg: "Auction has not ended yet"
    },
    {
      code: 6004,
      name: "BidTooLow",
      msg: "The bid was lower than the highest bid"
    },
    {
      code: 6005,
      name: "SignerNotAuth",
      msg: "The signer must be the Auction House authority"
    },
    {
      code: 6006,
      name: "NotHighestBidder",
      msg: "Execute Sale must be run on the highest bidder"
    },
    {
      code: 6007,
      name: "BelowReservePrice",
      msg: "The bid price must be greater than the reserve price"
    },
    {
      code: 6008,
      name: "BelowBidIncrement",
      msg: "The bid must match the highest bid plus the minimum bid increment"
    },
    {
      code: 6009,
      name: "CannotCancelHighestBid",
      msg: "The highest bidder is not allowed to cancel"
    }
  ],
  metadata: {
    address: "neer8g6yJq2mQM6KbnViEDAD4gr3gRZyMMf4F2p3MEh",
    origin: "anchor",
    binaryVersion: "0.26.0",
    libVersion: "0.26.0"
  }
};

// idl/obric-v2.json
var obric_v2_default = {
  version: "0.1.0",
  name: "obric_solana",
  instructions: [
    {
      name: "createPair",
      accounts: [
        {
          name: "tradingPair",
          isMut: true,
          isSigner: false
        },
        {
          name: "mintX",
          isMut: false,
          isSigner: false
        },
        {
          name: "mintY",
          isMut: false,
          isSigner: false
        },
        {
          name: "mintSslpX",
          isMut: true,
          isSigner: false
        },
        {
          name: "mintSslpY",
          isMut: true,
          isSigner: false
        },
        {
          name: "reserveX",
          isMut: true,
          isSigner: false
        },
        {
          name: "reserveY",
          isMut: true,
          isSigner: false
        },
        {
          name: "protocolFeeX",
          isMut: true,
          isSigner: false
        },
        {
          name: "protocolFeeY",
          isMut: true,
          isSigner: false
        },
        {
          name: "xPriceFeed",
          isMut: false,
          isSigner: false
        },
        {
          name: "yPriceFeed",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: true
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "concentration",
          type: "u64"
        },
        {
          name: "feeMillionth",
          type: "u64"
        },
        {
          name: "rebatePercentage",
          type: "u64"
        },
        {
          name: "protocolFeeShareThousandth",
          type: "u64"
        }
      ]
    },
    {
      name: "createPairV2",
      accounts: [
        {
          name: "tradingPair",
          isMut: true,
          isSigner: false
        },
        {
          name: "mintX",
          isMut: false,
          isSigner: false
        },
        {
          name: "mintY",
          isMut: false,
          isSigner: false
        },
        {
          name: "mintSslpX",
          isMut: true,
          isSigner: false
        },
        {
          name: "mintSslpY",
          isMut: true,
          isSigner: false
        },
        {
          name: "reserveX",
          isMut: true,
          isSigner: false
        },
        {
          name: "reserveY",
          isMut: true,
          isSigner: false
        },
        {
          name: "protocolFeeX",
          isMut: true,
          isSigner: false
        },
        {
          name: "protocolFeeY",
          isMut: true,
          isSigner: false
        },
        {
          name: "xPriceFeed",
          isMut: false,
          isSigner: false
        },
        {
          name: "yPriceFeed",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: true
        },
        {
          name: "systemProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "concentration",
          type: "u64"
        },
        {
          name: "feeMillionth",
          type: "u64"
        },
        {
          name: "rebatePercentage",
          type: "u64"
        },
        {
          name: "protocolFeeShareThousandth",
          type: "u64"
        }
      ]
    },
    {
      name: "updateConcentration",
      accounts: [
        {
          name: "tradingPair",
          isMut: true,
          isSigner: false
        },
        {
          name: "mintX",
          isMut: false,
          isSigner: false
        },
        {
          name: "mintY",
          isMut: false,
          isSigner: false
        },
        {
          name: "xPriceFeed",
          isMut: false,
          isSigner: false
        },
        {
          name: "yPriceFeed",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "concentration",
          type: "u64"
        }
      ]
    },
    {
      name: "updateVersion",
      accounts: [
        {
          name: "tradingPair",
          isMut: true,
          isSigner: false
        },
        {
          name: "mintX",
          isMut: false,
          isSigner: false
        },
        {
          name: "mintY",
          isMut: false,
          isSigner: false
        },
        {
          name: "mintSslpX",
          isMut: false,
          isSigner: false
        },
        {
          name: "mintSslpY",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "version",
          type: "u8"
        }
      ]
    },
    {
      name: "updateFeeParams",
      accounts: [
        {
          name: "tradingPair",
          isMut: true,
          isSigner: false
        },
        {
          name: "mintX",
          isMut: false,
          isSigner: false
        },
        {
          name: "mintY",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: false,
          isSigner: true
        }
      ],
      args: [
        {
          name: "feeMillionth",
          type: "u64"
        },
        {
          name: "protocolFeeShareThousandth",
          type: "u64"
        }
      ]
    },
    {
      name: "updateOracles",
      accounts: [
        {
          name: "tradingPair",
          isMut: true,
          isSigner: false
        },
        {
          name: "mintX",
          isMut: false,
          isSigner: false
        },
        {
          name: "mintY",
          isMut: false,
          isSigner: false
        },
        {
          name: "xPriceFeed",
          isMut: false,
          isSigner: false
        },
        {
          name: "yPriceFeed",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: false,
          isSigner: true
        }
      ],
      args: []
    },
    {
      name: "withdrawFees",
      accounts: [
        {
          name: "tradingPair",
          isMut: true,
          isSigner: false
        },
        {
          name: "mintX",
          isMut: false,
          isSigner: false
        },
        {
          name: "mintY",
          isMut: false,
          isSigner: false
        },
        {
          name: "protocolFeeX",
          isMut: true,
          isSigner: false
        },
        {
          name: "protocolFeeY",
          isMut: true,
          isSigner: false
        },
        {
          name: "userTokenAccountX",
          isMut: true,
          isSigner: false
        },
        {
          name: "userTokenAccountY",
          isMut: true,
          isSigner: false
        },
        {
          name: "signer",
          isMut: false,
          isSigner: true
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: []
    },
    {
      name: "deposit",
      accounts: [
        {
          name: "tradingPair",
          isMut: true,
          isSigner: false
        },
        {
          name: "mintX",
          isMut: false,
          isSigner: false
        },
        {
          name: "mintY",
          isMut: false,
          isSigner: false
        },
        {
          name: "reserveX",
          isMut: true,
          isSigner: false
        },
        {
          name: "reserveY",
          isMut: true,
          isSigner: false
        },
        {
          name: "userTokenAccountX",
          isMut: true,
          isSigner: false
        },
        {
          name: "userTokenAccountY",
          isMut: true,
          isSigner: false
        },
        {
          name: "mintSslpX",
          isMut: true,
          isSigner: false
        },
        {
          name: "mintSslpY",
          isMut: true,
          isSigner: false
        },
        {
          name: "userSslpX",
          isMut: true,
          isSigner: false
        },
        {
          name: "userSslpY",
          isMut: true,
          isSigner: false
        },
        {
          name: "xPriceFeed",
          isMut: false,
          isSigner: false
        },
        {
          name: "yPriceFeed",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: true,
          isSigner: true
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "inputX",
          type: "u64"
        },
        {
          name: "inputY",
          type: "u64"
        }
      ]
    },
    {
      name: "withdraw",
      accounts: [
        {
          name: "tradingPair",
          isMut: true,
          isSigner: false
        },
        {
          name: "mintX",
          isMut: false,
          isSigner: false
        },
        {
          name: "mintY",
          isMut: false,
          isSigner: false
        },
        {
          name: "reserveX",
          isMut: true,
          isSigner: false
        },
        {
          name: "reserveY",
          isMut: true,
          isSigner: false
        },
        {
          name: "userTokenAccountX",
          isMut: true,
          isSigner: false
        },
        {
          name: "userTokenAccountY",
          isMut: true,
          isSigner: false
        },
        {
          name: "mintSslpX",
          isMut: true,
          isSigner: false
        },
        {
          name: "mintSslpY",
          isMut: true,
          isSigner: false
        },
        {
          name: "userSslpX",
          isMut: true,
          isSigner: false
        },
        {
          name: "userSslpY",
          isMut: true,
          isSigner: false
        },
        {
          name: "xPriceFeed",
          isMut: false,
          isSigner: false
        },
        {
          name: "yPriceFeed",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: false,
          isSigner: true
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "lpAmountX",
          type: "u64"
        },
        {
          name: "lpAmountY",
          type: "u64"
        }
      ]
    },
    {
      name: "swapXToY",
      accounts: [
        {
          name: "tradingPair",
          isMut: true,
          isSigner: false
        },
        {
          name: "mintX",
          isMut: false,
          isSigner: false
        },
        {
          name: "mintY",
          isMut: false,
          isSigner: false
        },
        {
          name: "reserveX",
          isMut: true,
          isSigner: false
        },
        {
          name: "reserveY",
          isMut: true,
          isSigner: false
        },
        {
          name: "userTokenAccountX",
          isMut: true,
          isSigner: false
        },
        {
          name: "userTokenAccountY",
          isMut: true,
          isSigner: false
        },
        {
          name: "protocolFeeY",
          isMut: true,
          isSigner: false
        },
        {
          name: "xPriceFeed",
          isMut: false,
          isSigner: false
        },
        {
          name: "yPriceFeed",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: false,
          isSigner: true
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "inputX",
          type: "u64"
        },
        {
          name: "minOutputAmt",
          type: "u64"
        }
      ]
    },
    {
      name: "swapYToX",
      accounts: [
        {
          name: "tradingPair",
          isMut: true,
          isSigner: false
        },
        {
          name: "mintX",
          isMut: false,
          isSigner: false
        },
        {
          name: "mintY",
          isMut: false,
          isSigner: false
        },
        {
          name: "reserveX",
          isMut: true,
          isSigner: false
        },
        {
          name: "reserveY",
          isMut: true,
          isSigner: false
        },
        {
          name: "userTokenAccountX",
          isMut: true,
          isSigner: false
        },
        {
          name: "userTokenAccountY",
          isMut: true,
          isSigner: false
        },
        {
          name: "protocolFeeX",
          isMut: true,
          isSigner: false
        },
        {
          name: "xPriceFeed",
          isMut: false,
          isSigner: false
        },
        {
          name: "yPriceFeed",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: false,
          isSigner: true
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "inputY",
          type: "u64"
        },
        {
          name: "minOutputAmt",
          type: "u64"
        }
      ]
    },
    {
      name: "swap",
      accounts: [
        {
          name: "tradingPair",
          isMut: true,
          isSigner: false
        },
        {
          name: "mintX",
          isMut: false,
          isSigner: false
        },
        {
          name: "mintY",
          isMut: false,
          isSigner: false
        },
        {
          name: "reserveX",
          isMut: true,
          isSigner: false
        },
        {
          name: "reserveY",
          isMut: true,
          isSigner: false
        },
        {
          name: "userTokenAccountX",
          isMut: true,
          isSigner: false
        },
        {
          name: "userTokenAccountY",
          isMut: true,
          isSigner: false
        },
        {
          name: "protocolFee",
          isMut: true,
          isSigner: false
        },
        {
          name: "xPriceFeed",
          isMut: false,
          isSigner: false
        },
        {
          name: "yPriceFeed",
          isMut: false,
          isSigner: false
        },
        {
          name: "user",
          isMut: false,
          isSigner: true
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "isXToY",
          type: "bool"
        },
        {
          name: "inputAmt",
          type: "u64"
        },
        {
          name: "minOutputAmt",
          type: "u64"
        }
      ]
    }
  ],
  accounts: [
    {
      name: "SSTradingPair",
      type: {
        kind: "struct",
        fields: [
          {
            name: "isInitialized",
            type: "bool"
          },
          {
            name: "xPriceFeedId",
            type: "publicKey"
          },
          {
            name: "yPriceFeedId",
            type: "publicKey"
          },
          {
            name: "reserveX",
            type: "publicKey"
          },
          {
            name: "reserveY",
            type: "publicKey"
          },
          {
            name: "protocolFeeX",
            type: "publicKey"
          },
          {
            name: "protocolFeeY",
            type: "publicKey"
          },
          {
            name: "bump",
            type: "u8"
          },
          {
            name: "mintX",
            type: "publicKey"
          },
          {
            name: "mintY",
            type: "publicKey"
          },
          {
            name: "concentration",
            type: "u64"
          },
          {
            name: "bigK",
            type: "u128"
          },
          {
            name: "targetX",
            type: "u64"
          },
          {
            name: "cumulativeVolume",
            type: "u64"
          },
          {
            name: "multX",
            type: "u64"
          },
          {
            name: "multY",
            type: "u64"
          },
          {
            name: "feeMillionth",
            type: "u64"
          },
          {
            name: "rebatePercentage",
            type: "u64"
          },
          {
            name: "protocolFeeShareThousandth",
            type: "u64"
          },
          {
            name: "volumeRecord",
            type: {
              array: [
                "u64",
                8
              ]
            }
          },
          {
            name: "volumeTimeRecord",
            type: {
              array: [
                "i64",
                8
              ]
            }
          },
          {
            name: "version",
            type: "u8"
          },
          {
            name: "padding",
            type: {
              array: [
                "u8",
                7
              ]
            }
          },
          {
            name: "mintSslpX",
            type: "publicKey"
          },
          {
            name: "mintSslpY",
            type: "publicKey"
          },
          {
            name: "padding2",
            type: {
              array: [
                "u64",
                15
              ]
            }
          }
        ]
      }
    }
  ],
  errors: [
    {
      code: 6e3,
      name: "AlreadyInitialized"
    },
    {
      code: 6001,
      name: "Unauthorized",
      msg: "Unauthorized"
    },
    {
      code: 6002,
      name: "MismatchedTokenMint",
      msg: "Mismatched token mint"
    },
    {
      code: 6003,
      name: "InvalidConcentrationArg",
      msg: "Invalid concentration argument"
    },
    {
      code: 6004,
      name: "InvalidRebateArg",
      msg: "Invalid rebate argument"
    },
    {
      code: 6005,
      name: "InvalidFeeArg",
      msg: "Invalid fee argument"
    },
    {
      code: 6006,
      name: "BigKLacksPrecision",
      msg: "Computation lacks precision"
    },
    {
      code: 6007,
      name: "DepositLessThanMinimal",
      msg: "Deposit less than minimal required amount"
    },
    {
      code: 6008,
      name: "DepositCausesUnfairPrice",
      msg: "Deposit causes unfair price change"
    },
    {
      code: 6009,
      name: "WithdrawCausesUnfairPrice",
      msg: "Withdrawal causes unfair price change"
    },
    {
      code: 6010,
      name: "InsufficientActiveY"
    },
    {
      code: 6011,
      name: "InsufficientActiveX"
    },
    {
      code: 6012,
      name: "InvalidInputAmount",
      msg: "input amount must be greater than 0"
    },
    {
      code: 6013,
      name: "NumOverflowing"
    },
    {
      code: 6014,
      name: "OutputAmountLessThanExpected"
    },
    {
      code: 6015,
      name: "PythError",
      msg: "Pyth has an internal error"
    },
    {
      code: 6016,
      name: "PythOffline",
      msg: "Pyth price oracle is offline"
    },
    {
      code: 6017,
      name: "TryToSerializePriceAccount",
      msg: "Program should not try to serialize a price account"
    },
    {
      code: 6018,
      name: "InvalidPriceAccount"
    },
    {
      code: 6019,
      name: "NegativePrice"
    },
    {
      code: 6020,
      name: "InvalidPriceOwner",
      msg: "Invalid price account owner program"
    },
    {
      code: 6021,
      name: "InvalidRoutesForSwap"
    }
  ]
};

// idl/spl-token.json
var spl_token_default = {
  kind: "rootNode",
  program: {
    kind: "programNode",
    pdas: [],
    accounts: [
      {
        kind: "accountNode",
        data: {
          kind: "structTypeNode",
          fields: [
            {
              kind: "structFieldTypeNode",
              name: "mintAuthority",
              type: {
                kind: "optionTypeNode",
                item: { kind: "publicKeyTypeNode" },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u32",
                  endian: "le"
                },
                fixed: true
              },
              docs: [
                "Optional authority used to mint new tokens. The mint authority may only",
                "be provided during mint creation. If no mint authority is present",
                "then the mint has a fixed supply and no further tokens may be minted."
              ]
            },
            {
              kind: "structFieldTypeNode",
              name: "supply",
              type: {
                kind: "numberTypeNode",
                format: "u64",
                endian: "le"
              },
              docs: ["Total supply of tokens."]
            },
            {
              kind: "structFieldTypeNode",
              name: "decimals",
              type: {
                kind: "numberTypeNode",
                format: "u8",
                endian: "le"
              },
              docs: [
                "Number of base 10 digits to the right of the decimal place."
              ]
            },
            {
              kind: "structFieldTypeNode",
              name: "isInitialized",
              type: {
                kind: "booleanTypeNode",
                size: {
                  kind: "numberTypeNode",
                  format: "u8",
                  endian: "le"
                }
              },
              docs: ["Is `true` if this structure has been initialized."]
            },
            {
              kind: "structFieldTypeNode",
              name: "freezeAuthority",
              type: {
                kind: "optionTypeNode",
                item: { kind: "publicKeyTypeNode" },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u32",
                  endian: "le"
                },
                fixed: true
              },
              docs: ["Optional authority to freeze token accounts."]
            }
          ]
        },
        discriminators: [
          {
            kind: "sizeDiscriminatorNode",
            size: 82
          }
        ],
        name: "mint",
        docs: [],
        size: 82
      },
      {
        kind: "accountNode",
        data: {
          kind: "structTypeNode",
          fields: [
            {
              kind: "structFieldTypeNode",
              name: "mint",
              type: { kind: "publicKeyTypeNode" },
              docs: ["The mint associated with this account."]
            },
            {
              kind: "structFieldTypeNode",
              name: "owner",
              type: { kind: "publicKeyTypeNode" },
              docs: ["The owner of this account."]
            },
            {
              kind: "structFieldTypeNode",
              name: "amount",
              type: {
                kind: "numberTypeNode",
                format: "u64",
                endian: "le"
              },
              docs: ["The amount of tokens this account holds."]
            },
            {
              kind: "structFieldTypeNode",
              name: "delegate",
              type: {
                kind: "optionTypeNode",
                item: { kind: "publicKeyTypeNode" },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u32",
                  endian: "le"
                },
                fixed: true
              },
              docs: [
                "If `delegate` is `Some` then `delegated_amount` represents",
                "the amount authorized by the delegate."
              ]
            },
            {
              kind: "structFieldTypeNode",
              name: "state",
              type: { kind: "definedTypeLinkNode", name: "accountState" },
              docs: ["The account's state."]
            },
            {
              kind: "structFieldTypeNode",
              name: "isNative",
              type: {
                kind: "optionTypeNode",
                item: {
                  kind: "numberTypeNode",
                  format: "u64",
                  endian: "le"
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u32",
                  endian: "le"
                },
                fixed: true
              },
              docs: [
                "If is_native.is_some, this is a native token, and the value logs the",
                "rent-exempt reserve. An Account is required to be rent-exempt, so",
                "the value is used by the Processor to ensure that wrapped SOL",
                "accounts do not drop below this threshold."
              ]
            },
            {
              kind: "structFieldTypeNode",
              name: "delegatedAmount",
              type: {
                kind: "numberTypeNode",
                format: "u64",
                endian: "le"
              },
              docs: ["The amount delegated."]
            },
            {
              kind: "structFieldTypeNode",
              name: "closeAuthority",
              type: {
                kind: "optionTypeNode",
                item: { kind: "publicKeyTypeNode" },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u32",
                  endian: "le"
                },
                fixed: true
              },
              docs: ["Optional authority to close the account."]
            }
          ]
        },
        discriminators: [
          {
            kind: "sizeDiscriminatorNode",
            size: 165
          }
        ],
        name: "token",
        docs: [],
        size: 165
      },
      {
        kind: "accountNode",
        data: {
          kind: "structTypeNode",
          fields: [
            {
              kind: "structFieldTypeNode",
              name: "m",
              type: {
                kind: "numberTypeNode",
                format: "u8",
                endian: "le"
              },
              docs: ["Number of signers required."]
            },
            {
              kind: "structFieldTypeNode",
              name: "n",
              type: {
                kind: "numberTypeNode",
                format: "u8",
                endian: "le"
              },
              docs: ["Number of valid signers."]
            },
            {
              kind: "structFieldTypeNode",
              name: "isInitialized",
              type: {
                kind: "booleanTypeNode",
                size: {
                  kind: "numberTypeNode",
                  format: "u8",
                  endian: "le"
                }
              },
              docs: ["Is `true` if this structure has been initialized."]
            },
            {
              kind: "structFieldTypeNode",
              name: "signers",
              type: {
                kind: "arrayTypeNode",
                item: { kind: "publicKeyTypeNode" },
                count: { kind: "fixedCountNode", value: 11 }
              },
              docs: ["Signer public keys."]
            }
          ]
        },
        discriminators: [
          {
            kind: "sizeDiscriminatorNode",
            size: 355
          }
        ],
        name: "multisig",
        docs: [],
        size: 355
      }
    ],
    instructions: [
      {
        kind: "instructionNode",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["Token mint account."]
          },
          {
            kind: "instructionAccountNode",
            name: "rent",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["Rent sysvar."],
            defaultValue: {
              kind: "publicKeyValueNode",
              publicKey: "SysvarRent111111111111111111111111111111111"
            }
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [],
            defaultValue: { kind: "numberValueNode", number: 0 },
            defaultValueStrategy: "omitted"
          },
          {
            kind: "instructionArgumentNode",
            name: "decimals",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: ["Number of decimals in token account amounts."]
          },
          {
            kind: "instructionArgumentNode",
            name: "mintAuthority",
            type: { kind: "publicKeyTypeNode" },
            docs: ["Minting authority."]
          },
          {
            kind: "instructionArgumentNode",
            name: "freezeAuthority",
            type: {
              kind: "optionTypeNode",
              item: { kind: "publicKeyTypeNode" },
              prefix: {
                kind: "numberTypeNode",
                format: "u8",
                endian: "le"
              },
              fixed: false
            },
            defaultValue: {
              kind: "noneValueNode"
            },
            docs: ["Optional authority that can freeze token accounts."]
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ],
        name: "initializeMint",
        docs: [
          "Initializes a new mint and optionally deposits all the newly minted",
          "tokens in an account.",
          "",
          "The `InitializeMint` instruction requires no signers and MUST be",
          "included within the same Transaction as the system program's",
          "`CreateAccount` instruction that creates the account being initialized.",
          "Otherwise another party can acquire ownership of the uninitialized account."
        ],
        optionalAccountStrategy: "programId"
      },
      {
        kind: "instructionNode",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "account",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The account to initialize."]
          },
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The mint this account will be associated with."]
          },
          {
            kind: "instructionAccountNode",
            name: "owner",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The new account's owner/multisignature."]
          },
          {
            kind: "instructionAccountNode",
            name: "rent",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["Rent sysvar."],
            defaultValue: {
              kind: "publicKeyValueNode",
              publicKey: "SysvarRent111111111111111111111111111111111"
            }
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [],
            defaultValue: { kind: "numberValueNode", number: 1 },
            defaultValueStrategy: "omitted"
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ],
        name: "initializeAccount",
        docs: [
          "Initializes a new account to hold tokens. If this account is associated",
          "with the native mint then the token balance of the initialized account",
          "will be equal to the amount of SOL in the account. If this account is",
          "associated with another mint, that mint must be initialized before this",
          "command can succeed.",
          "",
          "The `InitializeAccount` instruction requires no signers and MUST be",
          "included within the same Transaction as the system program's",
          "`CreateAccount` instruction that creates the account being initialized.",
          "Otherwise another party can acquire ownership of the uninitialized account."
        ],
        optionalAccountStrategy: "programId"
      },
      {
        kind: "instructionNode",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "multisig",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The multisignature account to initialize."]
          },
          {
            kind: "instructionAccountNode",
            name: "rent",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["Rent sysvar."],
            defaultValue: {
              kind: "publicKeyValueNode",
              publicKey: "SysvarRent111111111111111111111111111111111"
            }
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [],
            defaultValue: { kind: "numberValueNode", number: 2 },
            defaultValueStrategy: "omitted"
          },
          {
            kind: "instructionArgumentNode",
            name: "m",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [
              "The number of signers (M) required to validate this multisignature account."
            ]
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            value: {
              kind: "argumentValueNode",
              name: "signers"
            }
          }
        ],
        name: "initializeMultisig",
        docs: [
          "Initializes a multisignature account with N provided signers.",
          "",
          "Multisignature accounts can used in place of any single owner/delegate",
          "accounts in any token instruction that require an owner/delegate to be",
          "present. The variant field represents the number of signers (M)",
          "required to validate this multisignature account.",
          "",
          "The `InitializeMultisig` instruction requires no signers and MUST be",
          "included within the same Transaction as the system program's",
          "`CreateAccount` instruction that creates the account being initialized.",
          "Otherwise another party can acquire ownership of the uninitialized account."
        ],
        optionalAccountStrategy: "programId"
      },
      {
        kind: "instructionNode",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "source",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The source account."]
          },
          {
            kind: "instructionAccountNode",
            name: "destination",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The destination account."]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The source account's owner/delegate or its multisignature account."
            ],
            defaultValue: { kind: "identityValueNode" }
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [],
            defaultValue: { kind: "numberValueNode", number: 3 },
            defaultValueStrategy: "omitted"
          },
          {
            kind: "instructionArgumentNode",
            name: "amount",
            type: {
              kind: "numberTypeNode",
              format: "u64",
              endian: "le"
            },
            docs: ["The amount of tokens to transfer."]
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            },
            isOptional: true,
            isSigner: true
          }
        ],
        name: "transfer",
        docs: [
          "Transfers tokens from one account to another either directly or via a delegate.",
          "If this account is associated with the native mint then equal amounts",
          "of SOL and Tokens will be transferred to the destination account."
        ],
        optionalAccountStrategy: "programId"
      },
      {
        kind: "instructionNode",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "source",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The source account."]
          },
          {
            kind: "instructionAccountNode",
            name: "delegate",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The delegate."]
          },
          {
            kind: "instructionAccountNode",
            name: "owner",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: ["The source account owner or its multisignature account."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [],
            defaultValue: { kind: "numberValueNode", number: 4 },
            defaultValueStrategy: "omitted"
          },
          {
            kind: "instructionArgumentNode",
            name: "amount",
            type: {
              kind: "numberTypeNode",
              format: "u64",
              endian: "le"
            },
            docs: ["The amount of tokens the delegate is approved for."]
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            },
            isOptional: true,
            isSigner: true
          }
        ],
        name: "approve",
        docs: [
          "Approves a delegate. A delegate is given the authority over tokens on",
          "behalf of the source account's owner."
        ],
        optionalAccountStrategy: "programId"
      },
      {
        kind: "instructionNode",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "source",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The source account."]
          },
          {
            kind: "instructionAccountNode",
            name: "owner",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: ["The source account owner or its multisignature."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [],
            defaultValue: { kind: "numberValueNode", number: 5 },
            defaultValueStrategy: "omitted"
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            },
            isOptional: true,
            isSigner: true
          }
        ],
        name: "revoke",
        docs: ["Revokes the delegate's authority."],
        optionalAccountStrategy: "programId"
      },
      {
        kind: "instructionNode",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "owned",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint or account to change the authority of."]
          },
          {
            kind: "instructionAccountNode",
            name: "owner",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The current authority or the multisignature account of the mint or account to update."
            ]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [],
            defaultValue: { kind: "numberValueNode", number: 6 },
            defaultValueStrategy: "omitted"
          },
          {
            kind: "instructionArgumentNode",
            name: "authorityType",
            type: { kind: "definedTypeLinkNode", name: "authorityType" },
            docs: ["The type of authority to update."]
          },
          {
            kind: "instructionArgumentNode",
            name: "newAuthority",
            type: {
              kind: "optionTypeNode",
              item: { kind: "publicKeyTypeNode" },
              prefix: {
                kind: "numberTypeNode",
                format: "u8",
                endian: "le"
              },
              fixed: false
            },
            docs: ["The new authority"]
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            },
            isOptional: true,
            isSigner: true
          }
        ],
        name: "setAuthority",
        docs: ["Sets a new authority of a mint or account."],
        optionalAccountStrategy: "programId"
      },
      {
        kind: "instructionNode",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint account."]
          },
          {
            kind: "instructionAccountNode",
            name: "token",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The account to mint tokens to."]
          },
          {
            kind: "instructionAccountNode",
            name: "mintAuthority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The mint's minting authority or its multisignature account."
            ]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [],
            defaultValue: { kind: "numberValueNode", number: 7 },
            defaultValueStrategy: "omitted"
          },
          {
            kind: "instructionArgumentNode",
            name: "amount",
            type: {
              kind: "numberTypeNode",
              format: "u64",
              endian: "le"
            },
            docs: ["The amount of new tokens to mint."]
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            },
            isOptional: true,
            isSigner: true
          }
        ],
        name: "mintTo",
        docs: [
          "Mints new tokens to an account. The native mint does not support minting."
        ],
        optionalAccountStrategy: "programId"
      },
      {
        kind: "instructionNode",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "account",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The account to burn from."]
          },
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The token mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The account's owner/delegate or its multisignature account."
            ],
            defaultValue: { kind: "identityValueNode" }
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: ["The amount of tokens to burn."],
            defaultValue: { kind: "numberValueNode", number: 8 },
            defaultValueStrategy: "omitted"
          },
          {
            kind: "instructionArgumentNode",
            name: "amount",
            type: {
              kind: "numberTypeNode",
              format: "u64",
              endian: "le"
            },
            docs: []
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            },
            isOptional: true,
            isSigner: true
          }
        ],
        name: "burn",
        docs: [
          "Burns tokens by removing them from an account. `Burn` does not support",
          "accounts associated with the native mint, use `CloseAccount` instead."
        ],
        optionalAccountStrategy: "programId"
      },
      {
        kind: "instructionNode",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "account",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The account to close."]
          },
          {
            kind: "instructionAccountNode",
            name: "destination",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The destination account."]
          },
          {
            kind: "instructionAccountNode",
            name: "owner",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: ["The account's owner or its multisignature account."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [],
            defaultValue: { kind: "numberValueNode", number: 9 },
            defaultValueStrategy: "omitted"
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            },
            isOptional: true,
            isSigner: true
          }
        ],
        name: "closeAccount",
        docs: [
          "Close an account by transferring all its SOL to the destination account.",
          "Non-native accounts may only be closed if its token amount is zero."
        ],
        optionalAccountStrategy: "programId"
      },
      {
        kind: "instructionNode",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "account",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The account to freeze."]
          },
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The token mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "owner",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: ["The mint freeze authority or its multisignature account."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [],
            defaultValue: { kind: "numberValueNode", number: 10 },
            defaultValueStrategy: "omitted"
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            },
            isOptional: true,
            isSigner: true
          }
        ],
        name: "freezeAccount",
        docs: [
          "Freeze an Initialized account using the Mint's freeze_authority (if set)."
        ],
        optionalAccountStrategy: "programId"
      },
      {
        kind: "instructionNode",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "account",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The account to thaw."]
          },
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The token mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "owner",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: ["The mint freeze authority or its multisignature account."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [],
            defaultValue: { kind: "numberValueNode", number: 11 },
            defaultValueStrategy: "omitted"
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            },
            isOptional: true,
            isSigner: true
          }
        ],
        name: "thawAccount",
        docs: [
          "Thaw a Frozen account using the Mint's freeze_authority (if set)."
        ],
        optionalAccountStrategy: "programId"
      },
      {
        kind: "instructionNode",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "source",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The source account."]
          },
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The token mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "destination",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The destination account."]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The source account's owner/delegate or its multisignature account."
            ],
            defaultValue: { kind: "identityValueNode" }
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [],
            defaultValue: { kind: "numberValueNode", number: 12 },
            defaultValueStrategy: "omitted"
          },
          {
            kind: "instructionArgumentNode",
            name: "amount",
            type: {
              kind: "numberTypeNode",
              format: "u64",
              endian: "le"
            },
            docs: ["The amount of tokens to transfer."]
          },
          {
            kind: "instructionArgumentNode",
            name: "decimals",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [
              "Expected number of base 10 digits to the right of the decimal place."
            ]
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            },
            isOptional: true,
            isSigner: true
          }
        ],
        name: "transferChecked",
        docs: [
          "Transfers tokens from one account to another either directly or via a",
          "delegate. If this account is associated with the native mint then equal",
          "amounts of SOL and Tokens will be transferred to the destination account.",
          "",
          "This instruction differs from Transfer in that the token mint and",
          "decimals value is checked by the caller. This may be useful when",
          "creating transactions offline or within a hardware wallet."
        ],
        optionalAccountStrategy: "programId"
      },
      {
        kind: "instructionNode",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "source",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The source account."]
          },
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The token mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "delegate",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The delegate."]
          },
          {
            kind: "instructionAccountNode",
            name: "owner",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: ["The source account owner or its multisignature account."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [],
            defaultValue: { kind: "numberValueNode", number: 13 },
            defaultValueStrategy: "omitted"
          },
          {
            kind: "instructionArgumentNode",
            name: "amount",
            type: {
              kind: "numberTypeNode",
              format: "u64",
              endian: "le"
            },
            docs: ["The amount of tokens the delegate is approved for."]
          },
          {
            kind: "instructionArgumentNode",
            name: "decimals",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [
              "Expected number of base 10 digits to the right of the decimal place."
            ]
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            },
            isOptional: true,
            isSigner: true
          }
        ],
        name: "approveChecked",
        docs: [
          "Approves a delegate. A delegate is given the authority over tokens on",
          "behalf of the source account's owner.",
          "",
          "This instruction differs from Approve in that the token mint and",
          "decimals value is checked by the caller. This may be useful when",
          "creating transactions offline or within a hardware wallet."
        ],
        optionalAccountStrategy: "programId"
      },
      {
        kind: "instructionNode",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "token",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The account to mint tokens to."]
          },
          {
            kind: "instructionAccountNode",
            name: "mintAuthority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The mint's minting authority or its multisignature account."
            ]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [],
            defaultValue: { kind: "numberValueNode", number: 14 },
            defaultValueStrategy: "omitted"
          },
          {
            kind: "instructionArgumentNode",
            name: "amount",
            type: {
              kind: "numberTypeNode",
              format: "u64",
              endian: "le"
            },
            docs: ["The amount of new tokens to mint."]
          },
          {
            kind: "instructionArgumentNode",
            name: "decimals",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [
              "Expected number of base 10 digits to the right of the decimal place."
            ]
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            },
            isOptional: true,
            isSigner: true
          }
        ],
        name: "mintToChecked",
        docs: [
          "Mints new tokens to an account. The native mint does not support minting.",
          "",
          "This instruction differs from MintTo in that the decimals value is",
          "checked by the caller. This may be useful when creating transactions",
          "offline or within a hardware wallet."
        ],
        optionalAccountStrategy: "programId"
      },
      {
        kind: "instructionNode",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "account",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The account to burn from."]
          },
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The token mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The account's owner/delegate or its multisignature account."
            ],
            defaultValue: { kind: "identityValueNode" }
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [],
            defaultValue: { kind: "numberValueNode", number: 15 },
            defaultValueStrategy: "omitted"
          },
          {
            kind: "instructionArgumentNode",
            name: "amount",
            type: {
              kind: "numberTypeNode",
              format: "u64",
              endian: "le"
            },
            docs: ["The amount of tokens to burn."]
          },
          {
            kind: "instructionArgumentNode",
            name: "decimals",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [
              "Expected number of base 10 digits to the right of the decimal place."
            ]
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            },
            isOptional: true,
            isSigner: true
          }
        ],
        name: "burnChecked",
        docs: [
          "Burns tokens by removing them from an account. `BurnChecked` does not",
          "support accounts associated with the native mint, use `CloseAccount` instead.",
          "",
          "This instruction differs from Burn in that the decimals value is checked",
          "by the caller. This may be useful when creating transactions offline or",
          "within a hardware wallet."
        ],
        optionalAccountStrategy: "programId"
      },
      {
        kind: "instructionNode",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "account",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The account to initialize."]
          },
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The mint this account will be associated with."]
          },
          {
            kind: "instructionAccountNode",
            name: "rent",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["Rent sysvar."],
            defaultValue: {
              kind: "publicKeyValueNode",
              publicKey: "SysvarRent111111111111111111111111111111111"
            }
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [],
            defaultValue: { kind: "numberValueNode", number: 16 },
            defaultValueStrategy: "omitted"
          },
          {
            kind: "instructionArgumentNode",
            name: "owner",
            type: { kind: "publicKeyTypeNode" },
            docs: ["The new account's owner/multisignature."]
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ],
        name: "initializeAccount2",
        docs: [
          "Like InitializeAccount, but the owner pubkey is passed via instruction",
          "data rather than the accounts list. This variant may be preferable",
          "when using Cross Program Invocation from an instruction that does",
          "not need the owner's `AccountInfo` otherwise."
        ],
        optionalAccountStrategy: "programId"
      },
      {
        kind: "instructionNode",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "account",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: [
              "The native token account to sync with its underlying lamports."
            ]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [],
            defaultValue: { kind: "numberValueNode", number: 17 },
            defaultValueStrategy: "omitted"
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ],
        name: "syncNative",
        docs: [
          "Given a wrapped / native token account (a token account containing SOL)",
          "updates its amount field based on the account's underlying `lamports`.",
          "This is useful if a non-wrapped SOL account uses",
          "`system_instruction::transfer` to move lamports to a wrapped token",
          "account, and needs to have its token `amount` field updated."
        ],
        optionalAccountStrategy: "programId"
      },
      {
        kind: "instructionNode",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "account",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The account to initialize."]
          },
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The mint this account will be associated with."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [],
            defaultValue: { kind: "numberValueNode", number: 18 },
            defaultValueStrategy: "omitted"
          },
          {
            kind: "instructionArgumentNode",
            name: "owner",
            type: { kind: "publicKeyTypeNode" },
            docs: ["The new account's owner/multisignature."]
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ],
        name: "initializeAccount3",
        docs: [
          "Like InitializeAccount2, but does not require the Rent sysvar to be provided."
        ],
        optionalAccountStrategy: "programId"
      },
      {
        kind: "instructionNode",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "multisig",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The multisignature account to initialize."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [],
            defaultValue: { kind: "numberValueNode", number: 19 },
            defaultValueStrategy: "omitted"
          },
          {
            kind: "instructionArgumentNode",
            name: "m",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [
              "The number of signers (M) required to validate this multisignature account."
            ]
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            value: {
              kind: "argumentValueNode",
              name: "signers"
            }
          }
        ],
        name: "initializeMultisig2",
        docs: [
          "Like InitializeMultisig, but does not require the Rent sysvar to be provided."
        ],
        optionalAccountStrategy: "programId"
      },
      {
        kind: "instructionNode",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint to initialize."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [],
            defaultValue: { kind: "numberValueNode", number: 20 },
            defaultValueStrategy: "omitted"
          },
          {
            kind: "instructionArgumentNode",
            name: "decimals",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [
              "Number of base 10 digits to the right of the decimal place."
            ]
          },
          {
            kind: "instructionArgumentNode",
            name: "mintAuthority",
            type: { kind: "publicKeyTypeNode" },
            docs: ["The authority/multisignature to mint tokens."]
          },
          {
            kind: "instructionArgumentNode",
            name: "freezeAuthority",
            type: {
              kind: "optionTypeNode",
              item: { kind: "publicKeyTypeNode" },
              prefix: {
                kind: "numberTypeNode",
                format: "u8",
                endian: "le"
              },
              fixed: false
            },
            defaultValue: {
              kind: "noneValueNode"
            },
            docs: [
              "The optional freeze authority/multisignature of the mint."
            ]
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ],
        name: "initializeMint2",
        docs: [
          "Like [`InitializeMint`], but does not require the Rent sysvar to be provided."
        ],
        optionalAccountStrategy: "programId"
      },
      {
        kind: "instructionNode",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The mint to calculate for."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [],
            defaultValue: { kind: "numberValueNode", number: 21 },
            defaultValueStrategy: "omitted"
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ],
        name: "getAccountDataSize",
        docs: [
          "Gets the required size of an account for the given mint as a",
          "little-endian `u64`.",
          "",
          "Return data can be fetched using `sol_get_return_data` and deserializing",
          "the return data as a little-endian `u64`."
        ],
        optionalAccountStrategy: "programId"
      },
      {
        kind: "instructionNode",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "account",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The account to initialize."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [],
            defaultValue: { kind: "numberValueNode", number: 22 },
            defaultValueStrategy: "omitted"
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ],
        name: "initializeImmutableOwner",
        docs: [
          "Initialize the Immutable Owner extension for the given token account",
          "",
          "Fails if the account has already been initialized, so must be called",
          "before `InitializeAccount`.",
          "",
          "No-ops in this version of the program, but is included for compatibility",
          "with the Associated Token Account program."
        ],
        optionalAccountStrategy: "programId"
      },
      {
        kind: "instructionNode",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The mint to calculate for."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [],
            defaultValue: { kind: "numberValueNode", number: 23 },
            defaultValueStrategy: "omitted"
          },
          {
            kind: "instructionArgumentNode",
            name: "amount",
            type: {
              kind: "numberTypeNode",
              format: "u64",
              endian: "le"
            },
            docs: ["The amount of tokens to reformat."]
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ],
        name: "amountToUiAmount",
        docs: [
          "Convert an Amount of tokens to a UiAmount `string`, using the given",
          "mint. In this version of the program, the mint can only specify the",
          "number of decimals.",
          "",
          "Fails on an invalid mint.",
          "",
          "Return data can be fetched using `sol_get_return_data` and deserialized",
          "with `String::from_utf8`."
        ],
        optionalAccountStrategy: "programId"
      },
      {
        kind: "instructionNode",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The mint to calculate for."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            docs: [],
            defaultValue: { kind: "numberValueNode", number: 24 },
            defaultValueStrategy: "omitted"
          },
          {
            kind: "instructionArgumentNode",
            name: "uiAmount",
            type: {
              kind: "stringTypeNode",
              encoding: "utf8"
            },
            docs: ["The ui_amount of tokens to reformat."]
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ],
        name: "uiAmountToAmount",
        docs: [
          "Convert a UiAmount of tokens to a little-endian `u64` raw Amount, using",
          "the given mint. In this version of the program, the mint can only",
          "specify the number of decimals.",
          "",
          "Return data can be fetched using `sol_get_return_data` and deserializing",
          "the return data as a little-endian `u64`."
        ],
        optionalAccountStrategy: "programId"
      }
    ],
    definedTypes: [
      {
        kind: "definedTypeNode",
        name: "accountState",
        type: {
          kind: "enumTypeNode",
          variants: [
            { kind: "enumEmptyVariantTypeNode", name: "uninitialized" },
            { kind: "enumEmptyVariantTypeNode", name: "initialized" },
            { kind: "enumEmptyVariantTypeNode", name: "frozen" }
          ],
          size: { kind: "numberTypeNode", format: "u8", endian: "le" }
        },
        docs: []
      },
      {
        kind: "definedTypeNode",
        name: "authorityType",
        type: {
          kind: "enumTypeNode",
          variants: [
            { kind: "enumEmptyVariantTypeNode", name: "mintTokens" },
            { kind: "enumEmptyVariantTypeNode", name: "freezeAccount" },
            { kind: "enumEmptyVariantTypeNode", name: "accountOwner" },
            { kind: "enumEmptyVariantTypeNode", name: "closeAccount" }
          ],
          size: { kind: "numberTypeNode", format: "u8", endian: "le" }
        },
        docs: []
      }
    ],
    errors: [
      {
        kind: "errorNode",
        name: "notRentExempt",
        code: 0,
        message: "Lamport balance below rent-exempt threshold",
        docs: ["NotRentExempt: Lamport balance below rent-exempt threshold"]
      },
      {
        kind: "errorNode",
        name: "insufficientFunds",
        code: 1,
        message: "Insufficient funds",
        docs: ["InsufficientFunds: Insufficient funds"]
      },
      {
        kind: "errorNode",
        name: "invalidMint",
        code: 2,
        message: "Invalid Mint",
        docs: ["InvalidMint: Invalid Mint"]
      },
      {
        kind: "errorNode",
        name: "mintMismatch",
        code: 3,
        message: "Account not associated with this Mint",
        docs: ["MintMismatch: Account not associated with this Mint"]
      },
      {
        kind: "errorNode",
        name: "ownerMismatch",
        code: 4,
        message: "Owner does not match",
        docs: ["OwnerMismatch: Owner does not match"]
      },
      {
        kind: "errorNode",
        name: "fixedSupply",
        code: 5,
        message: "Fixed supply",
        docs: ["FixedSupply: Fixed supply"]
      },
      {
        kind: "errorNode",
        name: "alreadyInUse",
        code: 6,
        message: "Already in use",
        docs: ["AlreadyInUse: Already in use"]
      },
      {
        kind: "errorNode",
        name: "invalidNumberOfProvidedSigners",
        code: 7,
        message: "Invalid number of provided signers",
        docs: [
          "InvalidNumberOfProvidedSigners: Invalid number of provided signers"
        ]
      },
      {
        kind: "errorNode",
        name: "invalidNumberOfRequiredSigners",
        code: 8,
        message: "Invalid number of required signers",
        docs: [
          "InvalidNumberOfRequiredSigners: Invalid number of required signers"
        ]
      },
      {
        kind: "errorNode",
        name: "uninitializedState",
        code: 9,
        message: "State is unititialized",
        docs: ["UninitializedState: State is unititialized"]
      },
      {
        kind: "errorNode",
        name: "nativeNotSupported",
        code: 10,
        message: "Instruction does not support native tokens",
        docs: [
          "NativeNotSupported: Instruction does not support native tokens"
        ]
      },
      {
        kind: "errorNode",
        name: "nonNativeHasBalance",
        code: 11,
        message: "Non-native account can only be closed if its balance is zero",
        docs: [
          "NonNativeHasBalance: Non-native account can only be closed if its balance is zero"
        ]
      },
      {
        kind: "errorNode",
        name: "invalidInstruction",
        code: 12,
        message: "Invalid instruction",
        docs: ["InvalidInstruction: Invalid instruction"]
      },
      {
        kind: "errorNode",
        name: "invalidState",
        code: 13,
        message: "State is invalid for requested operation",
        docs: ["InvalidState: State is invalid for requested operation"]
      },
      {
        kind: "errorNode",
        name: "overflow",
        code: 14,
        message: "Operation overflowed",
        docs: ["Overflow: Operation overflowed"]
      },
      {
        kind: "errorNode",
        name: "authorityTypeNotSupported",
        code: 15,
        message: "Account does not support specified authority type",
        docs: [
          "AuthorityTypeNotSupported: Account does not support specified authority type"
        ]
      },
      {
        kind: "errorNode",
        name: "mintCannotFreeze",
        code: 16,
        message: "This token mint cannot freeze accounts",
        docs: ["MintCannotFreeze: This token mint cannot freeze accounts"]
      },
      {
        kind: "errorNode",
        name: "accountFrozen",
        code: 17,
        message: "Account is frozen",
        docs: ["AccountFrozen: Account is frozen"]
      },
      {
        kind: "errorNode",
        name: "mintDecimalsMismatch",
        code: 18,
        message: "The provided decimals value different from the Mint decimals",
        docs: [
          "MintDecimalsMismatch: The provided decimals value different from the Mint decimals"
        ]
      },
      {
        kind: "errorNode",
        name: "nonNativeNotSupported",
        code: 19,
        message: "Instruction does not support non-native tokens",
        docs: [
          "NonNativeNotSupported: Instruction does not support non-native tokens"
        ]
      }
    ],
    name: "token",
    prefix: "",
    publicKey: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
    version: "3.3.0",
    origin: "shank"
  },
  additionalPrograms: [
    {
      kind: "programNode",
      pdas: [
        {
          kind: "pdaNode",
          name: "associatedToken",
          seeds: [
            {
              kind: "variablePdaSeedNode",
              name: "owner",
              docs: ["The wallet address of the associated token account."],
              type: {
                kind: "publicKeyTypeNode"
              }
            },
            {
              kind: "variablePdaSeedNode",
              name: "tokenProgram",
              docs: ["The address of the token program to use."],
              type: {
                kind: "publicKeyTypeNode"
              }
            },
            {
              kind: "variablePdaSeedNode",
              name: "mint",
              docs: ["The mint address of the associated token account."],
              type: {
                kind: "publicKeyTypeNode"
              }
            }
          ]
        }
      ],
      accounts: [],
      instructions: [
        {
          kind: "instructionNode",
          accounts: [
            {
              kind: "instructionAccountNode",
              name: "payer",
              isWritable: true,
              isSigner: true,
              isOptional: false,
              docs: ["Funding account (must be a system account)."],
              defaultValue: { kind: "payerValueNode" }
            },
            {
              kind: "instructionAccountNode",
              name: "ata",
              isWritable: true,
              isSigner: false,
              isOptional: false,
              docs: ["Associated token account address to be created."],
              defaultValue: {
                kind: "pdaValueNode",
                pda: {
                  kind: "pdaLinkNode",
                  name: "associatedToken"
                },
                seeds: [
                  {
                    kind: "pdaSeedValueNode",
                    name: "owner",
                    value: {
                      kind: "accountValueNode",
                      name: "owner"
                    }
                  },
                  {
                    kind: "pdaSeedValueNode",
                    name: "tokenProgram",
                    value: {
                      kind: "accountValueNode",
                      name: "tokenProgram"
                    }
                  },
                  {
                    kind: "pdaSeedValueNode",
                    name: "mint",
                    value: {
                      kind: "accountValueNode",
                      name: "mint"
                    }
                  }
                ]
              }
            },
            {
              kind: "instructionAccountNode",
              name: "owner",
              isWritable: false,
              isSigner: false,
              isOptional: false,
              docs: ["Wallet address for the new associated token account."]
            },
            {
              kind: "instructionAccountNode",
              name: "mint",
              isWritable: false,
              isSigner: false,
              isOptional: false,
              docs: ["The token mint for the new associated token account."]
            },
            {
              kind: "instructionAccountNode",
              name: "systemProgram",
              isWritable: false,
              isSigner: false,
              isOptional: false,
              docs: ["System program."],
              defaultValue: {
                kind: "publicKeyValueNode",
                publicKey: "11111111111111111111111111111111"
              }
            },
            {
              kind: "instructionAccountNode",
              name: "tokenProgram",
              isWritable: false,
              isSigner: false,
              isOptional: false,
              docs: ["SPL Token program."],
              defaultValue: {
                kind: "publicKeyValueNode",
                publicKey: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
              }
            }
          ],
          arguments: [
            {
              kind: "instructionArgumentNode",
              name: "discriminator",
              type: {
                kind: "numberTypeNode",
                format: "u8",
                endian: "le"
              },
              docs: [],
              defaultValue: { kind: "numberValueNode", number: 0 },
              defaultValueStrategy: "omitted"
            }
          ],
          discriminators: [
            {
              kind: "fieldDiscriminatorNode",
              name: "discriminator",
              offset: 0
            }
          ],
          name: "createAssociatedToken",
          docs: [
            "Creates an associated token account for the given wallet address and",
            "token mint Returns an error if the account exists."
          ],
          optionalAccountStrategy: "programId"
        },
        {
          kind: "instructionNode",
          accounts: [
            {
              kind: "instructionAccountNode",
              name: "payer",
              isWritable: true,
              isSigner: true,
              isOptional: false,
              docs: ["Funding account (must be a system account)."],
              defaultValue: { kind: "payerValueNode" }
            },
            {
              kind: "instructionAccountNode",
              name: "ata",
              isWritable: true,
              isSigner: false,
              isOptional: false,
              docs: ["Associated token account address to be created."],
              defaultValue: {
                kind: "pdaValueNode",
                pda: {
                  kind: "pdaLinkNode",
                  name: "associatedToken"
                },
                seeds: [
                  {
                    kind: "pdaSeedValueNode",
                    name: "owner",
                    value: {
                      kind: "accountValueNode",
                      name: "owner"
                    }
                  },
                  {
                    kind: "pdaSeedValueNode",
                    name: "tokenProgram",
                    value: {
                      kind: "accountValueNode",
                      name: "tokenProgram"
                    }
                  },
                  {
                    kind: "pdaSeedValueNode",
                    name: "mint",
                    value: {
                      kind: "accountValueNode",
                      name: "mint"
                    }
                  }
                ]
              }
            },
            {
              kind: "instructionAccountNode",
              name: "owner",
              isWritable: false,
              isSigner: false,
              isOptional: false,
              docs: ["Wallet address for the new associated token account."]
            },
            {
              kind: "instructionAccountNode",
              name: "mint",
              isWritable: false,
              isSigner: false,
              isOptional: false,
              docs: ["The token mint for the new associated token account."]
            },
            {
              kind: "instructionAccountNode",
              name: "systemProgram",
              isWritable: false,
              isSigner: false,
              isOptional: false,
              docs: ["System program."],
              defaultValue: {
                kind: "publicKeyValueNode",
                publicKey: "11111111111111111111111111111111"
              }
            },
            {
              kind: "instructionAccountNode",
              name: "tokenProgram",
              isWritable: false,
              isSigner: false,
              isOptional: false,
              docs: ["SPL Token program."],
              defaultValue: {
                kind: "publicKeyValueNode",
                publicKey: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
              }
            }
          ],
          arguments: [
            {
              kind: "instructionArgumentNode",
              name: "discriminator",
              type: {
                kind: "numberTypeNode",
                format: "u8",
                endian: "le"
              },
              docs: [],
              defaultValue: { kind: "numberValueNode", number: 1 },
              defaultValueStrategy: "omitted"
            }
          ],
          discriminators: [
            {
              kind: "fieldDiscriminatorNode",
              name: "discriminator",
              offset: 0
            }
          ],
          name: "createAssociatedTokenIdempotent",
          docs: [
            "Creates an associated token account for the given wallet address and",
            "token mint, if it doesn't already exist. Returns an error if the",
            "account exists, but with a different owner."
          ],
          optionalAccountStrategy: "programId"
        },
        {
          kind: "instructionNode",
          accounts: [
            {
              kind: "instructionAccountNode",
              name: "nestedAssociatedAccountAddress",
              isWritable: true,
              isSigner: false,
              isOptional: false,
              docs: [
                "Nested associated token account, must be owned by `ownerAssociatedAccountAddress`."
              ],
              defaultValue: {
                kind: "pdaValueNode",
                pda: {
                  kind: "pdaLinkNode",
                  name: "associatedToken"
                },
                seeds: [
                  {
                    kind: "pdaSeedValueNode",
                    name: "owner",
                    value: {
                      kind: "accountValueNode",
                      name: "ownerAssociatedAccountAddress"
                    }
                  },
                  {
                    kind: "pdaSeedValueNode",
                    name: "tokenProgram",
                    value: {
                      kind: "accountValueNode",
                      name: "tokenProgram"
                    }
                  },
                  {
                    kind: "pdaSeedValueNode",
                    name: "mint",
                    value: {
                      kind: "accountValueNode",
                      name: "nestedTokenMintAddress"
                    }
                  }
                ]
              }
            },
            {
              kind: "instructionAccountNode",
              name: "nestedTokenMintAddress",
              isWritable: false,
              isSigner: false,
              isOptional: false,
              docs: ["Token mint for the nested associated token account."]
            },
            {
              kind: "instructionAccountNode",
              name: "destinationAssociatedAccountAddress",
              isWritable: true,
              isSigner: false,
              isOptional: false,
              docs: ["Wallet's associated token account."],
              defaultValue: {
                kind: "pdaValueNode",
                pda: {
                  kind: "pdaLinkNode",
                  name: "associatedToken"
                },
                seeds: [
                  {
                    kind: "pdaSeedValueNode",
                    name: "owner",
                    value: {
                      kind: "accountValueNode",
                      name: "walletAddress"
                    }
                  },
                  {
                    kind: "pdaSeedValueNode",
                    name: "tokenProgram",
                    value: {
                      kind: "accountValueNode",
                      name: "tokenProgram"
                    }
                  },
                  {
                    kind: "pdaSeedValueNode",
                    name: "mint",
                    value: {
                      kind: "accountValueNode",
                      name: "nestedTokenMintAddress"
                    }
                  }
                ]
              }
            },
            {
              kind: "instructionAccountNode",
              name: "ownerAssociatedAccountAddress",
              isWritable: false,
              isSigner: false,
              isOptional: false,
              docs: [
                "Owner associated token account address, must be owned by `walletAddress`."
              ],
              defaultValue: {
                kind: "pdaValueNode",
                pda: {
                  kind: "pdaLinkNode",
                  name: "associatedToken"
                },
                seeds: [
                  {
                    kind: "pdaSeedValueNode",
                    name: "owner",
                    value: {
                      kind: "accountValueNode",
                      name: "walletAddress"
                    }
                  },
                  {
                    kind: "pdaSeedValueNode",
                    name: "tokenProgram",
                    value: {
                      kind: "accountValueNode",
                      name: "tokenProgram"
                    }
                  },
                  {
                    kind: "pdaSeedValueNode",
                    name: "mint",
                    value: {
                      kind: "accountValueNode",
                      name: "ownerTokenMintAddress"
                    }
                  }
                ]
              }
            },
            {
              kind: "instructionAccountNode",
              name: "ownerTokenMintAddress",
              isWritable: false,
              isSigner: false,
              isOptional: false,
              docs: ["Token mint for the owner associated token account."]
            },
            {
              kind: "instructionAccountNode",
              name: "walletAddress",
              isWritable: true,
              isSigner: true,
              isOptional: false,
              docs: ["Wallet address for the owner associated token account."]
            },
            {
              kind: "instructionAccountNode",
              name: "tokenProgram",
              isWritable: false,
              isSigner: false,
              isOptional: false,
              docs: ["SPL Token program."],
              defaultValue: {
                kind: "publicKeyValueNode",
                publicKey: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
              }
            }
          ],
          arguments: [
            {
              kind: "instructionArgumentNode",
              name: "discriminator",
              type: {
                kind: "numberTypeNode",
                format: "u8",
                endian: "le"
              },
              docs: [],
              defaultValue: { kind: "numberValueNode", number: 2 },
              defaultValueStrategy: "omitted"
            }
          ],
          discriminators: [
            {
              kind: "fieldDiscriminatorNode",
              name: "discriminator",
              offset: 0
            }
          ],
          name: "recoverNestedAssociatedToken",
          docs: [
            "Transfers from and closes a nested associated token account: an",
            "associated token account owned by an associated token account.",
            "",
            "The tokens are moved from the nested associated token account to the",
            "wallet's associated token account, and the nested account lamports are",
            "moved to the wallet.",
            "",
            "Note: Nested token accounts are an anti-pattern, and almost always",
            "created unintentionally, so this instruction should only be used to",
            "recover from errors."
          ],
          optionalAccountStrategy: "programId"
        }
      ],
      definedTypes: [],
      errors: [
        {
          kind: "errorNode",
          name: "invalidOwner",
          code: 0,
          message: "Associated token account owner does not match address derivation",
          docs: [
            "InvalidOwner: Associated token account owner does not match address derivation"
          ]
        }
      ],
      name: "associatedToken",
      prefix: "",
      publicKey: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL",
      version: "1.1.1",
      origin: "shank"
    }
  ],
  standard: "codama",
  version: "1.0.0"
};

// idl/token-2022.json
var token_2022_default = {
  kind: "rootNode",
  standard: "codama",
  version: "1.0.0",
  program: {
    kind: "programNode",
    name: "token-2022",
    publicKey: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb",
    version: "3.0.2",
    origin: "shank",
    docs: [],
    accounts: [
      {
        kind: "accountNode",
        name: "mint",
        docs: [],
        data: {
          kind: "structTypeNode",
          fields: [
            {
              kind: "structFieldTypeNode",
              name: "mintAuthority",
              docs: [
                "Optional authority used to mint new tokens. The mint authority may only",
                "be provided during mint creation. If no mint authority is present",
                "then the mint has a fixed supply and no further tokens may be minted."
              ],
              type: {
                kind: "optionTypeNode",
                fixed: true,
                item: {
                  kind: "publicKeyTypeNode"
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u32",
                  endian: "le"
                }
              }
            },
            {
              kind: "structFieldTypeNode",
              name: "supply",
              docs: ["Total supply of tokens."],
              type: {
                kind: "numberTypeNode",
                format: "u64",
                endian: "le"
              }
            },
            {
              kind: "structFieldTypeNode",
              name: "decimals",
              docs: [
                "Number of base 10 digits to the right of the decimal place."
              ],
              type: {
                kind: "numberTypeNode",
                format: "u8",
                endian: "le"
              }
            },
            {
              kind: "structFieldTypeNode",
              name: "isInitialized",
              docs: ["Is `true` if this structure has been initialized."],
              type: {
                kind: "booleanTypeNode",
                size: {
                  kind: "numberTypeNode",
                  format: "u8",
                  endian: "le"
                }
              }
            },
            {
              kind: "structFieldTypeNode",
              name: "freezeAuthority",
              docs: ["Optional authority to freeze token accounts."],
              type: {
                kind: "optionTypeNode",
                fixed: true,
                item: {
                  kind: "publicKeyTypeNode"
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u32",
                  endian: "le"
                }
              }
            },
            {
              kind: "structFieldTypeNode",
              name: "extensions",
              docs: ["The extensions activated on the mint account."],
              type: {
                kind: "remainderOptionTypeNode",
                item: {
                  kind: "hiddenPrefixTypeNode",
                  type: {
                    kind: "arrayTypeNode",
                    item: {
                      kind: "definedTypeLinkNode",
                      name: "extension"
                    },
                    count: {
                      kind: "remainderCountNode"
                    }
                  },
                  prefix: [
                    {
                      kind: "constantValueNode",
                      type: {
                        kind: "preOffsetTypeNode",
                        offset: 83,
                        strategy: "padded",
                        type: {
                          kind: "numberTypeNode",
                          format: "u8",
                          endian: "le"
                        }
                      },
                      value: {
                        kind: "numberValueNode",
                        number: 1
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        discriminators: [
          {
            kind: "sizeDiscriminatorNode",
            size: 82
          }
        ]
      },
      {
        kind: "accountNode",
        name: "token",
        docs: [],
        data: {
          kind: "structTypeNode",
          fields: [
            {
              kind: "structFieldTypeNode",
              name: "mint",
              docs: ["The mint associated with this account."],
              type: {
                kind: "publicKeyTypeNode"
              }
            },
            {
              kind: "structFieldTypeNode",
              name: "owner",
              docs: ["The owner of this account."],
              type: {
                kind: "publicKeyTypeNode"
              }
            },
            {
              kind: "structFieldTypeNode",
              name: "amount",
              docs: ["The amount of tokens this account holds."],
              type: {
                kind: "numberTypeNode",
                format: "u64",
                endian: "le"
              }
            },
            {
              kind: "structFieldTypeNode",
              name: "delegate",
              docs: [
                "If `delegate` is `Some` then `delegated_amount` represents",
                "the amount authorized by the delegate."
              ],
              type: {
                kind: "optionTypeNode",
                fixed: true,
                item: {
                  kind: "publicKeyTypeNode"
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u32",
                  endian: "le"
                }
              }
            },
            {
              kind: "structFieldTypeNode",
              name: "state",
              docs: ["The account's state."],
              type: {
                kind: "definedTypeLinkNode",
                name: "accountState"
              }
            },
            {
              kind: "structFieldTypeNode",
              name: "isNative",
              docs: [
                "If is_native.is_some, this is a native token, and the value logs the",
                "rent-exempt reserve. An Account is required to be rent-exempt, so",
                "the value is used by the Processor to ensure that wrapped SOL",
                "accounts do not drop below this threshold."
              ],
              type: {
                kind: "optionTypeNode",
                fixed: true,
                item: {
                  kind: "numberTypeNode",
                  format: "u64",
                  endian: "le"
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u32",
                  endian: "le"
                }
              }
            },
            {
              kind: "structFieldTypeNode",
              name: "delegatedAmount",
              docs: ["The amount delegated."],
              type: {
                kind: "numberTypeNode",
                format: "u64",
                endian: "le"
              }
            },
            {
              kind: "structFieldTypeNode",
              name: "closeAuthority",
              docs: ["Optional authority to close the account."],
              type: {
                kind: "optionTypeNode",
                fixed: true,
                item: {
                  kind: "publicKeyTypeNode"
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u32",
                  endian: "le"
                }
              }
            },
            {
              kind: "structFieldTypeNode",
              name: "extensions",
              docs: ["The extensions activated on the token account."],
              type: {
                kind: "remainderOptionTypeNode",
                item: {
                  kind: "hiddenPrefixTypeNode",
                  type: {
                    kind: "arrayTypeNode",
                    item: {
                      kind: "definedTypeLinkNode",
                      name: "extension"
                    },
                    count: {
                      kind: "remainderCountNode"
                    }
                  },
                  prefix: [
                    {
                      kind: "constantValueNode",
                      type: {
                        kind: "numberTypeNode",
                        format: "u8",
                        endian: "le"
                      },
                      value: {
                        kind: "numberValueNode",
                        number: 2
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        discriminators: [
          {
            kind: "sizeDiscriminatorNode",
            size: 165
          }
        ]
      },
      {
        kind: "accountNode",
        name: "multisig",
        size: 355,
        docs: [],
        data: {
          kind: "structTypeNode",
          fields: [
            {
              kind: "structFieldTypeNode",
              name: "m",
              docs: ["Number of signers required."],
              type: {
                kind: "numberTypeNode",
                format: "u8",
                endian: "le"
              }
            },
            {
              kind: "structFieldTypeNode",
              name: "n",
              docs: ["Number of valid signers."],
              type: {
                kind: "numberTypeNode",
                format: "u8",
                endian: "le"
              }
            },
            {
              kind: "structFieldTypeNode",
              name: "isInitialized",
              docs: ["Is `true` if this structure has been initialized."],
              type: {
                kind: "booleanTypeNode",
                size: {
                  kind: "numberTypeNode",
                  format: "u8",
                  endian: "le"
                }
              }
            },
            {
              kind: "structFieldTypeNode",
              name: "signers",
              docs: ["Signer public keys."],
              type: {
                kind: "arrayTypeNode",
                item: {
                  kind: "publicKeyTypeNode"
                },
                count: {
                  kind: "fixedCountNode",
                  value: 11
                }
              }
            }
          ]
        },
        discriminators: [
          {
            kind: "sizeDiscriminatorNode",
            size: 355
          }
        ]
      }
    ],
    instructions: [
      {
        kind: "instructionNode",
        name: "initializeMint",
        docs: [
          "Initializes a new mint and optionally deposits all the newly minted",
          "tokens in an account.",
          "",
          "The `InitializeMint` instruction requires no signers and MUST be",
          "included within the same Transaction as the system program's",
          "`CreateAccount` instruction that creates the account being initialized.",
          "Otherwise another party can acquire ownership of the uninitialized account."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["Token mint account."]
          },
          {
            kind: "instructionAccountNode",
            name: "rent",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["Rent sysvar."],
            defaultValue: {
              kind: "publicKeyValueNode",
              publicKey: "SysvarRent111111111111111111111111111111111"
            }
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 0
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "decimals",
            docs: ["Number of decimals in token account amounts."],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "mintAuthority",
            docs: ["Minting authority."],
            type: {
              kind: "publicKeyTypeNode"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "freezeAuthority",
            docs: ["Optional authority that can freeze token accounts."],
            type: {
              kind: "optionTypeNode",
              fixed: false,
              item: {
                kind: "publicKeyTypeNode"
              },
              prefix: {
                kind: "numberTypeNode",
                format: "u8",
                endian: "le"
              }
            },
            defaultValue: {
              kind: "noneValueNode"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "initializeAccount",
        docs: [
          "Initializes a new account to hold tokens. If this account is associated",
          "with the native mint then the token balance of the initialized account",
          "will be equal to the amount of SOL in the account. If this account is",
          "associated with another mint, that mint must be initialized before this",
          "command can succeed.",
          "",
          "The `InitializeAccount` instruction requires no signers and MUST be",
          "included within the same Transaction as the system program's",
          "`CreateAccount` instruction that creates the account being initialized.",
          "Otherwise another party can acquire ownership of the uninitialized account."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "account",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The account to initialize."]
          },
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The mint this account will be associated with."]
          },
          {
            kind: "instructionAccountNode",
            name: "owner",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The new account's owner/multisignature."]
          },
          {
            kind: "instructionAccountNode",
            name: "rent",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["Rent sysvar."],
            defaultValue: {
              kind: "publicKeyValueNode",
              publicKey: "SysvarRent111111111111111111111111111111111"
            }
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 1
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "initializeMultisig",
        docs: [
          "Initializes a multisignature account with N provided signers.",
          "",
          "Multisignature accounts can used in place of any single owner/delegate",
          "accounts in any token instruction that require an owner/delegate to be",
          "present. The variant field represents the number of signers (M)",
          "required to validate this multisignature account.",
          "",
          "The `InitializeMultisig` instruction requires no signers and MUST be",
          "included within the same Transaction as the system program's",
          "`CreateAccount` instruction that creates the account being initialized.",
          "Otherwise another party can acquire ownership of the uninitialized account."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "multisig",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The multisignature account to initialize."]
          },
          {
            kind: "instructionAccountNode",
            name: "rent",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["Rent sysvar."],
            defaultValue: {
              kind: "publicKeyValueNode",
              publicKey: "SysvarRent111111111111111111111111111111111"
            }
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 2
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "m",
            docs: [
              "The number of signers (M) required to validate this multisignature account."
            ],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "signers"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "transfer",
        docs: [
          "Transfers tokens from one account to another either directly or via a delegate.",
          "If this account is associated with the native mint then equal amounts",
          "of SOL and Tokens will be transferred to the destination account."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "source",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The source account."]
          },
          {
            kind: "instructionAccountNode",
            name: "destination",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The destination account."]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The source account's owner/delegate or its multisignature account."
            ],
            defaultValue: {
              kind: "identityValueNode"
            }
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 3
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "amount",
            docs: ["The amount of tokens to transfer."],
            type: {
              kind: "numberTypeNode",
              format: "u64",
              endian: "le"
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "approve",
        docs: [
          "Approves a delegate. A delegate is given the authority over tokens on",
          "behalf of the source account's owner."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "source",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The source account."]
          },
          {
            kind: "instructionAccountNode",
            name: "delegate",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The delegate."]
          },
          {
            kind: "instructionAccountNode",
            name: "owner",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: ["The source account owner or its multisignature account."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 4
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "amount",
            docs: ["The amount of tokens the delegate is approved for."],
            type: {
              kind: "numberTypeNode",
              format: "u64",
              endian: "le"
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "revoke",
        docs: ["Revokes the delegate's authority."],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "source",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The source account."]
          },
          {
            kind: "instructionAccountNode",
            name: "owner",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: ["The source account owner or its multisignature."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 5
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "setAuthority",
        docs: ["Sets a new authority of a mint or account."],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "owned",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint or account to change the authority of."]
          },
          {
            kind: "instructionAccountNode",
            name: "owner",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The current authority or the multisignature account of the mint or account to update."
            ]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 6
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "authorityType",
            docs: ["The type of authority to update."],
            type: {
              kind: "definedTypeLinkNode",
              name: "authorityType"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "newAuthority",
            docs: ["The new authority"],
            type: {
              kind: "optionTypeNode",
              fixed: false,
              item: {
                kind: "publicKeyTypeNode"
              },
              prefix: {
                kind: "numberTypeNode",
                format: "u8",
                endian: "le"
              }
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "mintTo",
        docs: [
          "Mints new tokens to an account. The native mint does not support minting."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint account."]
          },
          {
            kind: "instructionAccountNode",
            name: "token",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The account to mint tokens to."]
          },
          {
            kind: "instructionAccountNode",
            name: "mintAuthority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The mint's minting authority or its multisignature account."
            ]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 7
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "amount",
            docs: ["The amount of new tokens to mint."],
            type: {
              kind: "numberTypeNode",
              format: "u64",
              endian: "le"
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "burn",
        docs: [
          "Burns tokens by removing them from an account. `Burn` does not support",
          "accounts associated with the native mint, use `CloseAccount` instead."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "account",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The account to burn from."]
          },
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The token mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The account's owner/delegate or its multisignature account."
            ],
            defaultValue: {
              kind: "identityValueNode"
            }
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: ["The amount of tokens to burn."],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 8
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "amount",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u64",
              endian: "le"
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "closeAccount",
        docs: [
          "Close an account by transferring all its SOL to the destination account.",
          "Non-native accounts may only be closed if its token amount is zero."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "account",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The account to close."]
          },
          {
            kind: "instructionAccountNode",
            name: "destination",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The destination account."]
          },
          {
            kind: "instructionAccountNode",
            name: "owner",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: ["The account's owner or its multisignature account."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 9
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "freezeAccount",
        docs: [
          "Freeze an Initialized account using the Mint's freeze_authority (if set)."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "account",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The account to freeze."]
          },
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The token mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "owner",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: ["The mint freeze authority or its multisignature account."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 10
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "thawAccount",
        docs: [
          "Thaw a Frozen account using the Mint's freeze_authority (if set)."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "account",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The account to thaw."]
          },
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The token mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "owner",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: ["The mint freeze authority or its multisignature account."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 11
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "transferChecked",
        docs: [
          "Transfers tokens from one account to another either directly or via a",
          "delegate. If this account is associated with the native mint then equal",
          "amounts of SOL and Tokens will be transferred to the destination account.",
          "",
          "This instruction differs from Transfer in that the token mint and",
          "decimals value is checked by the caller. This may be useful when",
          "creating transactions offline or within a hardware wallet."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "source",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The source account."]
          },
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The token mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "destination",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The destination account."]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The source account's owner/delegate or its multisignature account."
            ],
            defaultValue: {
              kind: "identityValueNode"
            }
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 12
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "amount",
            docs: ["The amount of tokens to transfer."],
            type: {
              kind: "numberTypeNode",
              format: "u64",
              endian: "le"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "decimals",
            docs: [
              "Expected number of base 10 digits to the right of the decimal place."
            ],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "approveChecked",
        docs: [
          "Approves a delegate. A delegate is given the authority over tokens on",
          "behalf of the source account's owner.",
          "",
          "This instruction differs from Approve in that the token mint and",
          "decimals value is checked by the caller. This may be useful when",
          "creating transactions offline or within a hardware wallet."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "source",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The source account."]
          },
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The token mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "delegate",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The delegate."]
          },
          {
            kind: "instructionAccountNode",
            name: "owner",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: ["The source account owner or its multisignature account."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 13
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "amount",
            docs: ["The amount of tokens the delegate is approved for."],
            type: {
              kind: "numberTypeNode",
              format: "u64",
              endian: "le"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "decimals",
            docs: [
              "Expected number of base 10 digits to the right of the decimal place."
            ],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "mintToChecked",
        docs: [
          "Mints new tokens to an account. The native mint does not support minting.",
          "",
          "This instruction differs from MintTo in that the decimals value is",
          "checked by the caller. This may be useful when creating transactions",
          "offline or within a hardware wallet."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "token",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The account to mint tokens to."]
          },
          {
            kind: "instructionAccountNode",
            name: "mintAuthority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The mint's minting authority or its multisignature account."
            ]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 14
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "amount",
            docs: ["The amount of new tokens to mint."],
            type: {
              kind: "numberTypeNode",
              format: "u64",
              endian: "le"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "decimals",
            docs: [
              "Expected number of base 10 digits to the right of the decimal place."
            ],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "burnChecked",
        docs: [
          "Burns tokens by removing them from an account. `BurnChecked` does not",
          "support accounts associated with the native mint, use `CloseAccount` instead.",
          "",
          "This instruction differs from Burn in that the decimals value is checked",
          "by the caller. This may be useful when creating transactions offline or",
          "within a hardware wallet."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "account",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The account to burn from."]
          },
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The token mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The account's owner/delegate or its multisignature account."
            ],
            defaultValue: {
              kind: "identityValueNode"
            }
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 15
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "amount",
            docs: ["The amount of tokens to burn."],
            type: {
              kind: "numberTypeNode",
              format: "u64",
              endian: "le"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "decimals",
            docs: [
              "Expected number of base 10 digits to the right of the decimal place."
            ],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "initializeAccount2",
        docs: [
          "Like InitializeAccount, but the owner pubkey is passed via instruction",
          "data rather than the accounts list. This variant may be preferable",
          "when using Cross Program Invocation from an instruction that does",
          "not need the owner's `AccountInfo` otherwise."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "account",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The account to initialize."]
          },
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The mint this account will be associated with."]
          },
          {
            kind: "instructionAccountNode",
            name: "rent",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["Rent sysvar."],
            defaultValue: {
              kind: "publicKeyValueNode",
              publicKey: "SysvarRent111111111111111111111111111111111"
            }
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 16
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "owner",
            docs: ["The new account's owner/multisignature."],
            type: {
              kind: "publicKeyTypeNode"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "syncNative",
        docs: [
          "Given a wrapped / native token account (a token account containing SOL)",
          "updates its amount field based on the account's underlying `lamports`.",
          "This is useful if a non-wrapped SOL account uses",
          "`system_instruction::transfer` to move lamports to a wrapped token",
          "account, and needs to have its token `amount` field updated."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "account",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: [
              "The native token account to sync with its underlying lamports."
            ]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 17
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "initializeAccount3",
        docs: [
          "Like InitializeAccount2, but does not require the Rent sysvar to be provided."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "account",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The account to initialize."]
          },
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The mint this account will be associated with."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 18
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "owner",
            docs: ["The new account's owner/multisignature."],
            type: {
              kind: "publicKeyTypeNode"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "initializeMultisig2",
        docs: [
          "Like InitializeMultisig, but does not require the Rent sysvar to be provided."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "multisig",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The multisignature account to initialize."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 19
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "m",
            docs: [
              "The number of signers (M) required to validate this multisignature account."
            ],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "signers"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "initializeMint2",
        docs: [
          "Like [`InitializeMint`], but does not require the Rent sysvar to be provided."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint to initialize."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 20
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "decimals",
            docs: [
              "Number of base 10 digits to the right of the decimal place."
            ],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "mintAuthority",
            docs: ["The authority/multisignature to mint tokens."],
            type: {
              kind: "publicKeyTypeNode"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "freezeAuthority",
            docs: [
              "The optional freeze authority/multisignature of the mint."
            ],
            type: {
              kind: "optionTypeNode",
              fixed: false,
              item: {
                kind: "publicKeyTypeNode"
              },
              prefix: {
                kind: "numberTypeNode",
                format: "u8",
                endian: "le"
              }
            },
            defaultValue: {
              kind: "noneValueNode"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "getAccountDataSize",
        docs: [
          "Gets the required size of an account for the given mint as a",
          "little-endian `u64`.",
          "",
          "Return data can be fetched using `sol_get_return_data` and deserializing",
          "the return data as a little-endian `u64`."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The mint to calculate for."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 21
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "initializeImmutableOwner",
        docs: [
          "Initialize the Immutable Owner extension for the given token account",
          "",
          "Fails if the account has already been initialized, so must be called",
          "before `InitializeAccount`.",
          "",
          "No-ops in this version of the program, but is included for compatibility",
          "with the Associated Token Account program."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "account",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The account to initialize."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 22
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "amountToUiAmount",
        docs: [
          "Convert an Amount of tokens to a UiAmount `string`, using the given",
          "mint. In this version of the program, the mint can only specify the",
          "number of decimals.",
          "",
          "Fails on an invalid mint.",
          "",
          "Return data can be fetched using `sol_get_return_data` and deserialized",
          "with `String::from_utf8`."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The mint to calculate for."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 23
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "amount",
            docs: ["The amount of tokens to reformat."],
            type: {
              kind: "numberTypeNode",
              format: "u64",
              endian: "le"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "uiAmountToAmount",
        docs: [
          "Convert a UiAmount of tokens to a little-endian `u64` raw Amount, using",
          "the given mint. In this version of the program, the mint can only",
          "specify the number of decimals.",
          "",
          "Return data can be fetched using `sol_get_return_data` and deserializing",
          "the return data as a little-endian `u64`."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The mint to calculate for."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 24
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "uiAmount",
            docs: ["The ui_amount of tokens to reformat."],
            type: {
              kind: "stringTypeNode",
              encoding: "utf8"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "initializeMintCloseAuthority",
        docs: [
          "Initialize the close account authority on a new mint.",
          "",
          "Fails if the mint has already been initialized, so must be called before `InitializeMint`.",
          "",
          "The mint must have exactly enough space allocated for the base mint (82",
          "bytes), plus 83 bytes of padding, 1 byte reserved for the account type,",
          "then space required for this extension, plus any others."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint to initialize."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 25
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "closeAuthority",
            docs: [
              "Authority that must sign the `CloseAccount` instruction on a mint."
            ],
            type: {
              kind: "optionTypeNode",
              fixed: false,
              item: {
                kind: "publicKeyTypeNode"
              },
              prefix: {
                kind: "numberTypeNode",
                format: "u8",
                endian: "le"
              }
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "initializeTransferFeeConfig",
        docs: [
          "Initialize the transfer fee on a new mint.",
          "",
          "Fails if the mint has already been initialized, so must be called before `InitializeMint`.",
          "",
          "The mint must have exactly enough space allocated for the base mint (82",
          "bytes), plus 83 bytes of padding, 1 byte reserved for the account type,",
          "then space required for this extension, plus any others."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint to initialize."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 26
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "transferFeeDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 0
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "transferFeeConfigAuthority",
            docs: ["Pubkey that may update the fees."],
            type: {
              kind: "optionTypeNode",
              fixed: false,
              item: {
                kind: "publicKeyTypeNode"
              },
              prefix: {
                kind: "numberTypeNode",
                format: "u8",
                endian: "le"
              }
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "withdrawWithheldAuthority",
            docs: ["Withdraw instructions must be signed by this key."],
            type: {
              kind: "optionTypeNode",
              fixed: false,
              item: {
                kind: "publicKeyTypeNode"
              },
              prefix: {
                kind: "numberTypeNode",
                format: "u8",
                endian: "le"
              }
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "transferFeeBasisPoints",
            docs: [
              "Amount of transfer collected as fees, expressed as basis points of the transfer amount."
            ],
            type: {
              kind: "numberTypeNode",
              format: "u16",
              endian: "le"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "maximumFee",
            docs: ["Maximum fee assessed on transfers."],
            type: {
              kind: "numberTypeNode",
              format: "u64",
              endian: "le"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "transferFeeDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "transferCheckedWithFee",
        docs: [
          "Transfer, providing expected mint information and fees.",
          "",
          "This instruction succeeds if the mint has no configured transfer fee",
          "and the provided fee is 0. This allows applications to use",
          "`TransferCheckedWithFee` with any mint."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "source",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: [
              "The source account. May include the `TransferFeeAmount` extension."
            ]
          },
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: [
              "The token mint. May include the `TransferFeeConfig` extension."
            ]
          },
          {
            kind: "instructionAccountNode",
            name: "destination",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: [
              "The destination account. May include the `TransferFeeAmount` extension."
            ]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The source account's owner/delegate or its multisignature account."
            ],
            defaultValue: {
              kind: "identityValueNode"
            }
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 26
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "transferFeeDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 1
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "amount",
            docs: ["The amount of tokens to transfer."],
            type: {
              kind: "numberTypeNode",
              format: "u64",
              endian: "le"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "decimals",
            docs: [
              "Expected number of base 10 digits to the right of the decimal place."
            ],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "fee",
            docs: [
              "Expected fee assessed on this transfer, calculated off-chain based",
              "on the transfer_fee_basis_points and maximum_fee of the mint. May",
              "be 0 for a mint without a configured transfer fee."
            ],
            type: {
              kind: "numberTypeNode",
              format: "u64",
              endian: "le"
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "transferFeeDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "withdrawWithheldTokensFromMint",
        docs: [
          "Transfer all withheld tokens in the mint to an account. Signed by the",
          "mint's withdraw withheld tokens authority."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: [
              "The token mint. Must include the `TransferFeeConfig` extension."
            ]
          },
          {
            kind: "instructionAccountNode",
            name: "feeReceiver",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: [
              "The fee receiver account. Must include the `TransferFeeAmount`",
              "extension associated with the provided mint."
            ]
          },
          {
            kind: "instructionAccountNode",
            name: "withdrawWithheldAuthority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The mint's `withdraw_withheld_authority` or its multisignature account."
            ],
            defaultValue: {
              kind: "identityValueNode"
            }
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 26
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "transferFeeDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 2
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "transferFeeDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "withdrawWithheldTokensFromAccounts",
        docs: [
          "Transfer all withheld tokens to an account. Signed by the mint's",
          "withdraw withheld tokens authority."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: [
              "The token mint. Must include the `TransferFeeConfig` extension."
            ]
          },
          {
            kind: "instructionAccountNode",
            name: "feeReceiver",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: [
              "The fee receiver account. Must include the `TransferFeeAmount`",
              "extension associated with the provided mint."
            ]
          },
          {
            kind: "instructionAccountNode",
            name: "withdrawWithheldAuthority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The mint's `withdraw_withheld_authority` or its multisignature account."
            ],
            defaultValue: {
              kind: "identityValueNode"
            }
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 26
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "transferFeeDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 3
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "numTokenAccounts",
            docs: ["Number of token accounts harvested."],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          },
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: false,
            isWritable: true,
            isSigner: false,
            docs: ["The source accounts to withdraw from."],
            value: {
              kind: "argumentValueNode",
              name: "sources"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "transferFeeDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "harvestWithheldTokensToMint",
        docs: [
          "Permissionless instruction to transfer all withheld tokens to the mint.",
          "",
          "Succeeds for frozen accounts.",
          "",
          "Accounts provided should include the `TransferFeeAmount` extension.",
          "If not, the account is skipped."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The token mint."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 26
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "transferFeeDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 4
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: false,
            isWritable: true,
            isSigner: false,
            docs: ["The source accounts to harvest from."],
            value: {
              kind: "argumentValueNode",
              name: "sources"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "transferFeeDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "setTransferFee",
        docs: [
          "Set transfer fee. Only supported for mints that include the",
          "`TransferFeeConfig` extension."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "transferFeeConfigAuthority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The mint's fee account owner or its multisignature account."
            ],
            defaultValue: {
              kind: "identityValueNode"
            }
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 26
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "transferFeeDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 5
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "transferFeeBasisPoints",
            docs: [
              "Amount of transfer collected as fees, expressed as basis points of the transfer amount."
            ],
            type: {
              kind: "numberTypeNode",
              format: "u16",
              endian: "le"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "maximumFee",
            docs: ["Maximum fee assessed on transfers."],
            type: {
              kind: "numberTypeNode",
              format: "u64",
              endian: "le"
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "transferFeeDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "initializeConfidentialTransferMint",
        docs: [
          "Initializes confidential transfers for a mint.",
          "",
          "The `ConfidentialTransferInstruction::InitializeMint` instruction",
          "requires no signers and MUST be included within the same Transaction",
          "as `TokenInstruction::InitializeMint`. Otherwise another party can",
          "initialize the configuration.",
          "",
          "The instruction fails if the `TokenInstruction::InitializeMint`",
          "instruction has already executed for the mint."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The SPL Token mint."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 27
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "confidentialTransferDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 0
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "authority",
            docs: [
              "Authority to modify the `ConfidentialTransferMint` configuration and to",
              "approve new accounts."
            ],
            type: {
              kind: "zeroableOptionTypeNode",
              item: {
                kind: "publicKeyTypeNode"
              }
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "autoApproveNewAccounts",
            docs: [
              "Determines if newly configured accounts must be approved by the",
              "`authority` before they may be used by the user."
            ],
            type: {
              kind: "booleanTypeNode",
              size: {
                kind: "numberTypeNode",
                format: "u8",
                endian: "le"
              }
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "auditorElgamalPubkey",
            docs: [
              "New authority to decode any transfer amount in a confidential transfer."
            ],
            type: {
              kind: "zeroableOptionTypeNode",
              item: {
                kind: "publicKeyTypeNode"
              }
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "confidentialTransferDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "updateConfidentialTransferMint",
        docs: [
          "Updates the confidential transfer mint configuration for a mint.",
          "",
          "Use `TokenInstruction::SetAuthority` to update the confidential transfer",
          "mint authority."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The SPL Token mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: true,
            isOptional: false,
            docs: ["Confidential transfer mint authority."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 27
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "confidentialTransferDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 1
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "autoApproveNewAccounts",
            docs: [
              "Determines if newly configured accounts must be approved by the",
              "`authority` before they may be used by the user."
            ],
            type: {
              kind: "booleanTypeNode",
              size: {
                kind: "numberTypeNode",
                format: "u8",
                endian: "le"
              }
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "auditorElgamalPubkey",
            docs: [
              "New authority to decode any transfer amount in a confidential transfer."
            ],
            type: {
              kind: "zeroableOptionTypeNode",
              item: {
                kind: "publicKeyTypeNode"
              }
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "confidentialTransferDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "configureConfidentialTransferAccount",
        docs: [
          "Configures confidential transfers for a token account.",
          "",
          "The instruction fails if the confidential transfers are already",
          "configured, or if the mint was not initialized with confidential",
          "transfer support.",
          "",
          "The instruction fails if the `TokenInstruction::InitializeAccount`",
          "instruction has not yet successfully executed for the token account.",
          "",
          "Upon success, confidential and non-confidential deposits and transfers",
          "are enabled. Use the `DisableConfidentialCredits` and",
          "`DisableNonConfidentialCredits` instructions to disable.",
          "",
          "In order for this instruction to be successfully processed, it must be",
          "accompanied by the `VerifyPubkeyValidity` instruction of the",
          "`zk_elgamal_proof` program in the same transaction or the address of a",
          "context state account for the proof must be provided."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "token",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The SPL Token account."]
          },
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The corresponding SPL Token mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "instructionsSysvarOrContextState",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: [
              "Instructions sysvar if `VerifyPubkeyValidity` is included in",
              "the same transaction or context state account if",
              "`VerifyPubkeyValidity` is pre-verified into a context state",
              "account."
            ],
            defaultValue: {
              kind: "publicKeyValueNode",
              publicKey: "Sysvar1nstructions1111111111111111111111111"
            }
          },
          {
            kind: "instructionAccountNode",
            name: "record",
            isWritable: false,
            isSigner: false,
            isOptional: true,
            docs: [
              "(Optional) Record account if the accompanying proof is to be read from a record account."
            ]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The source account's owner/delegate or its multisignature account."
            ]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 27
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "confidentialTransferDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 2
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "decryptableZeroBalance",
            docs: [
              "The decryptable balance (always 0) once the configure account succeeds."
            ],
            type: {
              kind: "definedTypeLinkNode",
              name: "decryptableBalance"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "maximumPendingBalanceCreditCounter",
            docs: [
              "The maximum number of despots and transfers that an account can receiver",
              "before the `ApplyPendingBalance` is executed"
            ],
            type: {
              kind: "numberTypeNode",
              format: "u64",
              endian: "le"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "proofInstructionOffset",
            docs: [
              "Relative location of the `ProofInstruction::ZeroCiphertextProof`",
              "instruction to the `ConfigureAccount` instruction in the",
              "transaction. If the offset is `0`, then use a context state account",
              "for the proof."
            ],
            type: {
              kind: "numberTypeNode",
              format: "i8",
              endian: "le"
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "confidentialTransferDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "approveConfidentialTransferAccount",
        docs: [
          "Approves a token account for confidential transfers.",
          "",
          "Approval is only required when the",
          "`ConfidentialTransferMint::approve_new_accounts` field is set in the",
          "SPL Token mint.  This instruction must be executed after the account",
          "owner configures their account for confidential transfers with",
          "`ConfidentialTransferInstruction::ConfigureAccount`."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "token",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The SPL Token account to approve."]
          },
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The corresponding SPL Token mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: true,
            isOptional: false,
            docs: ["Confidential transfer mint authority."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 27
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "confidentialTransferDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 3
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "confidentialTransferDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "emptyConfidentialTransferAccount",
        docs: [
          "Empty the available balance in a confidential token account.",
          "",
          "A token account that is extended for confidential transfers can only be",
          "closed if the pending and available balance ciphertexts are emptied.",
          "The pending balance can be emptied",
          "via the `ConfidentialTransferInstruction::ApplyPendingBalance`",
          "instruction. Use the `ConfidentialTransferInstruction::EmptyAccount`",
          "instruction to empty the available balance ciphertext.",
          "",
          "Note that a newly configured account is always empty, so this",
          "instruction is not required prior to account closing if no",
          "instructions beyond",
          "`ConfidentialTransferInstruction::ConfigureAccount` have affected the",
          "token account.",
          "",
          "In order for this instruction to be successfully processed, it must be",
          "accompanied by the `VerifyZeroCiphertext` instruction of the",
          "`zk_elgamal_proof` program in the same transaction or the address of a",
          "context state account for the proof must be provided."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "token",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The SPL Token account."]
          },
          {
            kind: "instructionAccountNode",
            name: "instructionsSysvarOrContextState",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: [
              "Instructions sysvar if `VerifyZeroCiphertext` is included in",
              "the same transaction or context state account if",
              "`VerifyZeroCiphertext` is pre-verified into a context state",
              "account."
            ],
            defaultValue: {
              kind: "publicKeyValueNode",
              publicKey: "Sysvar1nstructions1111111111111111111111111"
            }
          },
          {
            kind: "instructionAccountNode",
            name: "record",
            isWritable: false,
            isSigner: false,
            isOptional: true,
            docs: [
              "(Optional) Record account if the accompanying proof is to be read from a record account."
            ]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The source account's owner/delegate or its multisignature account."
            ]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 27
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "confidentialTransferDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 4
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "proofInstructionOffset",
            docs: [
              "Relative location of the `ProofInstruction::VerifyCloseAccount`",
              "instruction to the `EmptyAccount` instruction in the transaction. If",
              "the offset is `0`, then use a context state account for the proof."
            ],
            type: {
              kind: "numberTypeNode",
              format: "i8",
              endian: "le"
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "confidentialTransferDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "confidentialDeposit",
        docs: [
          "Deposit SPL Tokens into the pending balance of a confidential token",
          "account.",
          "",
          "The account owner can then invoke the `ApplyPendingBalance` instruction",
          "to roll the deposit into their available balance at a time of their",
          "choosing.",
          "",
          "Fails if the source or destination accounts are frozen.",
          "Fails if the associated mint is extended as `NonTransferable`."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "token",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The SPL Token account."]
          },
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The corresponding SPL Token mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The source account's owner/delegate or its multisignature account."
            ]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 27
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "confidentialTransferDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 5
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "amount",
            docs: ["The amount of tokens to deposit."],
            type: {
              kind: "numberTypeNode",
              format: "u64",
              endian: "le"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "decimals",
            docs: [
              "Expected number of base 10 digits to the right of the decimal place."
            ],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "confidentialTransferDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "confidentialWithdraw",
        docs: [
          "Withdraw SPL Tokens from the available balance of a confidential token",
          "account.",
          "",
          "In order for this instruction to be successfully processed, it must be",
          "accompanied by the following list of `zk_elgamal_proof` program",
          "instructions:",
          "- `VerifyCiphertextCommitmentEquality`",
          "- `VerifyBatchedRangeProofU64`",
          "These instructions can be accompanied in the same transaction or can be",
          "pre-verified into a context state account, in which case, only their",
          "context state account address need to be provided.",
          "",
          "Fails if the source or destination accounts are frozen.",
          "Fails if the associated mint is extended as `NonTransferable`."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "token",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The SPL Token account."]
          },
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The corresponding SPL Token mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "instructionsSysvar",
            isWritable: false,
            isSigner: false,
            isOptional: true,
            docs: [
              "Instructions sysvar if at least one of the",
              "`zk_elgamal_proof` instructions are included in the same",
              "transaction."
            ]
          },
          {
            kind: "instructionAccountNode",
            name: "equalityRecord",
            isWritable: false,
            isSigner: false,
            isOptional: true,
            docs: [
              "(Optional) Equality proof record account or context state account."
            ]
          },
          {
            kind: "instructionAccountNode",
            name: "rangeRecord",
            isWritable: false,
            isSigner: false,
            isOptional: true,
            docs: [
              "(Optional) Range proof record account or context state account."
            ]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The source account's owner/delegate or its multisignature account."
            ]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 27
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "confidentialTransferDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 6
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "amount",
            docs: ["The amount of tokens to withdraw."],
            type: {
              kind: "numberTypeNode",
              format: "u64",
              endian: "le"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "decimals",
            docs: [
              "Expected number of base 10 digits to the right of the decimal place."
            ],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "newDecryptableAvailableBalance",
            docs: ["The new decryptable balance if the withdrawal succeeds."],
            type: {
              kind: "definedTypeLinkNode",
              name: "decryptableBalance"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "equalityProofInstructionOffset",
            docs: [
              "Relative location of the",
              "`ProofInstruction::VerifyCiphertextCommitmentEquality` instruction",
              "to the `Withdraw` instruction in the transaction. If the offset is",
              "`0`, then use a context state account for the proof."
            ],
            type: {
              kind: "numberTypeNode",
              format: "i8",
              endian: "le"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "rangeProofInstructionOffset",
            docs: [
              "Relative location of the `ProofInstruction::BatchedRangeProofU64`",
              "instruction to the `Withdraw` instruction in the transaction. If the",
              "offset is `0`, then use a context state account for the proof."
            ],
            type: {
              kind: "numberTypeNode",
              format: "i8",
              endian: "le"
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "confidentialTransferDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "confidentialTransfer",
        docs: [
          "Transfer tokens confidentially.",
          "",
          "In order for this instruction to be successfully processed, it must be",
          "accompanied by the following list of `zk_elgamal_proof` program",
          "instructions:",
          "- `VerifyCiphertextCommitmentEquality`",
          "- `VerifyBatchedGroupedCiphertext3HandlesValidity`",
          "- `VerifyBatchedRangeProofU128`",
          "These instructions can be accompanied in the same transaction or can be",
          "pre-verified into a context state account, in which case, only their",
          "context state account addresses need to be provided.",
          "",
          "Fails if the associated mint is extended as `NonTransferable`."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "sourceToken",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The source SPL Token account."]
          },
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The corresponding SPL Token mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "destinationToken",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The destination SPL Token account."]
          },
          {
            kind: "instructionAccountNode",
            name: "instructionsSysvar",
            isWritable: false,
            isSigner: false,
            isOptional: true,
            docs: [
              "(Optional) Instructions sysvar if at least one of the",
              "`zk_elgamal_proof` instructions are included in the same",
              "transaction."
            ]
          },
          {
            kind: "instructionAccountNode",
            name: "equalityRecord",
            isWritable: false,
            isSigner: false,
            isOptional: true,
            docs: [
              "(Optional) Equality proof record account or context state account."
            ]
          },
          {
            kind: "instructionAccountNode",
            name: "ciphertextValidityRecord",
            isWritable: false,
            isSigner: false,
            isOptional: true,
            docs: [
              "(Optional) Ciphertext validity proof record account or context state account."
            ]
          },
          {
            kind: "instructionAccountNode",
            name: "rangeRecord",
            isWritable: false,
            isSigner: false,
            isOptional: true,
            docs: [
              "(Optional) Range proof record account or context state account."
            ]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The source account's owner/delegate or its multisignature account."
            ]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 27
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "confidentialTransferDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 7
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "newSourceDecryptableAvailableBalance",
            docs: [
              "The new source decryptable balance if the transfer succeeds."
            ],
            type: {
              kind: "definedTypeLinkNode",
              name: "decryptableBalance"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "equalityProofInstructionOffset",
            docs: [
              "Relative location of the",
              "`ProofInstruction::VerifyCiphertextCommitmentEquality` instruction",
              "to the `Transfer` instruction in the transaction. If the offset is",
              "`0`, then use a context state account for the proof."
            ],
            type: {
              kind: "numberTypeNode",
              format: "i8",
              endian: "le"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "ciphertextValidityProofInstructionOffset",
            docs: [
              "Relative location of the",
              "`ProofInstruction::VerifyBatchedGroupedCiphertext3HandlesValidity`",
              "instruction to the `Transfer` instruction in the transaction. If the",
              "offset is `0`, then use a context state account for the proof."
            ],
            type: {
              kind: "numberTypeNode",
              format: "i8",
              endian: "le"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "rangeProofInstructionOffset",
            docs: [
              "Relative location of the `ProofInstruction::BatchedRangeProofU128Data`",
              "instruction to the `Transfer` instruction in the transaction. If the",
              "offset is `0`, then use a context state account for the proof."
            ],
            type: {
              kind: "numberTypeNode",
              format: "i8",
              endian: "le"
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "confidentialTransferDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "applyConfidentialPendingBalance",
        docs: [
          "Applies the pending balance to the available balance, based on the",
          "history of `Deposit` and/or `Transfer` instructions.",
          "",
          "After submitting `ApplyPendingBalance`, the client should compare",
          "`ConfidentialTransferAccount::expected_pending_balance_credit_counter`",
          "with",
          "`ConfidentialTransferAccount::actual_applied_pending_balance_instructions`.  If they are",
          "equal then the",
          "`ConfidentialTransferAccount::decryptable_available_balance` is",
          "consistent with `ConfidentialTransferAccount::available_balance`. If",
          "they differ then there is more pending balance to be applied."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "token",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The SPL Token account."]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The source account's owner/delegate or its multisignature account."
            ]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 27
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "confidentialTransferDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 8
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "expectedPendingBalanceCreditCounter",
            docs: [
              "The expected number of pending balance credits since the last successful",
              "`ApplyPendingBalance` instruction"
            ],
            type: {
              kind: "numberTypeNode",
              format: "u64",
              endian: "le"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "newDecryptableAvailableBalance",
            docs: [
              "The new decryptable balance if the pending balance is applied",
              "successfully"
            ],
            type: {
              kind: "definedTypeLinkNode",
              name: "decryptableBalance"
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "confidentialTransferDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "enableConfidentialCredits",
        docs: [
          "Configure a confidential extension account to accept incoming",
          "confidential transfers."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "token",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The SPL Token account."]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The source account's owner/delegate or its multisignature account."
            ]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 27
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "confidentialTransferDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 9
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "confidentialTransferDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "disableConfidentialCredits",
        docs: [
          "Configure a confidential extension account to reject any incoming",
          "confidential transfers.",
          "",
          "If the `allow_non_confidential_credits` field is `true`, then the base",
          "account can still receive non-confidential transfers.",
          "",
          "This instruction can be used to disable confidential payments after a",
          "token account has already been extended for confidential transfers."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "token",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The SPL Token account."]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The source account's owner/delegate or its multisignature account."
            ]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 27
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "confidentialTransferDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 10
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "confidentialTransferDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "enableNonConfidentialCredits",
        docs: [
          "Configure an account with the confidential extension to accept incoming",
          "non-confidential transfers."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "token",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The SPL Token account."]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The source account's owner/delegate or its multisignature account."
            ]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 27
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "confidentialTransferDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 11
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "confidentialTransferDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "disableNonConfidentialCredits",
        docs: [
          "Configure an account with the confidential extension to reject any",
          "incoming non-confidential transfers.",
          "",
          "This instruction can be used to configure a confidential extension",
          "account to exclusively receive confidential payments."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "token",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The SPL Token account."]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The source account's owner/delegate or its multisignature account."
            ]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 27
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "confidentialTransferDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 12
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "confidentialTransferDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "confidentialTransferWithFee",
        docs: [
          "Transfer tokens confidentially with fee.",
          "",
          "In order for this instruction to be successfully processed, it must be",
          "accompanied by the following list of `zk_elgamal_proof` program",
          "instructions:",
          "- `VerifyCiphertextCommitmentEquality`",
          "- `VerifyBatchedGroupedCiphertext3HandlesValidity` (transfer amount",
          "  ciphertext)",
          "- `VerifyPercentageWithFee`",
          "- `VerifyBatchedGroupedCiphertext2HandlesValidity` (fee ciphertext)",
          "- `VerifyBatchedRangeProofU256`",
          "These instructions can be accompanied in the same transaction or can be",
          "pre-verified into a context state account, in which case, only their",
          "context state account addresses need to be provided.",
          "",
          "The same restrictions for the `Transfer` applies to",
          "`TransferWithFee`. Namely, the instruction fails if the",
          "associated mint is extended as `NonTransferable`."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "sourceToken",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The source SPL Token account."]
          },
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The corresponding SPL Token mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "destinationToken",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The destination SPL Token account."]
          },
          {
            kind: "instructionAccountNode",
            name: "instructionsSysvar",
            isWritable: false,
            isSigner: false,
            isOptional: true,
            docs: [
              "(Optional) Instructions sysvar if at least one of the",
              "`zk_elgamal_proof` instructions are included in the same",
              "transaction."
            ]
          },
          {
            kind: "instructionAccountNode",
            name: "equalityRecord",
            isWritable: false,
            isSigner: false,
            isOptional: true,
            docs: [
              "(Optional) Equality proof record account or context state account."
            ]
          },
          {
            kind: "instructionAccountNode",
            name: "transferAmountCiphertextValidityRecord",
            isWritable: false,
            isSigner: false,
            isOptional: true,
            docs: [
              "(Optional) Transfer amount ciphertext validity proof record",
              "account or context state account."
            ]
          },
          {
            kind: "instructionAccountNode",
            name: "feeSigmaRecord",
            isWritable: false,
            isSigner: false,
            isOptional: true,
            docs: [
              "(Optional) Fee sigma proof record account or context state account."
            ]
          },
          {
            kind: "instructionAccountNode",
            name: "feeCiphertextValidityRecord",
            isWritable: false,
            isSigner: false,
            isOptional: true,
            docs: [
              "(Optional) Fee ciphertext validity proof record account or context state account."
            ]
          },
          {
            kind: "instructionAccountNode",
            name: "rangeRecord",
            isWritable: false,
            isSigner: false,
            isOptional: true,
            docs: [
              "(Optional) Range proof record account or context state account."
            ]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The source account's owner/delegate or its multisignature account."
            ]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 27
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "confidentialTransferDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 13
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "newSourceDecryptableAvailableBalance",
            docs: [
              "The new source decryptable balance if the transfer succeeds."
            ],
            type: {
              kind: "definedTypeLinkNode",
              name: "decryptableBalance"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "equalityProofInstructionOffset",
            docs: [
              "Relative location of the",
              "`ProofInstruction::VerifyCiphertextCommitmentEquality` instruction",
              "to the `TransferWithFee` instruction in the transaction. If the offset",
              "is `0`, then use a context state account for the proof."
            ],
            type: {
              kind: "numberTypeNode",
              format: "i8",
              endian: "le"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "transferAmountCiphertextValidityProofInstructionOffset",
            docs: [
              "Relative location of the",
              "`ProofInstruction::VerifyBatchedGroupedCiphertext3HandlesValidity`",
              "instruction to the `TransferWithFee` instruction in the transaction.",
              "If the offset is `0`, then use a context state account for the",
              "proof."
            ],
            type: {
              kind: "numberTypeNode",
              format: "i8",
              endian: "le"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "feeSigmaProofInstructionOffset",
            docs: [
              "Relative location of the `ProofInstruction::VerifyPercentageWithFee`",
              "instruction to the `TransferWithFee` instruction in the transaction.",
              "If the offset is `0`, then use a context state account for the",
              "proof."
            ],
            type: {
              kind: "numberTypeNode",
              format: "i8",
              endian: "le"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "feeCiphertextValidityProofInstructionOffset",
            docs: [
              "Relative location of the",
              "`ProofInstruction::VerifyBatchedGroupedCiphertext2HandlesValidity`",
              "instruction to the `TransferWithFee` instruction in the transaction.",
              "If the offset is `0`, then use a context state account for the",
              "proof."
            ],
            type: {
              kind: "numberTypeNode",
              format: "i8",
              endian: "le"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "rangeProofInstructionOffset",
            docs: [
              "Relative location of the `ProofInstruction::BatchedRangeProofU256Data`",
              "instruction to the `TransferWithFee` instruction in the transaction.",
              "If the offset is `0`, then use a context state account for the",
              "proof."
            ],
            type: {
              kind: "numberTypeNode",
              format: "i8",
              endian: "le"
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "confidentialTransferDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "initializeDefaultAccountState",
        docs: [
          "Initialize a new mint with the default state for new Accounts.",
          "",
          "Fails if the mint has already been initialized, so must be called before",
          "`InitializeMint`.",
          "",
          "The mint must have exactly enough space allocated for the base mint (82",
          "bytes), plus 83 bytes of padding, 1 byte reserved for the account type,",
          "then space required for this extension, plus any others."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 28
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "defaultAccountStateDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 0
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "state",
            docs: ["The state each new token account should start with."],
            type: {
              kind: "definedTypeLinkNode",
              name: "accountState"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "defaultAccountStateDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "updateDefaultAccountState",
        docs: [
          "Update the default state for new Accounts. Only supported for mints that",
          "include the `DefaultAccountState` extension."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "freezeAuthority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: ["The mint freeze authority or its multisignature account."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 28
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "defaultAccountStateDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 1
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "state",
            docs: ["The state each new token account should start with."],
            type: {
              kind: "definedTypeLinkNode",
              name: "accountState"
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "defaultAccountStateDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "reallocate",
        docs: [
          "Check to see if a token account is large enough for a list of",
          "ExtensionTypes, and if not, use reallocation to increase the data",
          "size."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "token",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The token account to reallocate."]
          },
          {
            kind: "instructionAccountNode",
            name: "payer",
            isWritable: true,
            isSigner: true,
            isOptional: false,
            docs: ["The payer account to fund reallocation."]
          },
          {
            kind: "instructionAccountNode",
            name: "systemProgram",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["System program for reallocation funding."],
            defaultValue: {
              kind: "publicKeyValueNode",
              publicKey: "11111111111111111111111111111111"
            }
          },
          {
            kind: "instructionAccountNode",
            name: "owner",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: ["The account's owner or its multisignature account."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 29
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "newExtensionTypes",
            docs: [
              "New extension types to include in the reallocated account."
            ],
            type: {
              kind: "arrayTypeNode",
              item: {
                kind: "definedTypeLinkNode",
                name: "extensionType"
              },
              count: {
                kind: "remainderCountNode"
              }
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "enableMemoTransfers",
        docs: [
          "Require memos for transfers into this Account. Adds the MemoTransfer",
          "extension to the Account, if it doesn't already exist."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "token",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The token account to update."]
          },
          {
            kind: "instructionAccountNode",
            name: "owner",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: ["The account's owner or its multisignature account."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 30
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "memoTransfersDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 0
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "memoTransfersDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "disableMemoTransfers",
        docs: [
          "Stop requiring memos for transfers into this Account.",
          "",
          "Implicitly initializes the extension in the case where it is not",
          "present."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "token",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The token account to update."]
          },
          {
            kind: "instructionAccountNode",
            name: "owner",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: ["The account's owner or its multisignature account."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 30
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "memoTransfersDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 1
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "memoTransfersDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "createNativeMint",
        docs: [
          "Creates the native mint.",
          "",
          "This instruction only needs to be invoked once after deployment and is",
          "permissionless. Wrapped SOL (`native_mint::id()`) will not be",
          "available until this instruction is successfully executed."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "payer",
            isWritable: true,
            isSigner: true,
            isOptional: false,
            docs: ["Funding account (must be a system account)"]
          },
          {
            kind: "instructionAccountNode",
            name: "nativeMint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The native mint address"]
          },
          {
            kind: "instructionAccountNode",
            name: "systemProgram",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["System program for mint account funding"],
            defaultValue: {
              kind: "publicKeyValueNode",
              publicKey: "11111111111111111111111111111111"
            }
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 31
            }
          }
        ],
        remainingAccounts: [],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "initializeNonTransferableMint",
        docs: [
          "Initialize the non transferable extension for the given mint account",
          "",
          "Fails if the account has already been initialized, so must be called before `InitializeMint`."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint account to initialize."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 32
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "initializeInterestBearingMint",
        docs: [
          "Initialize a new mint with the `InterestBearing` extension.",
          "",
          "Fails if the mint has already been initialized, so must be called before",
          "`InitializeMint`.",
          "",
          "The mint must have exactly enough space allocated for the base mint (82",
          "bytes), plus 83 bytes of padding, 1 byte reserved for the account type,",
          "then space required for this extension, plus any others."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint to initialize."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 33
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "interestBearingMintDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 0
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "rateAuthority",
            docs: ["The public key for the account that can update the rate"],
            type: {
              kind: "zeroableOptionTypeNode",
              item: {
                kind: "publicKeyTypeNode"
              }
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "rate",
            docs: ["The initial interest rate"],
            type: {
              kind: "numberTypeNode",
              format: "i16",
              endian: "le"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "interestBearingMintDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "updateRateInterestBearingMint",
        docs: [
          "Update the interest rate. Only supported for mints that include the",
          "`InterestBearingConfig` extension."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "rateAuthority",
            isWritable: true,
            isSigner: "either",
            isOptional: false,
            docs: ["The mint rate authority."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 33
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "interestBearingMintDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 1
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "rate",
            docs: ["The interest rate to update."],
            type: {
              kind: "numberTypeNode",
              format: "i16",
              endian: "le"
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "interestBearingMintDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "enableCpiGuard",
        docs: [
          "Lock certain token operations from taking place within CPI for this Account, namely:",
          "* Transfer and Burn must go through a delegate.",
          "* CloseAccount can only return lamports to owner.",
          "* SetAuthority can only be used to remove an existing close authority.",
          "* Approve is disallowed entirely.",
          "",
          "In addition, CPI Guard cannot be enabled or disabled via CPI."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "token",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The token account to update."]
          },
          {
            kind: "instructionAccountNode",
            name: "owner",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The account's owner/delegate or its multisignature account."
            ]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 34
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "cpiGuardDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 0
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "cpiGuardDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "disableCpiGuard",
        docs: [
          "Allow all token operations to happen via CPI as normal.",
          "",
          "Implicitly initializes the extension in the case where it is not present."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "token",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The token account to update."]
          },
          {
            kind: "instructionAccountNode",
            name: "owner",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The account's owner/delegate or its multisignature account."
            ]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 34
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "cpiGuardDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 1
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "cpiGuardDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "initializePermanentDelegate",
        docs: [
          "Initialize the permanent delegate on a new mint.",
          "",
          "Fails if the mint has already been initialized, so must be called before `InitializeMint`.",
          "",
          "The mint must have exactly enough space allocated for the base mint (82 bytes),",
          "plus 83 bytes of padding, 1 byte reserved for the account type,",
          "then space required for this extension, plus any others."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint to initialize."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 35
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "delegate",
            docs: [
              "Authority that may sign for `Transfer`s and `Burn`s on any account"
            ],
            type: {
              kind: "publicKeyTypeNode"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "initializeTransferHook",
        docs: [
          "Initialize a new mint with a transfer hook program.",
          "",
          "Fails if the mint has already been initialized, so must be called before `InitializeMint`.",
          "",
          "The mint must have exactly enough space allocated for the base mint (82 bytes),",
          "plus 83 bytes of padding, 1 byte reserved for the account type,",
          "then space required for this extension, plus any others."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint to initialize."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 36
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "transferHookDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 0
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "authority",
            docs: [
              "The public key for the account that can update the program id"
            ],
            type: {
              kind: "zeroableOptionTypeNode",
              item: {
                kind: "publicKeyTypeNode"
              }
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "programId",
            docs: ["The program id that performs logic during transfers"],
            type: {
              kind: "zeroableOptionTypeNode",
              item: {
                kind: "publicKeyTypeNode"
              }
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "transferHookDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "updateTransferHook",
        docs: [
          "Update the transfer hook program id. Only supported for mints that",
          "include the `TransferHook` extension.",
          "",
          "Accounts expected by this instruction:",
          "",
          "  0. `[writable]` The mint.",
          "  1. `[signer]` The transfer hook authority."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: ["The transfer hook authority."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 36
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "transferHookDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 1
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "programId",
            docs: ["The program id that performs logic during transfers"],
            type: {
              kind: "zeroableOptionTypeNode",
              item: {
                kind: "publicKeyTypeNode"
              }
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "transferHookDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "initializeConfidentialTransferFee",
        docs: [
          "Initializes confidential transfer fees for a mint.",
          "",
          "The instruction must be included within the same Transaction as TokenInstruction::InitializeMint.",
          "Otherwise another party can initialize the configuration.",
          "",
          "The instruction fails if TokenInstruction::InitializeMint has already executed for the mint."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The SPL Token mint."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 37
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "confidentialTransferFeeDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 0
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "authority",
            docs: [
              "Optional authority to set the withdraw withheld authority ElGamal key"
            ],
            type: {
              kind: "zeroableOptionTypeNode",
              item: {
                kind: "publicKeyTypeNode"
              }
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "withdrawWithheldAuthorityElGamalPubkey",
            docs: [
              "Withheld fees from accounts must be encrypted with this ElGamal key"
            ],
            type: {
              kind: "zeroableOptionTypeNode",
              item: {
                kind: "publicKeyTypeNode"
              }
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "confidentialTransferFeeDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "withdrawWithheldTokensFromMintForConfidentialTransferFee",
        docs: [
          "Transfer all withheld confidential tokens in the mint to an account.",
          "Signed by the mint's withdraw withheld tokens authority.",
          "",
          "The withheld confidential tokens are aggregated directly into the destination available balance.",
          "",
          "Must be accompanied by the VerifyCiphertextCiphertextEquality instruction",
          "of the zk_elgamal_proof program in the same transaction or the address of",
          "a context state account for the proof must be provided."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The token mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "destination",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The fee receiver account."]
          },
          {
            kind: "instructionAccountNode",
            name: "instructionsSysvarOrContextState",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["Instructions sysvar or context state account"]
          },
          {
            kind: "instructionAccountNode",
            name: "record",
            isWritable: false,
            isSigner: false,
            isOptional: true,
            docs: ["Optional record account if proof is read from record"]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: ["The mint's withdraw_withheld_authority"]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 37
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "confidentialTransferFeeDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 1
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "proofInstructionOffset",
            docs: ["Proof instruction offset"],
            type: {
              kind: "numberTypeNode",
              format: "i8",
              endian: "le"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "newDecryptableAvailableBalance",
            docs: [
              "The new decryptable balance in the destination token account"
            ],
            type: {
              kind: "definedTypeLinkNode",
              name: "decryptableBalance"
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "confidentialTransferFeeDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "withdrawWithheldTokensFromAccountsForConfidentialTransferFee",
        docs: [
          "Transfer all withheld tokens to an account. Signed by the mint's withdraw withheld",
          "tokens authority. This instruction is susceptible to front-running.",
          "Use `HarvestWithheldTokensToMint` and `WithdrawWithheldTokensFromMint` as alternative.",
          "",
          "Must be accompanied by the VerifyWithdrawWithheldTokens instruction."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["The token mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "destination",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The fee receiver account."]
          },
          {
            kind: "instructionAccountNode",
            name: "instructionsSysvarOrContextState",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: ["Instructions sysvar or context state account"]
          },
          {
            kind: "instructionAccountNode",
            name: "record",
            isWritable: false,
            isSigner: false,
            isOptional: true,
            docs: ["Optional record account"]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: ["The mint's withdraw_withheld_authority"]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 37
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "confidentialTransferFeeDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 2
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "numTokenAccounts",
            docs: ["Number of token accounts harvested"],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "proofInstructionOffset",
            docs: ["Proof instruction offset"],
            type: {
              kind: "numberTypeNode",
              format: "i8",
              endian: "le"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "newDecryptableAvailableBalance",
            docs: [
              "The new decryptable balance in the destination token account"
            ],
            type: {
              kind: "definedTypeLinkNode",
              name: "decryptableBalance"
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "confidentialTransferFeeDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "harvestWithheldTokensToMintForConfidentialTransferFee",
        docs: [
          "Permissionless instruction to transfer all withheld confidential tokens to the mint.",
          "",
          "Succeeds for frozen accounts.",
          "",
          "Accounts provided should include both the `TransferFeeAmount` and",
          "`ConfidentialTransferAccount` extension. If not, the account is skipped."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 37
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "confidentialTransferFeeDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 3
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: false,
            isWritable: true,
            docs: ["The source accounts to harvest from"],
            value: {
              kind: "argumentValueNode",
              name: "sources"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "confidentialTransferFeeDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "enableHarvestToMint",
        docs: [
          "Configure a confidential transfer fee mint to accept harvested confidential fees."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The token mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: ["The confidential transfer fee authority"]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 37
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "confidentialTransferFeeDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 4
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "confidentialTransferFeeDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "disableHarvestToMint",
        docs: [
          "Configure a confidential transfer fee mint to reject any harvested confidential fees."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The token mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: ["The confidential transfer fee authority"]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 37
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "confidentialTransferFeeDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 5
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "confidentialTransferFeeDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "withdrawExcessLamports",
        docs: [
          "This instruction is to be used to rescue SOLs sent to any TokenProgram",
          "owned account by sending them to any other account, leaving behind only",
          "lamports for rent exemption."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "sourceAccount",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["Account holding excess lamports."]
          },
          {
            kind: "instructionAccountNode",
            name: "destinationAccount",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["Destination account for withdrawn lamports."]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The source account's owner/delegate or its multisignature account."
            ],
            defaultValue: {
              kind: "identityValueNode"
            }
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 38
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "initializeMetadataPointer",
        docs: [
          "Initialize a new mint with a metadata pointer",
          "",
          "Fails if the mint has already been initialized, so must be called before",
          "`InitializeMint`.",
          "",
          "The mint must have exactly enough space allocated for the base mint (82",
          "bytes), plus 83 bytes of padding, 1 byte reserved for the account type,",
          "then space required for this extension, plus any others."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint to initialize."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 39
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "metadataPointerDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 0
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "authority",
            docs: [
              "The public key for the account that can update the metadata address."
            ],
            type: {
              kind: "zeroableOptionTypeNode",
              item: {
                kind: "publicKeyTypeNode"
              }
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "metadataAddress",
            docs: ["The account address that holds the metadata."],
            type: {
              kind: "zeroableOptionTypeNode",
              item: {
                kind: "publicKeyTypeNode"
              }
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "metadataPointerDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "updateMetadataPointer",
        docs: [
          "Update the metadata pointer address. Only supported for mints that",
          "include the `MetadataPointer` extension."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint to initialize."]
          },
          {
            kind: "instructionAccountNode",
            name: "metadataPointerAuthority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The metadata pointer authority or its multisignature account."
            ]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 39
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "metadataPointerDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 1
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "metadataAddress",
            docs: ["The new account address that holds the metadata."],
            type: {
              kind: "zeroableOptionTypeNode",
              item: {
                kind: "publicKeyTypeNode"
              }
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "metadataPointerDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "initializeGroupPointer",
        docs: [
          "Initialize a new mint with a group pointer",
          "",
          "Fails if the mint has already been initialized, so must be called before",
          "`InitializeMint`.",
          "",
          "The mint must have exactly enough space allocated for the base mint (82",
          "bytes), plus 83 bytes of padding, 1 byte reserved for the account type,",
          "then space required for this extension, plus any others."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint to initialize."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 40
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "groupPointerDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 0
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "authority",
            docs: [
              "The public key for the account that can update the group address."
            ],
            type: {
              kind: "zeroableOptionTypeNode",
              item: {
                kind: "publicKeyTypeNode"
              }
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "groupAddress",
            docs: ["The account address that holds the group."],
            type: {
              kind: "zeroableOptionTypeNode",
              item: {
                kind: "publicKeyTypeNode"
              }
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "groupPointerDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "updateGroupPointer",
        docs: [
          "Update the group pointer address. Only supported for mints that",
          "include the `GroupPointer` extension."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint to initialize."]
          },
          {
            kind: "instructionAccountNode",
            name: "groupPointerAuthority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The group pointer authority or its multisignature account."
            ]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 40
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "groupPointerDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 1
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "groupAddress",
            docs: [
              "The new account address that holds the group configurations."
            ],
            type: {
              kind: "zeroableOptionTypeNode",
              item: {
                kind: "publicKeyTypeNode"
              }
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "groupPointerDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "initializeGroupMemberPointer",
        docs: [
          "Initialize a new mint with a group member pointer",
          "",
          "Fails if the mint has already been initialized, so must be called before",
          "`InitializeMint`.",
          "",
          "The mint must have exactly enough space allocated for the base mint (82",
          "bytes), plus 83 bytes of padding, 1 byte reserved for the account type,",
          "then space required for this extension, plus any others."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint to initialize."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 41
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "groupMemberPointerDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 0
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "authority",
            docs: [
              "The public key for the account that can update the group member address."
            ],
            type: {
              kind: "zeroableOptionTypeNode",
              item: {
                kind: "publicKeyTypeNode"
              }
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "memberAddress",
            docs: ["The account address that holds the member."],
            type: {
              kind: "zeroableOptionTypeNode",
              item: {
                kind: "publicKeyTypeNode"
              }
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "groupMemberPointerDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "updateGroupMemberPointer",
        docs: [
          "Update the group member pointer address. Only supported for mints that",
          "include the `GroupMemberPointer` extension."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint to initialize."]
          },
          {
            kind: "instructionAccountNode",
            name: "groupMemberPointerAuthority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: [
              "The group member pointer authority or its multisignature account."
            ]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 41
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "groupMemberPointerDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 1
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "memberAddress",
            docs: ["The new account address that holds the member."],
            type: {
              kind: "zeroableOptionTypeNode",
              item: {
                kind: "publicKeyTypeNode"
              }
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "groupMemberPointerDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "initializeScaledUiAmountMint",
        docs: [
          "Initialize a new mint with the `ScaledUiAmount` extension.",
          "",
          "Fails if the mint has already been initialized, so must be called before `InitializeMint`.",
          "",
          "The mint must have exactly enough space allocated for the base mint (82 bytes),",
          "plus 83 bytes of padding, 1 byte reserved for the account type,",
          "then space required for this extension, plus any others."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint to initialize."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 43
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "scaledUiAmountMintDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 0
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "authority",
            docs: ["The authority that can update the multiplier"],
            type: {
              kind: "zeroableOptionTypeNode",
              item: {
                kind: "publicKeyTypeNode"
              }
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "multiplier",
            docs: ["The initial multiplier for the scaled UI extension"],
            type: {
              kind: "numberTypeNode",
              format: "f64",
              endian: "le"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "scaledUiAmountMintDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "updateMultiplierScaledUiMint",
        docs: [
          "Update the multiplier. Only supported for mints that include the",
          "`ScaledUiAmountConfig` extension.",
          "You can set a specific timestamp for the multiplier to take effect."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: true,
            isSigner: "either",
            isOptional: false,
            docs: ["The multiplier authority."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 43
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "scaledUiAmountMintDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 1
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "multiplier",
            docs: ["The new multiplier for the scaled UI extension"],
            type: {
              kind: "numberTypeNode",
              format: "f64",
              endian: "le"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "effectiveTimestamp",
            docs: [
              "The timestamp at which the new multiplier will take effect"
            ],
            type: {
              kind: "numberTypeNode",
              format: "i64",
              endian: "le"
            }
          }
        ],
        remainingAccounts: [
          {
            kind: "instructionRemainingAccountsNode",
            isOptional: true,
            isSigner: true,
            docs: [],
            value: {
              kind: "argumentValueNode",
              name: "multiSigners"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "scaledUiAmountMintDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "initializePausableConfig",
        docs: [
          "Initialize a new mint with the `Pausable` extension.",
          "",
          "Fails if the mint has already been initialized, so must be called before `InitializeMint`."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 44
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "pausableDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 0
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "authority",
            docs: ["The authority that can pause and resume the mint."],
            type: {
              kind: "zeroableOptionTypeNode",
              item: {
                kind: "publicKeyTypeNode"
              }
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "pausableDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "pause",
        docs: ["Pause the mint.", "", "Fails if the mint is not pausable."],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: ["The pausable authority that can pause the mint."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 44
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "pausableDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 1
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "pausableDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "resume",
        docs: ["Resume the mint.", "", "Fails if the mint is not pausable."],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: ["The mint."]
          },
          {
            kind: "instructionAccountNode",
            name: "authority",
            isWritable: false,
            isSigner: "either",
            isOptional: false,
            docs: ["The pausable authority that can resume the mint."]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 44
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "pausableDiscriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "numberTypeNode",
              format: "u8",
              endian: "le"
            },
            defaultValue: {
              kind: "numberValueNode",
              number: 2
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          },
          {
            kind: "fieldDiscriminatorNode",
            name: "pausableDiscriminator",
            offset: 1
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "initializeTokenMetadata",
        docs: [
          "Initializes a TLV entry with the basic token-metadata fields.",
          "",
          "Assumes that the provided mint is an SPL token mint, that the metadata",
          "account is allocated and assigned to the program, and that the metadata",
          "account has enough lamports to cover the rent-exempt reserve."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "metadata",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: []
          },
          {
            kind: "instructionAccountNode",
            name: "updateAuthority",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: []
          },
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: []
          },
          {
            kind: "instructionAccountNode",
            name: "mintAuthority",
            isWritable: false,
            isSigner: true,
            isOptional: false,
            docs: []
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "bytesTypeNode"
            },
            defaultValue: {
              kind: "bytesValueNode",
              data: "d2e11ea258b84d8d",
              encoding: "base16"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "name",
            docs: ["Longer name of the token."],
            type: {
              kind: "sizePrefixTypeNode",
              type: {
                kind: "stringTypeNode",
                encoding: "utf8"
              },
              prefix: {
                kind: "numberTypeNode",
                format: "u32",
                endian: "le"
              }
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "symbol",
            docs: ["Shortened symbol of the token."],
            type: {
              kind: "sizePrefixTypeNode",
              type: {
                kind: "stringTypeNode",
                encoding: "utf8"
              },
              prefix: {
                kind: "numberTypeNode",
                format: "u32",
                endian: "le"
              }
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "uri",
            docs: ["URI pointing to more metadata (image, video, etc.)."],
            type: {
              kind: "sizePrefixTypeNode",
              type: {
                kind: "stringTypeNode",
                encoding: "utf8"
              },
              prefix: {
                kind: "numberTypeNode",
                format: "u32",
                endian: "le"
              }
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "updateTokenMetadataField",
        docs: [
          "Updates a field in a token-metadata account.",
          "",
          "The field can be one of the required fields (name, symbol, URI), or a",
          'totally new field denoted by a "key" string.',
          "",
          "By the end of the instruction, the metadata account must be properly",
          "resized based on the new size of the TLV entry.",
          "  * If the new size is larger, the program must first reallocate to",
          "    avoid",
          "  overwriting other TLV entries.",
          "  * If the new size is smaller, the program must reallocate at the end",
          "  so that it's possible to iterate over TLV entries"
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "metadata",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: []
          },
          {
            kind: "instructionAccountNode",
            name: "updateAuthority",
            isWritable: false,
            isSigner: true,
            isOptional: false,
            docs: []
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "bytesTypeNode"
            },
            defaultValue: {
              kind: "bytesValueNode",
              data: "dde9312db5cadcc8",
              encoding: "base16"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "field",
            docs: ["Field to update in the metadata."],
            type: {
              kind: "definedTypeLinkNode",
              name: "tokenMetadataField"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "value",
            docs: ["Value to write for the field."],
            type: {
              kind: "sizePrefixTypeNode",
              type: {
                kind: "stringTypeNode",
                encoding: "utf8"
              },
              prefix: {
                kind: "numberTypeNode",
                format: "u32",
                endian: "le"
              }
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "removeTokenMetadataKey",
        docs: [
          "Removes a key-value pair in a token-metadata account.",
          "",
          "This only applies to additional fields, and not the base name / symbol /",
          "URI fields.",
          "",
          "By the end of the instruction, the metadata account must be properly",
          "resized at the end based on the new size of the TLV entry."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "metadata",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: []
          },
          {
            kind: "instructionAccountNode",
            name: "updateAuthority",
            isWritable: false,
            isSigner: true,
            isOptional: false,
            docs: []
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "bytesTypeNode"
            },
            defaultValue: {
              kind: "bytesValueNode",
              data: "ea122038598d25b5",
              encoding: "base16"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "idempotent",
            docs: [
              "If the idempotent flag is set to true, then the instruction will not",
              "error if the key does not exist"
            ],
            type: {
              kind: "booleanTypeNode",
              size: {
                kind: "numberTypeNode",
                format: "u8",
                endian: "le"
              }
            },
            defaultValue: {
              kind: "booleanValueNode",
              boolean: false
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "key",
            docs: ["Key to remove in the additional metadata portion."],
            type: {
              kind: "sizePrefixTypeNode",
              type: {
                kind: "stringTypeNode",
                encoding: "utf8"
              },
              prefix: {
                kind: "numberTypeNode",
                format: "u32",
                endian: "le"
              }
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "updateTokenMetadataUpdateAuthority",
        docs: ["Updates the token-metadata authority."],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "metadata",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: []
          },
          {
            kind: "instructionAccountNode",
            name: "updateAuthority",
            isWritable: false,
            isSigner: true,
            isOptional: false,
            docs: []
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "bytesTypeNode"
            },
            defaultValue: {
              kind: "bytesValueNode",
              data: "d7e4a6e45464567b",
              encoding: "base16"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "newUpdateAuthority",
            docs: [
              "New authority for the token metadata, or unset if `None`"
            ],
            type: {
              kind: "zeroableOptionTypeNode",
              item: {
                kind: "publicKeyTypeNode"
              }
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "emitTokenMetadata",
        docs: [
          "Emits the token-metadata as return data",
          "",
          "The format of the data emitted follows exactly the `TokenMetadata`",
          "struct, but it's possible that the account data is stored in another",
          "format by the program.",
          "",
          "With this instruction, a program that implements the token-metadata",
          "interface can return `TokenMetadata` without adhering to the specific",
          "byte layout of the `TokenMetadata` struct in any accounts."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "metadata",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: []
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "bytesTypeNode"
            },
            defaultValue: {
              kind: "bytesValueNode",
              data: "faa6b4fa0d0cb846",
              encoding: "base16"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "start",
            docs: ["Start of range of data to emit"],
            type: {
              kind: "optionTypeNode",
              item: {
                kind: "numberTypeNode",
                format: "u64",
                endian: "le"
              },
              prefix: {
                kind: "numberTypeNode",
                format: "u8",
                endian: "le"
              }
            },
            defaultValue: {
              kind: "noneValueNode"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "end",
            docs: ["End of range of data to emit"],
            type: {
              kind: "optionTypeNode",
              item: {
                kind: "numberTypeNode",
                format: "u64",
                endian: "le"
              },
              prefix: {
                kind: "numberTypeNode",
                format: "u8",
                endian: "le"
              }
            },
            defaultValue: {
              kind: "noneValueNode"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "initializeTokenGroup",
        docs: [
          "Initialize a new `Group`",
          "",
          "Assumes one has already initialized a mint for the group."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "group",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: []
          },
          {
            kind: "instructionAccountNode",
            name: "mint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: []
          },
          {
            kind: "instructionAccountNode",
            name: "mintAuthority",
            isWritable: false,
            isSigner: true,
            isOptional: false,
            docs: []
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "bytesTypeNode"
            },
            defaultValue: {
              kind: "bytesValueNode",
              data: "79716c2736330004",
              encoding: "base16"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "updateAuthority",
            docs: ["Update authority for the group"],
            type: {
              kind: "zeroableOptionTypeNode",
              item: {
                kind: "publicKeyTypeNode"
              }
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "maxSize",
            docs: ["The maximum number of group members"],
            type: {
              kind: "numberTypeNode",
              format: "u64",
              endian: "le"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "updateTokenGroupMaxSize",
        docs: ["Update the max size of a `Group`."],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "group",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: []
          },
          {
            kind: "instructionAccountNode",
            name: "updateAuthority",
            isWritable: false,
            isSigner: true,
            isOptional: false,
            docs: []
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "bytesTypeNode"
            },
            defaultValue: {
              kind: "bytesValueNode",
              data: "6c25ab8ff81e126e",
              encoding: "base16"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "maxSize",
            docs: ["New max size for the group"],
            type: {
              kind: "numberTypeNode",
              format: "u64",
              endian: "le"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "updateTokenGroupUpdateAuthority",
        docs: ["Update the authority of a `Group`."],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "group",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: []
          },
          {
            kind: "instructionAccountNode",
            name: "updateAuthority",
            isWritable: false,
            isSigner: true,
            isOptional: false,
            docs: ["Current update authority"]
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "bytesTypeNode"
            },
            defaultValue: {
              kind: "bytesValueNode",
              data: "a1695801edddd8cb",
              encoding: "base16"
            }
          },
          {
            kind: "instructionArgumentNode",
            name: "newUpdateAuthority",
            docs: ["New authority for the group, or unset if `None`"],
            type: {
              kind: "zeroableOptionTypeNode",
              item: {
                kind: "publicKeyTypeNode"
              }
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      },
      {
        kind: "instructionNode",
        name: "initializeTokenGroupMember",
        docs: [
          "Initialize a new `Member` of a `Group`",
          "",
          "Assumes the `Group` has already been initialized,",
          "as well as the mint for the member."
        ],
        optionalAccountStrategy: "programId",
        accounts: [
          {
            kind: "instructionAccountNode",
            name: "member",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: []
          },
          {
            kind: "instructionAccountNode",
            name: "memberMint",
            isWritable: false,
            isSigner: false,
            isOptional: false,
            docs: []
          },
          {
            kind: "instructionAccountNode",
            name: "memberMintAuthority",
            isWritable: false,
            isSigner: true,
            isOptional: false,
            docs: []
          },
          {
            kind: "instructionAccountNode",
            name: "group",
            isWritable: true,
            isSigner: false,
            isOptional: false,
            docs: []
          },
          {
            kind: "instructionAccountNode",
            name: "groupUpdateAuthority",
            isWritable: false,
            isSigner: true,
            isOptional: false,
            docs: []
          }
        ],
        arguments: [
          {
            kind: "instructionArgumentNode",
            name: "discriminator",
            defaultValueStrategy: "omitted",
            docs: [],
            type: {
              kind: "bytesTypeNode"
            },
            defaultValue: {
              kind: "bytesValueNode",
              data: "9820deb0dfed7486",
              encoding: "base16"
            }
          }
        ],
        discriminators: [
          {
            kind: "fieldDiscriminatorNode",
            name: "discriminator",
            offset: 0
          }
        ]
      }
    ],
    definedTypes: [
      {
        kind: "definedTypeNode",
        name: "accountState",
        docs: [],
        type: {
          kind: "enumTypeNode",
          variants: [
            {
              kind: "enumEmptyVariantTypeNode",
              name: "uninitialized"
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "initialized"
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "frozen"
            }
          ],
          size: {
            kind: "numberTypeNode",
            format: "u8",
            endian: "le"
          }
        }
      },
      {
        kind: "definedTypeNode",
        name: "authorityType",
        docs: [],
        type: {
          kind: "enumTypeNode",
          variants: [
            {
              kind: "enumEmptyVariantTypeNode",
              name: "mintTokens"
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "freezeAccount"
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "accountOwner"
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "closeAccount"
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "transferFeeConfig"
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "withheldWithdraw"
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "closeMint"
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "interestRate"
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "permanentDelegate"
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "confidentialTransferMint"
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "transferHookProgramId"
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "confidentialTransferFeeConfig"
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "metadataPointer"
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "groupPointer"
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "groupMemberPointer"
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "scaledUiAmount"
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "pause"
            }
          ],
          size: {
            kind: "numberTypeNode",
            format: "u8",
            endian: "le"
          }
        }
      },
      {
        kind: "definedTypeNode",
        name: "transferFee",
        docs: [],
        type: {
          kind: "structTypeNode",
          fields: [
            {
              kind: "structFieldTypeNode",
              name: "epoch",
              docs: ["First epoch where the transfer fee takes effect."],
              type: {
                kind: "numberTypeNode",
                format: "u64",
                endian: "le"
              }
            },
            {
              kind: "structFieldTypeNode",
              name: "maximumFee",
              docs: [
                "Maximum fee assessed on transfers, expressed as an amount of tokens."
              ],
              type: {
                kind: "numberTypeNode",
                format: "u64",
                endian: "le"
              }
            },
            {
              kind: "structFieldTypeNode",
              name: "transferFeeBasisPoints",
              docs: [
                "Amount of transfer collected as fees, expressed as basis points of the",
                "transfer amount, ie. increments of 0.01%."
              ],
              type: {
                kind: "amountTypeNode",
                decimals: 2,
                unit: "%",
                number: {
                  kind: "numberTypeNode",
                  format: "u16",
                  endian: "le"
                }
              }
            }
          ]
        }
      },
      {
        kind: "definedTypeNode",
        name: "encryptedBalance",
        docs: ["ElGamal ciphertext containing an account balance."],
        type: {
          kind: "fixedSizeTypeNode",
          size: 64,
          type: {
            kind: "bytesTypeNode"
          }
        }
      },
      {
        kind: "definedTypeNode",
        name: "decryptableBalance",
        docs: ["Authenticated encryption containing an account balance."],
        type: {
          kind: "fixedSizeTypeNode",
          size: 36,
          type: {
            kind: "bytesTypeNode"
          }
        }
      },
      {
        kind: "definedTypeNode",
        name: "extension",
        docs: [],
        type: {
          kind: "enumTypeNode",
          variants: [
            {
              kind: "enumEmptyVariantTypeNode",
              name: "uninitialized"
            },
            {
              kind: "enumStructVariantTypeNode",
              name: "transferFeeConfig",
              struct: {
                kind: "sizePrefixTypeNode",
                type: {
                  kind: "structTypeNode",
                  fields: [
                    {
                      kind: "structFieldTypeNode",
                      name: "transferFeeConfigAuthority",
                      docs: ["Optional authority to set the fee."],
                      type: {
                        kind: "publicKeyTypeNode"
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "withdrawWithheldAuthority",
                      docs: [
                        "Withdraw from mint instructions must be signed by this key."
                      ],
                      type: {
                        kind: "publicKeyTypeNode"
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "withheldAmount",
                      docs: [
                        "Withheld transfer fee tokens that have been moved to the mint for withdrawal."
                      ],
                      type: {
                        kind: "numberTypeNode",
                        format: "u64",
                        endian: "le"
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "olderTransferFee",
                      docs: [
                        "Older transfer fee, used if the current epoch < newerTransferFee.epoch."
                      ],
                      type: {
                        kind: "definedTypeLinkNode",
                        name: "transferFee"
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "newerTransferFee",
                      docs: [
                        "Newer transfer fee, used if the current epoch >= newerTransferFee.epoch."
                      ],
                      type: {
                        kind: "definedTypeLinkNode",
                        name: "transferFee"
                      }
                    }
                  ]
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u16",
                  endian: "le"
                }
              }
            },
            {
              kind: "enumStructVariantTypeNode",
              name: "transferFeeAmount",
              struct: {
                kind: "sizePrefixTypeNode",
                type: {
                  kind: "structTypeNode",
                  fields: [
                    {
                      kind: "structFieldTypeNode",
                      name: "withheldAmount",
                      docs: [
                        "Withheld transfer fee tokens that can be claimed by the fee authority."
                      ],
                      type: {
                        kind: "numberTypeNode",
                        format: "u64",
                        endian: "le"
                      }
                    }
                  ]
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u16",
                  endian: "le"
                }
              }
            },
            {
              kind: "enumStructVariantTypeNode",
              name: "mintCloseAuthority",
              struct: {
                kind: "sizePrefixTypeNode",
                type: {
                  kind: "structTypeNode",
                  fields: [
                    {
                      kind: "structFieldTypeNode",
                      name: "closeAuthority",
                      docs: [],
                      type: {
                        kind: "publicKeyTypeNode"
                      }
                    }
                  ]
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u16",
                  endian: "le"
                }
              }
            },
            {
              kind: "enumStructVariantTypeNode",
              name: "confidentialTransferMint",
              struct: {
                kind: "sizePrefixTypeNode",
                type: {
                  kind: "structTypeNode",
                  fields: [
                    {
                      kind: "structFieldTypeNode",
                      name: "authority",
                      docs: [
                        "Authority to modify the `ConfidentialTransferMint` configuration and to",
                        "approve new accounts (if `auto_approve_new_accounts` is true).",
                        "",
                        "The legacy Token Multisig account is not supported as the authority."
                      ],
                      type: {
                        kind: "zeroableOptionTypeNode",
                        item: {
                          kind: "publicKeyTypeNode"
                        }
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "autoApproveNewAccounts",
                      docs: [
                        "Indicate if newly configured accounts must be approved by the",
                        "`authority` before they may be used by the user.",
                        "",
                        "* If `true`, no approval is required and new accounts may be used immediately.",
                        "* If `false`, the authority must approve newly configured accounts (see",
                        "  `ConfidentialTransferInstruction::ConfigureAccount`)."
                      ],
                      type: {
                        kind: "booleanTypeNode",
                        size: {
                          kind: "numberTypeNode",
                          format: "u8",
                          endian: "le"
                        }
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "auditorElgamalPubkey",
                      docs: [
                        "Authority to decode any transfer amount in a confidential transfer."
                      ],
                      type: {
                        kind: "zeroableOptionTypeNode",
                        item: {
                          kind: "publicKeyTypeNode"
                        }
                      }
                    }
                  ]
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u16",
                  endian: "le"
                }
              }
            },
            {
              kind: "enumStructVariantTypeNode",
              name: "confidentialTransferAccount",
              struct: {
                kind: "sizePrefixTypeNode",
                type: {
                  kind: "structTypeNode",
                  fields: [
                    {
                      kind: "structFieldTypeNode",
                      name: "approved",
                      docs: [
                        "`true` if this account has been approved for use. All confidential",
                        "transfer operations for the account will fail until approval is granted."
                      ],
                      type: {
                        kind: "booleanTypeNode",
                        size: {
                          kind: "numberTypeNode",
                          format: "u8",
                          endian: "le"
                        }
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "elgamalPubkey",
                      docs: [
                        "The public key associated with ElGamal encryption."
                      ],
                      type: {
                        kind: "publicKeyTypeNode"
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "pendingBalanceLow",
                      docs: [
                        "The low 16 bits of the pending balance (encrypted by `elgamal_pubkey`)."
                      ],
                      type: {
                        kind: "definedTypeLinkNode",
                        name: "encryptedBalance"
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "pendingBalanceHigh",
                      docs: [
                        "The high 32 bits of the pending balance (encrypted by `elgamal_pubkey`)."
                      ],
                      type: {
                        kind: "definedTypeLinkNode",
                        name: "encryptedBalance"
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "availableBalance",
                      docs: [
                        "The available balance (encrypted by `encrypiton_pubkey`)."
                      ],
                      type: {
                        kind: "definedTypeLinkNode",
                        name: "encryptedBalance"
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "decryptableAvailableBalance",
                      docs: ["The decryptable available balance."],
                      type: {
                        kind: "definedTypeLinkNode",
                        name: "decryptableBalance"
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "allowConfidentialCredits",
                      docs: [
                        "If `false`, the extended account rejects any incoming confidential transfers."
                      ],
                      type: {
                        kind: "booleanTypeNode",
                        size: {
                          kind: "numberTypeNode",
                          format: "u8",
                          endian: "le"
                        }
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "allowNonConfidentialCredits",
                      docs: [
                        "If `false`, the base account rejects any incoming transfers."
                      ],
                      type: {
                        kind: "booleanTypeNode",
                        size: {
                          kind: "numberTypeNode",
                          format: "u8",
                          endian: "le"
                        }
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "pendingBalanceCreditCounter",
                      docs: [
                        "The total number of `Deposit` and `Transfer` instructions that have credited `pending_balance`."
                      ],
                      type: {
                        kind: "numberTypeNode",
                        format: "u64",
                        endian: "le"
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "maximumPendingBalanceCreditCounter",
                      docs: [
                        "The maximum number of `Deposit` and `Transfer` instructions that can",
                        "credit `pending_balance` before the `ApplyPendingBalance`",
                        "instruction is executed."
                      ],
                      type: {
                        kind: "numberTypeNode",
                        format: "u64",
                        endian: "le"
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "expectedPendingBalanceCreditCounter",
                      docs: [
                        "The `expected_pending_balance_credit_counter` value that was included in",
                        "the last `ApplyPendingBalance` instruction."
                      ],
                      type: {
                        kind: "numberTypeNode",
                        format: "u64",
                        endian: "le"
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "actualPendingBalanceCreditCounter",
                      docs: [
                        "The actual `pending_balance_credit_counter` when the last",
                        "`ApplyPendingBalance` instruction was executed."
                      ],
                      type: {
                        kind: "numberTypeNode",
                        format: "u64",
                        endian: "le"
                      }
                    }
                  ]
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u16",
                  endian: "le"
                }
              }
            },
            {
              kind: "enumStructVariantTypeNode",
              name: "defaultAccountState",
              struct: {
                kind: "sizePrefixTypeNode",
                type: {
                  kind: "structTypeNode",
                  fields: [
                    {
                      kind: "structFieldTypeNode",
                      name: "state",
                      docs: [],
                      type: {
                        kind: "definedTypeLinkNode",
                        name: "accountState"
                      }
                    }
                  ]
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u16",
                  endian: "le"
                }
              }
            },
            {
              kind: "enumStructVariantTypeNode",
              name: "immutableOwner",
              struct: {
                kind: "sizePrefixTypeNode",
                type: {
                  kind: "structTypeNode",
                  fields: []
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u16",
                  endian: "le"
                }
              }
            },
            {
              kind: "enumStructVariantTypeNode",
              name: "memoTransfer",
              struct: {
                kind: "sizePrefixTypeNode",
                type: {
                  kind: "structTypeNode",
                  fields: [
                    {
                      kind: "structFieldTypeNode",
                      name: "requireIncomingTransferMemos",
                      docs: [
                        "Require transfers into this account to be accompanied by a memo."
                      ],
                      type: {
                        kind: "booleanTypeNode",
                        size: {
                          kind: "numberTypeNode",
                          format: "u8",
                          endian: "le"
                        }
                      }
                    }
                  ]
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u16",
                  endian: "le"
                }
              }
            },
            {
              kind: "enumStructVariantTypeNode",
              name: "nonTransferable",
              struct: {
                kind: "sizePrefixTypeNode",
                type: {
                  kind: "structTypeNode",
                  fields: []
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u16",
                  endian: "le"
                }
              }
            },
            {
              kind: "enumStructVariantTypeNode",
              name: "interestBearingConfig",
              struct: {
                kind: "sizePrefixTypeNode",
                type: {
                  kind: "structTypeNode",
                  fields: [
                    {
                      kind: "structFieldTypeNode",
                      name: "rateAuthority",
                      docs: [],
                      type: {
                        kind: "publicKeyTypeNode"
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "initializationTimestamp",
                      docs: [],
                      type: {
                        kind: "numberTypeNode",
                        format: "u64",
                        endian: "le"
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "preUpdateAverageRate",
                      docs: [],
                      type: {
                        kind: "numberTypeNode",
                        format: "i16",
                        endian: "le"
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "lastUpdateTimestamp",
                      docs: [],
                      type: {
                        kind: "numberTypeNode",
                        format: "u64",
                        endian: "le"
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "currentRate",
                      docs: [],
                      type: {
                        kind: "numberTypeNode",
                        format: "i16",
                        endian: "le"
                      }
                    }
                  ]
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u16",
                  endian: "le"
                }
              }
            },
            {
              kind: "enumStructVariantTypeNode",
              name: "cpiGuard",
              struct: {
                kind: "sizePrefixTypeNode",
                type: {
                  kind: "structTypeNode",
                  fields: [
                    {
                      kind: "structFieldTypeNode",
                      name: "lockCpi",
                      docs: [
                        "Lock certain token operations from taking place within CPI for this account."
                      ],
                      type: {
                        kind: "booleanTypeNode",
                        size: {
                          kind: "numberTypeNode",
                          format: "u8",
                          endian: "le"
                        }
                      }
                    }
                  ]
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u16",
                  endian: "le"
                }
              }
            },
            {
              kind: "enumStructVariantTypeNode",
              name: "permanentDelegate",
              struct: {
                kind: "sizePrefixTypeNode",
                type: {
                  kind: "structTypeNode",
                  fields: [
                    {
                      kind: "structFieldTypeNode",
                      name: "delegate",
                      docs: [],
                      type: {
                        kind: "publicKeyTypeNode"
                      }
                    }
                  ]
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u16",
                  endian: "le"
                }
              }
            },
            {
              kind: "enumStructVariantTypeNode",
              name: "nonTransferableAccount",
              struct: {
                kind: "sizePrefixTypeNode",
                type: {
                  kind: "structTypeNode",
                  fields: []
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u16",
                  endian: "le"
                }
              }
            },
            {
              kind: "enumStructVariantTypeNode",
              name: "transferHook",
              struct: {
                kind: "sizePrefixTypeNode",
                type: {
                  kind: "structTypeNode",
                  fields: [
                    {
                      kind: "structFieldTypeNode",
                      name: "authority",
                      docs: ["The transfer hook update authority."],
                      type: {
                        kind: "publicKeyTypeNode"
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "programId",
                      docs: ["The transfer hook program account."],
                      type: {
                        kind: "publicKeyTypeNode"
                      }
                    }
                  ]
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u16",
                  endian: "le"
                }
              }
            },
            {
              kind: "enumStructVariantTypeNode",
              name: "transferHookAccount",
              struct: {
                kind: "sizePrefixTypeNode",
                type: {
                  kind: "structTypeNode",
                  fields: [
                    {
                      kind: "structFieldTypeNode",
                      name: "transferring",
                      docs: [
                        "Whether or not this account is currently transferring tokens",
                        "True during the transfer hook cpi, otherwise false."
                      ],
                      type: {
                        kind: "booleanTypeNode",
                        size: {
                          kind: "numberTypeNode",
                          format: "u8",
                          endian: "le"
                        }
                      }
                    }
                  ]
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u16",
                  endian: "le"
                }
              }
            },
            {
              kind: "enumStructVariantTypeNode",
              name: "confidentialTransferFee",
              struct: {
                kind: "sizePrefixTypeNode",
                type: {
                  kind: "structTypeNode",
                  fields: [
                    {
                      kind: "structFieldTypeNode",
                      name: "authority",
                      docs: [
                        "Optional authority to set the withdraw withheld authority ElGamal key."
                      ],
                      type: {
                        kind: "zeroableOptionTypeNode",
                        item: {
                          kind: "publicKeyTypeNode"
                        }
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "elgamalPubkey",
                      docs: [
                        "Withheld fees from accounts must be encrypted with this ElGamal key.",
                        "",
                        "Note that whoever holds the ElGamal private key for this ElGamal public",
                        "key has the ability to decode any withheld fee amount that are",
                        "associated with accounts. When combined with the fee parameters, the",
                        "withheld fee amounts can reveal information about transfer amounts."
                      ],
                      type: {
                        kind: "publicKeyTypeNode"
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "harvestToMintEnabled",
                      docs: [
                        "If `false`, the harvest of withheld tokens to mint is rejected."
                      ],
                      type: {
                        kind: "booleanTypeNode",
                        size: {
                          kind: "numberTypeNode",
                          format: "u8",
                          endian: "le"
                        }
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "withheldAmount",
                      docs: [
                        "Withheld confidential transfer fee tokens that have been moved to the",
                        "mint for withdrawal."
                      ],
                      type: {
                        kind: "definedTypeLinkNode",
                        name: "encryptedBalance"
                      }
                    }
                  ]
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u16",
                  endian: "le"
                }
              }
            },
            {
              kind: "enumStructVariantTypeNode",
              name: "confidentialTransferFeeAmount",
              struct: {
                kind: "sizePrefixTypeNode",
                type: {
                  kind: "structTypeNode",
                  fields: [
                    {
                      kind: "structFieldTypeNode",
                      name: "withheldAmount",
                      docs: [
                        "Amount withheld during confidential transfers, to be harvest to the mint."
                      ],
                      type: {
                        kind: "definedTypeLinkNode",
                        name: "encryptedBalance"
                      }
                    }
                  ]
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u16",
                  endian: "le"
                }
              }
            },
            {
              kind: "enumStructVariantTypeNode",
              name: "metadataPointer",
              struct: {
                kind: "sizePrefixTypeNode",
                type: {
                  kind: "structTypeNode",
                  fields: [
                    {
                      kind: "structFieldTypeNode",
                      name: "authority",
                      docs: [
                        "Optional authority that can set the metadata address."
                      ],
                      type: {
                        kind: "zeroableOptionTypeNode",
                        item: {
                          kind: "publicKeyTypeNode"
                        }
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "metadataAddress",
                      docs: [
                        "Optional Account Address that holds the metadata."
                      ],
                      type: {
                        kind: "zeroableOptionTypeNode",
                        item: {
                          kind: "publicKeyTypeNode"
                        }
                      }
                    }
                  ]
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u16",
                  endian: "le"
                }
              }
            },
            {
              kind: "enumStructVariantTypeNode",
              name: "tokenMetadata",
              struct: {
                kind: "sizePrefixTypeNode",
                type: {
                  kind: "structTypeNode",
                  fields: [
                    {
                      kind: "structFieldTypeNode",
                      name: "updateAuthority",
                      docs: [
                        "The authority that can sign to update the metadata."
                      ],
                      type: {
                        kind: "zeroableOptionTypeNode",
                        item: {
                          kind: "publicKeyTypeNode"
                        }
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "mint",
                      docs: [
                        "The associated mint, used to counter spoofing to be sure that metadata belongs to a particular mint."
                      ],
                      type: {
                        kind: "publicKeyTypeNode"
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "name",
                      docs: ["The longer name of the token."],
                      type: {
                        kind: "sizePrefixTypeNode",
                        type: {
                          kind: "stringTypeNode",
                          encoding: "utf8"
                        },
                        prefix: {
                          kind: "numberTypeNode",
                          format: "u32",
                          endian: "le"
                        }
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "symbol",
                      docs: ["The shortened symbol for the token."],
                      type: {
                        kind: "sizePrefixTypeNode",
                        type: {
                          kind: "stringTypeNode",
                          encoding: "utf8"
                        },
                        prefix: {
                          kind: "numberTypeNode",
                          format: "u32",
                          endian: "le"
                        }
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "uri",
                      docs: ["The URI pointing to richer metadata."],
                      type: {
                        kind: "sizePrefixTypeNode",
                        type: {
                          kind: "stringTypeNode",
                          encoding: "utf8"
                        },
                        prefix: {
                          kind: "numberTypeNode",
                          format: "u32",
                          endian: "le"
                        }
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "additionalMetadata",
                      docs: [
                        "Any additional metadata about the token as key-value pairs."
                      ],
                      type: {
                        kind: "mapTypeNode",
                        key: {
                          kind: "sizePrefixTypeNode",
                          type: {
                            kind: "stringTypeNode",
                            encoding: "utf8"
                          },
                          prefix: {
                            kind: "numberTypeNode",
                            format: "u32",
                            endian: "le"
                          }
                        },
                        value: {
                          kind: "sizePrefixTypeNode",
                          type: {
                            kind: "stringTypeNode",
                            encoding: "utf8"
                          },
                          prefix: {
                            kind: "numberTypeNode",
                            format: "u32",
                            endian: "le"
                          }
                        },
                        count: {
                          kind: "prefixedCountNode",
                          prefix: {
                            kind: "numberTypeNode",
                            format: "u32",
                            endian: "le"
                          }
                        }
                      }
                    }
                  ]
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u16",
                  endian: "le"
                }
              }
            },
            {
              kind: "enumStructVariantTypeNode",
              name: "groupPointer",
              struct: {
                kind: "sizePrefixTypeNode",
                type: {
                  kind: "structTypeNode",
                  fields: [
                    {
                      kind: "structFieldTypeNode",
                      name: "authority",
                      docs: [
                        "Optional authority that can set the group address."
                      ],
                      type: {
                        kind: "zeroableOptionTypeNode",
                        item: {
                          kind: "publicKeyTypeNode"
                        }
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "groupAddress",
                      docs: [
                        "Optional account address that holds the group."
                      ],
                      type: {
                        kind: "zeroableOptionTypeNode",
                        item: {
                          kind: "publicKeyTypeNode"
                        }
                      }
                    }
                  ]
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u16",
                  endian: "le"
                }
              }
            },
            {
              kind: "enumStructVariantTypeNode",
              name: "tokenGroup",
              struct: {
                kind: "sizePrefixTypeNode",
                type: {
                  kind: "structTypeNode",
                  fields: [
                    {
                      kind: "structFieldTypeNode",
                      name: "updateAuthority",
                      docs: [
                        "The authority that can sign to update the group."
                      ],
                      type: {
                        kind: "zeroableOptionTypeNode",
                        item: {
                          kind: "publicKeyTypeNode"
                        }
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "mint",
                      docs: [
                        "The associated mint, used to counter spoofing to be sure that group belongs to a particular mint."
                      ],
                      type: {
                        kind: "publicKeyTypeNode"
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "size",
                      docs: ["The current number of group members."],
                      type: {
                        kind: "numberTypeNode",
                        format: "u64",
                        endian: "le"
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "maxSize",
                      docs: ["The maximum number of group members."],
                      type: {
                        kind: "numberTypeNode",
                        format: "u64",
                        endian: "le"
                      }
                    }
                  ]
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u16",
                  endian: "le"
                }
              }
            },
            {
              kind: "enumStructVariantTypeNode",
              name: "groupMemberPointer",
              struct: {
                kind: "sizePrefixTypeNode",
                type: {
                  kind: "structTypeNode",
                  fields: [
                    {
                      kind: "structFieldTypeNode",
                      name: "authority",
                      docs: [
                        "Optional authority that can set the member address."
                      ],
                      type: {
                        kind: "zeroableOptionTypeNode",
                        item: {
                          kind: "publicKeyTypeNode"
                        }
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "memberAddress",
                      docs: [
                        "Optional account address that holds the member."
                      ],
                      type: {
                        kind: "zeroableOptionTypeNode",
                        item: {
                          kind: "publicKeyTypeNode"
                        }
                      }
                    }
                  ]
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u16",
                  endian: "le"
                }
              }
            },
            {
              kind: "enumStructVariantTypeNode",
              name: "tokenGroupMember",
              struct: {
                kind: "sizePrefixTypeNode",
                type: {
                  kind: "structTypeNode",
                  fields: [
                    {
                      kind: "structFieldTypeNode",
                      name: "mint",
                      docs: [
                        "The associated mint, used to counter spoofing to be sure that member belongs to a particular mint."
                      ],
                      type: {
                        kind: "publicKeyTypeNode"
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "group",
                      docs: ["The pubkey of the `TokenGroup`."],
                      type: {
                        kind: "publicKeyTypeNode"
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "memberNumber",
                      docs: ["The member number."],
                      type: {
                        kind: "numberTypeNode",
                        format: "u64",
                        endian: "le"
                      }
                    }
                  ]
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u16",
                  endian: "le"
                }
              }
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "confidentialMintBurn"
            },
            {
              kind: "enumStructVariantTypeNode",
              name: "scaledUiAmountConfig",
              struct: {
                kind: "sizePrefixTypeNode",
                type: {
                  kind: "structTypeNode",
                  fields: [
                    {
                      kind: "structFieldTypeNode",
                      name: "authority",
                      docs: [],
                      type: {
                        kind: "publicKeyTypeNode"
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "multiplier",
                      docs: [],
                      type: {
                        kind: "numberTypeNode",
                        format: "f64",
                        endian: "le"
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "newMultiplierEffectiveTimestamp",
                      docs: [],
                      type: {
                        kind: "numberTypeNode",
                        format: "u64",
                        endian: "le"
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "newMultiplier",
                      docs: [],
                      type: {
                        kind: "numberTypeNode",
                        format: "f64",
                        endian: "le"
                      }
                    }
                  ]
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u16",
                  endian: "le"
                }
              }
            },
            {
              kind: "enumStructVariantTypeNode",
              name: "pausableConfig",
              struct: {
                kind: "sizePrefixTypeNode",
                type: {
                  kind: "structTypeNode",
                  fields: [
                    {
                      kind: "structFieldTypeNode",
                      name: "authority",
                      docs: [],
                      type: {
                        kind: "zeroableOptionTypeNode",
                        item: {
                          kind: "publicKeyTypeNode"
                        }
                      }
                    },
                    {
                      kind: "structFieldTypeNode",
                      name: "paused",
                      docs: [],
                      type: {
                        kind: "booleanTypeNode",
                        size: {
                          kind: "numberTypeNode",
                          format: "u8",
                          endian: "le"
                        }
                      }
                    }
                  ]
                },
                prefix: {
                  kind: "numberTypeNode",
                  format: "u16",
                  endian: "le"
                }
              }
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "pausableAccount"
            }
          ],
          size: {
            kind: "numberTypeNode",
            format: "u16",
            endian: "le"
          }
        }
      },
      {
        kind: "definedTypeNode",
        name: "extensionType",
        docs: [
          "Extensions that can be applied to mints or accounts.  Mint extensions must",
          "only be applied to mint accounts, and account extensions must only be",
          "applied to token holding accounts."
        ],
        type: {
          kind: "enumTypeNode",
          variants: [
            {
              kind: "enumEmptyVariantTypeNode",
              name: "uninitialized",
              docs: [
                "Used as padding if the account size would otherwise be 355, same as a multisig"
              ]
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "transferFeeConfig",
              docs: [
                "Includes transfer fee rate info and accompanying authorities to withdraw",
                "and set the fee"
              ]
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "transferFeeAmount",
              docs: ["Includes withheld transfer fees"]
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "mintCloseAuthority",
              docs: ["Includes an optional mint close authority"]
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "confidentialTransferMint",
              docs: ["Auditor configuration for confidential transfers"]
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "confidentialTransferAccount",
              docs: ["State for confidential transfers"]
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "defaultAccountState",
              docs: ["Specifies the default Account::state for new Accounts"]
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "immutableOwner",
              docs: [
                "Indicates that the Account owner authority cannot be changed"
              ]
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "memoTransfer",
              docs: ["Require inbound transfers to have memo"]
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "nonTransferable",
              docs: [
                "Indicates that the tokens from this mint can't be transferred"
              ]
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "interestBearingConfig",
              docs: ["Tokens accrue interest over time,"]
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "cpiGuard",
              docs: [
                "Locks privileged token operations from happening via CPI"
              ]
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "permanentDelegate",
              docs: ["Includes an optional permanent delegate"]
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "nonTransferableAccount",
              docs: [
                "Indicates that the tokens in this account belong to a non-transferable",
                "mint"
              ]
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "transferHook",
              docs: [
                'Mint requires a CPI to a program implementing the "transfer hook"',
                "interface"
              ]
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "transferHookAccount",
              docs: [
                "Indicates that the tokens in this account belong to a mint with a",
                "transfer hook"
              ]
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "confidentialTransferFee",
              docs: [
                "Includes encrypted withheld fees and the encryption public that they are",
                "encrypted under"
              ]
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "confidentialTransferFeeAmount",
              docs: ["Includes confidential withheld transfer fees"]
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "scaledUiAmountConfig",
              docs: ["Tokens have a scaled UI amount"]
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "pausableConfig",
              docs: ["Mint contains pausable configuration"]
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "pausableAccount",
              docs: ["Account contains pausable configuration"]
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "metadataPointer",
              docs: [
                "Mint contains a pointer to another account (or the same account) that",
                "holds metadata"
              ]
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "tokenMetadata",
              docs: ["Mint contains token-metadata"]
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "groupPointer",
              docs: [
                "Mint contains a pointer to another account (or the same account) that",
                "holds group configurations"
              ]
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "tokenGroup",
              docs: ["Mint contains token group configurations"]
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "groupMemberPointer",
              docs: [
                "Mint contains a pointer to another account (or the same account) that",
                "holds group member configurations"
              ]
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "tokenGroupMember",
              docs: ["Mint contains token group member configurations"]
            }
          ],
          size: {
            kind: "numberTypeNode",
            format: "u16",
            endian: "le"
          }
        }
      },
      {
        kind: "definedTypeNode",
        name: "tokenMetadataField",
        docs: ["Fields in the metadata account, used for updating."],
        type: {
          kind: "enumTypeNode",
          variants: [
            {
              kind: "enumEmptyVariantTypeNode",
              name: "name",
              docs: ["The name field, corresponding to `TokenMetadata.name`"]
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "symbol",
              docs: [
                "The symbol field, corresponding to `TokenMetadata.symbol`"
              ]
            },
            {
              kind: "enumEmptyVariantTypeNode",
              name: "uri",
              docs: ["The uri field, corresponding to `TokenMetadata.uri`"]
            },
            {
              kind: "enumTupleVariantTypeNode",
              name: "key",
              docs: [
                "A user field, whose key is given by the associated string"
              ],
              tuple: {
                kind: "tupleTypeNode",
                items: [
                  {
                    kind: "sizePrefixTypeNode",
                    type: {
                      kind: "stringTypeNode",
                      encoding: "utf8"
                    },
                    prefix: {
                      kind: "numberTypeNode",
                      format: "u32",
                      endian: "le"
                    }
                  }
                ]
              }
            }
          ],
          size: {
            kind: "numberTypeNode",
            format: "u8",
            endian: "le"
          }
        }
      }
    ],
    pdas: [],
    errors: [
      {
        kind: "errorNode",
        name: "notRentExempt",
        code: 0,
        message: "Lamport balance below rent-exempt threshold",
        docs: ["NotRentExempt: Lamport balance below rent-exempt threshold"]
      },
      {
        kind: "errorNode",
        name: "insufficientFunds",
        code: 1,
        message: "Insufficient funds",
        docs: ["InsufficientFunds: Insufficient funds"]
      },
      {
        kind: "errorNode",
        name: "invalidMint",
        code: 2,
        message: "Invalid Mint",
        docs: ["InvalidMint: Invalid Mint"]
      },
      {
        kind: "errorNode",
        name: "mintMismatch",
        code: 3,
        message: "Account not associated with this Mint",
        docs: ["MintMismatch: Account not associated with this Mint"]
      },
      {
        kind: "errorNode",
        name: "ownerMismatch",
        code: 4,
        message: "Owner does not match",
        docs: ["OwnerMismatch: Owner does not match"]
      },
      {
        kind: "errorNode",
        name: "fixedSupply",
        code: 5,
        message: "Fixed supply",
        docs: ["FixedSupply: Fixed supply"]
      },
      {
        kind: "errorNode",
        name: "alreadyInUse",
        code: 6,
        message: "Already in use",
        docs: ["AlreadyInUse: Already in use"]
      },
      {
        kind: "errorNode",
        name: "invalidNumberOfProvidedSigners",
        code: 7,
        message: "Invalid number of provided signers",
        docs: [
          "InvalidNumberOfProvidedSigners: Invalid number of provided signers"
        ]
      },
      {
        kind: "errorNode",
        name: "invalidNumberOfRequiredSigners",
        code: 8,
        message: "Invalid number of required signers",
        docs: [
          "InvalidNumberOfRequiredSigners: Invalid number of required signers"
        ]
      },
      {
        kind: "errorNode",
        name: "uninitializedState",
        code: 9,
        message: "State is unititialized",
        docs: ["UninitializedState: State is unititialized"]
      },
      {
        kind: "errorNode",
        name: "nativeNotSupported",
        code: 10,
        message: "Instruction does not support native tokens",
        docs: [
          "NativeNotSupported: Instruction does not support native tokens"
        ]
      },
      {
        kind: "errorNode",
        name: "nonNativeHasBalance",
        code: 11,
        message: "Non-native account can only be closed if its balance is zero",
        docs: [
          "NonNativeHasBalance: Non-native account can only be closed if its balance is zero"
        ]
      },
      {
        kind: "errorNode",
        name: "invalidInstruction",
        code: 12,
        message: "Invalid instruction",
        docs: ["InvalidInstruction: Invalid instruction"]
      },
      {
        kind: "errorNode",
        name: "invalidState",
        code: 13,
        message: "State is invalid for requested operation",
        docs: ["InvalidState: State is invalid for requested operation"]
      },
      {
        kind: "errorNode",
        name: "overflow",
        code: 14,
        message: "Operation overflowed",
        docs: ["Overflow: Operation overflowed"]
      },
      {
        kind: "errorNode",
        name: "authorityTypeNotSupported",
        code: 15,
        message: "Account does not support specified authority type",
        docs: [
          "AuthorityTypeNotSupported: Account does not support specified authority type"
        ]
      },
      {
        kind: "errorNode",
        name: "mintCannotFreeze",
        code: 16,
        message: "This token mint cannot freeze accounts",
        docs: ["MintCannotFreeze: This token mint cannot freeze accounts"]
      },
      {
        kind: "errorNode",
        name: "accountFrozen",
        code: 17,
        message: "Account is frozen",
        docs: ["AccountFrozen: Account is frozen"]
      },
      {
        kind: "errorNode",
        name: "mintDecimalsMismatch",
        code: 18,
        message: "The provided decimals value different from the Mint decimals",
        docs: [
          "MintDecimalsMismatch: The provided decimals value different from the Mint decimals"
        ]
      },
      {
        kind: "errorNode",
        name: "nonNativeNotSupported",
        code: 19,
        message: "Instruction does not support non-native tokens",
        docs: [
          "NonNativeNotSupported: Instruction does not support non-native tokens"
        ]
      }
    ]
  },
  additionalPrograms: [
    {
      kind: "programNode",
      name: "associatedToken",
      publicKey: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL",
      version: "1.1.1",
      origin: "shank",
      docs: [],
      accounts: [],
      instructions: [
        {
          kind: "instructionNode",
          accounts: [
            {
              kind: "instructionAccountNode",
              name: "payer",
              isWritable: true,
              isSigner: true,
              isOptional: false,
              docs: ["Funding account (must be a system account)."],
              defaultValue: { kind: "payerValueNode" }
            },
            {
              kind: "instructionAccountNode",
              name: "ata",
              isWritable: true,
              isSigner: false,
              isOptional: false,
              docs: ["Associated token account address to be created."],
              defaultValue: {
                kind: "pdaValueNode",
                pda: {
                  kind: "pdaLinkNode",
                  name: "associatedToken"
                },
                seeds: [
                  {
                    kind: "pdaSeedValueNode",
                    name: "owner",
                    value: {
                      kind: "accountValueNode",
                      name: "owner"
                    }
                  },
                  {
                    kind: "pdaSeedValueNode",
                    name: "tokenProgram",
                    value: {
                      kind: "accountValueNode",
                      name: "tokenProgram"
                    }
                  },
                  {
                    kind: "pdaSeedValueNode",
                    name: "mint",
                    value: {
                      kind: "accountValueNode",
                      name: "mint"
                    }
                  }
                ]
              }
            },
            {
              kind: "instructionAccountNode",
              name: "owner",
              isWritable: false,
              isSigner: false,
              isOptional: false,
              docs: ["Wallet address for the new associated token account."]
            },
            {
              kind: "instructionAccountNode",
              name: "mint",
              isWritable: false,
              isSigner: false,
              isOptional: false,
              docs: ["The token mint for the new associated token account."]
            },
            {
              kind: "instructionAccountNode",
              name: "systemProgram",
              isWritable: false,
              isSigner: false,
              isOptional: false,
              docs: ["System program."],
              defaultValue: {
                kind: "publicKeyValueNode",
                publicKey: "11111111111111111111111111111111"
              }
            },
            {
              kind: "instructionAccountNode",
              name: "tokenProgram",
              isWritable: false,
              isSigner: false,
              isOptional: false,
              docs: ["SPL Token program."],
              defaultValue: {
                kind: "publicKeyValueNode",
                publicKey: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
              }
            }
          ],
          arguments: [
            {
              kind: "instructionArgumentNode",
              name: "discriminator",
              type: {
                kind: "numberTypeNode",
                format: "u8",
                endian: "le"
              },
              docs: [],
              defaultValue: { kind: "numberValueNode", number: 0 },
              defaultValueStrategy: "omitted"
            }
          ],
          discriminators: [
            {
              kind: "fieldDiscriminatorNode",
              name: "discriminator",
              offset: 0
            }
          ],
          name: "createAssociatedToken",
          docs: [
            "Creates an associated token account for the given wallet address and",
            "token mint Returns an error if the account exists."
          ],
          optionalAccountStrategy: "programId"
        },
        {
          kind: "instructionNode",
          accounts: [
            {
              kind: "instructionAccountNode",
              name: "payer",
              isWritable: true,
              isSigner: true,
              isOptional: false,
              docs: ["Funding account (must be a system account)."],
              defaultValue: { kind: "payerValueNode" }
            },
            {
              kind: "instructionAccountNode",
              name: "ata",
              isWritable: true,
              isSigner: false,
              isOptional: false,
              docs: ["Associated token account address to be created."],
              defaultValue: {
                kind: "pdaValueNode",
                pda: {
                  kind: "pdaLinkNode",
                  name: "associatedToken"
                },
                seeds: [
                  {
                    kind: "pdaSeedValueNode",
                    name: "owner",
                    value: {
                      kind: "accountValueNode",
                      name: "owner"
                    }
                  },
                  {
                    kind: "pdaSeedValueNode",
                    name: "tokenProgram",
                    value: {
                      kind: "accountValueNode",
                      name: "tokenProgram"
                    }
                  },
                  {
                    kind: "pdaSeedValueNode",
                    name: "mint",
                    value: {
                      kind: "accountValueNode",
                      name: "mint"
                    }
                  }
                ]
              }
            },
            {
              kind: "instructionAccountNode",
              name: "owner",
              isWritable: false,
              isSigner: false,
              isOptional: false,
              docs: ["Wallet address for the new associated token account."]
            },
            {
              kind: "instructionAccountNode",
              name: "mint",
              isWritable: false,
              isSigner: false,
              isOptional: false,
              docs: ["The token mint for the new associated token account."]
            },
            {
              kind: "instructionAccountNode",
              name: "systemProgram",
              isWritable: false,
              isSigner: false,
              isOptional: false,
              docs: ["System program."],
              defaultValue: {
                kind: "publicKeyValueNode",
                publicKey: "11111111111111111111111111111111"
              }
            },
            {
              kind: "instructionAccountNode",
              name: "tokenProgram",
              isWritable: false,
              isSigner: false,
              isOptional: false,
              docs: ["SPL Token program."],
              defaultValue: {
                kind: "publicKeyValueNode",
                publicKey: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
              }
            }
          ],
          arguments: [
            {
              kind: "instructionArgumentNode",
              name: "discriminator",
              type: {
                kind: "numberTypeNode",
                format: "u8",
                endian: "le"
              },
              docs: [],
              defaultValue: { kind: "numberValueNode", number: 1 },
              defaultValueStrategy: "omitted"
            }
          ],
          discriminators: [
            {
              kind: "fieldDiscriminatorNode",
              name: "discriminator",
              offset: 0
            }
          ],
          name: "createAssociatedTokenIdempotent",
          docs: [
            "Creates an associated token account for the given wallet address and",
            "token mint, if it doesn't already exist. Returns an error if the",
            "account exists, but with a different owner."
          ],
          optionalAccountStrategy: "programId"
        },
        {
          kind: "instructionNode",
          accounts: [
            {
              kind: "instructionAccountNode",
              name: "nestedAssociatedAccountAddress",
              isWritable: true,
              isSigner: false,
              isOptional: false,
              docs: [
                "Nested associated token account, must be owned by `ownerAssociatedAccountAddress`."
              ],
              defaultValue: {
                kind: "pdaValueNode",
                pda: {
                  kind: "pdaLinkNode",
                  name: "associatedToken"
                },
                seeds: [
                  {
                    kind: "pdaSeedValueNode",
                    name: "owner",
                    value: {
                      kind: "accountValueNode",
                      name: "ownerAssociatedAccountAddress"
                    }
                  },
                  {
                    kind: "pdaSeedValueNode",
                    name: "tokenProgram",
                    value: {
                      kind: "accountValueNode",
                      name: "tokenProgram"
                    }
                  },
                  {
                    kind: "pdaSeedValueNode",
                    name: "mint",
                    value: {
                      kind: "accountValueNode",
                      name: "nestedTokenMintAddress"
                    }
                  }
                ]
              }
            },
            {
              kind: "instructionAccountNode",
              name: "nestedTokenMintAddress",
              isWritable: false,
              isSigner: false,
              isOptional: false,
              docs: ["Token mint for the nested associated token account."]
            },
            {
              kind: "instructionAccountNode",
              name: "destinationAssociatedAccountAddress",
              isWritable: true,
              isSigner: false,
              isOptional: false,
              docs: ["Wallet's associated token account."],
              defaultValue: {
                kind: "pdaValueNode",
                pda: {
                  kind: "pdaLinkNode",
                  name: "associatedToken"
                },
                seeds: [
                  {
                    kind: "pdaSeedValueNode",
                    name: "owner",
                    value: {
                      kind: "accountValueNode",
                      name: "walletAddress"
                    }
                  },
                  {
                    kind: "pdaSeedValueNode",
                    name: "tokenProgram",
                    value: {
                      kind: "accountValueNode",
                      name: "tokenProgram"
                    }
                  },
                  {
                    kind: "pdaSeedValueNode",
                    name: "mint",
                    value: {
                      kind: "accountValueNode",
                      name: "nestedTokenMintAddress"
                    }
                  }
                ]
              }
            },
            {
              kind: "instructionAccountNode",
              name: "ownerAssociatedAccountAddress",
              isWritable: false,
              isSigner: false,
              isOptional: false,
              docs: [
                "Owner associated token account address, must be owned by `walletAddress`."
              ],
              defaultValue: {
                kind: "pdaValueNode",
                pda: {
                  kind: "pdaLinkNode",
                  name: "associatedToken"
                },
                seeds: [
                  {
                    kind: "pdaSeedValueNode",
                    name: "owner",
                    value: {
                      kind: "accountValueNode",
                      name: "walletAddress"
                    }
                  },
                  {
                    kind: "pdaSeedValueNode",
                    name: "tokenProgram",
                    value: {
                      kind: "accountValueNode",
                      name: "tokenProgram"
                    }
                  },
                  {
                    kind: "pdaSeedValueNode",
                    name: "mint",
                    value: {
                      kind: "accountValueNode",
                      name: "ownerTokenMintAddress"
                    }
                  }
                ]
              }
            },
            {
              kind: "instructionAccountNode",
              name: "ownerTokenMintAddress",
              isWritable: false,
              isSigner: false,
              isOptional: false,
              docs: ["Token mint for the owner associated token account."]
            },
            {
              kind: "instructionAccountNode",
              name: "walletAddress",
              isWritable: true,
              isSigner: true,
              isOptional: false,
              docs: ["Wallet address for the owner associated token account."]
            },
            {
              kind: "instructionAccountNode",
              name: "tokenProgram",
              isWritable: false,
              isSigner: false,
              isOptional: false,
              docs: ["SPL Token program."],
              defaultValue: {
                kind: "publicKeyValueNode",
                publicKey: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
              }
            }
          ],
          arguments: [
            {
              kind: "instructionArgumentNode",
              name: "discriminator",
              type: {
                kind: "numberTypeNode",
                format: "u8",
                endian: "le"
              },
              docs: [],
              defaultValue: { kind: "numberValueNode", number: 2 },
              defaultValueStrategy: "omitted"
            }
          ],
          discriminators: [
            {
              kind: "fieldDiscriminatorNode",
              name: "discriminator",
              offset: 0
            }
          ],
          name: "recoverNestedAssociatedToken",
          docs: [
            "Transfers from and closes a nested associated token account: an",
            "associated token account owned by an associated token account.",
            "",
            "The tokens are moved from the nested associated token account to the",
            "wallet's associated token account, and the nested account lamports are",
            "moved to the wallet.",
            "",
            "Note: Nested token accounts are an anti-pattern, and almost always",
            "created unintentionally, so this instruction should only be used to",
            "recover from errors."
          ],
          optionalAccountStrategy: "programId"
        }
      ],
      definedTypes: [],
      pdas: [
        {
          kind: "pdaNode",
          name: "associatedToken",
          docs: [],
          seeds: [
            {
              kind: "variablePdaSeedNode",
              name: "owner",
              docs: ["The wallet address of the associated token account."],
              type: {
                kind: "publicKeyTypeNode"
              }
            },
            {
              kind: "variablePdaSeedNode",
              name: "tokenProgram",
              docs: ["The address of the token program to use."],
              type: {
                kind: "publicKeyTypeNode"
              }
            },
            {
              kind: "variablePdaSeedNode",
              name: "mint",
              docs: ["The mint address of the associated token account."],
              type: {
                kind: "publicKeyTypeNode"
              }
            }
          ]
        }
      ],
      errors: [
        {
          kind: "errorNode",
          name: "invalidOwner",
          code: 0,
          message: "Associated token account owner does not match address derivation",
          docs: [
            "InvalidOwner: Associated token account owner does not match address derivation"
          ]
        }
      ]
    }
  ]
};

// idl/spl-token-swap.json
var spl_token_swap_default = {
  version: "3.0.0",
  name: "spl_token_swap",
  instructions: [
    {
      name: "initialize",
      accounts: [
        {
          name: "swap",
          isMut: true,
          isSigner: true
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenA",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenB",
          isMut: false,
          isSigner: false
        },
        {
          name: "pool",
          isMut: true,
          isSigner: false
        },
        {
          name: "fee",
          isMut: false,
          isSigner: false
        },
        {
          name: "destination",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "fees",
          type: {
            defined: "Fees"
          }
        },
        {
          name: "swapCurve",
          type: {
            defined: "SwapCurve"
          }
        }
      ]
    },
    {
      name: "swap",
      accounts: [
        {
          name: "swap",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false
        },
        {
          name: "userTransferAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "source",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapSource",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapDestination",
          isMut: true,
          isSigner: false
        },
        {
          name: "destination",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolFee",
          isMut: true,
          isSigner: false
        },
        {
          name: "sourceMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "destinationMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "amountIn",
          type: "u64"
        },
        {
          name: "minimumAmountOut",
          type: "u64"
        }
      ]
    },
    {
      name: "depositAllTokenTypes",
      accounts: [
        {
          name: "swap",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false
        },
        {
          name: "userTransferAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "depositTokenA",
          isMut: true,
          isSigner: false
        },
        {
          name: "depositTokenB",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapTokenA",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapTokenB",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "destination",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenAMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenBMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenAProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenBProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "poolTokenAmount",
          type: "u64"
        },
        {
          name: "maximumTokenAAmount",
          type: "u64"
        },
        {
          name: "maximumTokenBAmount",
          type: "u64"
        }
      ]
    },
    {
      name: "withdrawAllTokenTypes",
      accounts: [
        {
          name: "swap",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false
        },
        {
          name: "userTransferAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "poolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "source",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapTokenA",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapTokenB",
          isMut: true,
          isSigner: false
        },
        {
          name: "destinationTokenA",
          isMut: true,
          isSigner: false
        },
        {
          name: "destinationTokenB",
          isMut: true,
          isSigner: false
        },
        {
          name: "feeAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "tokenAMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenBMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenAProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenBProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "poolTokenAmount",
          type: "u64"
        },
        {
          name: "minimumTokenAAmount",
          type: "u64"
        },
        {
          name: "minimumTokenBAmount",
          type: "u64"
        }
      ]
    },
    {
      name: "depositSingleTokenTypeExactAmountIn",
      accounts: [
        {
          name: "swap",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false
        },
        {
          name: "userTransferAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "sourceToken",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapTokenA",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapTokenB",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "destination",
          isMut: true,
          isSigner: false
        },
        {
          name: "sourceMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "sourceTokenAmount",
          type: "u64"
        },
        {
          name: "minimumPoolTokenAmount",
          type: "u64"
        }
      ]
    },
    {
      name: "withdrawSingleTokenTypeExactAmountOut",
      accounts: [
        {
          name: "swap",
          isMut: false,
          isSigner: false
        },
        {
          name: "authority",
          isMut: false,
          isSigner: false
        },
        {
          name: "userTransferAuthority",
          isMut: false,
          isSigner: true
        },
        {
          name: "poolMint",
          isMut: true,
          isSigner: false
        },
        {
          name: "poolTokenSource",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapTokenA",
          isMut: true,
          isSigner: false
        },
        {
          name: "swapTokenB",
          isMut: true,
          isSigner: false
        },
        {
          name: "destination",
          isMut: true,
          isSigner: false
        },
        {
          name: "feeAccount",
          isMut: true,
          isSigner: false
        },
        {
          name: "destinationMint",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        },
        {
          name: "tokenProgram",
          isMut: false,
          isSigner: false
        }
      ],
      args: [
        {
          name: "destinationTokenAmount",
          type: "u64"
        },
        {
          name: "maximumPoolTokenAmount",
          type: "u64"
        }
      ]
    }
  ],
  accounts: [
    {
      name: "Fees",
      type: {
        kind: "struct",
        fields: [
          {
            name: "tradeFeeNumerator",
            type: "u64"
          },
          {
            name: "tradeFeeDenominator",
            type: "u64"
          },
          {
            name: "ownerTradeFeeNumerator",
            type: "u64"
          },
          {
            name: "ownerTradeFeeDenominator",
            type: "u64"
          },
          {
            name: "ownerWithdrawFeeNumerator",
            type: "u64"
          },
          {
            name: "ownerWithdrawFeeDenominator",
            type: "u64"
          },
          {
            name: "hostFeeNumerator",
            type: "u64"
          },
          {
            name: "hostFeeDenominator",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "SwapCurve",
      type: {
        kind: "struct",
        fields: [
          {
            name: "curveType",
            type: {
              defined: "CurveType"
            }
          },
          {
            name: "calculator",
            type: {
              defined: "Arc<dynCurveCalculator+Sync+Send>"
            }
          }
        ]
      }
    },
    {
      name: "SwapV1",
      type: {
        kind: "struct",
        fields: [
          {
            name: "isInitialized",
            type: "bool"
          },
          {
            name: "bumpSeed",
            type: "u8"
          },
          {
            name: "tokenProgramId",
            type: "publicKey"
          },
          {
            name: "tokenA",
            type: "publicKey"
          },
          {
            name: "tokenB",
            type: "publicKey"
          },
          {
            name: "poolMint",
            type: "publicKey"
          },
          {
            name: "tokenAMint",
            type: "publicKey"
          },
          {
            name: "tokenBMint",
            type: "publicKey"
          },
          {
            name: "poolFeeAccount",
            type: "publicKey"
          },
          {
            name: "fees",
            type: {
              defined: "Fees"
            }
          },
          {
            name: "swapCurve",
            type: {
              defined: "SwapCurve"
            }
          }
        ]
      }
    },
    {
      name: "OffsetCurve",
      type: {
        kind: "struct",
        fields: [
          {
            name: "tokenBOffset",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "ConstantProductCurve",
      type: {
        kind: "struct",
        fields: []
      }
    },
    {
      name: "ConstantPriceCurve",
      type: {
        kind: "struct",
        fields: [
          {
            name: "tokenBPrice",
            type: "u64"
          }
        ]
      }
    }
  ],
  types: [
    {
      name: "CurveType",
      type: {
        kind: "enum",
        variants: [
          {
            name: "ConstantProduct"
          },
          {
            name: "ConstantPrice"
          },
          {
            name: "Offset"
          }
        ]
      }
    }
  ],
  errors: [
    {
      code: 0,
      name: "AlreadyInUse",
      msg: "Swap account already in use"
    },
    {
      code: 1,
      name: "InvalidProgramAddress",
      msg: "Invalid program address generated from bump seed and key"
    },
    {
      code: 2,
      name: "InvalidOwner",
      msg: "Input account owner is not the program address"
    },
    {
      code: 3,
      name: "InvalidOutputOwner",
      msg: "Output pool account owner cannot be the program address"
    },
    {
      code: 4,
      name: "ExpectedMint",
      msg: "Deserialized account is not an SPL Token mint"
    },
    {
      code: 5,
      name: "ExpectedAccount",
      msg: "Deserialized account is not an SPL Token account"
    },
    {
      code: 6,
      name: "EmptySupply",
      msg: "Input token account empty"
    },
    {
      code: 7,
      name: "InvalidSupply",
      msg: "Pool token mint has a non-zero supply"
    },
    {
      code: 8,
      name: "InvalidDelegate",
      msg: "Token account has a delegate"
    },
    {
      code: 9,
      name: "InvalidInput",
      msg: "InvalidInput"
    },
    {
      code: 10,
      name: "IncorrectSwapAccount",
      msg: "Address of the provided swap token account is incorrect"
    },
    {
      code: 11,
      name: "IncorrectPoolMint",
      msg: "Address of the provided pool token mint is incorrect"
    },
    {
      code: 12,
      name: "InvalidOutput",
      msg: "InvalidOutput"
    },
    {
      code: 13,
      name: "CalculationFailure",
      msg: "General calculation failure due to overflow or underflow"
    },
    {
      code: 14,
      name: "InvalidInstruction",
      msg: "Invalid instruction"
    },
    {
      code: 15,
      name: "RepeatedMint",
      msg: "Swap input token accounts have the same mint"
    },
    {
      code: 16,
      name: "ExceededSlippage",
      msg: "Swap instruction exceeds desired slippage limit"
    },
    {
      code: 17,
      name: "InvalidCloseAuthority",
      msg: "Token account has a close authority"
    },
    {
      code: 18,
      name: "InvalidFreezeAuthority",
      msg: "Pool token mint has a freeze authority"
    },
    {
      code: 19,
      name: "IncorrectFeeAccount",
      msg: "Pool fee token account incorrect"
    },
    {
      code: 20,
      name: "ZeroTradingTokens",
      msg: "Given pool token amount results in zero trading tokens"
    },
    {
      code: 21,
      name: "FeeCalculationFailure",
      msg: "Fee calculation failed due to overflow, underflow, or unexpected 0"
    },
    {
      code: 22,
      name: "ConversionFailure",
      msg: "Conversion to u64 failed with an overflow or underflow"
    },
    {
      code: 23,
      name: "InvalidFee",
      msg: "The provided fee does not match the program owner's constraints"
    },
    {
      code: 24,
      name: "IncorrectTokenProgramId",
      msg: "The provided token program does not match the token program expected by the swap"
    },
    {
      code: 25,
      name: "UnsupportedCurveType",
      msg: "The provided curve type is not supported by the program owner"
    },
    {
      code: 26,
      name: "InvalidCurve",
      msg: "The provided curve parameters are invalid"
    },
    {
      code: 27,
      name: "UnsupportedCurveOperation",
      msg: "The operation cannot be performed on the given curve"
    },
    {
      code: 28,
      name: "InvalidFeeAccount",
      msg: "The pool fee account is invalid"
    }
  ],
  metadata: {
    instruction_selector_type: "index"
  }
};

// src/generated/protocols.ts
var IDL_MAP = {
  "jupiter": jupiter_default,
  "jupiter-v4": jupiter_v4_default,
  "jupiter-dca": jupiter_dca_default,
  "jupiter-limit": jupiter_limit_default,
  "okx-dex": okx_dex_default,
  "orca-whirlpools": orca_whirlpools_default,
  "meteora-dlmm": meteora_dlmm_default,
  "meteora-amm": meteora_amm_default,
  "meteora-cp-amm": meteora_cp_amm_default,
  "meteora-dbc": meteora_dbc_default,
  "raydium-amm": raydium_amm_default,
  "raydium-amm-v3": raydium_amm_v3_default,
  "raydium-cp-swap": raydium_cp_swap_default,
  "raydium-launchpad": raydium_launchpad_default,
  "openbook-v2": openbook_v2_default,
  "serum-dex": serum_dex_default,
  "phoenix": phoenix_default,
  "pumpfun-bonding": pumpfun_bonding_default,
  "pumpswap-amm": pumpswap_amm_default,
  "moonshot": moonshot_default,
  "boop": boop_default,
  "heaven": heaven_default,
  "bonkswap": bonkswap_default,
  "aldrin-clob": aldrin_clob_default,
  "drift-v2": drift_v2_default,
  "ton-whales-holders": ton_whales_holders_default,
  "magic-eden-v2": magic_eden_v2_default,
  "tensor": tensor_default,
  "metaplex-auction-house": metaplex_auction_house_default,
  "metaplex-token-metadata": metaplex_token_metadata_default,
  "metaplex-bubblegum": metaplex_bubblegum_default,
  "metaplex-candy-machine": metaplex_candy_machine_default,
  "metaplex-fixed-price-sale": metaplex_fixed_price_sale_default,
  "metaplex-nft-packs": metaplex_nft_packs_default,
  "metaplex-hydra": metaplex_hydra_default,
  "metaplex-token-entangler": metaplex_token_entangler_default,
  "metaplex-auctioneer": metaplex_auctioneer_default,
  "obric-v2": obric_v2_default,
  "spl-token": spl_token_default,
  "token-2022": token_2022_default,
  "spl-token-swap": spl_token_swap_default
};
function registerProtocol(config) {
  if (config.fetchSource === "manual") {
    if (config.idlFileName === "anchor") {
      const protocol2 = new Protocol({
        name: config.displayName,
        programId: config.programId,
        version: config.version,
        errors: ANCHOR_ERRORS,
        lastVerified: (/* @__PURE__ */ new Date()).toISOString().split("T")[0]
      });
      registry.registerFramework(protocol2);
    }
    return;
  }
  const idl = IDL_MAP[config.idlFileName];
  if (!idl) {
    throw new Error(`No IDL found for ${config.idlFileName}`);
  }
  const errors = buildProtocolErrors(idl);
  let idlSource;
  if (config.fetchSource === "github") {
    if (!config.githubUrl) {
      throw new Error(`GitHub URL required for ${config.idlFileName}`);
    }
    idlSource = {
      type: "github",
      url: config.githubUrl,
      commit: "latest"
    };
  } else if (config.fetchSource === "anchor") {
    idlSource = {
      type: "on-chain",
      fetchedAt: (/* @__PURE__ */ new Date()).toISOString()
    };
  } else if (config.fetchSource === "local") {
    idlSource = {
      type: "github",
      url: "pre-copied from reference repository",
      commit: "N/A"
    };
  }
  const protocol = new Protocol({
    name: config.displayName,
    programId: config.programId,
    version: config.version,
    errors,
    idlSource,
    lastVerified: (/* @__PURE__ */ new Date()).toISOString().split("T")[0]
  });
  registry.register(protocol);
}
for (const config of PROTOCOLS) {
  registerProtocol(config);
}
export {
  Protocol,
  registry
};
